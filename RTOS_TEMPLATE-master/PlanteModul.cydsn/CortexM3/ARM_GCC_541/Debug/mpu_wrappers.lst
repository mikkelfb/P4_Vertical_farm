ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccQCZNNL.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"mpu_wrappers.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.xPortRaisePrivilege,"ax",%progbits
  20              		.align	2
  21              		.global	xPortRaisePrivilege
  22              		.thumb
  23              		.thumb_func
  24              		.type	xPortRaisePrivilege, %function
  25              	xPortRaisePrivilege:
  26              	.LFB68:
  27              		.file 1 "Source\\portable\\Common\\mpu_wrappers.c"
   1:Source\portable\Common/mpu_wrappers.c **** /*
   2:Source\portable\Common/mpu_wrappers.c ****  * FreeRTOS Kernel V10.3.1
   3:Source\portable\Common/mpu_wrappers.c ****  * Copyright (C) 2020 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:Source\portable\Common/mpu_wrappers.c ****  *
   5:Source\portable\Common/mpu_wrappers.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:Source\portable\Common/mpu_wrappers.c ****  * this software and associated documentation files (the "Software"), to deal in
   7:Source\portable\Common/mpu_wrappers.c ****  * the Software without restriction, including without limitation the rights to
   8:Source\portable\Common/mpu_wrappers.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:Source\portable\Common/mpu_wrappers.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:Source\portable\Common/mpu_wrappers.c ****  * subject to the following conditions:
  11:Source\portable\Common/mpu_wrappers.c ****  *
  12:Source\portable\Common/mpu_wrappers.c ****  * The above copyright notice and this permission notice shall be included in all
  13:Source\portable\Common/mpu_wrappers.c ****  * copies or substantial portions of the Software.
  14:Source\portable\Common/mpu_wrappers.c ****  *
  15:Source\portable\Common/mpu_wrappers.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:Source\portable\Common/mpu_wrappers.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:Source\portable\Common/mpu_wrappers.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:Source\portable\Common/mpu_wrappers.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:Source\portable\Common/mpu_wrappers.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:Source\portable\Common/mpu_wrappers.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:Source\portable\Common/mpu_wrappers.c ****  *
  22:Source\portable\Common/mpu_wrappers.c ****  * http://www.FreeRTOS.org
  23:Source\portable\Common/mpu_wrappers.c ****  * http://aws.amazon.com/freertos
  24:Source\portable\Common/mpu_wrappers.c ****  *
  25:Source\portable\Common/mpu_wrappers.c ****  * 1 tab == 4 spaces!
  26:Source\portable\Common/mpu_wrappers.c ****  */
  27:Source\portable\Common/mpu_wrappers.c **** 
  28:Source\portable\Common/mpu_wrappers.c **** /*
  29:Source\portable\Common/mpu_wrappers.c ****  * Implementation of the wrapper functions used to raise the processor privilege
  30:Source\portable\Common/mpu_wrappers.c ****  * before calling a standard FreeRTOS API function.
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccQCZNNL.s 			page 2


  31:Source\portable\Common/mpu_wrappers.c ****  */
  32:Source\portable\Common/mpu_wrappers.c **** 
  33:Source\portable\Common/mpu_wrappers.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  34:Source\portable\Common/mpu_wrappers.c **** all the API functions to use the MPU wrappers.  That should only be done when
  35:Source\portable\Common/mpu_wrappers.c **** task.h is included from an application file. */
  36:Source\portable\Common/mpu_wrappers.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  37:Source\portable\Common/mpu_wrappers.c **** 
  38:Source\portable\Common/mpu_wrappers.c **** /* Scheduler includes. */
  39:Source\portable\Common/mpu_wrappers.c **** #include "FreeRTOS.h"
  40:Source\portable\Common/mpu_wrappers.c **** #include "task.h"
  41:Source\portable\Common/mpu_wrappers.c **** #include "queue.h"
  42:Source\portable\Common/mpu_wrappers.c **** #include "timers.h"
  43:Source\portable\Common/mpu_wrappers.c **** #include "event_groups.h"
  44:Source\portable\Common/mpu_wrappers.c **** #include "stream_buffer.h"
  45:Source\portable\Common/mpu_wrappers.c **** #include "mpu_prototypes.h"
  46:Source\portable\Common/mpu_wrappers.c **** 
  47:Source\portable\Common/mpu_wrappers.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  48:Source\portable\Common/mpu_wrappers.c **** 
  49:Source\portable\Common/mpu_wrappers.c **** /**
  50:Source\portable\Common/mpu_wrappers.c ****  * @brief Calls the port specific code to raise the privilege.
  51:Source\portable\Common/mpu_wrappers.c ****  *
  52:Source\portable\Common/mpu_wrappers.c ****  * @return pdFALSE if privilege was raised, pdTRUE otherwise.
  53:Source\portable\Common/mpu_wrappers.c ****  */
  54:Source\portable\Common/mpu_wrappers.c **** BaseType_t xPortRaisePrivilege( void ) FREERTOS_SYSTEM_CALL;
  55:Source\portable\Common/mpu_wrappers.c **** 
  56:Source\portable\Common/mpu_wrappers.c **** /**
  57:Source\portable\Common/mpu_wrappers.c ****  * @brief If xRunningPrivileged is not pdTRUE, calls the port specific
  58:Source\portable\Common/mpu_wrappers.c ****  * code to reset the privilege, otherwise does nothing.
  59:Source\portable\Common/mpu_wrappers.c ****  */
  60:Source\portable\Common/mpu_wrappers.c **** void vPortResetPrivilege( BaseType_t xRunningPrivileged );
  61:Source\portable\Common/mpu_wrappers.c **** /*-----------------------------------------------------------*/
  62:Source\portable\Common/mpu_wrappers.c **** 
  63:Source\portable\Common/mpu_wrappers.c **** BaseType_t xPortRaisePrivilege( void ) /* FREERTOS_SYSTEM_CALL */
  64:Source\portable\Common/mpu_wrappers.c **** {
  28              		.loc 1 64 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 8
  31              		@ frame_needed = 1, uses_anonymous_args = 0
  32 0000 80B5     		push	{r7, lr}
  33              		.cfi_def_cfa_offset 8
  34              		.cfi_offset 7, -8
  35              		.cfi_offset 14, -4
  36 0002 82B0     		sub	sp, sp, #8
  37              		.cfi_def_cfa_offset 16
  38 0004 00AF     		add	r7, sp, #0
  39              		.cfi_def_cfa_register 7
  65:Source\portable\Common/mpu_wrappers.c **** BaseType_t xRunningPrivileged;
  66:Source\portable\Common/mpu_wrappers.c **** 
  67:Source\portable\Common/mpu_wrappers.c **** 	/* Check whether the processor is already privileged. */
  68:Source\portable\Common/mpu_wrappers.c **** 	xRunningPrivileged = portIS_PRIVILEGED();
  40              		.loc 1 68 0
  41 0006 FFF7FEFF 		bl	portIS_PRIVILEGED
  42 000a 7860     		str	r0, [r7, #4]
  69:Source\portable\Common/mpu_wrappers.c **** 
  70:Source\portable\Common/mpu_wrappers.c **** 	/* If the processor is not already privileged, raise privilege. */
  71:Source\portable\Common/mpu_wrappers.c **** 	if( xRunningPrivileged != pdTRUE )
  43              		.loc 1 71 0
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccQCZNNL.s 			page 3


  44 000c 7B68     		ldr	r3, [r7, #4]
  45 000e 012B     		cmp	r3, #1
  46 0010 01D0     		beq	.L2
  47              	.LBB2:
  72:Source\portable\Common/mpu_wrappers.c **** 	{
  73:Source\portable\Common/mpu_wrappers.c **** 		portRAISE_PRIVILEGE();
  48              		.loc 1 73 0
  49 0012 FFF7FEFF 		bl	portRAISE_PRIVILEGE
  50              	.L2:
  51              	.LBE2:
  74:Source\portable\Common/mpu_wrappers.c **** 	}
  75:Source\portable\Common/mpu_wrappers.c **** 
  76:Source\portable\Common/mpu_wrappers.c **** 	return xRunningPrivileged;
  52              		.loc 1 76 0
  53 0016 7B68     		ldr	r3, [r7, #4]
  77:Source\portable\Common/mpu_wrappers.c **** }
  54              		.loc 1 77 0
  55 0018 1846     		mov	r0, r3
  56 001a 0837     		adds	r7, r7, #8
  57              		.cfi_def_cfa_offset 8
  58 001c BD46     		mov	sp, r7
  59              		.cfi_def_cfa_register 13
  60              		@ sp needed
  61 001e 80BD     		pop	{r7, pc}
  62              		.cfi_endproc
  63              	.LFE68:
  64              		.size	xPortRaisePrivilege, .-xPortRaisePrivilege
  65              		.section	.text.vPortResetPrivilege,"ax",%progbits
  66              		.align	2
  67              		.global	vPortResetPrivilege
  68              		.thumb
  69              		.thumb_func
  70              		.type	vPortResetPrivilege, %function
  71              	vPortResetPrivilege:
  72              	.LFB69:
  78:Source\portable\Common/mpu_wrappers.c **** /*-----------------------------------------------------------*/
  79:Source\portable\Common/mpu_wrappers.c **** 
  80:Source\portable\Common/mpu_wrappers.c **** void vPortResetPrivilege( BaseType_t xRunningPrivileged )
  81:Source\portable\Common/mpu_wrappers.c **** {
  73              		.loc 1 81 0
  74              		.cfi_startproc
  75              		@ args = 0, pretend = 0, frame = 8
  76              		@ frame_needed = 1, uses_anonymous_args = 0
  77 0000 80B5     		push	{r7, lr}
  78              		.cfi_def_cfa_offset 8
  79              		.cfi_offset 7, -8
  80              		.cfi_offset 14, -4
  81 0002 82B0     		sub	sp, sp, #8
  82              		.cfi_def_cfa_offset 16
  83 0004 00AF     		add	r7, sp, #0
  84              		.cfi_def_cfa_register 7
  85 0006 7860     		str	r0, [r7, #4]
  82:Source\portable\Common/mpu_wrappers.c **** 	if( xRunningPrivileged != pdTRUE )
  86              		.loc 1 82 0
  87 0008 7B68     		ldr	r3, [r7, #4]
  88 000a 012B     		cmp	r3, #1
  89 000c 01D0     		beq	.L6
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccQCZNNL.s 			page 4


  90              	.LBB3:
  83:Source\portable\Common/mpu_wrappers.c **** 	{
  84:Source\portable\Common/mpu_wrappers.c **** 		portRESET_PRIVILEGE();
  91              		.loc 1 84 0
  92 000e FFF7FEFF 		bl	portRESET_PRIVILEGE
  93              	.L6:
  94              	.LBE3:
  85:Source\portable\Common/mpu_wrappers.c **** 	}
  86:Source\portable\Common/mpu_wrappers.c **** }
  95              		.loc 1 86 0
  96 0012 00BF     		nop
  97 0014 0837     		adds	r7, r7, #8
  98              		.cfi_def_cfa_offset 8
  99 0016 BD46     		mov	sp, r7
 100              		.cfi_def_cfa_register 13
 101              		@ sp needed
 102 0018 80BD     		pop	{r7, pc}
 103              		.cfi_endproc
 104              	.LFE69:
 105              		.size	vPortResetPrivilege, .-vPortResetPrivilege
 106 001a 00BF     		.section	.text.MPU_xTaskCreateRestricted,"ax",%progbits
 107              		.align	2
 108              		.global	MPU_xTaskCreateRestricted
 109              		.thumb
 110              		.thumb_func
 111              		.type	MPU_xTaskCreateRestricted, %function
 112              	MPU_xTaskCreateRestricted:
 113              	.LFB70:
  87:Source\portable\Common/mpu_wrappers.c **** /*-----------------------------------------------------------*/
  88:Source\portable\Common/mpu_wrappers.c **** 
  89:Source\portable\Common/mpu_wrappers.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  90:Source\portable\Common/mpu_wrappers.c **** 	BaseType_t MPU_xTaskCreateRestricted( const TaskParameters_t * const pxTaskDefinition, TaskHandle_
  91:Source\portable\Common/mpu_wrappers.c **** 	{
 114              		.loc 1 91 0
 115              		.cfi_startproc
 116              		@ args = 0, pretend = 0, frame = 16
 117              		@ frame_needed = 1, uses_anonymous_args = 0
 118 0000 80B5     		push	{r7, lr}
 119              		.cfi_def_cfa_offset 8
 120              		.cfi_offset 7, -8
 121              		.cfi_offset 14, -4
 122 0002 84B0     		sub	sp, sp, #16
 123              		.cfi_def_cfa_offset 24
 124 0004 00AF     		add	r7, sp, #0
 125              		.cfi_def_cfa_register 7
 126 0006 7860     		str	r0, [r7, #4]
 127 0008 3960     		str	r1, [r7]
  92:Source\portable\Common/mpu_wrappers.c **** 	BaseType_t xReturn;
  93:Source\portable\Common/mpu_wrappers.c **** 	BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 128              		.loc 1 93 0
 129 000a FFF7FEFF 		bl	xPortRaisePrivilege
 130 000e F860     		str	r0, [r7, #12]
  94:Source\portable\Common/mpu_wrappers.c **** 
  95:Source\portable\Common/mpu_wrappers.c **** 		xReturn = xTaskCreateRestricted( pxTaskDefinition, pxCreatedTask );
 131              		.loc 1 95 0
 132 0010 3968     		ldr	r1, [r7]
 133 0012 7868     		ldr	r0, [r7, #4]
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccQCZNNL.s 			page 5


 134 0014 FFF7FEFF 		bl	xTaskCreateRestricted
 135 0018 B860     		str	r0, [r7, #8]
  96:Source\portable\Common/mpu_wrappers.c **** 		vPortResetPrivilege( xRunningPrivileged );
 136              		.loc 1 96 0
 137 001a F868     		ldr	r0, [r7, #12]
 138 001c FFF7FEFF 		bl	vPortResetPrivilege
  97:Source\portable\Common/mpu_wrappers.c **** 		return xReturn;
 139              		.loc 1 97 0
 140 0020 BB68     		ldr	r3, [r7, #8]
  98:Source\portable\Common/mpu_wrappers.c **** 	}
 141              		.loc 1 98 0
 142 0022 1846     		mov	r0, r3
 143 0024 1037     		adds	r7, r7, #16
 144              		.cfi_def_cfa_offset 8
 145 0026 BD46     		mov	sp, r7
 146              		.cfi_def_cfa_register 13
 147              		@ sp needed
 148 0028 80BD     		pop	{r7, pc}
 149              		.cfi_endproc
 150              	.LFE70:
 151              		.size	MPU_xTaskCreateRestricted, .-MPU_xTaskCreateRestricted
 152              		.section	.text.MPU_xTaskCreate,"ax",%progbits
 153              		.align	2
 154              		.global	MPU_xTaskCreate
 155              		.thumb
 156              		.thumb_func
 157              		.type	MPU_xTaskCreate, %function
 158              	MPU_xTaskCreate:
 159              	.LFB71:
  99:Source\portable\Common/mpu_wrappers.c **** #endif /* conifgSUPPORT_DYNAMIC_ALLOCATION */
 100:Source\portable\Common/mpu_wrappers.c **** /*-----------------------------------------------------------*/
 101:Source\portable\Common/mpu_wrappers.c **** 
 102:Source\portable\Common/mpu_wrappers.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 103:Source\portable\Common/mpu_wrappers.c **** 	BaseType_t MPU_xTaskCreateRestrictedStatic( const TaskParameters_t * const pxTaskDefinition, TaskH
 104:Source\portable\Common/mpu_wrappers.c **** 	{
 105:Source\portable\Common/mpu_wrappers.c **** 	BaseType_t xReturn;
 106:Source\portable\Common/mpu_wrappers.c **** 	BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 107:Source\portable\Common/mpu_wrappers.c **** 
 108:Source\portable\Common/mpu_wrappers.c **** 		xReturn = xTaskCreateRestrictedStatic( pxTaskDefinition, pxCreatedTask );
 109:Source\portable\Common/mpu_wrappers.c **** 		vPortResetPrivilege( xRunningPrivileged );
 110:Source\portable\Common/mpu_wrappers.c **** 		return xReturn;
 111:Source\portable\Common/mpu_wrappers.c **** 	}
 112:Source\portable\Common/mpu_wrappers.c **** #endif /* conifgSUPPORT_DYNAMIC_ALLOCATION */
 113:Source\portable\Common/mpu_wrappers.c **** /*-----------------------------------------------------------*/
 114:Source\portable\Common/mpu_wrappers.c **** 
 115:Source\portable\Common/mpu_wrappers.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 116:Source\portable\Common/mpu_wrappers.c **** 	BaseType_t MPU_xTaskCreate( TaskFunction_t pvTaskCode, const char * const pcName, uint16_t usStack
 117:Source\portable\Common/mpu_wrappers.c **** 	{
 160              		.loc 1 117 0
 161              		.cfi_startproc
 162              		@ args = 8, pretend = 0, frame = 24
 163              		@ frame_needed = 1, uses_anonymous_args = 0
 164 0000 80B5     		push	{r7, lr}
 165              		.cfi_def_cfa_offset 8
 166              		.cfi_offset 7, -8
 167              		.cfi_offset 14, -4
 168 0002 88B0     		sub	sp, sp, #32
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccQCZNNL.s 			page 6


 169              		.cfi_def_cfa_offset 40
 170 0004 02AF     		add	r7, sp, #8
 171              		.cfi_def_cfa 7, 32
 172 0006 F860     		str	r0, [r7, #12]
 173 0008 B960     		str	r1, [r7, #8]
 174 000a 3B60     		str	r3, [r7]
 175 000c 1346     		mov	r3, r2	@ movhi
 176 000e FB80     		strh	r3, [r7, #6]	@ movhi
 118:Source\portable\Common/mpu_wrappers.c **** 	BaseType_t xReturn;
 119:Source\portable\Common/mpu_wrappers.c **** 	BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 177              		.loc 1 119 0
 178 0010 FFF7FEFF 		bl	xPortRaisePrivilege
 179 0014 7861     		str	r0, [r7, #20]
 120:Source\portable\Common/mpu_wrappers.c **** 
 121:Source\portable\Common/mpu_wrappers.c **** 		xReturn = xTaskCreate( pvTaskCode, pcName, usStackDepth, pvParameters, uxPriority, pxCreatedTask 
 180              		.loc 1 121 0
 181 0016 FA88     		ldrh	r2, [r7, #6]
 182 0018 7B6A     		ldr	r3, [r7, #36]
 183 001a 0193     		str	r3, [sp, #4]
 184 001c 3B6A     		ldr	r3, [r7, #32]
 185 001e 0093     		str	r3, [sp]
 186 0020 3B68     		ldr	r3, [r7]
 187 0022 B968     		ldr	r1, [r7, #8]
 188 0024 F868     		ldr	r0, [r7, #12]
 189 0026 FFF7FEFF 		bl	xTaskCreate
 190 002a 3861     		str	r0, [r7, #16]
 122:Source\portable\Common/mpu_wrappers.c **** 		vPortResetPrivilege( xRunningPrivileged );
 191              		.loc 1 122 0
 192 002c 7869     		ldr	r0, [r7, #20]
 193 002e FFF7FEFF 		bl	vPortResetPrivilege
 123:Source\portable\Common/mpu_wrappers.c **** 		return xReturn;
 194              		.loc 1 123 0
 195 0032 3B69     		ldr	r3, [r7, #16]
 124:Source\portable\Common/mpu_wrappers.c **** 	}
 196              		.loc 1 124 0
 197 0034 1846     		mov	r0, r3
 198 0036 1837     		adds	r7, r7, #24
 199              		.cfi_def_cfa_offset 8
 200 0038 BD46     		mov	sp, r7
 201              		.cfi_def_cfa_register 13
 202              		@ sp needed
 203 003a 80BD     		pop	{r7, pc}
 204              		.cfi_endproc
 205              	.LFE71:
 206              		.size	MPU_xTaskCreate, .-MPU_xTaskCreate
 207              		.section	.text.MPU_vTaskAllocateMPURegions,"ax",%progbits
 208              		.align	2
 209              		.global	MPU_vTaskAllocateMPURegions
 210              		.thumb
 211              		.thumb_func
 212              		.type	MPU_vTaskAllocateMPURegions, %function
 213              	MPU_vTaskAllocateMPURegions:
 214              	.LFB72:
 125:Source\portable\Common/mpu_wrappers.c **** #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 126:Source\portable\Common/mpu_wrappers.c **** /*-----------------------------------------------------------*/
 127:Source\portable\Common/mpu_wrappers.c **** 
 128:Source\portable\Common/mpu_wrappers.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccQCZNNL.s 			page 7


 129:Source\portable\Common/mpu_wrappers.c **** 	TaskHandle_t MPU_xTaskCreateStatic( TaskFunction_t pxTaskCode, const char * const pcName, const ui
 130:Source\portable\Common/mpu_wrappers.c **** 	{
 131:Source\portable\Common/mpu_wrappers.c **** 	TaskHandle_t xReturn;
 132:Source\portable\Common/mpu_wrappers.c **** 	BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 133:Source\portable\Common/mpu_wrappers.c **** 
 134:Source\portable\Common/mpu_wrappers.c **** 		xReturn = xTaskCreateStatic( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, puxStack
 135:Source\portable\Common/mpu_wrappers.c **** 		vPortResetPrivilege( xRunningPrivileged );
 136:Source\portable\Common/mpu_wrappers.c **** 		return xReturn;
 137:Source\portable\Common/mpu_wrappers.c **** 	}
 138:Source\portable\Common/mpu_wrappers.c **** #endif /* configSUPPORT_STATIC_ALLOCATION */
 139:Source\portable\Common/mpu_wrappers.c **** /*-----------------------------------------------------------*/
 140:Source\portable\Common/mpu_wrappers.c **** 
 141:Source\portable\Common/mpu_wrappers.c **** void MPU_vTaskAllocateMPURegions( TaskHandle_t xTask, const MemoryRegion_t * const xRegions ) /* FR
 142:Source\portable\Common/mpu_wrappers.c **** {
 215              		.loc 1 142 0
 216              		.cfi_startproc
 217              		@ args = 0, pretend = 0, frame = 16
 218              		@ frame_needed = 1, uses_anonymous_args = 0
 219 0000 80B5     		push	{r7, lr}
 220              		.cfi_def_cfa_offset 8
 221              		.cfi_offset 7, -8
 222              		.cfi_offset 14, -4
 223 0002 84B0     		sub	sp, sp, #16
 224              		.cfi_def_cfa_offset 24
 225 0004 00AF     		add	r7, sp, #0
 226              		.cfi_def_cfa_register 7
 227 0006 7860     		str	r0, [r7, #4]
 228 0008 3960     		str	r1, [r7]
 143:Source\portable\Common/mpu_wrappers.c **** BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 229              		.loc 1 143 0
 230 000a FFF7FEFF 		bl	xPortRaisePrivilege
 231 000e F860     		str	r0, [r7, #12]
 144:Source\portable\Common/mpu_wrappers.c **** 
 145:Source\portable\Common/mpu_wrappers.c **** 	vTaskAllocateMPURegions( xTask, xRegions );
 232              		.loc 1 145 0
 233 0010 3968     		ldr	r1, [r7]
 234 0012 7868     		ldr	r0, [r7, #4]
 235 0014 FFF7FEFF 		bl	vTaskAllocateMPURegions
 146:Source\portable\Common/mpu_wrappers.c **** 	vPortResetPrivilege( xRunningPrivileged );
 236              		.loc 1 146 0
 237 0018 F868     		ldr	r0, [r7, #12]
 238 001a FFF7FEFF 		bl	vPortResetPrivilege
 147:Source\portable\Common/mpu_wrappers.c **** }
 239              		.loc 1 147 0
 240 001e 00BF     		nop
 241 0020 1037     		adds	r7, r7, #16
 242              		.cfi_def_cfa_offset 8
 243 0022 BD46     		mov	sp, r7
 244              		.cfi_def_cfa_register 13
 245              		@ sp needed
 246 0024 80BD     		pop	{r7, pc}
 247              		.cfi_endproc
 248              	.LFE72:
 249              		.size	MPU_vTaskAllocateMPURegions, .-MPU_vTaskAllocateMPURegions
 250 0026 00BF     		.section	.text.MPU_vTaskDelete,"ax",%progbits
 251              		.align	2
 252              		.global	MPU_vTaskDelete
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccQCZNNL.s 			page 8


 253              		.thumb
 254              		.thumb_func
 255              		.type	MPU_vTaskDelete, %function
 256              	MPU_vTaskDelete:
 257              	.LFB73:
 148:Source\portable\Common/mpu_wrappers.c **** /*-----------------------------------------------------------*/
 149:Source\portable\Common/mpu_wrappers.c **** 
 150:Source\portable\Common/mpu_wrappers.c **** #if ( INCLUDE_vTaskDelete == 1 )
 151:Source\portable\Common/mpu_wrappers.c **** 	void MPU_vTaskDelete( TaskHandle_t pxTaskToDelete ) /* FREERTOS_SYSTEM_CALL */
 152:Source\portable\Common/mpu_wrappers.c **** 	{
 258              		.loc 1 152 0
 259              		.cfi_startproc
 260              		@ args = 0, pretend = 0, frame = 16
 261              		@ frame_needed = 1, uses_anonymous_args = 0
 262 0000 80B5     		push	{r7, lr}
 263              		.cfi_def_cfa_offset 8
 264              		.cfi_offset 7, -8
 265              		.cfi_offset 14, -4
 266 0002 84B0     		sub	sp, sp, #16
 267              		.cfi_def_cfa_offset 24
 268 0004 00AF     		add	r7, sp, #0
 269              		.cfi_def_cfa_register 7
 270 0006 7860     		str	r0, [r7, #4]
 153:Source\portable\Common/mpu_wrappers.c **** 	BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 271              		.loc 1 153 0
 272 0008 FFF7FEFF 		bl	xPortRaisePrivilege
 273 000c F860     		str	r0, [r7, #12]
 154:Source\portable\Common/mpu_wrappers.c **** 
 155:Source\portable\Common/mpu_wrappers.c **** 		vTaskDelete( pxTaskToDelete );
 274              		.loc 1 155 0
 275 000e 7868     		ldr	r0, [r7, #4]
 276 0010 FFF7FEFF 		bl	vTaskDelete
 156:Source\portable\Common/mpu_wrappers.c **** 		vPortResetPrivilege( xRunningPrivileged );
 277              		.loc 1 156 0
 278 0014 F868     		ldr	r0, [r7, #12]
 279 0016 FFF7FEFF 		bl	vPortResetPrivilege
 157:Source\portable\Common/mpu_wrappers.c **** 	}
 280              		.loc 1 157 0
 281 001a 00BF     		nop
 282 001c 1037     		adds	r7, r7, #16
 283              		.cfi_def_cfa_offset 8
 284 001e BD46     		mov	sp, r7
 285              		.cfi_def_cfa_register 13
 286              		@ sp needed
 287 0020 80BD     		pop	{r7, pc}
 288              		.cfi_endproc
 289              	.LFE73:
 290              		.size	MPU_vTaskDelete, .-MPU_vTaskDelete
 291 0022 00BF     		.section	.text.MPU_vTaskDelayUntil,"ax",%progbits
 292              		.align	2
 293              		.global	MPU_vTaskDelayUntil
 294              		.thumb
 295              		.thumb_func
 296              		.type	MPU_vTaskDelayUntil, %function
 297              	MPU_vTaskDelayUntil:
 298              	.LFB74:
 158:Source\portable\Common/mpu_wrappers.c **** #endif
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccQCZNNL.s 			page 9


 159:Source\portable\Common/mpu_wrappers.c **** /*-----------------------------------------------------------*/
 160:Source\portable\Common/mpu_wrappers.c **** 
 161:Source\portable\Common/mpu_wrappers.c **** #if ( INCLUDE_vTaskDelayUntil == 1 )
 162:Source\portable\Common/mpu_wrappers.c **** 	void MPU_vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, TickType_t xTimeIncrement ) /* FR
 163:Source\portable\Common/mpu_wrappers.c **** 	{
 299              		.loc 1 163 0
 300              		.cfi_startproc
 301              		@ args = 0, pretend = 0, frame = 16
 302              		@ frame_needed = 1, uses_anonymous_args = 0
 303 0000 80B5     		push	{r7, lr}
 304              		.cfi_def_cfa_offset 8
 305              		.cfi_offset 7, -8
 306              		.cfi_offset 14, -4
 307 0002 84B0     		sub	sp, sp, #16
 308              		.cfi_def_cfa_offset 24
 309 0004 00AF     		add	r7, sp, #0
 310              		.cfi_def_cfa_register 7
 311 0006 7860     		str	r0, [r7, #4]
 312 0008 3960     		str	r1, [r7]
 164:Source\portable\Common/mpu_wrappers.c **** 	BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 313              		.loc 1 164 0
 314 000a FFF7FEFF 		bl	xPortRaisePrivilege
 315 000e F860     		str	r0, [r7, #12]
 165:Source\portable\Common/mpu_wrappers.c **** 
 166:Source\portable\Common/mpu_wrappers.c **** 		vTaskDelayUntil( pxPreviousWakeTime, xTimeIncrement );
 316              		.loc 1 166 0
 317 0010 3968     		ldr	r1, [r7]
 318 0012 7868     		ldr	r0, [r7, #4]
 319 0014 FFF7FEFF 		bl	vTaskDelayUntil
 167:Source\portable\Common/mpu_wrappers.c **** 		vPortResetPrivilege( xRunningPrivileged );
 320              		.loc 1 167 0
 321 0018 F868     		ldr	r0, [r7, #12]
 322 001a FFF7FEFF 		bl	vPortResetPrivilege
 168:Source\portable\Common/mpu_wrappers.c **** 	}
 323              		.loc 1 168 0
 324 001e 00BF     		nop
 325 0020 1037     		adds	r7, r7, #16
 326              		.cfi_def_cfa_offset 8
 327 0022 BD46     		mov	sp, r7
 328              		.cfi_def_cfa_register 13
 329              		@ sp needed
 330 0024 80BD     		pop	{r7, pc}
 331              		.cfi_endproc
 332              	.LFE74:
 333              		.size	MPU_vTaskDelayUntil, .-MPU_vTaskDelayUntil
 334 0026 00BF     		.section	.text.MPU_vTaskDelay,"ax",%progbits
 335              		.align	2
 336              		.global	MPU_vTaskDelay
 337              		.thumb
 338              		.thumb_func
 339              		.type	MPU_vTaskDelay, %function
 340              	MPU_vTaskDelay:
 341              	.LFB75:
 169:Source\portable\Common/mpu_wrappers.c **** #endif
 170:Source\portable\Common/mpu_wrappers.c **** /*-----------------------------------------------------------*/
 171:Source\portable\Common/mpu_wrappers.c **** 
 172:Source\portable\Common/mpu_wrappers.c **** #if ( INCLUDE_xTaskAbortDelay == 1 )
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccQCZNNL.s 			page 10


 173:Source\portable\Common/mpu_wrappers.c **** 	BaseType_t MPU_xTaskAbortDelay( TaskHandle_t xTask ) /* FREERTOS_SYSTEM_CALL */
 174:Source\portable\Common/mpu_wrappers.c **** 	{
 175:Source\portable\Common/mpu_wrappers.c **** 	BaseType_t xReturn;
 176:Source\portable\Common/mpu_wrappers.c **** 	BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 177:Source\portable\Common/mpu_wrappers.c **** 
 178:Source\portable\Common/mpu_wrappers.c **** 		xReturn = xTaskAbortDelay( xTask );
 179:Source\portable\Common/mpu_wrappers.c **** 		vPortResetPrivilege( xRunningPrivileged );
 180:Source\portable\Common/mpu_wrappers.c **** 		return xReturn;
 181:Source\portable\Common/mpu_wrappers.c **** 	}
 182:Source\portable\Common/mpu_wrappers.c **** #endif
 183:Source\portable\Common/mpu_wrappers.c **** /*-----------------------------------------------------------*/
 184:Source\portable\Common/mpu_wrappers.c **** 
 185:Source\portable\Common/mpu_wrappers.c **** #if ( INCLUDE_vTaskDelay == 1 )
 186:Source\portable\Common/mpu_wrappers.c **** 	void MPU_vTaskDelay( TickType_t xTicksToDelay ) /* FREERTOS_SYSTEM_CALL */
 187:Source\portable\Common/mpu_wrappers.c **** 	{
 342              		.loc 1 187 0
 343              		.cfi_startproc
 344              		@ args = 0, pretend = 0, frame = 16
 345              		@ frame_needed = 1, uses_anonymous_args = 0
 346 0000 80B5     		push	{r7, lr}
 347              		.cfi_def_cfa_offset 8
 348              		.cfi_offset 7, -8
 349              		.cfi_offset 14, -4
 350 0002 84B0     		sub	sp, sp, #16
 351              		.cfi_def_cfa_offset 24
 352 0004 00AF     		add	r7, sp, #0
 353              		.cfi_def_cfa_register 7
 354 0006 7860     		str	r0, [r7, #4]
 188:Source\portable\Common/mpu_wrappers.c **** 	BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 355              		.loc 1 188 0
 356 0008 FFF7FEFF 		bl	xPortRaisePrivilege
 357 000c F860     		str	r0, [r7, #12]
 189:Source\portable\Common/mpu_wrappers.c **** 
 190:Source\portable\Common/mpu_wrappers.c **** 		vTaskDelay( xTicksToDelay );
 358              		.loc 1 190 0
 359 000e 7868     		ldr	r0, [r7, #4]
 360 0010 FFF7FEFF 		bl	vTaskDelay
 191:Source\portable\Common/mpu_wrappers.c **** 		vPortResetPrivilege( xRunningPrivileged );
 361              		.loc 1 191 0
 362 0014 F868     		ldr	r0, [r7, #12]
 363 0016 FFF7FEFF 		bl	vPortResetPrivilege
 192:Source\portable\Common/mpu_wrappers.c **** 	}
 364              		.loc 1 192 0
 365 001a 00BF     		nop
 366 001c 1037     		adds	r7, r7, #16
 367              		.cfi_def_cfa_offset 8
 368 001e BD46     		mov	sp, r7
 369              		.cfi_def_cfa_register 13
 370              		@ sp needed
 371 0020 80BD     		pop	{r7, pc}
 372              		.cfi_endproc
 373              	.LFE75:
 374              		.size	MPU_vTaskDelay, .-MPU_vTaskDelay
 375 0022 00BF     		.section	.text.MPU_uxTaskPriorityGet,"ax",%progbits
 376              		.align	2
 377              		.global	MPU_uxTaskPriorityGet
 378              		.thumb
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccQCZNNL.s 			page 11


 379              		.thumb_func
 380              		.type	MPU_uxTaskPriorityGet, %function
 381              	MPU_uxTaskPriorityGet:
 382              	.LFB76:
 193:Source\portable\Common/mpu_wrappers.c **** #endif
 194:Source\portable\Common/mpu_wrappers.c **** /*-----------------------------------------------------------*/
 195:Source\portable\Common/mpu_wrappers.c **** 
 196:Source\portable\Common/mpu_wrappers.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
 197:Source\portable\Common/mpu_wrappers.c **** 	UBaseType_t MPU_uxTaskPriorityGet( const TaskHandle_t pxTask ) /* FREERTOS_SYSTEM_CALL */
 198:Source\portable\Common/mpu_wrappers.c **** 	{
 383              		.loc 1 198 0
 384              		.cfi_startproc
 385              		@ args = 0, pretend = 0, frame = 16
 386              		@ frame_needed = 1, uses_anonymous_args = 0
 387 0000 80B5     		push	{r7, lr}
 388              		.cfi_def_cfa_offset 8
 389              		.cfi_offset 7, -8
 390              		.cfi_offset 14, -4
 391 0002 84B0     		sub	sp, sp, #16
 392              		.cfi_def_cfa_offset 24
 393 0004 00AF     		add	r7, sp, #0
 394              		.cfi_def_cfa_register 7
 395 0006 7860     		str	r0, [r7, #4]
 199:Source\portable\Common/mpu_wrappers.c **** 	UBaseType_t uxReturn;
 200:Source\portable\Common/mpu_wrappers.c **** 	BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 396              		.loc 1 200 0
 397 0008 FFF7FEFF 		bl	xPortRaisePrivilege
 398 000c F860     		str	r0, [r7, #12]
 201:Source\portable\Common/mpu_wrappers.c **** 
 202:Source\portable\Common/mpu_wrappers.c **** 		uxReturn = uxTaskPriorityGet( pxTask );
 399              		.loc 1 202 0
 400 000e 7868     		ldr	r0, [r7, #4]
 401 0010 FFF7FEFF 		bl	uxTaskPriorityGet
 402 0014 B860     		str	r0, [r7, #8]
 203:Source\portable\Common/mpu_wrappers.c **** 		vPortResetPrivilege( xRunningPrivileged );
 403              		.loc 1 203 0
 404 0016 F868     		ldr	r0, [r7, #12]
 405 0018 FFF7FEFF 		bl	vPortResetPrivilege
 204:Source\portable\Common/mpu_wrappers.c **** 		return uxReturn;
 406              		.loc 1 204 0
 407 001c BB68     		ldr	r3, [r7, #8]
 205:Source\portable\Common/mpu_wrappers.c **** 	}
 408              		.loc 1 205 0
 409 001e 1846     		mov	r0, r3
 410 0020 1037     		adds	r7, r7, #16
 411              		.cfi_def_cfa_offset 8
 412 0022 BD46     		mov	sp, r7
 413              		.cfi_def_cfa_register 13
 414              		@ sp needed
 415 0024 80BD     		pop	{r7, pc}
 416              		.cfi_endproc
 417              	.LFE76:
 418              		.size	MPU_uxTaskPriorityGet, .-MPU_uxTaskPriorityGet
 419 0026 00BF     		.section	.text.MPU_vTaskPrioritySet,"ax",%progbits
 420              		.align	2
 421              		.global	MPU_vTaskPrioritySet
 422              		.thumb
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccQCZNNL.s 			page 12


 423              		.thumb_func
 424              		.type	MPU_vTaskPrioritySet, %function
 425              	MPU_vTaskPrioritySet:
 426              	.LFB77:
 206:Source\portable\Common/mpu_wrappers.c **** #endif
 207:Source\portable\Common/mpu_wrappers.c **** /*-----------------------------------------------------------*/
 208:Source\portable\Common/mpu_wrappers.c **** 
 209:Source\portable\Common/mpu_wrappers.c **** #if ( INCLUDE_vTaskPrioritySet == 1 )
 210:Source\portable\Common/mpu_wrappers.c **** 	void MPU_vTaskPrioritySet( TaskHandle_t pxTask, UBaseType_t uxNewPriority ) /* FREERTOS_SYSTEM_CAL
 211:Source\portable\Common/mpu_wrappers.c **** 	{
 427              		.loc 1 211 0
 428              		.cfi_startproc
 429              		@ args = 0, pretend = 0, frame = 16
 430              		@ frame_needed = 1, uses_anonymous_args = 0
 431 0000 80B5     		push	{r7, lr}
 432              		.cfi_def_cfa_offset 8
 433              		.cfi_offset 7, -8
 434              		.cfi_offset 14, -4
 435 0002 84B0     		sub	sp, sp, #16
 436              		.cfi_def_cfa_offset 24
 437 0004 00AF     		add	r7, sp, #0
 438              		.cfi_def_cfa_register 7
 439 0006 7860     		str	r0, [r7, #4]
 440 0008 3960     		str	r1, [r7]
 212:Source\portable\Common/mpu_wrappers.c **** 	BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 441              		.loc 1 212 0
 442 000a FFF7FEFF 		bl	xPortRaisePrivilege
 443 000e F860     		str	r0, [r7, #12]
 213:Source\portable\Common/mpu_wrappers.c **** 
 214:Source\portable\Common/mpu_wrappers.c **** 		vTaskPrioritySet( pxTask, uxNewPriority );
 444              		.loc 1 214 0
 445 0010 3968     		ldr	r1, [r7]
 446 0012 7868     		ldr	r0, [r7, #4]
 447 0014 FFF7FEFF 		bl	vTaskPrioritySet
 215:Source\portable\Common/mpu_wrappers.c **** 		vPortResetPrivilege( xRunningPrivileged );
 448              		.loc 1 215 0
 449 0018 F868     		ldr	r0, [r7, #12]
 450 001a FFF7FEFF 		bl	vPortResetPrivilege
 216:Source\portable\Common/mpu_wrappers.c **** 	}
 451              		.loc 1 216 0
 452 001e 00BF     		nop
 453 0020 1037     		adds	r7, r7, #16
 454              		.cfi_def_cfa_offset 8
 455 0022 BD46     		mov	sp, r7
 456              		.cfi_def_cfa_register 13
 457              		@ sp needed
 458 0024 80BD     		pop	{r7, pc}
 459              		.cfi_endproc
 460              	.LFE77:
 461              		.size	MPU_vTaskPrioritySet, .-MPU_vTaskPrioritySet
 462 0026 00BF     		.section	.text.MPU_eTaskGetState,"ax",%progbits
 463              		.align	2
 464              		.global	MPU_eTaskGetState
 465              		.thumb
 466              		.thumb_func
 467              		.type	MPU_eTaskGetState, %function
 468              	MPU_eTaskGetState:
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccQCZNNL.s 			page 13


 469              	.LFB78:
 217:Source\portable\Common/mpu_wrappers.c **** #endif
 218:Source\portable\Common/mpu_wrappers.c **** /*-----------------------------------------------------------*/
 219:Source\portable\Common/mpu_wrappers.c **** 
 220:Source\portable\Common/mpu_wrappers.c **** #if ( INCLUDE_eTaskGetState == 1 )
 221:Source\portable\Common/mpu_wrappers.c **** 	eTaskState MPU_eTaskGetState( TaskHandle_t pxTask ) /* FREERTOS_SYSTEM_CALL */
 222:Source\portable\Common/mpu_wrappers.c **** 	{
 470              		.loc 1 222 0
 471              		.cfi_startproc
 472              		@ args = 0, pretend = 0, frame = 16
 473              		@ frame_needed = 1, uses_anonymous_args = 0
 474 0000 80B5     		push	{r7, lr}
 475              		.cfi_def_cfa_offset 8
 476              		.cfi_offset 7, -8
 477              		.cfi_offset 14, -4
 478 0002 84B0     		sub	sp, sp, #16
 479              		.cfi_def_cfa_offset 24
 480 0004 00AF     		add	r7, sp, #0
 481              		.cfi_def_cfa_register 7
 482 0006 7860     		str	r0, [r7, #4]
 223:Source\portable\Common/mpu_wrappers.c **** 	BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 483              		.loc 1 223 0
 484 0008 FFF7FEFF 		bl	xPortRaisePrivilege
 485 000c F860     		str	r0, [r7, #12]
 224:Source\portable\Common/mpu_wrappers.c **** 	eTaskState eReturn;
 225:Source\portable\Common/mpu_wrappers.c **** 
 226:Source\portable\Common/mpu_wrappers.c **** 		eReturn = eTaskGetState( pxTask );
 486              		.loc 1 226 0
 487 000e 7868     		ldr	r0, [r7, #4]
 488 0010 FFF7FEFF 		bl	eTaskGetState
 489 0014 0346     		mov	r3, r0
 490 0016 FB72     		strb	r3, [r7, #11]
 227:Source\portable\Common/mpu_wrappers.c **** 		vPortResetPrivilege( xRunningPrivileged );
 491              		.loc 1 227 0
 492 0018 F868     		ldr	r0, [r7, #12]
 493 001a FFF7FEFF 		bl	vPortResetPrivilege
 228:Source\portable\Common/mpu_wrappers.c **** 		return eReturn;
 494              		.loc 1 228 0
 495 001e FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 229:Source\portable\Common/mpu_wrappers.c **** 	}
 496              		.loc 1 229 0
 497 0020 1846     		mov	r0, r3
 498 0022 1037     		adds	r7, r7, #16
 499              		.cfi_def_cfa_offset 8
 500 0024 BD46     		mov	sp, r7
 501              		.cfi_def_cfa_register 13
 502              		@ sp needed
 503 0026 80BD     		pop	{r7, pc}
 504              		.cfi_endproc
 505              	.LFE78:
 506              		.size	MPU_eTaskGetState, .-MPU_eTaskGetState
 507              		.section	.text.MPU_vTaskSuspend,"ax",%progbits
 508              		.align	2
 509              		.global	MPU_vTaskSuspend
 510              		.thumb
 511              		.thumb_func
 512              		.type	MPU_vTaskSuspend, %function
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccQCZNNL.s 			page 14


 513              	MPU_vTaskSuspend:
 514              	.LFB79:
 230:Source\portable\Common/mpu_wrappers.c **** #endif
 231:Source\portable\Common/mpu_wrappers.c **** /*-----------------------------------------------------------*/
 232:Source\portable\Common/mpu_wrappers.c **** 
 233:Source\portable\Common/mpu_wrappers.c **** #if( configUSE_TRACE_FACILITY == 1 )
 234:Source\portable\Common/mpu_wrappers.c **** 	void MPU_vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpa
 235:Source\portable\Common/mpu_wrappers.c **** 	{
 236:Source\portable\Common/mpu_wrappers.c **** 	BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 237:Source\portable\Common/mpu_wrappers.c **** 
 238:Source\portable\Common/mpu_wrappers.c **** 		vTaskGetInfo( xTask, pxTaskStatus, xGetFreeStackSpace, eState );
 239:Source\portable\Common/mpu_wrappers.c **** 		vPortResetPrivilege( xRunningPrivileged );
 240:Source\portable\Common/mpu_wrappers.c **** 	}
 241:Source\portable\Common/mpu_wrappers.c **** #endif
 242:Source\portable\Common/mpu_wrappers.c **** /*-----------------------------------------------------------*/
 243:Source\portable\Common/mpu_wrappers.c **** 
 244:Source\portable\Common/mpu_wrappers.c **** #if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
 245:Source\portable\Common/mpu_wrappers.c **** 	TaskHandle_t MPU_xTaskGetIdleTaskHandle( void ) /* FREERTOS_SYSTEM_CALL */
 246:Source\portable\Common/mpu_wrappers.c **** 	{
 247:Source\portable\Common/mpu_wrappers.c **** 	TaskHandle_t xReturn;
 248:Source\portable\Common/mpu_wrappers.c **** 	BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 249:Source\portable\Common/mpu_wrappers.c **** 
 250:Source\portable\Common/mpu_wrappers.c **** 		xReturn = xTaskGetIdleTaskHandle();
 251:Source\portable\Common/mpu_wrappers.c **** 		vPortResetPrivilege( xRunningPrivileged );
 252:Source\portable\Common/mpu_wrappers.c **** 		return xReturn;
 253:Source\portable\Common/mpu_wrappers.c **** 	}
 254:Source\portable\Common/mpu_wrappers.c **** #endif
 255:Source\portable\Common/mpu_wrappers.c **** /*-----------------------------------------------------------*/
 256:Source\portable\Common/mpu_wrappers.c **** 
 257:Source\portable\Common/mpu_wrappers.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 258:Source\portable\Common/mpu_wrappers.c **** 	void MPU_vTaskSuspend( TaskHandle_t pxTaskToSuspend ) /* FREERTOS_SYSTEM_CALL */
 259:Source\portable\Common/mpu_wrappers.c **** 	{
 515              		.loc 1 259 0
 516              		.cfi_startproc
 517              		@ args = 0, pretend = 0, frame = 16
 518              		@ frame_needed = 1, uses_anonymous_args = 0
 519 0000 80B5     		push	{r7, lr}
 520              		.cfi_def_cfa_offset 8
 521              		.cfi_offset 7, -8
 522              		.cfi_offset 14, -4
 523 0002 84B0     		sub	sp, sp, #16
 524              		.cfi_def_cfa_offset 24
 525 0004 00AF     		add	r7, sp, #0
 526              		.cfi_def_cfa_register 7
 527 0006 7860     		str	r0, [r7, #4]
 260:Source\portable\Common/mpu_wrappers.c **** 	BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 528              		.loc 1 260 0
 529 0008 FFF7FEFF 		bl	xPortRaisePrivilege
 530 000c F860     		str	r0, [r7, #12]
 261:Source\portable\Common/mpu_wrappers.c **** 
 262:Source\portable\Common/mpu_wrappers.c **** 		vTaskSuspend( pxTaskToSuspend );
 531              		.loc 1 262 0
 532 000e 7868     		ldr	r0, [r7, #4]
 533 0010 FFF7FEFF 		bl	vTaskSuspend
 263:Source\portable\Common/mpu_wrappers.c **** 		vPortResetPrivilege( xRunningPrivileged );
 534              		.loc 1 263 0
 535 0014 F868     		ldr	r0, [r7, #12]
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccQCZNNL.s 			page 15


 536 0016 FFF7FEFF 		bl	vPortResetPrivilege
 264:Source\portable\Common/mpu_wrappers.c **** 	}
 537              		.loc 1 264 0
 538 001a 00BF     		nop
 539 001c 1037     		adds	r7, r7, #16
 540              		.cfi_def_cfa_offset 8
 541 001e BD46     		mov	sp, r7
 542              		.cfi_def_cfa_register 13
 543              		@ sp needed
 544 0020 80BD     		pop	{r7, pc}
 545              		.cfi_endproc
 546              	.LFE79:
 547              		.size	MPU_vTaskSuspend, .-MPU_vTaskSuspend
 548 0022 00BF     		.section	.text.MPU_vTaskResume,"ax",%progbits
 549              		.align	2
 550              		.global	MPU_vTaskResume
 551              		.thumb
 552              		.thumb_func
 553              		.type	MPU_vTaskResume, %function
 554              	MPU_vTaskResume:
 555              	.LFB80:
 265:Source\portable\Common/mpu_wrappers.c **** #endif
 266:Source\portable\Common/mpu_wrappers.c **** /*-----------------------------------------------------------*/
 267:Source\portable\Common/mpu_wrappers.c **** 
 268:Source\portable\Common/mpu_wrappers.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 269:Source\portable\Common/mpu_wrappers.c **** 	void MPU_vTaskResume( TaskHandle_t pxTaskToResume ) /* FREERTOS_SYSTEM_CALL */
 270:Source\portable\Common/mpu_wrappers.c **** 	{
 556              		.loc 1 270 0
 557              		.cfi_startproc
 558              		@ args = 0, pretend = 0, frame = 16
 559              		@ frame_needed = 1, uses_anonymous_args = 0
 560 0000 80B5     		push	{r7, lr}
 561              		.cfi_def_cfa_offset 8
 562              		.cfi_offset 7, -8
 563              		.cfi_offset 14, -4
 564 0002 84B0     		sub	sp, sp, #16
 565              		.cfi_def_cfa_offset 24
 566 0004 00AF     		add	r7, sp, #0
 567              		.cfi_def_cfa_register 7
 568 0006 7860     		str	r0, [r7, #4]
 271:Source\portable\Common/mpu_wrappers.c **** 	BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 569              		.loc 1 271 0
 570 0008 FFF7FEFF 		bl	xPortRaisePrivilege
 571 000c F860     		str	r0, [r7, #12]
 272:Source\portable\Common/mpu_wrappers.c **** 
 273:Source\portable\Common/mpu_wrappers.c **** 		vTaskResume( pxTaskToResume );
 572              		.loc 1 273 0
 573 000e 7868     		ldr	r0, [r7, #4]
 574 0010 FFF7FEFF 		bl	vTaskResume
 274:Source\portable\Common/mpu_wrappers.c **** 		vPortResetPrivilege( xRunningPrivileged );
 575              		.loc 1 274 0
 576 0014 F868     		ldr	r0, [r7, #12]
 577 0016 FFF7FEFF 		bl	vPortResetPrivilege
 275:Source\portable\Common/mpu_wrappers.c **** 	}
 578              		.loc 1 275 0
 579 001a 00BF     		nop
 580 001c 1037     		adds	r7, r7, #16
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccQCZNNL.s 			page 16


 581              		.cfi_def_cfa_offset 8
 582 001e BD46     		mov	sp, r7
 583              		.cfi_def_cfa_register 13
 584              		@ sp needed
 585 0020 80BD     		pop	{r7, pc}
 586              		.cfi_endproc
 587              	.LFE80:
 588              		.size	MPU_vTaskResume, .-MPU_vTaskResume
 589 0022 00BF     		.section	.text.MPU_vTaskSuspendAll,"ax",%progbits
 590              		.align	2
 591              		.global	MPU_vTaskSuspendAll
 592              		.thumb
 593              		.thumb_func
 594              		.type	MPU_vTaskSuspendAll, %function
 595              	MPU_vTaskSuspendAll:
 596              	.LFB81:
 276:Source\portable\Common/mpu_wrappers.c **** #endif
 277:Source\portable\Common/mpu_wrappers.c **** /*-----------------------------------------------------------*/
 278:Source\portable\Common/mpu_wrappers.c **** 
 279:Source\portable\Common/mpu_wrappers.c **** void MPU_vTaskSuspendAll( void ) /* FREERTOS_SYSTEM_CALL */
 280:Source\portable\Common/mpu_wrappers.c **** {
 597              		.loc 1 280 0
 598              		.cfi_startproc
 599              		@ args = 0, pretend = 0, frame = 8
 600              		@ frame_needed = 1, uses_anonymous_args = 0
 601 0000 80B5     		push	{r7, lr}
 602              		.cfi_def_cfa_offset 8
 603              		.cfi_offset 7, -8
 604              		.cfi_offset 14, -4
 605 0002 82B0     		sub	sp, sp, #8
 606              		.cfi_def_cfa_offset 16
 607 0004 00AF     		add	r7, sp, #0
 608              		.cfi_def_cfa_register 7
 281:Source\portable\Common/mpu_wrappers.c **** BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 609              		.loc 1 281 0
 610 0006 FFF7FEFF 		bl	xPortRaisePrivilege
 611 000a 7860     		str	r0, [r7, #4]
 282:Source\portable\Common/mpu_wrappers.c **** 
 283:Source\portable\Common/mpu_wrappers.c **** 	vTaskSuspendAll();
 612              		.loc 1 283 0
 613 000c FFF7FEFF 		bl	vTaskSuspendAll
 284:Source\portable\Common/mpu_wrappers.c **** 	vPortResetPrivilege( xRunningPrivileged );
 614              		.loc 1 284 0
 615 0010 7868     		ldr	r0, [r7, #4]
 616 0012 FFF7FEFF 		bl	vPortResetPrivilege
 285:Source\portable\Common/mpu_wrappers.c **** }
 617              		.loc 1 285 0
 618 0016 00BF     		nop
 619 0018 0837     		adds	r7, r7, #8
 620              		.cfi_def_cfa_offset 8
 621 001a BD46     		mov	sp, r7
 622              		.cfi_def_cfa_register 13
 623              		@ sp needed
 624 001c 80BD     		pop	{r7, pc}
 625              		.cfi_endproc
 626              	.LFE81:
 627              		.size	MPU_vTaskSuspendAll, .-MPU_vTaskSuspendAll
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccQCZNNL.s 			page 17


 628 001e 00BF     		.section	.text.MPU_xTaskResumeAll,"ax",%progbits
 629              		.align	2
 630              		.global	MPU_xTaskResumeAll
 631              		.thumb
 632              		.thumb_func
 633              		.type	MPU_xTaskResumeAll, %function
 634              	MPU_xTaskResumeAll:
 635              	.LFB82:
 286:Source\portable\Common/mpu_wrappers.c **** /*-----------------------------------------------------------*/
 287:Source\portable\Common/mpu_wrappers.c **** 
 288:Source\portable\Common/mpu_wrappers.c **** BaseType_t MPU_xTaskResumeAll( void ) /* FREERTOS_SYSTEM_CALL */
 289:Source\portable\Common/mpu_wrappers.c **** {
 636              		.loc 1 289 0
 637              		.cfi_startproc
 638              		@ args = 0, pretend = 0, frame = 8
 639              		@ frame_needed = 1, uses_anonymous_args = 0
 640 0000 80B5     		push	{r7, lr}
 641              		.cfi_def_cfa_offset 8
 642              		.cfi_offset 7, -8
 643              		.cfi_offset 14, -4
 644 0002 82B0     		sub	sp, sp, #8
 645              		.cfi_def_cfa_offset 16
 646 0004 00AF     		add	r7, sp, #0
 647              		.cfi_def_cfa_register 7
 290:Source\portable\Common/mpu_wrappers.c **** BaseType_t xReturn;
 291:Source\portable\Common/mpu_wrappers.c **** BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 648              		.loc 1 291 0
 649 0006 FFF7FEFF 		bl	xPortRaisePrivilege
 650 000a 7860     		str	r0, [r7, #4]
 292:Source\portable\Common/mpu_wrappers.c **** 
 293:Source\portable\Common/mpu_wrappers.c **** 	xReturn = xTaskResumeAll();
 651              		.loc 1 293 0
 652 000c FFF7FEFF 		bl	xTaskResumeAll
 653 0010 3860     		str	r0, [r7]
 294:Source\portable\Common/mpu_wrappers.c **** 	vPortResetPrivilege( xRunningPrivileged );
 654              		.loc 1 294 0
 655 0012 7868     		ldr	r0, [r7, #4]
 656 0014 FFF7FEFF 		bl	vPortResetPrivilege
 295:Source\portable\Common/mpu_wrappers.c **** 	return xReturn;
 657              		.loc 1 295 0
 658 0018 3B68     		ldr	r3, [r7]
 296:Source\portable\Common/mpu_wrappers.c **** }
 659              		.loc 1 296 0
 660 001a 1846     		mov	r0, r3
 661 001c 0837     		adds	r7, r7, #8
 662              		.cfi_def_cfa_offset 8
 663 001e BD46     		mov	sp, r7
 664              		.cfi_def_cfa_register 13
 665              		@ sp needed
 666 0020 80BD     		pop	{r7, pc}
 667              		.cfi_endproc
 668              	.LFE82:
 669              		.size	MPU_xTaskResumeAll, .-MPU_xTaskResumeAll
 670 0022 00BF     		.section	.text.MPU_xTaskGetTickCount,"ax",%progbits
 671              		.align	2
 672              		.global	MPU_xTaskGetTickCount
 673              		.thumb
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccQCZNNL.s 			page 18


 674              		.thumb_func
 675              		.type	MPU_xTaskGetTickCount, %function
 676              	MPU_xTaskGetTickCount:
 677              	.LFB83:
 297:Source\portable\Common/mpu_wrappers.c **** /*-----------------------------------------------------------*/
 298:Source\portable\Common/mpu_wrappers.c **** 
 299:Source\portable\Common/mpu_wrappers.c **** TickType_t MPU_xTaskGetTickCount( void ) /* FREERTOS_SYSTEM_CALL */
 300:Source\portable\Common/mpu_wrappers.c **** {
 678              		.loc 1 300 0
 679              		.cfi_startproc
 680              		@ args = 0, pretend = 0, frame = 8
 681              		@ frame_needed = 1, uses_anonymous_args = 0
 682 0000 80B5     		push	{r7, lr}
 683              		.cfi_def_cfa_offset 8
 684              		.cfi_offset 7, -8
 685              		.cfi_offset 14, -4
 686 0002 82B0     		sub	sp, sp, #8
 687              		.cfi_def_cfa_offset 16
 688 0004 00AF     		add	r7, sp, #0
 689              		.cfi_def_cfa_register 7
 301:Source\portable\Common/mpu_wrappers.c **** TickType_t xReturn;
 302:Source\portable\Common/mpu_wrappers.c **** BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 690              		.loc 1 302 0
 691 0006 FFF7FEFF 		bl	xPortRaisePrivilege
 692 000a 7860     		str	r0, [r7, #4]
 303:Source\portable\Common/mpu_wrappers.c **** 
 304:Source\portable\Common/mpu_wrappers.c **** 	xReturn = xTaskGetTickCount();
 693              		.loc 1 304 0
 694 000c FFF7FEFF 		bl	xTaskGetTickCount
 695 0010 3860     		str	r0, [r7]
 305:Source\portable\Common/mpu_wrappers.c **** 	vPortResetPrivilege( xRunningPrivileged );
 696              		.loc 1 305 0
 697 0012 7868     		ldr	r0, [r7, #4]
 698 0014 FFF7FEFF 		bl	vPortResetPrivilege
 306:Source\portable\Common/mpu_wrappers.c **** 	return xReturn;
 699              		.loc 1 306 0
 700 0018 3B68     		ldr	r3, [r7]
 307:Source\portable\Common/mpu_wrappers.c **** }
 701              		.loc 1 307 0
 702 001a 1846     		mov	r0, r3
 703 001c 0837     		adds	r7, r7, #8
 704              		.cfi_def_cfa_offset 8
 705 001e BD46     		mov	sp, r7
 706              		.cfi_def_cfa_register 13
 707              		@ sp needed
 708 0020 80BD     		pop	{r7, pc}
 709              		.cfi_endproc
 710              	.LFE83:
 711              		.size	MPU_xTaskGetTickCount, .-MPU_xTaskGetTickCount
 712 0022 00BF     		.section	.text.MPU_uxTaskGetNumberOfTasks,"ax",%progbits
 713              		.align	2
 714              		.global	MPU_uxTaskGetNumberOfTasks
 715              		.thumb
 716              		.thumb_func
 717              		.type	MPU_uxTaskGetNumberOfTasks, %function
 718              	MPU_uxTaskGetNumberOfTasks:
 719              	.LFB84:
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccQCZNNL.s 			page 19


 308:Source\portable\Common/mpu_wrappers.c **** /*-----------------------------------------------------------*/
 309:Source\portable\Common/mpu_wrappers.c **** 
 310:Source\portable\Common/mpu_wrappers.c **** UBaseType_t MPU_uxTaskGetNumberOfTasks( void ) /* FREERTOS_SYSTEM_CALL */
 311:Source\portable\Common/mpu_wrappers.c **** {
 720              		.loc 1 311 0
 721              		.cfi_startproc
 722              		@ args = 0, pretend = 0, frame = 8
 723              		@ frame_needed = 1, uses_anonymous_args = 0
 724 0000 80B5     		push	{r7, lr}
 725              		.cfi_def_cfa_offset 8
 726              		.cfi_offset 7, -8
 727              		.cfi_offset 14, -4
 728 0002 82B0     		sub	sp, sp, #8
 729              		.cfi_def_cfa_offset 16
 730 0004 00AF     		add	r7, sp, #0
 731              		.cfi_def_cfa_register 7
 312:Source\portable\Common/mpu_wrappers.c **** UBaseType_t uxReturn;
 313:Source\portable\Common/mpu_wrappers.c **** BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 732              		.loc 1 313 0
 733 0006 FFF7FEFF 		bl	xPortRaisePrivilege
 734 000a 7860     		str	r0, [r7, #4]
 314:Source\portable\Common/mpu_wrappers.c **** 
 315:Source\portable\Common/mpu_wrappers.c **** 	uxReturn = uxTaskGetNumberOfTasks();
 735              		.loc 1 315 0
 736 000c FFF7FEFF 		bl	uxTaskGetNumberOfTasks
 737 0010 3860     		str	r0, [r7]
 316:Source\portable\Common/mpu_wrappers.c **** 	vPortResetPrivilege( xRunningPrivileged );
 738              		.loc 1 316 0
 739 0012 7868     		ldr	r0, [r7, #4]
 740 0014 FFF7FEFF 		bl	vPortResetPrivilege
 317:Source\portable\Common/mpu_wrappers.c **** 	return uxReturn;
 741              		.loc 1 317 0
 742 0018 3B68     		ldr	r3, [r7]
 318:Source\portable\Common/mpu_wrappers.c **** }
 743              		.loc 1 318 0
 744 001a 1846     		mov	r0, r3
 745 001c 0837     		adds	r7, r7, #8
 746              		.cfi_def_cfa_offset 8
 747 001e BD46     		mov	sp, r7
 748              		.cfi_def_cfa_register 13
 749              		@ sp needed
 750 0020 80BD     		pop	{r7, pc}
 751              		.cfi_endproc
 752              	.LFE84:
 753              		.size	MPU_uxTaskGetNumberOfTasks, .-MPU_uxTaskGetNumberOfTasks
 754 0022 00BF     		.section	.text.MPU_pcTaskGetName,"ax",%progbits
 755              		.align	2
 756              		.global	MPU_pcTaskGetName
 757              		.thumb
 758              		.thumb_func
 759              		.type	MPU_pcTaskGetName, %function
 760              	MPU_pcTaskGetName:
 761              	.LFB85:
 319:Source\portable\Common/mpu_wrappers.c **** /*-----------------------------------------------------------*/
 320:Source\portable\Common/mpu_wrappers.c **** 
 321:Source\portable\Common/mpu_wrappers.c **** char * MPU_pcTaskGetName( TaskHandle_t xTaskToQuery ) /* FREERTOS_SYSTEM_CALL */
 322:Source\portable\Common/mpu_wrappers.c **** {
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccQCZNNL.s 			page 20


 762              		.loc 1 322 0
 763              		.cfi_startproc
 764              		@ args = 0, pretend = 0, frame = 16
 765              		@ frame_needed = 1, uses_anonymous_args = 0
 766 0000 80B5     		push	{r7, lr}
 767              		.cfi_def_cfa_offset 8
 768              		.cfi_offset 7, -8
 769              		.cfi_offset 14, -4
 770 0002 84B0     		sub	sp, sp, #16
 771              		.cfi_def_cfa_offset 24
 772 0004 00AF     		add	r7, sp, #0
 773              		.cfi_def_cfa_register 7
 774 0006 7860     		str	r0, [r7, #4]
 323:Source\portable\Common/mpu_wrappers.c **** char *pcReturn;
 324:Source\portable\Common/mpu_wrappers.c **** BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 775              		.loc 1 324 0
 776 0008 FFF7FEFF 		bl	xPortRaisePrivilege
 777 000c F860     		str	r0, [r7, #12]
 325:Source\portable\Common/mpu_wrappers.c **** 
 326:Source\portable\Common/mpu_wrappers.c **** 	pcReturn = pcTaskGetName( xTaskToQuery );
 778              		.loc 1 326 0
 779 000e 7868     		ldr	r0, [r7, #4]
 780 0010 FFF7FEFF 		bl	pcTaskGetName
 781 0014 B860     		str	r0, [r7, #8]
 327:Source\portable\Common/mpu_wrappers.c **** 	vPortResetPrivilege( xRunningPrivileged );
 782              		.loc 1 327 0
 783 0016 F868     		ldr	r0, [r7, #12]
 784 0018 FFF7FEFF 		bl	vPortResetPrivilege
 328:Source\portable\Common/mpu_wrappers.c **** 	return pcReturn;
 785              		.loc 1 328 0
 786 001c BB68     		ldr	r3, [r7, #8]
 329:Source\portable\Common/mpu_wrappers.c **** }
 787              		.loc 1 329 0
 788 001e 1846     		mov	r0, r3
 789 0020 1037     		adds	r7, r7, #16
 790              		.cfi_def_cfa_offset 8
 791 0022 BD46     		mov	sp, r7
 792              		.cfi_def_cfa_register 13
 793              		@ sp needed
 794 0024 80BD     		pop	{r7, pc}
 795              		.cfi_endproc
 796              	.LFE85:
 797              		.size	MPU_pcTaskGetName, .-MPU_pcTaskGetName
 798 0026 00BF     		.section	.text.MPU_xTaskCatchUpTicks,"ax",%progbits
 799              		.align	2
 800              		.global	MPU_xTaskCatchUpTicks
 801              		.thumb
 802              		.thumb_func
 803              		.type	MPU_xTaskCatchUpTicks, %function
 804              	MPU_xTaskCatchUpTicks:
 805              	.LFB86:
 330:Source\portable\Common/mpu_wrappers.c **** /*-----------------------------------------------------------*/
 331:Source\portable\Common/mpu_wrappers.c **** 
 332:Source\portable\Common/mpu_wrappers.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
 333:Source\portable\Common/mpu_wrappers.c **** 	TaskHandle_t MPU_xTaskGetHandle( const char *pcNameToQuery ) /* FREERTOS_SYSTEM_CALL */
 334:Source\portable\Common/mpu_wrappers.c **** 	{
 335:Source\portable\Common/mpu_wrappers.c **** 	TaskHandle_t xReturn;
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccQCZNNL.s 			page 21


 336:Source\portable\Common/mpu_wrappers.c **** 	BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 337:Source\portable\Common/mpu_wrappers.c **** 
 338:Source\portable\Common/mpu_wrappers.c **** 		xReturn = xTaskGetHandle( pcNameToQuery );
 339:Source\portable\Common/mpu_wrappers.c **** 		vPortResetPrivilege( xRunningPrivileged );
 340:Source\portable\Common/mpu_wrappers.c **** 		return xReturn;
 341:Source\portable\Common/mpu_wrappers.c **** 	}
 342:Source\portable\Common/mpu_wrappers.c **** #endif
 343:Source\portable\Common/mpu_wrappers.c **** /*-----------------------------------------------------------*/
 344:Source\portable\Common/mpu_wrappers.c **** 
 345:Source\portable\Common/mpu_wrappers.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( config
 346:Source\portable\Common/mpu_wrappers.c **** 	void MPU_vTaskList( char *pcWriteBuffer ) /* FREERTOS_SYSTEM_CALL */
 347:Source\portable\Common/mpu_wrappers.c **** 	{
 348:Source\portable\Common/mpu_wrappers.c **** 	BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 349:Source\portable\Common/mpu_wrappers.c **** 
 350:Source\portable\Common/mpu_wrappers.c **** 		vTaskList( pcWriteBuffer );
 351:Source\portable\Common/mpu_wrappers.c **** 		vPortResetPrivilege( xRunningPrivileged );
 352:Source\portable\Common/mpu_wrappers.c **** 	}
 353:Source\portable\Common/mpu_wrappers.c **** #endif
 354:Source\portable\Common/mpu_wrappers.c **** /*-----------------------------------------------------------*/
 355:Source\portable\Common/mpu_wrappers.c **** 
 356:Source\portable\Common/mpu_wrappers.c **** #if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( c
 357:Source\portable\Common/mpu_wrappers.c **** 	void MPU_vTaskGetRunTimeStats( char *pcWriteBuffer ) /* FREERTOS_SYSTEM_CALL */
 358:Source\portable\Common/mpu_wrappers.c **** 	{
 359:Source\portable\Common/mpu_wrappers.c **** 	BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 360:Source\portable\Common/mpu_wrappers.c **** 
 361:Source\portable\Common/mpu_wrappers.c **** 		vTaskGetRunTimeStats( pcWriteBuffer );
 362:Source\portable\Common/mpu_wrappers.c **** 		vPortResetPrivilege( xRunningPrivileged );
 363:Source\portable\Common/mpu_wrappers.c **** 	}
 364:Source\portable\Common/mpu_wrappers.c **** #endif
 365:Source\portable\Common/mpu_wrappers.c **** /*-----------------------------------------------------------*/
 366:Source\portable\Common/mpu_wrappers.c **** 
 367:Source\portable\Common/mpu_wrappers.c **** #if( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) )
 368:Source\portable\Common/mpu_wrappers.c **** 	uint32_t MPU_ulTaskGetIdleRunTimeCounter( void ) /* FREERTOS_SYSTEM_CALL */
 369:Source\portable\Common/mpu_wrappers.c **** 	{
 370:Source\portable\Common/mpu_wrappers.c **** 	uint32_t xReturn;
 371:Source\portable\Common/mpu_wrappers.c **** 	BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 372:Source\portable\Common/mpu_wrappers.c **** 
 373:Source\portable\Common/mpu_wrappers.c **** 		xReturn = ulTaskGetIdleRunTimeCounter();
 374:Source\portable\Common/mpu_wrappers.c **** 		vPortResetPrivilege( xRunningPrivileged );
 375:Source\portable\Common/mpu_wrappers.c **** 		return xReturn;
 376:Source\portable\Common/mpu_wrappers.c **** 	}
 377:Source\portable\Common/mpu_wrappers.c **** #endif
 378:Source\portable\Common/mpu_wrappers.c **** /*-----------------------------------------------------------*/
 379:Source\portable\Common/mpu_wrappers.c **** 
 380:Source\portable\Common/mpu_wrappers.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
 381:Source\portable\Common/mpu_wrappers.c **** 	void MPU_vTaskSetApplicationTaskTag( TaskHandle_t xTask, TaskHookFunction_t pxTagValue ) /* FREERT
 382:Source\portable\Common/mpu_wrappers.c **** 	{
 383:Source\portable\Common/mpu_wrappers.c **** 	BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 384:Source\portable\Common/mpu_wrappers.c **** 
 385:Source\portable\Common/mpu_wrappers.c **** 		vTaskSetApplicationTaskTag( xTask, pxTagValue );
 386:Source\portable\Common/mpu_wrappers.c **** 		vPortResetPrivilege( xRunningPrivileged );
 387:Source\portable\Common/mpu_wrappers.c **** 	}
 388:Source\portable\Common/mpu_wrappers.c **** #endif
 389:Source\portable\Common/mpu_wrappers.c **** /*-----------------------------------------------------------*/
 390:Source\portable\Common/mpu_wrappers.c **** 
 391:Source\portable\Common/mpu_wrappers.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
 392:Source\portable\Common/mpu_wrappers.c **** 	TaskHookFunction_t MPU_xTaskGetApplicationTaskTag( TaskHandle_t xTask ) /* FREERTOS_SYSTEM_CALL */
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccQCZNNL.s 			page 22


 393:Source\portable\Common/mpu_wrappers.c **** 	{
 394:Source\portable\Common/mpu_wrappers.c **** 	TaskHookFunction_t xReturn;
 395:Source\portable\Common/mpu_wrappers.c **** 	BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 396:Source\portable\Common/mpu_wrappers.c **** 
 397:Source\portable\Common/mpu_wrappers.c **** 		xReturn = xTaskGetApplicationTaskTag( xTask );
 398:Source\portable\Common/mpu_wrappers.c **** 		vPortResetPrivilege( xRunningPrivileged );
 399:Source\portable\Common/mpu_wrappers.c **** 		return xReturn;
 400:Source\portable\Common/mpu_wrappers.c **** 	}
 401:Source\portable\Common/mpu_wrappers.c **** #endif
 402:Source\portable\Common/mpu_wrappers.c **** /*-----------------------------------------------------------*/
 403:Source\portable\Common/mpu_wrappers.c **** 
 404:Source\portable\Common/mpu_wrappers.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
 405:Source\portable\Common/mpu_wrappers.c **** 	void MPU_vTaskSetThreadLocalStoragePointer( TaskHandle_t xTaskToSet, BaseType_t xIndex, void *pvVa
 406:Source\portable\Common/mpu_wrappers.c **** 	{
 407:Source\portable\Common/mpu_wrappers.c **** 	BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 408:Source\portable\Common/mpu_wrappers.c **** 
 409:Source\portable\Common/mpu_wrappers.c **** 		vTaskSetThreadLocalStoragePointer( xTaskToSet, xIndex, pvValue );
 410:Source\portable\Common/mpu_wrappers.c **** 		vPortResetPrivilege( xRunningPrivileged );
 411:Source\portable\Common/mpu_wrappers.c **** 	}
 412:Source\portable\Common/mpu_wrappers.c **** #endif
 413:Source\portable\Common/mpu_wrappers.c **** /*-----------------------------------------------------------*/
 414:Source\portable\Common/mpu_wrappers.c **** 
 415:Source\portable\Common/mpu_wrappers.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
 416:Source\portable\Common/mpu_wrappers.c **** 	void *MPU_pvTaskGetThreadLocalStoragePointer( TaskHandle_t xTaskToQuery, BaseType_t xIndex ) /* FR
 417:Source\portable\Common/mpu_wrappers.c **** 	{
 418:Source\portable\Common/mpu_wrappers.c **** 	void *pvReturn;
 419:Source\portable\Common/mpu_wrappers.c **** 	BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 420:Source\portable\Common/mpu_wrappers.c **** 
 421:Source\portable\Common/mpu_wrappers.c **** 		pvReturn = pvTaskGetThreadLocalStoragePointer( xTaskToQuery, xIndex );
 422:Source\portable\Common/mpu_wrappers.c **** 		vPortResetPrivilege( xRunningPrivileged );
 423:Source\portable\Common/mpu_wrappers.c **** 		return pvReturn;
 424:Source\portable\Common/mpu_wrappers.c **** 	}
 425:Source\portable\Common/mpu_wrappers.c **** #endif
 426:Source\portable\Common/mpu_wrappers.c **** /*-----------------------------------------------------------*/
 427:Source\portable\Common/mpu_wrappers.c **** 
 428:Source\portable\Common/mpu_wrappers.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
 429:Source\portable\Common/mpu_wrappers.c **** 	BaseType_t MPU_xTaskCallApplicationTaskHook( TaskHandle_t xTask, void *pvParameter ) /* FREERTOS_S
 430:Source\portable\Common/mpu_wrappers.c **** 	{
 431:Source\portable\Common/mpu_wrappers.c **** 	BaseType_t xReturn;
 432:Source\portable\Common/mpu_wrappers.c **** 	BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 433:Source\portable\Common/mpu_wrappers.c **** 
 434:Source\portable\Common/mpu_wrappers.c **** 		xReturn = xTaskCallApplicationTaskHook( xTask, pvParameter );
 435:Source\portable\Common/mpu_wrappers.c **** 		vPortResetPrivilege( xRunningPrivileged );
 436:Source\portable\Common/mpu_wrappers.c **** 		return xReturn;
 437:Source\portable\Common/mpu_wrappers.c **** 	}
 438:Source\portable\Common/mpu_wrappers.c **** #endif
 439:Source\portable\Common/mpu_wrappers.c **** /*-----------------------------------------------------------*/
 440:Source\portable\Common/mpu_wrappers.c **** 
 441:Source\portable\Common/mpu_wrappers.c **** #if ( configUSE_TRACE_FACILITY == 1 )
 442:Source\portable\Common/mpu_wrappers.c **** 	UBaseType_t MPU_uxTaskGetSystemState( TaskStatus_t *pxTaskStatusArray, UBaseType_t uxArraySize, ui
 443:Source\portable\Common/mpu_wrappers.c **** 	{
 444:Source\portable\Common/mpu_wrappers.c **** 	UBaseType_t uxReturn;
 445:Source\portable\Common/mpu_wrappers.c **** 	BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 446:Source\portable\Common/mpu_wrappers.c **** 
 447:Source\portable\Common/mpu_wrappers.c **** 		uxReturn = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, pulTotalRunTime );
 448:Source\portable\Common/mpu_wrappers.c **** 		vPortResetPrivilege( xRunningPrivileged );
 449:Source\portable\Common/mpu_wrappers.c **** 		return uxReturn;
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccQCZNNL.s 			page 23


 450:Source\portable\Common/mpu_wrappers.c **** 	}
 451:Source\portable\Common/mpu_wrappers.c **** #endif
 452:Source\portable\Common/mpu_wrappers.c **** /*-----------------------------------------------------------*/
 453:Source\portable\Common/mpu_wrappers.c **** 
 454:Source\portable\Common/mpu_wrappers.c **** BaseType_t MPU_xTaskCatchUpTicks( TickType_t xTicksToCatchUp ) /* FREERTOS_SYSTEM_CALL */
 455:Source\portable\Common/mpu_wrappers.c **** {
 806              		.loc 1 455 0
 807              		.cfi_startproc
 808              		@ args = 0, pretend = 0, frame = 16
 809              		@ frame_needed = 1, uses_anonymous_args = 0
 810 0000 80B5     		push	{r7, lr}
 811              		.cfi_def_cfa_offset 8
 812              		.cfi_offset 7, -8
 813              		.cfi_offset 14, -4
 814 0002 84B0     		sub	sp, sp, #16
 815              		.cfi_def_cfa_offset 24
 816 0004 00AF     		add	r7, sp, #0
 817              		.cfi_def_cfa_register 7
 818 0006 7860     		str	r0, [r7, #4]
 456:Source\portable\Common/mpu_wrappers.c **** BaseType_t xReturn;
 457:Source\portable\Common/mpu_wrappers.c **** BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 819              		.loc 1 457 0
 820 0008 FFF7FEFF 		bl	xPortRaisePrivilege
 821 000c F860     		str	r0, [r7, #12]
 458:Source\portable\Common/mpu_wrappers.c **** 
 459:Source\portable\Common/mpu_wrappers.c **** 	xReturn = xTaskCatchUpTicks( xTicksToCatchUp );
 822              		.loc 1 459 0
 823 000e 7868     		ldr	r0, [r7, #4]
 824 0010 FFF7FEFF 		bl	xTaskCatchUpTicks
 825 0014 B860     		str	r0, [r7, #8]
 460:Source\portable\Common/mpu_wrappers.c **** 	vPortResetPrivilege( xRunningPrivileged );
 826              		.loc 1 460 0
 827 0016 F868     		ldr	r0, [r7, #12]
 828 0018 FFF7FEFF 		bl	vPortResetPrivilege
 461:Source\portable\Common/mpu_wrappers.c **** 	return xReturn;
 829              		.loc 1 461 0
 830 001c BB68     		ldr	r3, [r7, #8]
 462:Source\portable\Common/mpu_wrappers.c **** }
 831              		.loc 1 462 0
 832 001e 1846     		mov	r0, r3
 833 0020 1037     		adds	r7, r7, #16
 834              		.cfi_def_cfa_offset 8
 835 0022 BD46     		mov	sp, r7
 836              		.cfi_def_cfa_register 13
 837              		@ sp needed
 838 0024 80BD     		pop	{r7, pc}
 839              		.cfi_endproc
 840              	.LFE86:
 841              		.size	MPU_xTaskCatchUpTicks, .-MPU_xTaskCatchUpTicks
 842 0026 00BF     		.section	.text.MPU_uxTaskGetStackHighWaterMark,"ax",%progbits
 843              		.align	2
 844              		.global	MPU_uxTaskGetStackHighWaterMark
 845              		.thumb
 846              		.thumb_func
 847              		.type	MPU_uxTaskGetStackHighWaterMark, %function
 848              	MPU_uxTaskGetStackHighWaterMark:
 849              	.LFB87:
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccQCZNNL.s 			page 24


 463:Source\portable\Common/mpu_wrappers.c **** /*-----------------------------------------------------------*/
 464:Source\portable\Common/mpu_wrappers.c **** 
 465:Source\portable\Common/mpu_wrappers.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )
 466:Source\portable\Common/mpu_wrappers.c **** 	UBaseType_t MPU_uxTaskGetStackHighWaterMark( TaskHandle_t xTask ) /* FREERTOS_SYSTEM_CALL */
 467:Source\portable\Common/mpu_wrappers.c **** 	{
 850              		.loc 1 467 0
 851              		.cfi_startproc
 852              		@ args = 0, pretend = 0, frame = 16
 853              		@ frame_needed = 1, uses_anonymous_args = 0
 854 0000 80B5     		push	{r7, lr}
 855              		.cfi_def_cfa_offset 8
 856              		.cfi_offset 7, -8
 857              		.cfi_offset 14, -4
 858 0002 84B0     		sub	sp, sp, #16
 859              		.cfi_def_cfa_offset 24
 860 0004 00AF     		add	r7, sp, #0
 861              		.cfi_def_cfa_register 7
 862 0006 7860     		str	r0, [r7, #4]
 468:Source\portable\Common/mpu_wrappers.c **** 	UBaseType_t uxReturn;
 469:Source\portable\Common/mpu_wrappers.c **** 	BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 863              		.loc 1 469 0
 864 0008 FFF7FEFF 		bl	xPortRaisePrivilege
 865 000c F860     		str	r0, [r7, #12]
 470:Source\portable\Common/mpu_wrappers.c **** 
 471:Source\portable\Common/mpu_wrappers.c **** 		uxReturn = uxTaskGetStackHighWaterMark( xTask );
 866              		.loc 1 471 0
 867 000e 7868     		ldr	r0, [r7, #4]
 868 0010 FFF7FEFF 		bl	uxTaskGetStackHighWaterMark
 869 0014 B860     		str	r0, [r7, #8]
 472:Source\portable\Common/mpu_wrappers.c **** 		vPortResetPrivilege( xRunningPrivileged );
 870              		.loc 1 472 0
 871 0016 F868     		ldr	r0, [r7, #12]
 872 0018 FFF7FEFF 		bl	vPortResetPrivilege
 473:Source\portable\Common/mpu_wrappers.c **** 		return uxReturn;
 873              		.loc 1 473 0
 874 001c BB68     		ldr	r3, [r7, #8]
 474:Source\portable\Common/mpu_wrappers.c **** 	}
 875              		.loc 1 474 0
 876 001e 1846     		mov	r0, r3
 877 0020 1037     		adds	r7, r7, #16
 878              		.cfi_def_cfa_offset 8
 879 0022 BD46     		mov	sp, r7
 880              		.cfi_def_cfa_register 13
 881              		@ sp needed
 882 0024 80BD     		pop	{r7, pc}
 883              		.cfi_endproc
 884              	.LFE87:
 885              		.size	MPU_uxTaskGetStackHighWaterMark, .-MPU_uxTaskGetStackHighWaterMark
 886 0026 00BF     		.section	.text.MPU_vTaskSetTimeOutState,"ax",%progbits
 887              		.align	2
 888              		.global	MPU_vTaskSetTimeOutState
 889              		.thumb
 890              		.thumb_func
 891              		.type	MPU_vTaskSetTimeOutState, %function
 892              	MPU_vTaskSetTimeOutState:
 893              	.LFB88:
 475:Source\portable\Common/mpu_wrappers.c **** #endif
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccQCZNNL.s 			page 25


 476:Source\portable\Common/mpu_wrappers.c **** /*-----------------------------------------------------------*/
 477:Source\portable\Common/mpu_wrappers.c **** 
 478:Source\portable\Common/mpu_wrappers.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 )
 479:Source\portable\Common/mpu_wrappers.c **** 	configSTACK_DEPTH_TYPE MPU_uxTaskGetStackHighWaterMark2( TaskHandle_t xTask ) /* FREERTOS_SYSTEM_C
 480:Source\portable\Common/mpu_wrappers.c **** 	{
 481:Source\portable\Common/mpu_wrappers.c **** 	configSTACK_DEPTH_TYPE uxReturn;
 482:Source\portable\Common/mpu_wrappers.c **** 	BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 483:Source\portable\Common/mpu_wrappers.c **** 
 484:Source\portable\Common/mpu_wrappers.c **** 		uxReturn = uxTaskGetStackHighWaterMark2( xTask );
 485:Source\portable\Common/mpu_wrappers.c **** 		vPortResetPrivilege( xRunningPrivileged );
 486:Source\portable\Common/mpu_wrappers.c **** 		return uxReturn;
 487:Source\portable\Common/mpu_wrappers.c **** 	}
 488:Source\portable\Common/mpu_wrappers.c **** #endif
 489:Source\portable\Common/mpu_wrappers.c **** /*-----------------------------------------------------------*/
 490:Source\portable\Common/mpu_wrappers.c **** 
 491:Source\portable\Common/mpu_wrappers.c **** #if ( INCLUDE_xTaskGetCurrentTaskHandle == 1 )
 492:Source\portable\Common/mpu_wrappers.c **** 	TaskHandle_t MPU_xTaskGetCurrentTaskHandle( void ) /* FREERTOS_SYSTEM_CALL */
 493:Source\portable\Common/mpu_wrappers.c **** 	{
 494:Source\portable\Common/mpu_wrappers.c **** 	TaskHandle_t xReturn;
 495:Source\portable\Common/mpu_wrappers.c **** 	BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 496:Source\portable\Common/mpu_wrappers.c **** 
 497:Source\portable\Common/mpu_wrappers.c **** 		xReturn = xTaskGetCurrentTaskHandle();
 498:Source\portable\Common/mpu_wrappers.c **** 		vPortResetPrivilege( xRunningPrivileged );
 499:Source\portable\Common/mpu_wrappers.c **** 		return xReturn;
 500:Source\portable\Common/mpu_wrappers.c **** 	}
 501:Source\portable\Common/mpu_wrappers.c **** #endif
 502:Source\portable\Common/mpu_wrappers.c **** /*-----------------------------------------------------------*/
 503:Source\portable\Common/mpu_wrappers.c **** 
 504:Source\portable\Common/mpu_wrappers.c **** #if ( INCLUDE_xTaskGetSchedulerState == 1 )
 505:Source\portable\Common/mpu_wrappers.c **** 	BaseType_t MPU_xTaskGetSchedulerState( void ) /* FREERTOS_SYSTEM_CALL */
 506:Source\portable\Common/mpu_wrappers.c **** 	{
 507:Source\portable\Common/mpu_wrappers.c **** 	BaseType_t xReturn;
 508:Source\portable\Common/mpu_wrappers.c **** 	BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 509:Source\portable\Common/mpu_wrappers.c **** 
 510:Source\portable\Common/mpu_wrappers.c **** 		xReturn = xTaskGetSchedulerState();
 511:Source\portable\Common/mpu_wrappers.c **** 		vPortResetPrivilege( xRunningPrivileged );
 512:Source\portable\Common/mpu_wrappers.c **** 		return xReturn;
 513:Source\portable\Common/mpu_wrappers.c **** 	}
 514:Source\portable\Common/mpu_wrappers.c **** #endif
 515:Source\portable\Common/mpu_wrappers.c **** /*-----------------------------------------------------------*/
 516:Source\portable\Common/mpu_wrappers.c **** 
 517:Source\portable\Common/mpu_wrappers.c **** void MPU_vTaskSetTimeOutState( TimeOut_t * const pxTimeOut ) /* FREERTOS_SYSTEM_CALL */
 518:Source\portable\Common/mpu_wrappers.c **** {
 894              		.loc 1 518 0
 895              		.cfi_startproc
 896              		@ args = 0, pretend = 0, frame = 16
 897              		@ frame_needed = 1, uses_anonymous_args = 0
 898 0000 80B5     		push	{r7, lr}
 899              		.cfi_def_cfa_offset 8
 900              		.cfi_offset 7, -8
 901              		.cfi_offset 14, -4
 902 0002 84B0     		sub	sp, sp, #16
 903              		.cfi_def_cfa_offset 24
 904 0004 00AF     		add	r7, sp, #0
 905              		.cfi_def_cfa_register 7
 906 0006 7860     		str	r0, [r7, #4]
 519:Source\portable\Common/mpu_wrappers.c **** BaseType_t xRunningPrivileged = xPortRaisePrivilege();
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccQCZNNL.s 			page 26


 907              		.loc 1 519 0
 908 0008 FFF7FEFF 		bl	xPortRaisePrivilege
 909 000c F860     		str	r0, [r7, #12]
 520:Source\portable\Common/mpu_wrappers.c **** 
 521:Source\portable\Common/mpu_wrappers.c **** 	vTaskSetTimeOutState( pxTimeOut );
 910              		.loc 1 521 0
 911 000e 7868     		ldr	r0, [r7, #4]
 912 0010 FFF7FEFF 		bl	vTaskSetTimeOutState
 522:Source\portable\Common/mpu_wrappers.c **** 	vPortResetPrivilege( xRunningPrivileged );
 913              		.loc 1 522 0
 914 0014 F868     		ldr	r0, [r7, #12]
 915 0016 FFF7FEFF 		bl	vPortResetPrivilege
 523:Source\portable\Common/mpu_wrappers.c **** }
 916              		.loc 1 523 0
 917 001a 00BF     		nop
 918 001c 1037     		adds	r7, r7, #16
 919              		.cfi_def_cfa_offset 8
 920 001e BD46     		mov	sp, r7
 921              		.cfi_def_cfa_register 13
 922              		@ sp needed
 923 0020 80BD     		pop	{r7, pc}
 924              		.cfi_endproc
 925              	.LFE88:
 926              		.size	MPU_vTaskSetTimeOutState, .-MPU_vTaskSetTimeOutState
 927 0022 00BF     		.section	.text.MPU_xTaskCheckForTimeOut,"ax",%progbits
 928              		.align	2
 929              		.global	MPU_xTaskCheckForTimeOut
 930              		.thumb
 931              		.thumb_func
 932              		.type	MPU_xTaskCheckForTimeOut, %function
 933              	MPU_xTaskCheckForTimeOut:
 934              	.LFB89:
 524:Source\portable\Common/mpu_wrappers.c **** /*-----------------------------------------------------------*/
 525:Source\portable\Common/mpu_wrappers.c **** 
 526:Source\portable\Common/mpu_wrappers.c **** BaseType_t MPU_xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait 
 527:Source\portable\Common/mpu_wrappers.c **** {
 935              		.loc 1 527 0
 936              		.cfi_startproc
 937              		@ args = 0, pretend = 0, frame = 16
 938              		@ frame_needed = 1, uses_anonymous_args = 0
 939 0000 80B5     		push	{r7, lr}
 940              		.cfi_def_cfa_offset 8
 941              		.cfi_offset 7, -8
 942              		.cfi_offset 14, -4
 943 0002 84B0     		sub	sp, sp, #16
 944              		.cfi_def_cfa_offset 24
 945 0004 00AF     		add	r7, sp, #0
 946              		.cfi_def_cfa_register 7
 947 0006 7860     		str	r0, [r7, #4]
 948 0008 3960     		str	r1, [r7]
 528:Source\portable\Common/mpu_wrappers.c **** BaseType_t xReturn;
 529:Source\portable\Common/mpu_wrappers.c **** BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 949              		.loc 1 529 0
 950 000a FFF7FEFF 		bl	xPortRaisePrivilege
 951 000e F860     		str	r0, [r7, #12]
 530:Source\portable\Common/mpu_wrappers.c **** 
 531:Source\portable\Common/mpu_wrappers.c **** 	xReturn = xTaskCheckForTimeOut( pxTimeOut, pxTicksToWait );
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccQCZNNL.s 			page 27


 952              		.loc 1 531 0
 953 0010 3968     		ldr	r1, [r7]
 954 0012 7868     		ldr	r0, [r7, #4]
 955 0014 FFF7FEFF 		bl	xTaskCheckForTimeOut
 956 0018 B860     		str	r0, [r7, #8]
 532:Source\portable\Common/mpu_wrappers.c **** 	vPortResetPrivilege( xRunningPrivileged );
 957              		.loc 1 532 0
 958 001a F868     		ldr	r0, [r7, #12]
 959 001c FFF7FEFF 		bl	vPortResetPrivilege
 533:Source\portable\Common/mpu_wrappers.c **** 	return xReturn;
 960              		.loc 1 533 0
 961 0020 BB68     		ldr	r3, [r7, #8]
 534:Source\portable\Common/mpu_wrappers.c **** }
 962              		.loc 1 534 0
 963 0022 1846     		mov	r0, r3
 964 0024 1037     		adds	r7, r7, #16
 965              		.cfi_def_cfa_offset 8
 966 0026 BD46     		mov	sp, r7
 967              		.cfi_def_cfa_register 13
 968              		@ sp needed
 969 0028 80BD     		pop	{r7, pc}
 970              		.cfi_endproc
 971              	.LFE89:
 972              		.size	MPU_xTaskCheckForTimeOut, .-MPU_xTaskCheckForTimeOut
 973              		.section	.text.MPU_xTaskGenericNotify,"ax",%progbits
 974              		.align	2
 975              		.global	MPU_xTaskGenericNotify
 976              		.thumb
 977              		.thumb_func
 978              		.type	MPU_xTaskGenericNotify, %function
 979              	MPU_xTaskGenericNotify:
 980              	.LFB90:
 535:Source\portable\Common/mpu_wrappers.c **** /*-----------------------------------------------------------*/
 536:Source\portable\Common/mpu_wrappers.c **** 
 537:Source\portable\Common/mpu_wrappers.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
 538:Source\portable\Common/mpu_wrappers.c **** 	BaseType_t MPU_xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAc
 539:Source\portable\Common/mpu_wrappers.c **** 	{
 981              		.loc 1 539 0
 982              		.cfi_startproc
 983              		@ args = 0, pretend = 0, frame = 24
 984              		@ frame_needed = 1, uses_anonymous_args = 0
 985 0000 80B5     		push	{r7, lr}
 986              		.cfi_def_cfa_offset 8
 987              		.cfi_offset 7, -8
 988              		.cfi_offset 14, -4
 989 0002 86B0     		sub	sp, sp, #24
 990              		.cfi_def_cfa_offset 32
 991 0004 00AF     		add	r7, sp, #0
 992              		.cfi_def_cfa_register 7
 993 0006 F860     		str	r0, [r7, #12]
 994 0008 B960     		str	r1, [r7, #8]
 995 000a 3B60     		str	r3, [r7]
 996 000c 1346     		mov	r3, r2
 997 000e FB71     		strb	r3, [r7, #7]
 540:Source\portable\Common/mpu_wrappers.c **** 	BaseType_t xReturn;
 541:Source\portable\Common/mpu_wrappers.c **** 	BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 998              		.loc 1 541 0
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccQCZNNL.s 			page 28


 999 0010 FFF7FEFF 		bl	xPortRaisePrivilege
 1000 0014 7861     		str	r0, [r7, #20]
 542:Source\portable\Common/mpu_wrappers.c **** 
 543:Source\portable\Common/mpu_wrappers.c **** 		xReturn = xTaskGenericNotify( xTaskToNotify, ulValue, eAction, pulPreviousNotificationValue );
 1001              		.loc 1 543 0
 1002 0016 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 1003 0018 3B68     		ldr	r3, [r7]
 1004 001a B968     		ldr	r1, [r7, #8]
 1005 001c F868     		ldr	r0, [r7, #12]
 1006 001e FFF7FEFF 		bl	xTaskGenericNotify
 1007 0022 3861     		str	r0, [r7, #16]
 544:Source\portable\Common/mpu_wrappers.c **** 		vPortResetPrivilege( xRunningPrivileged );
 1008              		.loc 1 544 0
 1009 0024 7869     		ldr	r0, [r7, #20]
 1010 0026 FFF7FEFF 		bl	vPortResetPrivilege
 545:Source\portable\Common/mpu_wrappers.c **** 		return xReturn;
 1011              		.loc 1 545 0
 1012 002a 3B69     		ldr	r3, [r7, #16]
 546:Source\portable\Common/mpu_wrappers.c **** 	}
 1013              		.loc 1 546 0
 1014 002c 1846     		mov	r0, r3
 1015 002e 1837     		adds	r7, r7, #24
 1016              		.cfi_def_cfa_offset 8
 1017 0030 BD46     		mov	sp, r7
 1018              		.cfi_def_cfa_register 13
 1019              		@ sp needed
 1020 0032 80BD     		pop	{r7, pc}
 1021              		.cfi_endproc
 1022              	.LFE90:
 1023              		.size	MPU_xTaskGenericNotify, .-MPU_xTaskGenericNotify
 1024              		.section	.text.MPU_xTaskNotifyWait,"ax",%progbits
 1025              		.align	2
 1026              		.global	MPU_xTaskNotifyWait
 1027              		.thumb
 1028              		.thumb_func
 1029              		.type	MPU_xTaskNotifyWait, %function
 1030              	MPU_xTaskNotifyWait:
 1031              	.LFB91:
 547:Source\portable\Common/mpu_wrappers.c **** #endif
 548:Source\portable\Common/mpu_wrappers.c **** /*-----------------------------------------------------------*/
 549:Source\portable\Common/mpu_wrappers.c **** 
 550:Source\portable\Common/mpu_wrappers.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
 551:Source\portable\Common/mpu_wrappers.c **** 	BaseType_t MPU_xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint3
 552:Source\portable\Common/mpu_wrappers.c **** 	{
 1032              		.loc 1 552 0
 1033              		.cfi_startproc
 1034              		@ args = 0, pretend = 0, frame = 24
 1035              		@ frame_needed = 1, uses_anonymous_args = 0
 1036 0000 80B5     		push	{r7, lr}
 1037              		.cfi_def_cfa_offset 8
 1038              		.cfi_offset 7, -8
 1039              		.cfi_offset 14, -4
 1040 0002 86B0     		sub	sp, sp, #24
 1041              		.cfi_def_cfa_offset 32
 1042 0004 00AF     		add	r7, sp, #0
 1043              		.cfi_def_cfa_register 7
 1044 0006 F860     		str	r0, [r7, #12]
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccQCZNNL.s 			page 29


 1045 0008 B960     		str	r1, [r7, #8]
 1046 000a 7A60     		str	r2, [r7, #4]
 1047 000c 3B60     		str	r3, [r7]
 553:Source\portable\Common/mpu_wrappers.c **** 	BaseType_t xReturn;
 554:Source\portable\Common/mpu_wrappers.c **** 	BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 1048              		.loc 1 554 0
 1049 000e FFF7FEFF 		bl	xPortRaisePrivilege
 1050 0012 7861     		str	r0, [r7, #20]
 555:Source\portable\Common/mpu_wrappers.c **** 
 556:Source\portable\Common/mpu_wrappers.c **** 		xReturn = xTaskNotifyWait( ulBitsToClearOnEntry, ulBitsToClearOnExit, pulNotificationValue, xTick
 1051              		.loc 1 556 0
 1052 0014 3B68     		ldr	r3, [r7]
 1053 0016 7A68     		ldr	r2, [r7, #4]
 1054 0018 B968     		ldr	r1, [r7, #8]
 1055 001a F868     		ldr	r0, [r7, #12]
 1056 001c FFF7FEFF 		bl	xTaskNotifyWait
 1057 0020 3861     		str	r0, [r7, #16]
 557:Source\portable\Common/mpu_wrappers.c **** 		vPortResetPrivilege( xRunningPrivileged );
 1058              		.loc 1 557 0
 1059 0022 7869     		ldr	r0, [r7, #20]
 1060 0024 FFF7FEFF 		bl	vPortResetPrivilege
 558:Source\portable\Common/mpu_wrappers.c **** 		return xReturn;
 1061              		.loc 1 558 0
 1062 0028 3B69     		ldr	r3, [r7, #16]
 559:Source\portable\Common/mpu_wrappers.c **** 	}
 1063              		.loc 1 559 0
 1064 002a 1846     		mov	r0, r3
 1065 002c 1837     		adds	r7, r7, #24
 1066              		.cfi_def_cfa_offset 8
 1067 002e BD46     		mov	sp, r7
 1068              		.cfi_def_cfa_register 13
 1069              		@ sp needed
 1070 0030 80BD     		pop	{r7, pc}
 1071              		.cfi_endproc
 1072              	.LFE91:
 1073              		.size	MPU_xTaskNotifyWait, .-MPU_xTaskNotifyWait
 1074 0032 00BF     		.section	.text.MPU_ulTaskNotifyTake,"ax",%progbits
 1075              		.align	2
 1076              		.global	MPU_ulTaskNotifyTake
 1077              		.thumb
 1078              		.thumb_func
 1079              		.type	MPU_ulTaskNotifyTake, %function
 1080              	MPU_ulTaskNotifyTake:
 1081              	.LFB92:
 560:Source\portable\Common/mpu_wrappers.c **** #endif
 561:Source\portable\Common/mpu_wrappers.c **** /*-----------------------------------------------------------*/
 562:Source\portable\Common/mpu_wrappers.c **** 
 563:Source\portable\Common/mpu_wrappers.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
 564:Source\portable\Common/mpu_wrappers.c **** 	uint32_t MPU_ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait ) /* FREERTOS
 565:Source\portable\Common/mpu_wrappers.c **** 	{
 1082              		.loc 1 565 0
 1083              		.cfi_startproc
 1084              		@ args = 0, pretend = 0, frame = 16
 1085              		@ frame_needed = 1, uses_anonymous_args = 0
 1086 0000 80B5     		push	{r7, lr}
 1087              		.cfi_def_cfa_offset 8
 1088              		.cfi_offset 7, -8
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccQCZNNL.s 			page 30


 1089              		.cfi_offset 14, -4
 1090 0002 84B0     		sub	sp, sp, #16
 1091              		.cfi_def_cfa_offset 24
 1092 0004 00AF     		add	r7, sp, #0
 1093              		.cfi_def_cfa_register 7
 1094 0006 7860     		str	r0, [r7, #4]
 1095 0008 3960     		str	r1, [r7]
 566:Source\portable\Common/mpu_wrappers.c **** 	uint32_t ulReturn;
 567:Source\portable\Common/mpu_wrappers.c **** 	BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 1096              		.loc 1 567 0
 1097 000a FFF7FEFF 		bl	xPortRaisePrivilege
 1098 000e F860     		str	r0, [r7, #12]
 568:Source\portable\Common/mpu_wrappers.c **** 
 569:Source\portable\Common/mpu_wrappers.c **** 		ulReturn = ulTaskNotifyTake( xClearCountOnExit, xTicksToWait );
 1099              		.loc 1 569 0
 1100 0010 3968     		ldr	r1, [r7]
 1101 0012 7868     		ldr	r0, [r7, #4]
 1102 0014 FFF7FEFF 		bl	ulTaskNotifyTake
 1103 0018 B860     		str	r0, [r7, #8]
 570:Source\portable\Common/mpu_wrappers.c **** 		vPortResetPrivilege( xRunningPrivileged );
 1104              		.loc 1 570 0
 1105 001a F868     		ldr	r0, [r7, #12]
 1106 001c FFF7FEFF 		bl	vPortResetPrivilege
 571:Source\portable\Common/mpu_wrappers.c **** 		return ulReturn;
 1107              		.loc 1 571 0
 1108 0020 BB68     		ldr	r3, [r7, #8]
 572:Source\portable\Common/mpu_wrappers.c **** 	}
 1109              		.loc 1 572 0
 1110 0022 1846     		mov	r0, r3
 1111 0024 1037     		adds	r7, r7, #16
 1112              		.cfi_def_cfa_offset 8
 1113 0026 BD46     		mov	sp, r7
 1114              		.cfi_def_cfa_register 13
 1115              		@ sp needed
 1116 0028 80BD     		pop	{r7, pc}
 1117              		.cfi_endproc
 1118              	.LFE92:
 1119              		.size	MPU_ulTaskNotifyTake, .-MPU_ulTaskNotifyTake
 1120              		.section	.text.MPU_xTaskNotifyStateClear,"ax",%progbits
 1121              		.align	2
 1122              		.global	MPU_xTaskNotifyStateClear
 1123              		.thumb
 1124              		.thumb_func
 1125              		.type	MPU_xTaskNotifyStateClear, %function
 1126              	MPU_xTaskNotifyStateClear:
 1127              	.LFB93:
 573:Source\portable\Common/mpu_wrappers.c **** #endif
 574:Source\portable\Common/mpu_wrappers.c **** /*-----------------------------------------------------------*/
 575:Source\portable\Common/mpu_wrappers.c **** 
 576:Source\portable\Common/mpu_wrappers.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
 577:Source\portable\Common/mpu_wrappers.c **** 	BaseType_t MPU_xTaskNotifyStateClear( TaskHandle_t xTask ) /* FREERTOS_SYSTEM_CALL */
 578:Source\portable\Common/mpu_wrappers.c **** 	{
 1128              		.loc 1 578 0
 1129              		.cfi_startproc
 1130              		@ args = 0, pretend = 0, frame = 16
 1131              		@ frame_needed = 1, uses_anonymous_args = 0
 1132 0000 80B5     		push	{r7, lr}
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccQCZNNL.s 			page 31


 1133              		.cfi_def_cfa_offset 8
 1134              		.cfi_offset 7, -8
 1135              		.cfi_offset 14, -4
 1136 0002 84B0     		sub	sp, sp, #16
 1137              		.cfi_def_cfa_offset 24
 1138 0004 00AF     		add	r7, sp, #0
 1139              		.cfi_def_cfa_register 7
 1140 0006 7860     		str	r0, [r7, #4]
 579:Source\portable\Common/mpu_wrappers.c **** 	BaseType_t xReturn;
 580:Source\portable\Common/mpu_wrappers.c **** 	BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 1141              		.loc 1 580 0
 1142 0008 FFF7FEFF 		bl	xPortRaisePrivilege
 1143 000c F860     		str	r0, [r7, #12]
 581:Source\portable\Common/mpu_wrappers.c **** 
 582:Source\portable\Common/mpu_wrappers.c **** 		xReturn = xTaskNotifyStateClear( xTask );
 1144              		.loc 1 582 0
 1145 000e 7868     		ldr	r0, [r7, #4]
 1146 0010 FFF7FEFF 		bl	xTaskNotifyStateClear
 1147 0014 B860     		str	r0, [r7, #8]
 583:Source\portable\Common/mpu_wrappers.c **** 		vPortResetPrivilege( xRunningPrivileged );
 1148              		.loc 1 583 0
 1149 0016 F868     		ldr	r0, [r7, #12]
 1150 0018 FFF7FEFF 		bl	vPortResetPrivilege
 584:Source\portable\Common/mpu_wrappers.c **** 		return xReturn;
 1151              		.loc 1 584 0
 1152 001c BB68     		ldr	r3, [r7, #8]
 585:Source\portable\Common/mpu_wrappers.c **** 	}
 1153              		.loc 1 585 0
 1154 001e 1846     		mov	r0, r3
 1155 0020 1037     		adds	r7, r7, #16
 1156              		.cfi_def_cfa_offset 8
 1157 0022 BD46     		mov	sp, r7
 1158              		.cfi_def_cfa_register 13
 1159              		@ sp needed
 1160 0024 80BD     		pop	{r7, pc}
 1161              		.cfi_endproc
 1162              	.LFE93:
 1163              		.size	MPU_xTaskNotifyStateClear, .-MPU_xTaskNotifyStateClear
 1164 0026 00BF     		.section	.text.MPU_ulTaskNotifyValueClear,"ax",%progbits
 1165              		.align	2
 1166              		.global	MPU_ulTaskNotifyValueClear
 1167              		.thumb
 1168              		.thumb_func
 1169              		.type	MPU_ulTaskNotifyValueClear, %function
 1170              	MPU_ulTaskNotifyValueClear:
 1171              	.LFB94:
 586:Source\portable\Common/mpu_wrappers.c **** #endif
 587:Source\portable\Common/mpu_wrappers.c **** /*-----------------------------------------------------------*/
 588:Source\portable\Common/mpu_wrappers.c **** 
 589:Source\portable\Common/mpu_wrappers.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
 590:Source\portable\Common/mpu_wrappers.c **** 	uint32_t MPU_ulTaskNotifyValueClear( TaskHandle_t xTask, uint32_t ulBitsToClear ) /* FREERTOS_SYST
 591:Source\portable\Common/mpu_wrappers.c **** 	{
 1172              		.loc 1 591 0
 1173              		.cfi_startproc
 1174              		@ args = 0, pretend = 0, frame = 16
 1175              		@ frame_needed = 1, uses_anonymous_args = 0
 1176 0000 80B5     		push	{r7, lr}
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccQCZNNL.s 			page 32


 1177              		.cfi_def_cfa_offset 8
 1178              		.cfi_offset 7, -8
 1179              		.cfi_offset 14, -4
 1180 0002 84B0     		sub	sp, sp, #16
 1181              		.cfi_def_cfa_offset 24
 1182 0004 00AF     		add	r7, sp, #0
 1183              		.cfi_def_cfa_register 7
 1184 0006 7860     		str	r0, [r7, #4]
 1185 0008 3960     		str	r1, [r7]
 592:Source\portable\Common/mpu_wrappers.c **** 	uint32_t ulReturn;
 593:Source\portable\Common/mpu_wrappers.c **** 	BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 1186              		.loc 1 593 0
 1187 000a FFF7FEFF 		bl	xPortRaisePrivilege
 1188 000e F860     		str	r0, [r7, #12]
 594:Source\portable\Common/mpu_wrappers.c **** 
 595:Source\portable\Common/mpu_wrappers.c **** 		ulReturn = ulTaskNotifyValueClear( xTask, ulBitsToClear );
 1189              		.loc 1 595 0
 1190 0010 3968     		ldr	r1, [r7]
 1191 0012 7868     		ldr	r0, [r7, #4]
 1192 0014 FFF7FEFF 		bl	ulTaskNotifyValueClear
 1193 0018 B860     		str	r0, [r7, #8]
 596:Source\portable\Common/mpu_wrappers.c **** 		vPortResetPrivilege( xRunningPrivileged );
 1194              		.loc 1 596 0
 1195 001a F868     		ldr	r0, [r7, #12]
 1196 001c FFF7FEFF 		bl	vPortResetPrivilege
 597:Source\portable\Common/mpu_wrappers.c **** 		return ulReturn;
 1197              		.loc 1 597 0
 1198 0020 BB68     		ldr	r3, [r7, #8]
 598:Source\portable\Common/mpu_wrappers.c **** 	}
 1199              		.loc 1 598 0
 1200 0022 1846     		mov	r0, r3
 1201 0024 1037     		adds	r7, r7, #16
 1202              		.cfi_def_cfa_offset 8
 1203 0026 BD46     		mov	sp, r7
 1204              		.cfi_def_cfa_register 13
 1205              		@ sp needed
 1206 0028 80BD     		pop	{r7, pc}
 1207              		.cfi_endproc
 1208              	.LFE94:
 1209              		.size	MPU_ulTaskNotifyValueClear, .-MPU_ulTaskNotifyValueClear
 1210              		.section	.text.MPU_xQueueGenericCreate,"ax",%progbits
 1211              		.align	2
 1212              		.global	MPU_xQueueGenericCreate
 1213              		.thumb
 1214              		.thumb_func
 1215              		.type	MPU_xQueueGenericCreate, %function
 1216              	MPU_xQueueGenericCreate:
 1217              	.LFB95:
 599:Source\portable\Common/mpu_wrappers.c **** #endif
 600:Source\portable\Common/mpu_wrappers.c **** /*-----------------------------------------------------------*/
 601:Source\portable\Common/mpu_wrappers.c **** 
 602:Source\portable\Common/mpu_wrappers.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 603:Source\portable\Common/mpu_wrappers.c **** 	QueueHandle_t MPU_xQueueGenericCreate( UBaseType_t uxQueueLength, UBaseType_t uxItemSize, uint8_t 
 604:Source\portable\Common/mpu_wrappers.c **** 	{
 1218              		.loc 1 604 0
 1219              		.cfi_startproc
 1220              		@ args = 0, pretend = 0, frame = 24
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccQCZNNL.s 			page 33


 1221              		@ frame_needed = 1, uses_anonymous_args = 0
 1222 0000 80B5     		push	{r7, lr}
 1223              		.cfi_def_cfa_offset 8
 1224              		.cfi_offset 7, -8
 1225              		.cfi_offset 14, -4
 1226 0002 86B0     		sub	sp, sp, #24
 1227              		.cfi_def_cfa_offset 32
 1228 0004 00AF     		add	r7, sp, #0
 1229              		.cfi_def_cfa_register 7
 1230 0006 F860     		str	r0, [r7, #12]
 1231 0008 B960     		str	r1, [r7, #8]
 1232 000a 1346     		mov	r3, r2
 1233 000c FB71     		strb	r3, [r7, #7]
 605:Source\portable\Common/mpu_wrappers.c **** 	QueueHandle_t xReturn;
 606:Source\portable\Common/mpu_wrappers.c **** 	BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 1234              		.loc 1 606 0
 1235 000e FFF7FEFF 		bl	xPortRaisePrivilege
 1236 0012 7861     		str	r0, [r7, #20]
 607:Source\portable\Common/mpu_wrappers.c **** 
 608:Source\portable\Common/mpu_wrappers.c **** 		xReturn = xQueueGenericCreate( uxQueueLength, uxItemSize, ucQueueType );
 1237              		.loc 1 608 0
 1238 0014 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1239 0016 1A46     		mov	r2, r3
 1240 0018 B968     		ldr	r1, [r7, #8]
 1241 001a F868     		ldr	r0, [r7, #12]
 1242 001c FFF7FEFF 		bl	xQueueGenericCreate
 1243 0020 3861     		str	r0, [r7, #16]
 609:Source\portable\Common/mpu_wrappers.c **** 		vPortResetPrivilege( xRunningPrivileged );
 1244              		.loc 1 609 0
 1245 0022 7869     		ldr	r0, [r7, #20]
 1246 0024 FFF7FEFF 		bl	vPortResetPrivilege
 610:Source\portable\Common/mpu_wrappers.c **** 		return xReturn;
 1247              		.loc 1 610 0
 1248 0028 3B69     		ldr	r3, [r7, #16]
 611:Source\portable\Common/mpu_wrappers.c **** 	}
 1249              		.loc 1 611 0
 1250 002a 1846     		mov	r0, r3
 1251 002c 1837     		adds	r7, r7, #24
 1252              		.cfi_def_cfa_offset 8
 1253 002e BD46     		mov	sp, r7
 1254              		.cfi_def_cfa_register 13
 1255              		@ sp needed
 1256 0030 80BD     		pop	{r7, pc}
 1257              		.cfi_endproc
 1258              	.LFE95:
 1259              		.size	MPU_xQueueGenericCreate, .-MPU_xQueueGenericCreate
 1260 0032 00BF     		.section	.text.MPU_xQueueGenericReset,"ax",%progbits
 1261              		.align	2
 1262              		.global	MPU_xQueueGenericReset
 1263              		.thumb
 1264              		.thumb_func
 1265              		.type	MPU_xQueueGenericReset, %function
 1266              	MPU_xQueueGenericReset:
 1267              	.LFB96:
 612:Source\portable\Common/mpu_wrappers.c **** #endif
 613:Source\portable\Common/mpu_wrappers.c **** /*-----------------------------------------------------------*/
 614:Source\portable\Common/mpu_wrappers.c **** 
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccQCZNNL.s 			page 34


 615:Source\portable\Common/mpu_wrappers.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 616:Source\portable\Common/mpu_wrappers.c **** 	QueueHandle_t MPU_xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t ux
 617:Source\portable\Common/mpu_wrappers.c **** 	{
 618:Source\portable\Common/mpu_wrappers.c **** 	QueueHandle_t xReturn;
 619:Source\portable\Common/mpu_wrappers.c **** 	BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 620:Source\portable\Common/mpu_wrappers.c **** 
 621:Source\portable\Common/mpu_wrappers.c **** 		xReturn = xQueueGenericCreateStatic( uxQueueLength, uxItemSize, pucQueueStorage, pxStaticQueue, u
 622:Source\portable\Common/mpu_wrappers.c **** 		vPortResetPrivilege( xRunningPrivileged );
 623:Source\portable\Common/mpu_wrappers.c **** 		return xReturn;
 624:Source\portable\Common/mpu_wrappers.c **** 	}
 625:Source\portable\Common/mpu_wrappers.c **** #endif
 626:Source\portable\Common/mpu_wrappers.c **** /*-----------------------------------------------------------*/
 627:Source\portable\Common/mpu_wrappers.c **** 
 628:Source\portable\Common/mpu_wrappers.c **** BaseType_t MPU_xQueueGenericReset( QueueHandle_t pxQueue, BaseType_t xNewQueue ) /* FREERTOS_SYSTEM
 629:Source\portable\Common/mpu_wrappers.c **** {
 1268              		.loc 1 629 0
 1269              		.cfi_startproc
 1270              		@ args = 0, pretend = 0, frame = 16
 1271              		@ frame_needed = 1, uses_anonymous_args = 0
 1272 0000 80B5     		push	{r7, lr}
 1273              		.cfi_def_cfa_offset 8
 1274              		.cfi_offset 7, -8
 1275              		.cfi_offset 14, -4
 1276 0002 84B0     		sub	sp, sp, #16
 1277              		.cfi_def_cfa_offset 24
 1278 0004 00AF     		add	r7, sp, #0
 1279              		.cfi_def_cfa_register 7
 1280 0006 7860     		str	r0, [r7, #4]
 1281 0008 3960     		str	r1, [r7]
 630:Source\portable\Common/mpu_wrappers.c **** BaseType_t xReturn;
 631:Source\portable\Common/mpu_wrappers.c **** BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 1282              		.loc 1 631 0
 1283 000a FFF7FEFF 		bl	xPortRaisePrivilege
 1284 000e F860     		str	r0, [r7, #12]
 632:Source\portable\Common/mpu_wrappers.c **** 
 633:Source\portable\Common/mpu_wrappers.c **** 	xReturn = xQueueGenericReset( pxQueue, xNewQueue );
 1285              		.loc 1 633 0
 1286 0010 3968     		ldr	r1, [r7]
 1287 0012 7868     		ldr	r0, [r7, #4]
 1288 0014 FFF7FEFF 		bl	xQueueGenericReset
 1289 0018 B860     		str	r0, [r7, #8]
 634:Source\portable\Common/mpu_wrappers.c **** 	vPortResetPrivilege( xRunningPrivileged );
 1290              		.loc 1 634 0
 1291 001a F868     		ldr	r0, [r7, #12]
 1292 001c FFF7FEFF 		bl	vPortResetPrivilege
 635:Source\portable\Common/mpu_wrappers.c **** 	return xReturn;
 1293              		.loc 1 635 0
 1294 0020 BB68     		ldr	r3, [r7, #8]
 636:Source\portable\Common/mpu_wrappers.c **** }
 1295              		.loc 1 636 0
 1296 0022 1846     		mov	r0, r3
 1297 0024 1037     		adds	r7, r7, #16
 1298              		.cfi_def_cfa_offset 8
 1299 0026 BD46     		mov	sp, r7
 1300              		.cfi_def_cfa_register 13
 1301              		@ sp needed
 1302 0028 80BD     		pop	{r7, pc}
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccQCZNNL.s 			page 35


 1303              		.cfi_endproc
 1304              	.LFE96:
 1305              		.size	MPU_xQueueGenericReset, .-MPU_xQueueGenericReset
 1306              		.section	.text.MPU_xQueueGenericSend,"ax",%progbits
 1307              		.align	2
 1308              		.global	MPU_xQueueGenericSend
 1309              		.thumb
 1310              		.thumb_func
 1311              		.type	MPU_xQueueGenericSend, %function
 1312              	MPU_xQueueGenericSend:
 1313              	.LFB97:
 637:Source\portable\Common/mpu_wrappers.c **** /*-----------------------------------------------------------*/
 638:Source\portable\Common/mpu_wrappers.c **** 
 639:Source\portable\Common/mpu_wrappers.c **** BaseType_t MPU_xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_
 640:Source\portable\Common/mpu_wrappers.c **** {
 1314              		.loc 1 640 0
 1315              		.cfi_startproc
 1316              		@ args = 0, pretend = 0, frame = 24
 1317              		@ frame_needed = 1, uses_anonymous_args = 0
 1318 0000 80B5     		push	{r7, lr}
 1319              		.cfi_def_cfa_offset 8
 1320              		.cfi_offset 7, -8
 1321              		.cfi_offset 14, -4
 1322 0002 86B0     		sub	sp, sp, #24
 1323              		.cfi_def_cfa_offset 32
 1324 0004 00AF     		add	r7, sp, #0
 1325              		.cfi_def_cfa_register 7
 1326 0006 F860     		str	r0, [r7, #12]
 1327 0008 B960     		str	r1, [r7, #8]
 1328 000a 7A60     		str	r2, [r7, #4]
 1329 000c 3B60     		str	r3, [r7]
 641:Source\portable\Common/mpu_wrappers.c **** BaseType_t xReturn;
 642:Source\portable\Common/mpu_wrappers.c **** BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 1330              		.loc 1 642 0
 1331 000e FFF7FEFF 		bl	xPortRaisePrivilege
 1332 0012 7861     		str	r0, [r7, #20]
 643:Source\portable\Common/mpu_wrappers.c **** 
 644:Source\portable\Common/mpu_wrappers.c **** 	xReturn = xQueueGenericSend( xQueue, pvItemToQueue, xTicksToWait, xCopyPosition );
 1333              		.loc 1 644 0
 1334 0014 3B68     		ldr	r3, [r7]
 1335 0016 7A68     		ldr	r2, [r7, #4]
 1336 0018 B968     		ldr	r1, [r7, #8]
 1337 001a F868     		ldr	r0, [r7, #12]
 1338 001c FFF7FEFF 		bl	xQueueGenericSend
 1339 0020 3861     		str	r0, [r7, #16]
 645:Source\portable\Common/mpu_wrappers.c **** 	vPortResetPrivilege( xRunningPrivileged );
 1340              		.loc 1 645 0
 1341 0022 7869     		ldr	r0, [r7, #20]
 1342 0024 FFF7FEFF 		bl	vPortResetPrivilege
 646:Source\portable\Common/mpu_wrappers.c **** 	return xReturn;
 1343              		.loc 1 646 0
 1344 0028 3B69     		ldr	r3, [r7, #16]
 647:Source\portable\Common/mpu_wrappers.c **** }
 1345              		.loc 1 647 0
 1346 002a 1846     		mov	r0, r3
 1347 002c 1837     		adds	r7, r7, #24
 1348              		.cfi_def_cfa_offset 8
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccQCZNNL.s 			page 36


 1349 002e BD46     		mov	sp, r7
 1350              		.cfi_def_cfa_register 13
 1351              		@ sp needed
 1352 0030 80BD     		pop	{r7, pc}
 1353              		.cfi_endproc
 1354              	.LFE97:
 1355              		.size	MPU_xQueueGenericSend, .-MPU_xQueueGenericSend
 1356 0032 00BF     		.section	.text.MPU_uxQueueMessagesWaiting,"ax",%progbits
 1357              		.align	2
 1358              		.global	MPU_uxQueueMessagesWaiting
 1359              		.thumb
 1360              		.thumb_func
 1361              		.type	MPU_uxQueueMessagesWaiting, %function
 1362              	MPU_uxQueueMessagesWaiting:
 1363              	.LFB98:
 648:Source\portable\Common/mpu_wrappers.c **** /*-----------------------------------------------------------*/
 649:Source\portable\Common/mpu_wrappers.c **** 
 650:Source\portable\Common/mpu_wrappers.c **** UBaseType_t MPU_uxQueueMessagesWaiting( const QueueHandle_t pxQueue ) /* FREERTOS_SYSTEM_CALL */
 651:Source\portable\Common/mpu_wrappers.c **** {
 1364              		.loc 1 651 0
 1365              		.cfi_startproc
 1366              		@ args = 0, pretend = 0, frame = 16
 1367              		@ frame_needed = 1, uses_anonymous_args = 0
 1368 0000 80B5     		push	{r7, lr}
 1369              		.cfi_def_cfa_offset 8
 1370              		.cfi_offset 7, -8
 1371              		.cfi_offset 14, -4
 1372 0002 84B0     		sub	sp, sp, #16
 1373              		.cfi_def_cfa_offset 24
 1374 0004 00AF     		add	r7, sp, #0
 1375              		.cfi_def_cfa_register 7
 1376 0006 7860     		str	r0, [r7, #4]
 652:Source\portable\Common/mpu_wrappers.c **** BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 1377              		.loc 1 652 0
 1378 0008 FFF7FEFF 		bl	xPortRaisePrivilege
 1379 000c F860     		str	r0, [r7, #12]
 653:Source\portable\Common/mpu_wrappers.c **** UBaseType_t uxReturn;
 654:Source\portable\Common/mpu_wrappers.c **** 
 655:Source\portable\Common/mpu_wrappers.c **** 	uxReturn = uxQueueMessagesWaiting( pxQueue );
 1380              		.loc 1 655 0
 1381 000e 7868     		ldr	r0, [r7, #4]
 1382 0010 FFF7FEFF 		bl	uxQueueMessagesWaiting
 1383 0014 B860     		str	r0, [r7, #8]
 656:Source\portable\Common/mpu_wrappers.c **** 	vPortResetPrivilege( xRunningPrivileged );
 1384              		.loc 1 656 0
 1385 0016 F868     		ldr	r0, [r7, #12]
 1386 0018 FFF7FEFF 		bl	vPortResetPrivilege
 657:Source\portable\Common/mpu_wrappers.c **** 	return uxReturn;
 1387              		.loc 1 657 0
 1388 001c BB68     		ldr	r3, [r7, #8]
 658:Source\portable\Common/mpu_wrappers.c **** }
 1389              		.loc 1 658 0
 1390 001e 1846     		mov	r0, r3
 1391 0020 1037     		adds	r7, r7, #16
 1392              		.cfi_def_cfa_offset 8
 1393 0022 BD46     		mov	sp, r7
 1394              		.cfi_def_cfa_register 13
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccQCZNNL.s 			page 37


 1395              		@ sp needed
 1396 0024 80BD     		pop	{r7, pc}
 1397              		.cfi_endproc
 1398              	.LFE98:
 1399              		.size	MPU_uxQueueMessagesWaiting, .-MPU_uxQueueMessagesWaiting
 1400 0026 00BF     		.section	.text.MPU_uxQueueSpacesAvailable,"ax",%progbits
 1401              		.align	2
 1402              		.global	MPU_uxQueueSpacesAvailable
 1403              		.thumb
 1404              		.thumb_func
 1405              		.type	MPU_uxQueueSpacesAvailable, %function
 1406              	MPU_uxQueueSpacesAvailable:
 1407              	.LFB99:
 659:Source\portable\Common/mpu_wrappers.c **** /*-----------------------------------------------------------*/
 660:Source\portable\Common/mpu_wrappers.c **** 
 661:Source\portable\Common/mpu_wrappers.c **** UBaseType_t MPU_uxQueueSpacesAvailable( const QueueHandle_t xQueue ) /* FREERTOS_SYSTEM_CALL */
 662:Source\portable\Common/mpu_wrappers.c **** {
 1408              		.loc 1 662 0
 1409              		.cfi_startproc
 1410              		@ args = 0, pretend = 0, frame = 16
 1411              		@ frame_needed = 1, uses_anonymous_args = 0
 1412 0000 80B5     		push	{r7, lr}
 1413              		.cfi_def_cfa_offset 8
 1414              		.cfi_offset 7, -8
 1415              		.cfi_offset 14, -4
 1416 0002 84B0     		sub	sp, sp, #16
 1417              		.cfi_def_cfa_offset 24
 1418 0004 00AF     		add	r7, sp, #0
 1419              		.cfi_def_cfa_register 7
 1420 0006 7860     		str	r0, [r7, #4]
 663:Source\portable\Common/mpu_wrappers.c **** BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 1421              		.loc 1 663 0
 1422 0008 FFF7FEFF 		bl	xPortRaisePrivilege
 1423 000c F860     		str	r0, [r7, #12]
 664:Source\portable\Common/mpu_wrappers.c **** UBaseType_t uxReturn;
 665:Source\portable\Common/mpu_wrappers.c **** 
 666:Source\portable\Common/mpu_wrappers.c **** 	uxReturn = uxQueueSpacesAvailable( xQueue );
 1424              		.loc 1 666 0
 1425 000e 7868     		ldr	r0, [r7, #4]
 1426 0010 FFF7FEFF 		bl	uxQueueSpacesAvailable
 1427 0014 B860     		str	r0, [r7, #8]
 667:Source\portable\Common/mpu_wrappers.c **** 	vPortResetPrivilege( xRunningPrivileged );
 1428              		.loc 1 667 0
 1429 0016 F868     		ldr	r0, [r7, #12]
 1430 0018 FFF7FEFF 		bl	vPortResetPrivilege
 668:Source\portable\Common/mpu_wrappers.c **** 	return uxReturn;
 1431              		.loc 1 668 0
 1432 001c BB68     		ldr	r3, [r7, #8]
 669:Source\portable\Common/mpu_wrappers.c **** }
 1433              		.loc 1 669 0
 1434 001e 1846     		mov	r0, r3
 1435 0020 1037     		adds	r7, r7, #16
 1436              		.cfi_def_cfa_offset 8
 1437 0022 BD46     		mov	sp, r7
 1438              		.cfi_def_cfa_register 13
 1439              		@ sp needed
 1440 0024 80BD     		pop	{r7, pc}
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccQCZNNL.s 			page 38


 1441              		.cfi_endproc
 1442              	.LFE99:
 1443              		.size	MPU_uxQueueSpacesAvailable, .-MPU_uxQueueSpacesAvailable
 1444 0026 00BF     		.section	.text.MPU_xQueueReceive,"ax",%progbits
 1445              		.align	2
 1446              		.global	MPU_xQueueReceive
 1447              		.thumb
 1448              		.thumb_func
 1449              		.type	MPU_xQueueReceive, %function
 1450              	MPU_xQueueReceive:
 1451              	.LFB100:
 670:Source\portable\Common/mpu_wrappers.c **** /*-----------------------------------------------------------*/
 671:Source\portable\Common/mpu_wrappers.c **** 
 672:Source\portable\Common/mpu_wrappers.c **** BaseType_t MPU_xQueueReceive( QueueHandle_t pxQueue, void * const pvBuffer, TickType_t xTicksToWait
 673:Source\portable\Common/mpu_wrappers.c **** {
 1452              		.loc 1 673 0
 1453              		.cfi_startproc
 1454              		@ args = 0, pretend = 0, frame = 24
 1455              		@ frame_needed = 1, uses_anonymous_args = 0
 1456 0000 80B5     		push	{r7, lr}
 1457              		.cfi_def_cfa_offset 8
 1458              		.cfi_offset 7, -8
 1459              		.cfi_offset 14, -4
 1460 0002 86B0     		sub	sp, sp, #24
 1461              		.cfi_def_cfa_offset 32
 1462 0004 00AF     		add	r7, sp, #0
 1463              		.cfi_def_cfa_register 7
 1464 0006 F860     		str	r0, [r7, #12]
 1465 0008 B960     		str	r1, [r7, #8]
 1466 000a 7A60     		str	r2, [r7, #4]
 674:Source\portable\Common/mpu_wrappers.c **** BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 1467              		.loc 1 674 0
 1468 000c FFF7FEFF 		bl	xPortRaisePrivilege
 1469 0010 7861     		str	r0, [r7, #20]
 675:Source\portable\Common/mpu_wrappers.c **** BaseType_t xReturn;
 676:Source\portable\Common/mpu_wrappers.c **** 
 677:Source\portable\Common/mpu_wrappers.c **** 	xReturn = xQueueReceive( pxQueue, pvBuffer, xTicksToWait );
 1470              		.loc 1 677 0
 1471 0012 7A68     		ldr	r2, [r7, #4]
 1472 0014 B968     		ldr	r1, [r7, #8]
 1473 0016 F868     		ldr	r0, [r7, #12]
 1474 0018 FFF7FEFF 		bl	xQueueReceive
 1475 001c 3861     		str	r0, [r7, #16]
 678:Source\portable\Common/mpu_wrappers.c **** 	vPortResetPrivilege( xRunningPrivileged );
 1476              		.loc 1 678 0
 1477 001e 7869     		ldr	r0, [r7, #20]
 1478 0020 FFF7FEFF 		bl	vPortResetPrivilege
 679:Source\portable\Common/mpu_wrappers.c **** 	return xReturn;
 1479              		.loc 1 679 0
 1480 0024 3B69     		ldr	r3, [r7, #16]
 680:Source\portable\Common/mpu_wrappers.c **** }
 1481              		.loc 1 680 0
 1482 0026 1846     		mov	r0, r3
 1483 0028 1837     		adds	r7, r7, #24
 1484              		.cfi_def_cfa_offset 8
 1485 002a BD46     		mov	sp, r7
 1486              		.cfi_def_cfa_register 13
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccQCZNNL.s 			page 39


 1487              		@ sp needed
 1488 002c 80BD     		pop	{r7, pc}
 1489              		.cfi_endproc
 1490              	.LFE100:
 1491              		.size	MPU_xQueueReceive, .-MPU_xQueueReceive
 1492 002e 00BF     		.section	.text.MPU_xQueuePeek,"ax",%progbits
 1493              		.align	2
 1494              		.global	MPU_xQueuePeek
 1495              		.thumb
 1496              		.thumb_func
 1497              		.type	MPU_xQueuePeek, %function
 1498              	MPU_xQueuePeek:
 1499              	.LFB101:
 681:Source\portable\Common/mpu_wrappers.c **** /*-----------------------------------------------------------*/
 682:Source\portable\Common/mpu_wrappers.c **** 
 683:Source\portable\Common/mpu_wrappers.c **** BaseType_t MPU_xQueuePeek( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait ) /
 684:Source\portable\Common/mpu_wrappers.c **** {
 1500              		.loc 1 684 0
 1501              		.cfi_startproc
 1502              		@ args = 0, pretend = 0, frame = 24
 1503              		@ frame_needed = 1, uses_anonymous_args = 0
 1504 0000 80B5     		push	{r7, lr}
 1505              		.cfi_def_cfa_offset 8
 1506              		.cfi_offset 7, -8
 1507              		.cfi_offset 14, -4
 1508 0002 86B0     		sub	sp, sp, #24
 1509              		.cfi_def_cfa_offset 32
 1510 0004 00AF     		add	r7, sp, #0
 1511              		.cfi_def_cfa_register 7
 1512 0006 F860     		str	r0, [r7, #12]
 1513 0008 B960     		str	r1, [r7, #8]
 1514 000a 7A60     		str	r2, [r7, #4]
 685:Source\portable\Common/mpu_wrappers.c **** BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 1515              		.loc 1 685 0
 1516 000c FFF7FEFF 		bl	xPortRaisePrivilege
 1517 0010 7861     		str	r0, [r7, #20]
 686:Source\portable\Common/mpu_wrappers.c **** BaseType_t xReturn;
 687:Source\portable\Common/mpu_wrappers.c **** 
 688:Source\portable\Common/mpu_wrappers.c **** 	xReturn = xQueuePeek( xQueue, pvBuffer, xTicksToWait );
 1518              		.loc 1 688 0
 1519 0012 7A68     		ldr	r2, [r7, #4]
 1520 0014 B968     		ldr	r1, [r7, #8]
 1521 0016 F868     		ldr	r0, [r7, #12]
 1522 0018 FFF7FEFF 		bl	xQueuePeek
 1523 001c 3861     		str	r0, [r7, #16]
 689:Source\portable\Common/mpu_wrappers.c **** 	vPortResetPrivilege( xRunningPrivileged );
 1524              		.loc 1 689 0
 1525 001e 7869     		ldr	r0, [r7, #20]
 1526 0020 FFF7FEFF 		bl	vPortResetPrivilege
 690:Source\portable\Common/mpu_wrappers.c **** 	return xReturn;
 1527              		.loc 1 690 0
 1528 0024 3B69     		ldr	r3, [r7, #16]
 691:Source\portable\Common/mpu_wrappers.c **** }
 1529              		.loc 1 691 0
 1530 0026 1846     		mov	r0, r3
 1531 0028 1837     		adds	r7, r7, #24
 1532              		.cfi_def_cfa_offset 8
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccQCZNNL.s 			page 40


 1533 002a BD46     		mov	sp, r7
 1534              		.cfi_def_cfa_register 13
 1535              		@ sp needed
 1536 002c 80BD     		pop	{r7, pc}
 1537              		.cfi_endproc
 1538              	.LFE101:
 1539              		.size	MPU_xQueuePeek, .-MPU_xQueuePeek
 1540 002e 00BF     		.section	.text.MPU_xQueueSemaphoreTake,"ax",%progbits
 1541              		.align	2
 1542              		.global	MPU_xQueueSemaphoreTake
 1543              		.thumb
 1544              		.thumb_func
 1545              		.type	MPU_xQueueSemaphoreTake, %function
 1546              	MPU_xQueueSemaphoreTake:
 1547              	.LFB102:
 692:Source\portable\Common/mpu_wrappers.c **** /*-----------------------------------------------------------*/
 693:Source\portable\Common/mpu_wrappers.c **** 
 694:Source\portable\Common/mpu_wrappers.c **** BaseType_t MPU_xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait ) /* FREERTOS_SYS
 695:Source\portable\Common/mpu_wrappers.c **** {
 1548              		.loc 1 695 0
 1549              		.cfi_startproc
 1550              		@ args = 0, pretend = 0, frame = 16
 1551              		@ frame_needed = 1, uses_anonymous_args = 0
 1552 0000 80B5     		push	{r7, lr}
 1553              		.cfi_def_cfa_offset 8
 1554              		.cfi_offset 7, -8
 1555              		.cfi_offset 14, -4
 1556 0002 84B0     		sub	sp, sp, #16
 1557              		.cfi_def_cfa_offset 24
 1558 0004 00AF     		add	r7, sp, #0
 1559              		.cfi_def_cfa_register 7
 1560 0006 7860     		str	r0, [r7, #4]
 1561 0008 3960     		str	r1, [r7]
 696:Source\portable\Common/mpu_wrappers.c **** BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 1562              		.loc 1 696 0
 1563 000a FFF7FEFF 		bl	xPortRaisePrivilege
 1564 000e F860     		str	r0, [r7, #12]
 697:Source\portable\Common/mpu_wrappers.c **** BaseType_t xReturn;
 698:Source\portable\Common/mpu_wrappers.c **** 
 699:Source\portable\Common/mpu_wrappers.c **** 	xReturn = xQueueSemaphoreTake( xQueue, xTicksToWait );
 1565              		.loc 1 699 0
 1566 0010 3968     		ldr	r1, [r7]
 1567 0012 7868     		ldr	r0, [r7, #4]
 1568 0014 FFF7FEFF 		bl	xQueueSemaphoreTake
 1569 0018 B860     		str	r0, [r7, #8]
 700:Source\portable\Common/mpu_wrappers.c **** 	vPortResetPrivilege( xRunningPrivileged );
 1570              		.loc 1 700 0
 1571 001a F868     		ldr	r0, [r7, #12]
 1572 001c FFF7FEFF 		bl	vPortResetPrivilege
 701:Source\portable\Common/mpu_wrappers.c **** 	return xReturn;
 1573              		.loc 1 701 0
 1574 0020 BB68     		ldr	r3, [r7, #8]
 702:Source\portable\Common/mpu_wrappers.c **** }
 1575              		.loc 1 702 0
 1576 0022 1846     		mov	r0, r3
 1577 0024 1037     		adds	r7, r7, #16
 1578              		.cfi_def_cfa_offset 8
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccQCZNNL.s 			page 41


 1579 0026 BD46     		mov	sp, r7
 1580              		.cfi_def_cfa_register 13
 1581              		@ sp needed
 1582 0028 80BD     		pop	{r7, pc}
 1583              		.cfi_endproc
 1584              	.LFE102:
 1585              		.size	MPU_xQueueSemaphoreTake, .-MPU_xQueueSemaphoreTake
 1586              		.section	.text.MPU_xQueueCreateMutex,"ax",%progbits
 1587              		.align	2
 1588              		.global	MPU_xQueueCreateMutex
 1589              		.thumb
 1590              		.thumb_func
 1591              		.type	MPU_xQueueCreateMutex, %function
 1592              	MPU_xQueueCreateMutex:
 1593              	.LFB103:
 703:Source\portable\Common/mpu_wrappers.c **** /*-----------------------------------------------------------*/
 704:Source\portable\Common/mpu_wrappers.c **** 
 705:Source\portable\Common/mpu_wrappers.c **** #if ( ( configUSE_MUTEXES == 1 ) && ( INCLUDE_xSemaphoreGetMutexHolder == 1 ) )
 706:Source\portable\Common/mpu_wrappers.c **** 	TaskHandle_t MPU_xQueueGetMutexHolder( QueueHandle_t xSemaphore ) /* FREERTOS_SYSTEM_CALL */
 707:Source\portable\Common/mpu_wrappers.c **** 	{
 708:Source\portable\Common/mpu_wrappers.c **** 	BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 709:Source\portable\Common/mpu_wrappers.c **** 	void * xReturn;
 710:Source\portable\Common/mpu_wrappers.c **** 
 711:Source\portable\Common/mpu_wrappers.c **** 		xReturn = xQueueGetMutexHolder( xSemaphore );
 712:Source\portable\Common/mpu_wrappers.c **** 		vPortResetPrivilege( xRunningPrivileged );
 713:Source\portable\Common/mpu_wrappers.c **** 		return xReturn;
 714:Source\portable\Common/mpu_wrappers.c **** 	}
 715:Source\portable\Common/mpu_wrappers.c **** #endif
 716:Source\portable\Common/mpu_wrappers.c **** /*-----------------------------------------------------------*/
 717:Source\portable\Common/mpu_wrappers.c **** 
 718:Source\portable\Common/mpu_wrappers.c **** #if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 719:Source\portable\Common/mpu_wrappers.c **** 	QueueHandle_t MPU_xQueueCreateMutex( const uint8_t ucQueueType ) /* FREERTOS_SYSTEM_CALL */
 720:Source\portable\Common/mpu_wrappers.c **** 	{
 1594              		.loc 1 720 0
 1595              		.cfi_startproc
 1596              		@ args = 0, pretend = 0, frame = 16
 1597              		@ frame_needed = 1, uses_anonymous_args = 0
 1598 0000 80B5     		push	{r7, lr}
 1599              		.cfi_def_cfa_offset 8
 1600              		.cfi_offset 7, -8
 1601              		.cfi_offset 14, -4
 1602 0002 84B0     		sub	sp, sp, #16
 1603              		.cfi_def_cfa_offset 24
 1604 0004 00AF     		add	r7, sp, #0
 1605              		.cfi_def_cfa_register 7
 1606 0006 0346     		mov	r3, r0
 1607 0008 FB71     		strb	r3, [r7, #7]
 721:Source\portable\Common/mpu_wrappers.c **** 	QueueHandle_t xReturn;
 722:Source\portable\Common/mpu_wrappers.c **** 	BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 1608              		.loc 1 722 0
 1609 000a FFF7FEFF 		bl	xPortRaisePrivilege
 1610 000e F860     		str	r0, [r7, #12]
 723:Source\portable\Common/mpu_wrappers.c **** 
 724:Source\portable\Common/mpu_wrappers.c **** 		xReturn = xQueueCreateMutex( ucQueueType );
 1611              		.loc 1 724 0
 1612 0010 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1613 0012 1846     		mov	r0, r3
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccQCZNNL.s 			page 42


 1614 0014 FFF7FEFF 		bl	xQueueCreateMutex
 1615 0018 B860     		str	r0, [r7, #8]
 725:Source\portable\Common/mpu_wrappers.c **** 		vPortResetPrivilege( xRunningPrivileged );
 1616              		.loc 1 725 0
 1617 001a F868     		ldr	r0, [r7, #12]
 1618 001c FFF7FEFF 		bl	vPortResetPrivilege
 726:Source\portable\Common/mpu_wrappers.c **** 		return xReturn;
 1619              		.loc 1 726 0
 1620 0020 BB68     		ldr	r3, [r7, #8]
 727:Source\portable\Common/mpu_wrappers.c **** 	}
 1621              		.loc 1 727 0
 1622 0022 1846     		mov	r0, r3
 1623 0024 1037     		adds	r7, r7, #16
 1624              		.cfi_def_cfa_offset 8
 1625 0026 BD46     		mov	sp, r7
 1626              		.cfi_def_cfa_register 13
 1627              		@ sp needed
 1628 0028 80BD     		pop	{r7, pc}
 1629              		.cfi_endproc
 1630              	.LFE103:
 1631              		.size	MPU_xQueueCreateMutex, .-MPU_xQueueCreateMutex
 1632 002a 00BF     		.section	.text.MPU_xQueueCreateCountingSemaphore,"ax",%progbits
 1633              		.align	2
 1634              		.global	MPU_xQueueCreateCountingSemaphore
 1635              		.thumb
 1636              		.thumb_func
 1637              		.type	MPU_xQueueCreateCountingSemaphore, %function
 1638              	MPU_xQueueCreateCountingSemaphore:
 1639              	.LFB104:
 728:Source\portable\Common/mpu_wrappers.c **** #endif
 729:Source\portable\Common/mpu_wrappers.c **** /*-----------------------------------------------------------*/
 730:Source\portable\Common/mpu_wrappers.c **** 
 731:Source\portable\Common/mpu_wrappers.c **** #if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 732:Source\portable\Common/mpu_wrappers.c **** 	QueueHandle_t MPU_xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue
 733:Source\portable\Common/mpu_wrappers.c **** 	{
 734:Source\portable\Common/mpu_wrappers.c **** 	QueueHandle_t xReturn;
 735:Source\portable\Common/mpu_wrappers.c **** 	BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 736:Source\portable\Common/mpu_wrappers.c **** 
 737:Source\portable\Common/mpu_wrappers.c **** 		xReturn = xQueueCreateMutexStatic( ucQueueType, pxStaticQueue );
 738:Source\portable\Common/mpu_wrappers.c **** 		vPortResetPrivilege( xRunningPrivileged );
 739:Source\portable\Common/mpu_wrappers.c **** 		return xReturn;
 740:Source\portable\Common/mpu_wrappers.c **** 	}
 741:Source\portable\Common/mpu_wrappers.c **** #endif
 742:Source\portable\Common/mpu_wrappers.c **** /*-----------------------------------------------------------*/
 743:Source\portable\Common/mpu_wrappers.c **** 
 744:Source\portable\Common/mpu_wrappers.c **** #if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 745:Source\portable\Common/mpu_wrappers.c **** 	QueueHandle_t MPU_xQueueCreateCountingSemaphore( UBaseType_t uxCountValue, UBaseType_t uxInitialCo
 746:Source\portable\Common/mpu_wrappers.c **** 	{
 1640              		.loc 1 746 0
 1641              		.cfi_startproc
 1642              		@ args = 0, pretend = 0, frame = 16
 1643              		@ frame_needed = 1, uses_anonymous_args = 0
 1644 0000 80B5     		push	{r7, lr}
 1645              		.cfi_def_cfa_offset 8
 1646              		.cfi_offset 7, -8
 1647              		.cfi_offset 14, -4
 1648 0002 84B0     		sub	sp, sp, #16
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccQCZNNL.s 			page 43


 1649              		.cfi_def_cfa_offset 24
 1650 0004 00AF     		add	r7, sp, #0
 1651              		.cfi_def_cfa_register 7
 1652 0006 7860     		str	r0, [r7, #4]
 1653 0008 3960     		str	r1, [r7]
 747:Source\portable\Common/mpu_wrappers.c **** 	QueueHandle_t xReturn;
 748:Source\portable\Common/mpu_wrappers.c **** 	BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 1654              		.loc 1 748 0
 1655 000a FFF7FEFF 		bl	xPortRaisePrivilege
 1656 000e F860     		str	r0, [r7, #12]
 749:Source\portable\Common/mpu_wrappers.c **** 
 750:Source\portable\Common/mpu_wrappers.c **** 		xReturn = xQueueCreateCountingSemaphore( uxCountValue, uxInitialCount );
 1657              		.loc 1 750 0
 1658 0010 3968     		ldr	r1, [r7]
 1659 0012 7868     		ldr	r0, [r7, #4]
 1660 0014 FFF7FEFF 		bl	xQueueCreateCountingSemaphore
 1661 0018 B860     		str	r0, [r7, #8]
 751:Source\portable\Common/mpu_wrappers.c **** 		vPortResetPrivilege( xRunningPrivileged );
 1662              		.loc 1 751 0
 1663 001a F868     		ldr	r0, [r7, #12]
 1664 001c FFF7FEFF 		bl	vPortResetPrivilege
 752:Source\portable\Common/mpu_wrappers.c **** 		return xReturn;
 1665              		.loc 1 752 0
 1666 0020 BB68     		ldr	r3, [r7, #8]
 753:Source\portable\Common/mpu_wrappers.c **** 	}
 1667              		.loc 1 753 0
 1668 0022 1846     		mov	r0, r3
 1669 0024 1037     		adds	r7, r7, #16
 1670              		.cfi_def_cfa_offset 8
 1671 0026 BD46     		mov	sp, r7
 1672              		.cfi_def_cfa_register 13
 1673              		@ sp needed
 1674 0028 80BD     		pop	{r7, pc}
 1675              		.cfi_endproc
 1676              	.LFE104:
 1677              		.size	MPU_xQueueCreateCountingSemaphore, .-MPU_xQueueCreateCountingSemaphore
 1678              		.section	.text.MPU_xQueueTakeMutexRecursive,"ax",%progbits
 1679              		.align	2
 1680              		.global	MPU_xQueueTakeMutexRecursive
 1681              		.thumb
 1682              		.thumb_func
 1683              		.type	MPU_xQueueTakeMutexRecursive, %function
 1684              	MPU_xQueueTakeMutexRecursive:
 1685              	.LFB105:
 754:Source\portable\Common/mpu_wrappers.c **** #endif
 755:Source\portable\Common/mpu_wrappers.c **** /*-----------------------------------------------------------*/
 756:Source\portable\Common/mpu_wrappers.c **** 
 757:Source\portable\Common/mpu_wrappers.c **** #if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 758:Source\portable\Common/mpu_wrappers.c **** 
 759:Source\portable\Common/mpu_wrappers.c **** 	QueueHandle_t MPU_xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseTy
 760:Source\portable\Common/mpu_wrappers.c **** 	{
 761:Source\portable\Common/mpu_wrappers.c **** 	QueueHandle_t xReturn;
 762:Source\portable\Common/mpu_wrappers.c **** 	BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 763:Source\portable\Common/mpu_wrappers.c **** 
 764:Source\portable\Common/mpu_wrappers.c **** 		xReturn = xQueueCreateCountingSemaphoreStatic( uxMaxCount, uxInitialCount, pxStaticQueue );
 765:Source\portable\Common/mpu_wrappers.c **** 		vPortResetPrivilege( xRunningPrivileged );
 766:Source\portable\Common/mpu_wrappers.c **** 		return xReturn;
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccQCZNNL.s 			page 44


 767:Source\portable\Common/mpu_wrappers.c **** 	}
 768:Source\portable\Common/mpu_wrappers.c **** #endif
 769:Source\portable\Common/mpu_wrappers.c **** /*-----------------------------------------------------------*/
 770:Source\portable\Common/mpu_wrappers.c **** 
 771:Source\portable\Common/mpu_wrappers.c **** #if ( configUSE_RECURSIVE_MUTEXES == 1 )
 772:Source\portable\Common/mpu_wrappers.c **** 	BaseType_t MPU_xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xBlockTime ) /* FREERTOS
 773:Source\portable\Common/mpu_wrappers.c **** 	{
 1686              		.loc 1 773 0
 1687              		.cfi_startproc
 1688              		@ args = 0, pretend = 0, frame = 16
 1689              		@ frame_needed = 1, uses_anonymous_args = 0
 1690 0000 80B5     		push	{r7, lr}
 1691              		.cfi_def_cfa_offset 8
 1692              		.cfi_offset 7, -8
 1693              		.cfi_offset 14, -4
 1694 0002 84B0     		sub	sp, sp, #16
 1695              		.cfi_def_cfa_offset 24
 1696 0004 00AF     		add	r7, sp, #0
 1697              		.cfi_def_cfa_register 7
 1698 0006 7860     		str	r0, [r7, #4]
 1699 0008 3960     		str	r1, [r7]
 774:Source\portable\Common/mpu_wrappers.c **** 	BaseType_t xReturn;
 775:Source\portable\Common/mpu_wrappers.c **** 	BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 1700              		.loc 1 775 0
 1701 000a FFF7FEFF 		bl	xPortRaisePrivilege
 1702 000e F860     		str	r0, [r7, #12]
 776:Source\portable\Common/mpu_wrappers.c **** 
 777:Source\portable\Common/mpu_wrappers.c **** 		xReturn = xQueueTakeMutexRecursive( xMutex, xBlockTime );
 1703              		.loc 1 777 0
 1704 0010 3968     		ldr	r1, [r7]
 1705 0012 7868     		ldr	r0, [r7, #4]
 1706 0014 FFF7FEFF 		bl	xQueueTakeMutexRecursive
 1707 0018 B860     		str	r0, [r7, #8]
 778:Source\portable\Common/mpu_wrappers.c **** 		vPortResetPrivilege( xRunningPrivileged );
 1708              		.loc 1 778 0
 1709 001a F868     		ldr	r0, [r7, #12]
 1710 001c FFF7FEFF 		bl	vPortResetPrivilege
 779:Source\portable\Common/mpu_wrappers.c **** 		return xReturn;
 1711              		.loc 1 779 0
 1712 0020 BB68     		ldr	r3, [r7, #8]
 780:Source\portable\Common/mpu_wrappers.c **** 	}
 1713              		.loc 1 780 0
 1714 0022 1846     		mov	r0, r3
 1715 0024 1037     		adds	r7, r7, #16
 1716              		.cfi_def_cfa_offset 8
 1717 0026 BD46     		mov	sp, r7
 1718              		.cfi_def_cfa_register 13
 1719              		@ sp needed
 1720 0028 80BD     		pop	{r7, pc}
 1721              		.cfi_endproc
 1722              	.LFE105:
 1723              		.size	MPU_xQueueTakeMutexRecursive, .-MPU_xQueueTakeMutexRecursive
 1724              		.section	.text.MPU_xQueueGiveMutexRecursive,"ax",%progbits
 1725              		.align	2
 1726              		.global	MPU_xQueueGiveMutexRecursive
 1727              		.thumb
 1728              		.thumb_func
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccQCZNNL.s 			page 45


 1729              		.type	MPU_xQueueGiveMutexRecursive, %function
 1730              	MPU_xQueueGiveMutexRecursive:
 1731              	.LFB106:
 781:Source\portable\Common/mpu_wrappers.c **** #endif
 782:Source\portable\Common/mpu_wrappers.c **** /*-----------------------------------------------------------*/
 783:Source\portable\Common/mpu_wrappers.c **** 
 784:Source\portable\Common/mpu_wrappers.c **** #if ( configUSE_RECURSIVE_MUTEXES == 1 )
 785:Source\portable\Common/mpu_wrappers.c **** 	BaseType_t MPU_xQueueGiveMutexRecursive( QueueHandle_t xMutex ) /* FREERTOS_SYSTEM_CALL */
 786:Source\portable\Common/mpu_wrappers.c **** 	{
 1732              		.loc 1 786 0
 1733              		.cfi_startproc
 1734              		@ args = 0, pretend = 0, frame = 16
 1735              		@ frame_needed = 1, uses_anonymous_args = 0
 1736 0000 80B5     		push	{r7, lr}
 1737              		.cfi_def_cfa_offset 8
 1738              		.cfi_offset 7, -8
 1739              		.cfi_offset 14, -4
 1740 0002 84B0     		sub	sp, sp, #16
 1741              		.cfi_def_cfa_offset 24
 1742 0004 00AF     		add	r7, sp, #0
 1743              		.cfi_def_cfa_register 7
 1744 0006 7860     		str	r0, [r7, #4]
 787:Source\portable\Common/mpu_wrappers.c **** 	BaseType_t xReturn;
 788:Source\portable\Common/mpu_wrappers.c **** 	BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 1745              		.loc 1 788 0
 1746 0008 FFF7FEFF 		bl	xPortRaisePrivilege
 1747 000c F860     		str	r0, [r7, #12]
 789:Source\portable\Common/mpu_wrappers.c **** 
 790:Source\portable\Common/mpu_wrappers.c **** 		xReturn = xQueueGiveMutexRecursive( xMutex );
 1748              		.loc 1 790 0
 1749 000e 7868     		ldr	r0, [r7, #4]
 1750 0010 FFF7FEFF 		bl	xQueueGiveMutexRecursive
 1751 0014 B860     		str	r0, [r7, #8]
 791:Source\portable\Common/mpu_wrappers.c **** 		vPortResetPrivilege( xRunningPrivileged );
 1752              		.loc 1 791 0
 1753 0016 F868     		ldr	r0, [r7, #12]
 1754 0018 FFF7FEFF 		bl	vPortResetPrivilege
 792:Source\portable\Common/mpu_wrappers.c **** 		return xReturn;
 1755              		.loc 1 792 0
 1756 001c BB68     		ldr	r3, [r7, #8]
 793:Source\portable\Common/mpu_wrappers.c **** 	}
 1757              		.loc 1 793 0
 1758 001e 1846     		mov	r0, r3
 1759 0020 1037     		adds	r7, r7, #16
 1760              		.cfi_def_cfa_offset 8
 1761 0022 BD46     		mov	sp, r7
 1762              		.cfi_def_cfa_register 13
 1763              		@ sp needed
 1764 0024 80BD     		pop	{r7, pc}
 1765              		.cfi_endproc
 1766              	.LFE106:
 1767              		.size	MPU_xQueueGiveMutexRecursive, .-MPU_xQueueGiveMutexRecursive
 1768 0026 00BF     		.section	.text.MPU_vQueueAddToRegistry,"ax",%progbits
 1769              		.align	2
 1770              		.global	MPU_vQueueAddToRegistry
 1771              		.thumb
 1772              		.thumb_func
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccQCZNNL.s 			page 46


 1773              		.type	MPU_vQueueAddToRegistry, %function
 1774              	MPU_vQueueAddToRegistry:
 1775              	.LFB107:
 794:Source\portable\Common/mpu_wrappers.c **** #endif
 795:Source\portable\Common/mpu_wrappers.c **** /*-----------------------------------------------------------*/
 796:Source\portable\Common/mpu_wrappers.c **** 
 797:Source\portable\Common/mpu_wrappers.c **** #if( ( configUSE_QUEUE_SETS == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 798:Source\portable\Common/mpu_wrappers.c **** 	QueueSetHandle_t MPU_xQueueCreateSet( UBaseType_t uxEventQueueLength ) /* FREERTOS_SYSTEM_CALL */
 799:Source\portable\Common/mpu_wrappers.c **** 	{
 800:Source\portable\Common/mpu_wrappers.c **** 	QueueSetHandle_t xReturn;
 801:Source\portable\Common/mpu_wrappers.c **** 	BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 802:Source\portable\Common/mpu_wrappers.c **** 
 803:Source\portable\Common/mpu_wrappers.c **** 		xReturn = xQueueCreateSet( uxEventQueueLength );
 804:Source\portable\Common/mpu_wrappers.c **** 		vPortResetPrivilege( xRunningPrivileged );
 805:Source\portable\Common/mpu_wrappers.c **** 		return xReturn;
 806:Source\portable\Common/mpu_wrappers.c **** 	}
 807:Source\portable\Common/mpu_wrappers.c **** #endif
 808:Source\portable\Common/mpu_wrappers.c **** /*-----------------------------------------------------------*/
 809:Source\portable\Common/mpu_wrappers.c **** 
 810:Source\portable\Common/mpu_wrappers.c **** #if ( configUSE_QUEUE_SETS == 1 )
 811:Source\portable\Common/mpu_wrappers.c **** 	QueueSetMemberHandle_t MPU_xQueueSelectFromSet( QueueSetHandle_t xQueueSet, TickType_t xBlockTimeT
 812:Source\portable\Common/mpu_wrappers.c **** 	{
 813:Source\portable\Common/mpu_wrappers.c **** 	QueueSetMemberHandle_t xReturn;
 814:Source\portable\Common/mpu_wrappers.c **** 	BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 815:Source\portable\Common/mpu_wrappers.c **** 
 816:Source\portable\Common/mpu_wrappers.c **** 		xReturn = xQueueSelectFromSet( xQueueSet, xBlockTimeTicks );
 817:Source\portable\Common/mpu_wrappers.c **** 		vPortResetPrivilege( xRunningPrivileged );
 818:Source\portable\Common/mpu_wrappers.c **** 		return xReturn;
 819:Source\portable\Common/mpu_wrappers.c **** 	}
 820:Source\portable\Common/mpu_wrappers.c **** #endif
 821:Source\portable\Common/mpu_wrappers.c **** /*-----------------------------------------------------------*/
 822:Source\portable\Common/mpu_wrappers.c **** 
 823:Source\portable\Common/mpu_wrappers.c **** #if ( configUSE_QUEUE_SETS == 1 )
 824:Source\portable\Common/mpu_wrappers.c **** 	BaseType_t MPU_xQueueAddToSet( QueueSetMemberHandle_t xQueueOrSemaphore, QueueSetHandle_t xQueueSe
 825:Source\portable\Common/mpu_wrappers.c **** 	{
 826:Source\portable\Common/mpu_wrappers.c **** 	BaseType_t xReturn;
 827:Source\portable\Common/mpu_wrappers.c **** 	BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 828:Source\portable\Common/mpu_wrappers.c **** 
 829:Source\portable\Common/mpu_wrappers.c **** 		xReturn = xQueueAddToSet( xQueueOrSemaphore, xQueueSet );
 830:Source\portable\Common/mpu_wrappers.c **** 		vPortResetPrivilege( xRunningPrivileged );
 831:Source\portable\Common/mpu_wrappers.c **** 		return xReturn;
 832:Source\portable\Common/mpu_wrappers.c **** 	}
 833:Source\portable\Common/mpu_wrappers.c **** #endif
 834:Source\portable\Common/mpu_wrappers.c **** /*-----------------------------------------------------------*/
 835:Source\portable\Common/mpu_wrappers.c **** 
 836:Source\portable\Common/mpu_wrappers.c **** #if ( configUSE_QUEUE_SETS == 1 )
 837:Source\portable\Common/mpu_wrappers.c **** 	BaseType_t MPU_xQueueRemoveFromSet( QueueSetMemberHandle_t xQueueOrSemaphore, QueueSetHandle_t xQu
 838:Source\portable\Common/mpu_wrappers.c **** 	{
 839:Source\portable\Common/mpu_wrappers.c **** 	BaseType_t xReturn;
 840:Source\portable\Common/mpu_wrappers.c **** 	BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 841:Source\portable\Common/mpu_wrappers.c **** 
 842:Source\portable\Common/mpu_wrappers.c **** 		xReturn = xQueueRemoveFromSet( xQueueOrSemaphore, xQueueSet );
 843:Source\portable\Common/mpu_wrappers.c **** 		vPortResetPrivilege( xRunningPrivileged );
 844:Source\portable\Common/mpu_wrappers.c **** 		return xReturn;
 845:Source\portable\Common/mpu_wrappers.c **** 	}
 846:Source\portable\Common/mpu_wrappers.c **** #endif
 847:Source\portable\Common/mpu_wrappers.c **** /*-----------------------------------------------------------*/
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccQCZNNL.s 			page 47


 848:Source\portable\Common/mpu_wrappers.c **** 
 849:Source\portable\Common/mpu_wrappers.c **** #if configQUEUE_REGISTRY_SIZE > 0
 850:Source\portable\Common/mpu_wrappers.c **** 	void MPU_vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcName ) /* FREERTOS_SYSTEM_CALL *
 851:Source\portable\Common/mpu_wrappers.c **** 	{
 1776              		.loc 1 851 0
 1777              		.cfi_startproc
 1778              		@ args = 0, pretend = 0, frame = 16
 1779              		@ frame_needed = 1, uses_anonymous_args = 0
 1780 0000 80B5     		push	{r7, lr}
 1781              		.cfi_def_cfa_offset 8
 1782              		.cfi_offset 7, -8
 1783              		.cfi_offset 14, -4
 1784 0002 84B0     		sub	sp, sp, #16
 1785              		.cfi_def_cfa_offset 24
 1786 0004 00AF     		add	r7, sp, #0
 1787              		.cfi_def_cfa_register 7
 1788 0006 7860     		str	r0, [r7, #4]
 1789 0008 3960     		str	r1, [r7]
 852:Source\portable\Common/mpu_wrappers.c **** 	BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 1790              		.loc 1 852 0
 1791 000a FFF7FEFF 		bl	xPortRaisePrivilege
 1792 000e F860     		str	r0, [r7, #12]
 853:Source\portable\Common/mpu_wrappers.c **** 
 854:Source\portable\Common/mpu_wrappers.c **** 		vQueueAddToRegistry( xQueue, pcName );
 1793              		.loc 1 854 0
 1794 0010 3968     		ldr	r1, [r7]
 1795 0012 7868     		ldr	r0, [r7, #4]
 1796 0014 FFF7FEFF 		bl	vQueueAddToRegistry
 855:Source\portable\Common/mpu_wrappers.c **** 
 856:Source\portable\Common/mpu_wrappers.c **** 		vPortResetPrivilege( xRunningPrivileged );
 1797              		.loc 1 856 0
 1798 0018 F868     		ldr	r0, [r7, #12]
 1799 001a FFF7FEFF 		bl	vPortResetPrivilege
 857:Source\portable\Common/mpu_wrappers.c **** 	}
 1800              		.loc 1 857 0
 1801 001e 00BF     		nop
 1802 0020 1037     		adds	r7, r7, #16
 1803              		.cfi_def_cfa_offset 8
 1804 0022 BD46     		mov	sp, r7
 1805              		.cfi_def_cfa_register 13
 1806              		@ sp needed
 1807 0024 80BD     		pop	{r7, pc}
 1808              		.cfi_endproc
 1809              	.LFE107:
 1810              		.size	MPU_vQueueAddToRegistry, .-MPU_vQueueAddToRegistry
 1811 0026 00BF     		.section	.text.MPU_vQueueUnregisterQueue,"ax",%progbits
 1812              		.align	2
 1813              		.global	MPU_vQueueUnregisterQueue
 1814              		.thumb
 1815              		.thumb_func
 1816              		.type	MPU_vQueueUnregisterQueue, %function
 1817              	MPU_vQueueUnregisterQueue:
 1818              	.LFB108:
 858:Source\portable\Common/mpu_wrappers.c **** #endif
 859:Source\portable\Common/mpu_wrappers.c **** /*-----------------------------------------------------------*/
 860:Source\portable\Common/mpu_wrappers.c **** 
 861:Source\portable\Common/mpu_wrappers.c **** #if configQUEUE_REGISTRY_SIZE > 0
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccQCZNNL.s 			page 48


 862:Source\portable\Common/mpu_wrappers.c **** 	void MPU_vQueueUnregisterQueue( QueueHandle_t xQueue ) /* FREERTOS_SYSTEM_CALL */
 863:Source\portable\Common/mpu_wrappers.c **** 	{
 1819              		.loc 1 863 0
 1820              		.cfi_startproc
 1821              		@ args = 0, pretend = 0, frame = 16
 1822              		@ frame_needed = 1, uses_anonymous_args = 0
 1823 0000 80B5     		push	{r7, lr}
 1824              		.cfi_def_cfa_offset 8
 1825              		.cfi_offset 7, -8
 1826              		.cfi_offset 14, -4
 1827 0002 84B0     		sub	sp, sp, #16
 1828              		.cfi_def_cfa_offset 24
 1829 0004 00AF     		add	r7, sp, #0
 1830              		.cfi_def_cfa_register 7
 1831 0006 7860     		str	r0, [r7, #4]
 864:Source\portable\Common/mpu_wrappers.c **** 	BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 1832              		.loc 1 864 0
 1833 0008 FFF7FEFF 		bl	xPortRaisePrivilege
 1834 000c F860     		str	r0, [r7, #12]
 865:Source\portable\Common/mpu_wrappers.c **** 
 866:Source\portable\Common/mpu_wrappers.c **** 		vQueueUnregisterQueue( xQueue );
 1835              		.loc 1 866 0
 1836 000e 7868     		ldr	r0, [r7, #4]
 1837 0010 FFF7FEFF 		bl	vQueueUnregisterQueue
 867:Source\portable\Common/mpu_wrappers.c **** 
 868:Source\portable\Common/mpu_wrappers.c **** 		vPortResetPrivilege( xRunningPrivileged );
 1838              		.loc 1 868 0
 1839 0014 F868     		ldr	r0, [r7, #12]
 1840 0016 FFF7FEFF 		bl	vPortResetPrivilege
 869:Source\portable\Common/mpu_wrappers.c **** 	}
 1841              		.loc 1 869 0
 1842 001a 00BF     		nop
 1843 001c 1037     		adds	r7, r7, #16
 1844              		.cfi_def_cfa_offset 8
 1845 001e BD46     		mov	sp, r7
 1846              		.cfi_def_cfa_register 13
 1847              		@ sp needed
 1848 0020 80BD     		pop	{r7, pc}
 1849              		.cfi_endproc
 1850              	.LFE108:
 1851              		.size	MPU_vQueueUnregisterQueue, .-MPU_vQueueUnregisterQueue
 1852 0022 00BF     		.section	.text.MPU_pcQueueGetName,"ax",%progbits
 1853              		.align	2
 1854              		.global	MPU_pcQueueGetName
 1855              		.thumb
 1856              		.thumb_func
 1857              		.type	MPU_pcQueueGetName, %function
 1858              	MPU_pcQueueGetName:
 1859              	.LFB109:
 870:Source\portable\Common/mpu_wrappers.c **** #endif
 871:Source\portable\Common/mpu_wrappers.c **** /*-----------------------------------------------------------*/
 872:Source\portable\Common/mpu_wrappers.c **** 
 873:Source\portable\Common/mpu_wrappers.c **** #if configQUEUE_REGISTRY_SIZE > 0
 874:Source\portable\Common/mpu_wrappers.c **** 	const char *MPU_pcQueueGetName( QueueHandle_t xQueue ) /* FREERTOS_SYSTEM_CALL */
 875:Source\portable\Common/mpu_wrappers.c **** 	{
 1860              		.loc 1 875 0
 1861              		.cfi_startproc
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccQCZNNL.s 			page 49


 1862              		@ args = 0, pretend = 0, frame = 16
 1863              		@ frame_needed = 1, uses_anonymous_args = 0
 1864 0000 80B5     		push	{r7, lr}
 1865              		.cfi_def_cfa_offset 8
 1866              		.cfi_offset 7, -8
 1867              		.cfi_offset 14, -4
 1868 0002 84B0     		sub	sp, sp, #16
 1869              		.cfi_def_cfa_offset 24
 1870 0004 00AF     		add	r7, sp, #0
 1871              		.cfi_def_cfa_register 7
 1872 0006 7860     		str	r0, [r7, #4]
 876:Source\portable\Common/mpu_wrappers.c **** 	BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 1873              		.loc 1 876 0
 1874 0008 FFF7FEFF 		bl	xPortRaisePrivilege
 1875 000c F860     		str	r0, [r7, #12]
 877:Source\portable\Common/mpu_wrappers.c **** 	const char *pcReturn;
 878:Source\portable\Common/mpu_wrappers.c **** 
 879:Source\portable\Common/mpu_wrappers.c **** 		pcReturn = pcQueueGetName( xQueue );
 1876              		.loc 1 879 0
 1877 000e 7868     		ldr	r0, [r7, #4]
 1878 0010 FFF7FEFF 		bl	pcQueueGetName
 1879 0014 B860     		str	r0, [r7, #8]
 880:Source\portable\Common/mpu_wrappers.c **** 
 881:Source\portable\Common/mpu_wrappers.c **** 		vPortResetPrivilege( xRunningPrivileged );
 1880              		.loc 1 881 0
 1881 0016 F868     		ldr	r0, [r7, #12]
 1882 0018 FFF7FEFF 		bl	vPortResetPrivilege
 882:Source\portable\Common/mpu_wrappers.c **** 		return pcReturn;
 1883              		.loc 1 882 0
 1884 001c BB68     		ldr	r3, [r7, #8]
 883:Source\portable\Common/mpu_wrappers.c **** 	}
 1885              		.loc 1 883 0
 1886 001e 1846     		mov	r0, r3
 1887 0020 1037     		adds	r7, r7, #16
 1888              		.cfi_def_cfa_offset 8
 1889 0022 BD46     		mov	sp, r7
 1890              		.cfi_def_cfa_register 13
 1891              		@ sp needed
 1892 0024 80BD     		pop	{r7, pc}
 1893              		.cfi_endproc
 1894              	.LFE109:
 1895              		.size	MPU_pcQueueGetName, .-MPU_pcQueueGetName
 1896 0026 00BF     		.section	.text.MPU_vQueueDelete,"ax",%progbits
 1897              		.align	2
 1898              		.global	MPU_vQueueDelete
 1899              		.thumb
 1900              		.thumb_func
 1901              		.type	MPU_vQueueDelete, %function
 1902              	MPU_vQueueDelete:
 1903              	.LFB110:
 884:Source\portable\Common/mpu_wrappers.c **** #endif
 885:Source\portable\Common/mpu_wrappers.c **** /*-----------------------------------------------------------*/
 886:Source\portable\Common/mpu_wrappers.c **** 
 887:Source\portable\Common/mpu_wrappers.c **** void MPU_vQueueDelete( QueueHandle_t xQueue ) /* FREERTOS_SYSTEM_CALL */
 888:Source\portable\Common/mpu_wrappers.c **** {
 1904              		.loc 1 888 0
 1905              		.cfi_startproc
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccQCZNNL.s 			page 50


 1906              		@ args = 0, pretend = 0, frame = 16
 1907              		@ frame_needed = 1, uses_anonymous_args = 0
 1908 0000 80B5     		push	{r7, lr}
 1909              		.cfi_def_cfa_offset 8
 1910              		.cfi_offset 7, -8
 1911              		.cfi_offset 14, -4
 1912 0002 84B0     		sub	sp, sp, #16
 1913              		.cfi_def_cfa_offset 24
 1914 0004 00AF     		add	r7, sp, #0
 1915              		.cfi_def_cfa_register 7
 1916 0006 7860     		str	r0, [r7, #4]
 889:Source\portable\Common/mpu_wrappers.c **** BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 1917              		.loc 1 889 0
 1918 0008 FFF7FEFF 		bl	xPortRaisePrivilege
 1919 000c F860     		str	r0, [r7, #12]
 890:Source\portable\Common/mpu_wrappers.c **** 
 891:Source\portable\Common/mpu_wrappers.c **** 	vQueueDelete( xQueue );
 1920              		.loc 1 891 0
 1921 000e 7868     		ldr	r0, [r7, #4]
 1922 0010 FFF7FEFF 		bl	vQueueDelete
 892:Source\portable\Common/mpu_wrappers.c **** 
 893:Source\portable\Common/mpu_wrappers.c **** 	vPortResetPrivilege( xRunningPrivileged );
 1923              		.loc 1 893 0
 1924 0014 F868     		ldr	r0, [r7, #12]
 1925 0016 FFF7FEFF 		bl	vPortResetPrivilege
 894:Source\portable\Common/mpu_wrappers.c **** }
 1926              		.loc 1 894 0
 1927 001a 00BF     		nop
 1928 001c 1037     		adds	r7, r7, #16
 1929              		.cfi_def_cfa_offset 8
 1930 001e BD46     		mov	sp, r7
 1931              		.cfi_def_cfa_register 13
 1932              		@ sp needed
 1933 0020 80BD     		pop	{r7, pc}
 1934              		.cfi_endproc
 1935              	.LFE110:
 1936              		.size	MPU_vQueueDelete, .-MPU_vQueueDelete
 1937 0022 00BF     		.section	.text.MPU_pvPortMalloc,"ax",%progbits
 1938              		.align	2
 1939              		.global	MPU_pvPortMalloc
 1940              		.thumb
 1941              		.thumb_func
 1942              		.type	MPU_pvPortMalloc, %function
 1943              	MPU_pvPortMalloc:
 1944              	.LFB111:
 895:Source\portable\Common/mpu_wrappers.c **** /*-----------------------------------------------------------*/
 896:Source\portable\Common/mpu_wrappers.c **** 
 897:Source\portable\Common/mpu_wrappers.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 898:Source\portable\Common/mpu_wrappers.c **** 	void *MPU_pvPortMalloc( size_t xSize ) /* FREERTOS_SYSTEM_CALL */
 899:Source\portable\Common/mpu_wrappers.c **** 	{
 1945              		.loc 1 899 0
 1946              		.cfi_startproc
 1947              		@ args = 0, pretend = 0, frame = 16
 1948              		@ frame_needed = 1, uses_anonymous_args = 0
 1949 0000 80B5     		push	{r7, lr}
 1950              		.cfi_def_cfa_offset 8
 1951              		.cfi_offset 7, -8
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccQCZNNL.s 			page 51


 1952              		.cfi_offset 14, -4
 1953 0002 84B0     		sub	sp, sp, #16
 1954              		.cfi_def_cfa_offset 24
 1955 0004 00AF     		add	r7, sp, #0
 1956              		.cfi_def_cfa_register 7
 1957 0006 7860     		str	r0, [r7, #4]
 900:Source\portable\Common/mpu_wrappers.c **** 	void *pvReturn;
 901:Source\portable\Common/mpu_wrappers.c **** 	BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 1958              		.loc 1 901 0
 1959 0008 FFF7FEFF 		bl	xPortRaisePrivilege
 1960 000c F860     		str	r0, [r7, #12]
 902:Source\portable\Common/mpu_wrappers.c **** 
 903:Source\portable\Common/mpu_wrappers.c **** 		pvReturn = pvPortMalloc( xSize );
 1961              		.loc 1 903 0
 1962 000e 7868     		ldr	r0, [r7, #4]
 1963 0010 FFF7FEFF 		bl	pvPortMalloc
 1964 0014 B860     		str	r0, [r7, #8]
 904:Source\portable\Common/mpu_wrappers.c **** 
 905:Source\portable\Common/mpu_wrappers.c **** 		vPortResetPrivilege( xRunningPrivileged );
 1965              		.loc 1 905 0
 1966 0016 F868     		ldr	r0, [r7, #12]
 1967 0018 FFF7FEFF 		bl	vPortResetPrivilege
 906:Source\portable\Common/mpu_wrappers.c **** 
 907:Source\portable\Common/mpu_wrappers.c **** 		return pvReturn;
 1968              		.loc 1 907 0
 1969 001c BB68     		ldr	r3, [r7, #8]
 908:Source\portable\Common/mpu_wrappers.c **** 	}
 1970              		.loc 1 908 0
 1971 001e 1846     		mov	r0, r3
 1972 0020 1037     		adds	r7, r7, #16
 1973              		.cfi_def_cfa_offset 8
 1974 0022 BD46     		mov	sp, r7
 1975              		.cfi_def_cfa_register 13
 1976              		@ sp needed
 1977 0024 80BD     		pop	{r7, pc}
 1978              		.cfi_endproc
 1979              	.LFE111:
 1980              		.size	MPU_pvPortMalloc, .-MPU_pvPortMalloc
 1981 0026 00BF     		.section	.text.MPU_vPortFree,"ax",%progbits
 1982              		.align	2
 1983              		.global	MPU_vPortFree
 1984              		.thumb
 1985              		.thumb_func
 1986              		.type	MPU_vPortFree, %function
 1987              	MPU_vPortFree:
 1988              	.LFB112:
 909:Source\portable\Common/mpu_wrappers.c **** #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 910:Source\portable\Common/mpu_wrappers.c **** /*-----------------------------------------------------------*/
 911:Source\portable\Common/mpu_wrappers.c **** 
 912:Source\portable\Common/mpu_wrappers.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 913:Source\portable\Common/mpu_wrappers.c **** 	void MPU_vPortFree( void *pv ) /* FREERTOS_SYSTEM_CALL */
 914:Source\portable\Common/mpu_wrappers.c **** 	{
 1989              		.loc 1 914 0
 1990              		.cfi_startproc
 1991              		@ args = 0, pretend = 0, frame = 16
 1992              		@ frame_needed = 1, uses_anonymous_args = 0
 1993 0000 80B5     		push	{r7, lr}
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccQCZNNL.s 			page 52


 1994              		.cfi_def_cfa_offset 8
 1995              		.cfi_offset 7, -8
 1996              		.cfi_offset 14, -4
 1997 0002 84B0     		sub	sp, sp, #16
 1998              		.cfi_def_cfa_offset 24
 1999 0004 00AF     		add	r7, sp, #0
 2000              		.cfi_def_cfa_register 7
 2001 0006 7860     		str	r0, [r7, #4]
 915:Source\portable\Common/mpu_wrappers.c **** 	BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 2002              		.loc 1 915 0
 2003 0008 FFF7FEFF 		bl	xPortRaisePrivilege
 2004 000c F860     		str	r0, [r7, #12]
 916:Source\portable\Common/mpu_wrappers.c **** 
 917:Source\portable\Common/mpu_wrappers.c **** 		vPortFree( pv );
 2005              		.loc 1 917 0
 2006 000e 7868     		ldr	r0, [r7, #4]
 2007 0010 FFF7FEFF 		bl	vPortFree
 918:Source\portable\Common/mpu_wrappers.c **** 
 919:Source\portable\Common/mpu_wrappers.c **** 		vPortResetPrivilege( xRunningPrivileged );
 2008              		.loc 1 919 0
 2009 0014 F868     		ldr	r0, [r7, #12]
 2010 0016 FFF7FEFF 		bl	vPortResetPrivilege
 920:Source\portable\Common/mpu_wrappers.c **** 	}
 2011              		.loc 1 920 0
 2012 001a 00BF     		nop
 2013 001c 1037     		adds	r7, r7, #16
 2014              		.cfi_def_cfa_offset 8
 2015 001e BD46     		mov	sp, r7
 2016              		.cfi_def_cfa_register 13
 2017              		@ sp needed
 2018 0020 80BD     		pop	{r7, pc}
 2019              		.cfi_endproc
 2020              	.LFE112:
 2021              		.size	MPU_vPortFree, .-MPU_vPortFree
 2022 0022 00BF     		.section	.text.MPU_vPortInitialiseBlocks,"ax",%progbits
 2023              		.align	2
 2024              		.global	MPU_vPortInitialiseBlocks
 2025              		.thumb
 2026              		.thumb_func
 2027              		.type	MPU_vPortInitialiseBlocks, %function
 2028              	MPU_vPortInitialiseBlocks:
 2029              	.LFB113:
 921:Source\portable\Common/mpu_wrappers.c **** #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 922:Source\portable\Common/mpu_wrappers.c **** /*-----------------------------------------------------------*/
 923:Source\portable\Common/mpu_wrappers.c **** 
 924:Source\portable\Common/mpu_wrappers.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 925:Source\portable\Common/mpu_wrappers.c **** 	void MPU_vPortInitialiseBlocks( void ) /* FREERTOS_SYSTEM_CALL */
 926:Source\portable\Common/mpu_wrappers.c **** 	{
 2030              		.loc 1 926 0
 2031              		.cfi_startproc
 2032              		@ args = 0, pretend = 0, frame = 8
 2033              		@ frame_needed = 1, uses_anonymous_args = 0
 2034 0000 80B5     		push	{r7, lr}
 2035              		.cfi_def_cfa_offset 8
 2036              		.cfi_offset 7, -8
 2037              		.cfi_offset 14, -4
 2038 0002 82B0     		sub	sp, sp, #8
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccQCZNNL.s 			page 53


 2039              		.cfi_def_cfa_offset 16
 2040 0004 00AF     		add	r7, sp, #0
 2041              		.cfi_def_cfa_register 7
 927:Source\portable\Common/mpu_wrappers.c **** 	BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 2042              		.loc 1 927 0
 2043 0006 FFF7FEFF 		bl	xPortRaisePrivilege
 2044 000a 7860     		str	r0, [r7, #4]
 928:Source\portable\Common/mpu_wrappers.c **** 
 929:Source\portable\Common/mpu_wrappers.c **** 		vPortInitialiseBlocks();
 2045              		.loc 1 929 0
 2046 000c FFF7FEFF 		bl	vPortInitialiseBlocks
 930:Source\portable\Common/mpu_wrappers.c **** 
 931:Source\portable\Common/mpu_wrappers.c **** 		vPortResetPrivilege( xRunningPrivileged );
 2047              		.loc 1 931 0
 2048 0010 7868     		ldr	r0, [r7, #4]
 2049 0012 FFF7FEFF 		bl	vPortResetPrivilege
 932:Source\portable\Common/mpu_wrappers.c **** 	}
 2050              		.loc 1 932 0
 2051 0016 00BF     		nop
 2052 0018 0837     		adds	r7, r7, #8
 2053              		.cfi_def_cfa_offset 8
 2054 001a BD46     		mov	sp, r7
 2055              		.cfi_def_cfa_register 13
 2056              		@ sp needed
 2057 001c 80BD     		pop	{r7, pc}
 2058              		.cfi_endproc
 2059              	.LFE113:
 2060              		.size	MPU_vPortInitialiseBlocks, .-MPU_vPortInitialiseBlocks
 2061 001e 00BF     		.section	.text.MPU_xPortGetFreeHeapSize,"ax",%progbits
 2062              		.align	2
 2063              		.global	MPU_xPortGetFreeHeapSize
 2064              		.thumb
 2065              		.thumb_func
 2066              		.type	MPU_xPortGetFreeHeapSize, %function
 2067              	MPU_xPortGetFreeHeapSize:
 2068              	.LFB114:
 933:Source\portable\Common/mpu_wrappers.c **** #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 934:Source\portable\Common/mpu_wrappers.c **** /*-----------------------------------------------------------*/
 935:Source\portable\Common/mpu_wrappers.c **** 
 936:Source\portable\Common/mpu_wrappers.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 937:Source\portable\Common/mpu_wrappers.c **** 	size_t MPU_xPortGetFreeHeapSize( void ) /* FREERTOS_SYSTEM_CALL */
 938:Source\portable\Common/mpu_wrappers.c **** 	{
 2069              		.loc 1 938 0
 2070              		.cfi_startproc
 2071              		@ args = 0, pretend = 0, frame = 8
 2072              		@ frame_needed = 1, uses_anonymous_args = 0
 2073 0000 80B5     		push	{r7, lr}
 2074              		.cfi_def_cfa_offset 8
 2075              		.cfi_offset 7, -8
 2076              		.cfi_offset 14, -4
 2077 0002 82B0     		sub	sp, sp, #8
 2078              		.cfi_def_cfa_offset 16
 2079 0004 00AF     		add	r7, sp, #0
 2080              		.cfi_def_cfa_register 7
 939:Source\portable\Common/mpu_wrappers.c **** 	size_t xReturn;
 940:Source\portable\Common/mpu_wrappers.c **** 	BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 2081              		.loc 1 940 0
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccQCZNNL.s 			page 54


 2082 0006 FFF7FEFF 		bl	xPortRaisePrivilege
 2083 000a 7860     		str	r0, [r7, #4]
 941:Source\portable\Common/mpu_wrappers.c **** 
 942:Source\portable\Common/mpu_wrappers.c **** 		xReturn = xPortGetFreeHeapSize();
 2084              		.loc 1 942 0
 2085 000c FFF7FEFF 		bl	xPortGetFreeHeapSize
 2086 0010 3860     		str	r0, [r7]
 943:Source\portable\Common/mpu_wrappers.c **** 
 944:Source\portable\Common/mpu_wrappers.c **** 		vPortResetPrivilege( xRunningPrivileged );
 2087              		.loc 1 944 0
 2088 0012 7868     		ldr	r0, [r7, #4]
 2089 0014 FFF7FEFF 		bl	vPortResetPrivilege
 945:Source\portable\Common/mpu_wrappers.c **** 
 946:Source\portable\Common/mpu_wrappers.c **** 		return xReturn;
 2090              		.loc 1 946 0
 2091 0018 3B68     		ldr	r3, [r7]
 947:Source\portable\Common/mpu_wrappers.c **** 	}
 2092              		.loc 1 947 0
 2093 001a 1846     		mov	r0, r3
 2094 001c 0837     		adds	r7, r7, #8
 2095              		.cfi_def_cfa_offset 8
 2096 001e BD46     		mov	sp, r7
 2097              		.cfi_def_cfa_register 13
 2098              		@ sp needed
 2099 0020 80BD     		pop	{r7, pc}
 2100              		.cfi_endproc
 2101              	.LFE114:
 2102              		.size	MPU_xPortGetFreeHeapSize, .-MPU_xPortGetFreeHeapSize
 2103 0022 00BF     		.section	.text.MPU_xEventGroupCreate,"ax",%progbits
 2104              		.align	2
 2105              		.global	MPU_xEventGroupCreate
 2106              		.thumb
 2107              		.thumb_func
 2108              		.type	MPU_xEventGroupCreate, %function
 2109              	MPU_xEventGroupCreate:
 2110              	.LFB115:
 948:Source\portable\Common/mpu_wrappers.c **** #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 949:Source\portable\Common/mpu_wrappers.c **** /*-----------------------------------------------------------*/
 950:Source\portable\Common/mpu_wrappers.c **** 
 951:Source\portable\Common/mpu_wrappers.c **** #if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configUSE_TIMERS == 1 ) )
 952:Source\portable\Common/mpu_wrappers.c **** 	TimerHandle_t MPU_xTimerCreate( const char * const pcTimerName, const TickType_t xTimerPeriodInTic
 953:Source\portable\Common/mpu_wrappers.c **** 	{
 954:Source\portable\Common/mpu_wrappers.c **** 	TimerHandle_t xReturn;
 955:Source\portable\Common/mpu_wrappers.c **** 	BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 956:Source\portable\Common/mpu_wrappers.c **** 
 957:Source\portable\Common/mpu_wrappers.c **** 		xReturn = xTimerCreate( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunc
 958:Source\portable\Common/mpu_wrappers.c **** 		vPortResetPrivilege( xRunningPrivileged );
 959:Source\portable\Common/mpu_wrappers.c **** 
 960:Source\portable\Common/mpu_wrappers.c **** 		return xReturn;
 961:Source\portable\Common/mpu_wrappers.c **** 	}
 962:Source\portable\Common/mpu_wrappers.c **** #endif
 963:Source\portable\Common/mpu_wrappers.c **** /*-----------------------------------------------------------*/
 964:Source\portable\Common/mpu_wrappers.c **** 
 965:Source\portable\Common/mpu_wrappers.c **** #if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configUSE_TIMERS == 1 ) )
 966:Source\portable\Common/mpu_wrappers.c **** 	TimerHandle_t MPU_xTimerCreateStatic( const char * const pcTimerName, const TickType_t xTimerPerio
 967:Source\portable\Common/mpu_wrappers.c **** 	{
 968:Source\portable\Common/mpu_wrappers.c **** 	TimerHandle_t xReturn;
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccQCZNNL.s 			page 55


 969:Source\portable\Common/mpu_wrappers.c **** 	BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 970:Source\portable\Common/mpu_wrappers.c **** 
 971:Source\portable\Common/mpu_wrappers.c **** 		xReturn = xTimerCreateStatic( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallba
 972:Source\portable\Common/mpu_wrappers.c **** 		vPortResetPrivilege( xRunningPrivileged );
 973:Source\portable\Common/mpu_wrappers.c **** 
 974:Source\portable\Common/mpu_wrappers.c **** 		return xReturn;
 975:Source\portable\Common/mpu_wrappers.c **** 	}
 976:Source\portable\Common/mpu_wrappers.c **** #endif
 977:Source\portable\Common/mpu_wrappers.c **** /*-----------------------------------------------------------*/
 978:Source\portable\Common/mpu_wrappers.c **** 
 979:Source\portable\Common/mpu_wrappers.c **** #if( configUSE_TIMERS == 1 )
 980:Source\portable\Common/mpu_wrappers.c **** 	void *MPU_pvTimerGetTimerID( const TimerHandle_t xTimer ) /* FREERTOS_SYSTEM_CALL */
 981:Source\portable\Common/mpu_wrappers.c **** 	{
 982:Source\portable\Common/mpu_wrappers.c **** 	void * pvReturn;
 983:Source\portable\Common/mpu_wrappers.c **** 	BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 984:Source\portable\Common/mpu_wrappers.c **** 
 985:Source\portable\Common/mpu_wrappers.c **** 		pvReturn = pvTimerGetTimerID( xTimer );
 986:Source\portable\Common/mpu_wrappers.c **** 		vPortResetPrivilege( xRunningPrivileged );
 987:Source\portable\Common/mpu_wrappers.c **** 
 988:Source\portable\Common/mpu_wrappers.c **** 		return pvReturn;
 989:Source\portable\Common/mpu_wrappers.c **** 	}
 990:Source\portable\Common/mpu_wrappers.c **** #endif
 991:Source\portable\Common/mpu_wrappers.c **** /*-----------------------------------------------------------*/
 992:Source\portable\Common/mpu_wrappers.c **** 
 993:Source\portable\Common/mpu_wrappers.c **** #if( configUSE_TIMERS == 1 )
 994:Source\portable\Common/mpu_wrappers.c **** 	void MPU_vTimerSetTimerID( TimerHandle_t xTimer, void *pvNewID ) /* FREERTOS_SYSTEM_CALL */
 995:Source\portable\Common/mpu_wrappers.c **** 	{
 996:Source\portable\Common/mpu_wrappers.c **** 	BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 997:Source\portable\Common/mpu_wrappers.c **** 
 998:Source\portable\Common/mpu_wrappers.c **** 		vTimerSetTimerID( xTimer, pvNewID );
 999:Source\portable\Common/mpu_wrappers.c **** 		vPortResetPrivilege( xRunningPrivileged );
1000:Source\portable\Common/mpu_wrappers.c **** 	}
1001:Source\portable\Common/mpu_wrappers.c **** #endif
1002:Source\portable\Common/mpu_wrappers.c **** /*-----------------------------------------------------------*/
1003:Source\portable\Common/mpu_wrappers.c **** 
1004:Source\portable\Common/mpu_wrappers.c **** #if( configUSE_TIMERS == 1 )
1005:Source\portable\Common/mpu_wrappers.c **** 	BaseType_t MPU_xTimerIsTimerActive( TimerHandle_t xTimer ) /* FREERTOS_SYSTEM_CALL */
1006:Source\portable\Common/mpu_wrappers.c **** 	{
1007:Source\portable\Common/mpu_wrappers.c **** 	BaseType_t xReturn;
1008:Source\portable\Common/mpu_wrappers.c **** 	BaseType_t xRunningPrivileged = xPortRaisePrivilege();
1009:Source\portable\Common/mpu_wrappers.c **** 
1010:Source\portable\Common/mpu_wrappers.c **** 		xReturn = xTimerIsTimerActive( xTimer );
1011:Source\portable\Common/mpu_wrappers.c **** 		vPortResetPrivilege( xRunningPrivileged );
1012:Source\portable\Common/mpu_wrappers.c **** 
1013:Source\portable\Common/mpu_wrappers.c **** 		return xReturn;
1014:Source\portable\Common/mpu_wrappers.c **** 	}
1015:Source\portable\Common/mpu_wrappers.c **** #endif
1016:Source\portable\Common/mpu_wrappers.c **** /*-----------------------------------------------------------*/
1017:Source\portable\Common/mpu_wrappers.c **** 
1018:Source\portable\Common/mpu_wrappers.c **** #if( configUSE_TIMERS == 1 )
1019:Source\portable\Common/mpu_wrappers.c **** 	TaskHandle_t MPU_xTimerGetTimerDaemonTaskHandle( void ) /* FREERTOS_SYSTEM_CALL */
1020:Source\portable\Common/mpu_wrappers.c **** 	{
1021:Source\portable\Common/mpu_wrappers.c **** 	TaskHandle_t xReturn;
1022:Source\portable\Common/mpu_wrappers.c **** 	BaseType_t xRunningPrivileged = xPortRaisePrivilege();
1023:Source\portable\Common/mpu_wrappers.c **** 
1024:Source\portable\Common/mpu_wrappers.c **** 		xReturn = xTimerGetTimerDaemonTaskHandle();
1025:Source\portable\Common/mpu_wrappers.c **** 		vPortResetPrivilege( xRunningPrivileged );
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccQCZNNL.s 			page 56


1026:Source\portable\Common/mpu_wrappers.c **** 
1027:Source\portable\Common/mpu_wrappers.c **** 		return xReturn;
1028:Source\portable\Common/mpu_wrappers.c **** 	}
1029:Source\portable\Common/mpu_wrappers.c **** #endif
1030:Source\portable\Common/mpu_wrappers.c **** /*-----------------------------------------------------------*/
1031:Source\portable\Common/mpu_wrappers.c **** 
1032:Source\portable\Common/mpu_wrappers.c **** #if( ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )
1033:Source\portable\Common/mpu_wrappers.c **** 	BaseType_t MPU_xTimerPendFunctionCall( PendedFunction_t xFunctionToPend, void *pvParameter1, uint3
1034:Source\portable\Common/mpu_wrappers.c **** 	{
1035:Source\portable\Common/mpu_wrappers.c **** 	BaseType_t xReturn;
1036:Source\portable\Common/mpu_wrappers.c **** 	BaseType_t xRunningPrivileged = xPortRaisePrivilege();
1037:Source\portable\Common/mpu_wrappers.c **** 
1038:Source\portable\Common/mpu_wrappers.c **** 		xReturn = xTimerPendFunctionCall( xFunctionToPend, pvParameter1, ulParameter2, xTicksToWait );
1039:Source\portable\Common/mpu_wrappers.c **** 		vPortResetPrivilege( xRunningPrivileged );
1040:Source\portable\Common/mpu_wrappers.c **** 
1041:Source\portable\Common/mpu_wrappers.c **** 		return xReturn;
1042:Source\portable\Common/mpu_wrappers.c **** 	}
1043:Source\portable\Common/mpu_wrappers.c **** #endif
1044:Source\portable\Common/mpu_wrappers.c **** /*-----------------------------------------------------------*/
1045:Source\portable\Common/mpu_wrappers.c **** 
1046:Source\portable\Common/mpu_wrappers.c **** #if( configUSE_TIMERS == 1 )
1047:Source\portable\Common/mpu_wrappers.c **** 	void MPU_vTimerSetReloadMode( TimerHandle_t xTimer, const UBaseType_t uxAutoReload ) /* FREERTOS_S
1048:Source\portable\Common/mpu_wrappers.c **** 	{
1049:Source\portable\Common/mpu_wrappers.c **** 	BaseType_t xRunningPrivileged = xPortRaisePrivilege();
1050:Source\portable\Common/mpu_wrappers.c **** 
1051:Source\portable\Common/mpu_wrappers.c **** 		vTimerSetReloadMode( xTimer, uxAutoReload );
1052:Source\portable\Common/mpu_wrappers.c **** 		vPortResetPrivilege( xRunningPrivileged );
1053:Source\portable\Common/mpu_wrappers.c **** 	}
1054:Source\portable\Common/mpu_wrappers.c **** #endif
1055:Source\portable\Common/mpu_wrappers.c **** /*-----------------------------------------------------------*/
1056:Source\portable\Common/mpu_wrappers.c **** 
1057:Source\portable\Common/mpu_wrappers.c **** #if( configUSE_TIMERS == 1 )
1058:Source\portable\Common/mpu_wrappers.c **** 	UBaseType_t MPU_uxTimerGetReloadMode( TimerHandle_t xTimer )
1059:Source\portable\Common/mpu_wrappers.c **** 	{
1060:Source\portable\Common/mpu_wrappers.c **** 	BaseType_t xRunningPrivileged = xPortRaisePrivilege();
1061:Source\portable\Common/mpu_wrappers.c **** 	UBaseType_t uxReturn;
1062:Source\portable\Common/mpu_wrappers.c **** 
1063:Source\portable\Common/mpu_wrappers.c **** 		uxReturn = uxTimerGetReloadMode( xTimer );
1064:Source\portable\Common/mpu_wrappers.c **** 		vPortResetPrivilege( xRunningPrivileged );
1065:Source\portable\Common/mpu_wrappers.c **** 		return uxReturn;
1066:Source\portable\Common/mpu_wrappers.c **** 	}
1067:Source\portable\Common/mpu_wrappers.c **** #endif
1068:Source\portable\Common/mpu_wrappers.c **** /*-----------------------------------------------------------*/
1069:Source\portable\Common/mpu_wrappers.c **** 
1070:Source\portable\Common/mpu_wrappers.c **** #if( configUSE_TIMERS == 1 )
1071:Source\portable\Common/mpu_wrappers.c **** 	const char * MPU_pcTimerGetName( TimerHandle_t xTimer ) /* FREERTOS_SYSTEM_CALL */
1072:Source\portable\Common/mpu_wrappers.c **** 	{
1073:Source\portable\Common/mpu_wrappers.c **** 	const char * pcReturn;
1074:Source\portable\Common/mpu_wrappers.c **** 	BaseType_t xRunningPrivileged = xPortRaisePrivilege();
1075:Source\portable\Common/mpu_wrappers.c **** 
1076:Source\portable\Common/mpu_wrappers.c **** 		pcReturn = pcTimerGetName( xTimer );
1077:Source\portable\Common/mpu_wrappers.c **** 		vPortResetPrivilege( xRunningPrivileged );
1078:Source\portable\Common/mpu_wrappers.c **** 
1079:Source\portable\Common/mpu_wrappers.c **** 		return pcReturn;
1080:Source\portable\Common/mpu_wrappers.c **** 	}
1081:Source\portable\Common/mpu_wrappers.c **** #endif
1082:Source\portable\Common/mpu_wrappers.c **** /*-----------------------------------------------------------*/
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccQCZNNL.s 			page 57


1083:Source\portable\Common/mpu_wrappers.c **** 
1084:Source\portable\Common/mpu_wrappers.c **** #if( configUSE_TIMERS == 1 )
1085:Source\portable\Common/mpu_wrappers.c **** 	TickType_t MPU_xTimerGetPeriod( TimerHandle_t xTimer ) /* FREERTOS_SYSTEM_CALL */
1086:Source\portable\Common/mpu_wrappers.c **** 	{
1087:Source\portable\Common/mpu_wrappers.c **** 	TickType_t xReturn;
1088:Source\portable\Common/mpu_wrappers.c **** 	BaseType_t xRunningPrivileged = xPortRaisePrivilege();
1089:Source\portable\Common/mpu_wrappers.c **** 
1090:Source\portable\Common/mpu_wrappers.c **** 		xReturn = xTimerGetPeriod( xTimer );
1091:Source\portable\Common/mpu_wrappers.c **** 		vPortResetPrivilege( xRunningPrivileged );
1092:Source\portable\Common/mpu_wrappers.c **** 
1093:Source\portable\Common/mpu_wrappers.c **** 		return xReturn;
1094:Source\portable\Common/mpu_wrappers.c **** 	}
1095:Source\portable\Common/mpu_wrappers.c **** #endif
1096:Source\portable\Common/mpu_wrappers.c **** /*-----------------------------------------------------------*/
1097:Source\portable\Common/mpu_wrappers.c **** 
1098:Source\portable\Common/mpu_wrappers.c **** #if( configUSE_TIMERS == 1 )
1099:Source\portable\Common/mpu_wrappers.c **** 	TickType_t MPU_xTimerGetExpiryTime( TimerHandle_t xTimer ) /* FREERTOS_SYSTEM_CALL */
1100:Source\portable\Common/mpu_wrappers.c **** 	{
1101:Source\portable\Common/mpu_wrappers.c **** 	TickType_t xReturn;
1102:Source\portable\Common/mpu_wrappers.c **** 	BaseType_t xRunningPrivileged = xPortRaisePrivilege();
1103:Source\portable\Common/mpu_wrappers.c **** 
1104:Source\portable\Common/mpu_wrappers.c **** 		xReturn = xTimerGetExpiryTime( xTimer );
1105:Source\portable\Common/mpu_wrappers.c **** 		vPortResetPrivilege( xRunningPrivileged );
1106:Source\portable\Common/mpu_wrappers.c **** 
1107:Source\portable\Common/mpu_wrappers.c **** 		return xReturn;
1108:Source\portable\Common/mpu_wrappers.c **** 	}
1109:Source\portable\Common/mpu_wrappers.c **** #endif
1110:Source\portable\Common/mpu_wrappers.c **** /*-----------------------------------------------------------*/
1111:Source\portable\Common/mpu_wrappers.c **** 
1112:Source\portable\Common/mpu_wrappers.c **** #if( configUSE_TIMERS == 1 )
1113:Source\portable\Common/mpu_wrappers.c **** 	BaseType_t MPU_xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const Tick
1114:Source\portable\Common/mpu_wrappers.c **** 	{
1115:Source\portable\Common/mpu_wrappers.c **** 	BaseType_t xReturn;
1116:Source\portable\Common/mpu_wrappers.c **** 	BaseType_t xRunningPrivileged = xPortRaisePrivilege();
1117:Source\portable\Common/mpu_wrappers.c **** 
1118:Source\portable\Common/mpu_wrappers.c **** 		xReturn = xTimerGenericCommand( xTimer, xCommandID, xOptionalValue, pxHigherPriorityTaskWoken, xT
1119:Source\portable\Common/mpu_wrappers.c **** 		vPortResetPrivilege( xRunningPrivileged );
1120:Source\portable\Common/mpu_wrappers.c **** 
1121:Source\portable\Common/mpu_wrappers.c **** 		return xReturn;
1122:Source\portable\Common/mpu_wrappers.c **** 	}
1123:Source\portable\Common/mpu_wrappers.c **** #endif
1124:Source\portable\Common/mpu_wrappers.c **** /*-----------------------------------------------------------*/
1125:Source\portable\Common/mpu_wrappers.c **** 
1126:Source\portable\Common/mpu_wrappers.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
1127:Source\portable\Common/mpu_wrappers.c **** 	EventGroupHandle_t MPU_xEventGroupCreate( void ) /* FREERTOS_SYSTEM_CALL */
1128:Source\portable\Common/mpu_wrappers.c **** 	{
 2111              		.loc 1 1128 0
 2112              		.cfi_startproc
 2113              		@ args = 0, pretend = 0, frame = 8
 2114              		@ frame_needed = 1, uses_anonymous_args = 0
 2115 0000 80B5     		push	{r7, lr}
 2116              		.cfi_def_cfa_offset 8
 2117              		.cfi_offset 7, -8
 2118              		.cfi_offset 14, -4
 2119 0002 82B0     		sub	sp, sp, #8
 2120              		.cfi_def_cfa_offset 16
 2121 0004 00AF     		add	r7, sp, #0
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccQCZNNL.s 			page 58


 2122              		.cfi_def_cfa_register 7
1129:Source\portable\Common/mpu_wrappers.c **** 	EventGroupHandle_t xReturn;
1130:Source\portable\Common/mpu_wrappers.c **** 	BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 2123              		.loc 1 1130 0
 2124 0006 FFF7FEFF 		bl	xPortRaisePrivilege
 2125 000a 7860     		str	r0, [r7, #4]
1131:Source\portable\Common/mpu_wrappers.c **** 
1132:Source\portable\Common/mpu_wrappers.c **** 		xReturn = xEventGroupCreate();
 2126              		.loc 1 1132 0
 2127 000c FFF7FEFF 		bl	xEventGroupCreate
 2128 0010 3860     		str	r0, [r7]
1133:Source\portable\Common/mpu_wrappers.c **** 		vPortResetPrivilege( xRunningPrivileged );
 2129              		.loc 1 1133 0
 2130 0012 7868     		ldr	r0, [r7, #4]
 2131 0014 FFF7FEFF 		bl	vPortResetPrivilege
1134:Source\portable\Common/mpu_wrappers.c **** 
1135:Source\portable\Common/mpu_wrappers.c **** 		return xReturn;
 2132              		.loc 1 1135 0
 2133 0018 3B68     		ldr	r3, [r7]
1136:Source\portable\Common/mpu_wrappers.c **** 	}
 2134              		.loc 1 1136 0
 2135 001a 1846     		mov	r0, r3
 2136 001c 0837     		adds	r7, r7, #8
 2137              		.cfi_def_cfa_offset 8
 2138 001e BD46     		mov	sp, r7
 2139              		.cfi_def_cfa_register 13
 2140              		@ sp needed
 2141 0020 80BD     		pop	{r7, pc}
 2142              		.cfi_endproc
 2143              	.LFE115:
 2144              		.size	MPU_xEventGroupCreate, .-MPU_xEventGroupCreate
 2145 0022 00BF     		.section	.text.MPU_xEventGroupWaitBits,"ax",%progbits
 2146              		.align	2
 2147              		.global	MPU_xEventGroupWaitBits
 2148              		.thumb
 2149              		.thumb_func
 2150              		.type	MPU_xEventGroupWaitBits, %function
 2151              	MPU_xEventGroupWaitBits:
 2152              	.LFB116:
1137:Source\portable\Common/mpu_wrappers.c **** #endif
1138:Source\portable\Common/mpu_wrappers.c **** /*-----------------------------------------------------------*/
1139:Source\portable\Common/mpu_wrappers.c **** 
1140:Source\portable\Common/mpu_wrappers.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
1141:Source\portable\Common/mpu_wrappers.c **** 	EventGroupHandle_t MPU_xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer ) /* FREERT
1142:Source\portable\Common/mpu_wrappers.c **** 	{
1143:Source\portable\Common/mpu_wrappers.c **** 	EventGroupHandle_t xReturn;
1144:Source\portable\Common/mpu_wrappers.c **** 	BaseType_t xRunningPrivileged = xPortRaisePrivilege();
1145:Source\portable\Common/mpu_wrappers.c **** 
1146:Source\portable\Common/mpu_wrappers.c **** 		xReturn = xEventGroupCreateStatic( pxEventGroupBuffer );
1147:Source\portable\Common/mpu_wrappers.c **** 		vPortResetPrivilege( xRunningPrivileged );
1148:Source\portable\Common/mpu_wrappers.c **** 
1149:Source\portable\Common/mpu_wrappers.c **** 		return xReturn;
1150:Source\portable\Common/mpu_wrappers.c **** 	}
1151:Source\portable\Common/mpu_wrappers.c **** #endif
1152:Source\portable\Common/mpu_wrappers.c **** /*-----------------------------------------------------------*/
1153:Source\portable\Common/mpu_wrappers.c **** 
1154:Source\portable\Common/mpu_wrappers.c **** EventBits_t MPU_xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWait
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccQCZNNL.s 			page 59


1155:Source\portable\Common/mpu_wrappers.c **** {
 2153              		.loc 1 1155 0
 2154              		.cfi_startproc
 2155              		@ args = 4, pretend = 0, frame = 24
 2156              		@ frame_needed = 1, uses_anonymous_args = 0
 2157 0000 80B5     		push	{r7, lr}
 2158              		.cfi_def_cfa_offset 8
 2159              		.cfi_offset 7, -8
 2160              		.cfi_offset 14, -4
 2161 0002 88B0     		sub	sp, sp, #32
 2162              		.cfi_def_cfa_offset 40
 2163 0004 02AF     		add	r7, sp, #8
 2164              		.cfi_def_cfa 7, 32
 2165 0006 F860     		str	r0, [r7, #12]
 2166 0008 B960     		str	r1, [r7, #8]
 2167 000a 7A60     		str	r2, [r7, #4]
 2168 000c 3B60     		str	r3, [r7]
1156:Source\portable\Common/mpu_wrappers.c **** EventBits_t xReturn;
1157:Source\portable\Common/mpu_wrappers.c **** BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 2169              		.loc 1 1157 0
 2170 000e FFF7FEFF 		bl	xPortRaisePrivilege
 2171 0012 7861     		str	r0, [r7, #20]
1158:Source\portable\Common/mpu_wrappers.c **** 
1159:Source\portable\Common/mpu_wrappers.c **** 	xReturn = xEventGroupWaitBits( xEventGroup, uxBitsToWaitFor, xClearOnExit, xWaitForAllBits, xTicks
 2172              		.loc 1 1159 0
 2173 0014 3B6A     		ldr	r3, [r7, #32]
 2174 0016 0093     		str	r3, [sp]
 2175 0018 3B68     		ldr	r3, [r7]
 2176 001a 7A68     		ldr	r2, [r7, #4]
 2177 001c B968     		ldr	r1, [r7, #8]
 2178 001e F868     		ldr	r0, [r7, #12]
 2179 0020 FFF7FEFF 		bl	xEventGroupWaitBits
 2180 0024 3861     		str	r0, [r7, #16]
1160:Source\portable\Common/mpu_wrappers.c **** 	vPortResetPrivilege( xRunningPrivileged );
 2181              		.loc 1 1160 0
 2182 0026 7869     		ldr	r0, [r7, #20]
 2183 0028 FFF7FEFF 		bl	vPortResetPrivilege
1161:Source\portable\Common/mpu_wrappers.c **** 
1162:Source\portable\Common/mpu_wrappers.c **** 	return xReturn;
 2184              		.loc 1 1162 0
 2185 002c 3B69     		ldr	r3, [r7, #16]
1163:Source\portable\Common/mpu_wrappers.c **** }
 2186              		.loc 1 1163 0
 2187 002e 1846     		mov	r0, r3
 2188 0030 1837     		adds	r7, r7, #24
 2189              		.cfi_def_cfa_offset 8
 2190 0032 BD46     		mov	sp, r7
 2191              		.cfi_def_cfa_register 13
 2192              		@ sp needed
 2193 0034 80BD     		pop	{r7, pc}
 2194              		.cfi_endproc
 2195              	.LFE116:
 2196              		.size	MPU_xEventGroupWaitBits, .-MPU_xEventGroupWaitBits
 2197 0036 00BF     		.section	.text.MPU_xEventGroupClearBits,"ax",%progbits
 2198              		.align	2
 2199              		.global	MPU_xEventGroupClearBits
 2200              		.thumb
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccQCZNNL.s 			page 60


 2201              		.thumb_func
 2202              		.type	MPU_xEventGroupClearBits, %function
 2203              	MPU_xEventGroupClearBits:
 2204              	.LFB117:
1164:Source\portable\Common/mpu_wrappers.c **** /*-----------------------------------------------------------*/
1165:Source\portable\Common/mpu_wrappers.c **** 
1166:Source\portable\Common/mpu_wrappers.c **** EventBits_t MPU_xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToCle
1167:Source\portable\Common/mpu_wrappers.c **** {
 2205              		.loc 1 1167 0
 2206              		.cfi_startproc
 2207              		@ args = 0, pretend = 0, frame = 16
 2208              		@ frame_needed = 1, uses_anonymous_args = 0
 2209 0000 80B5     		push	{r7, lr}
 2210              		.cfi_def_cfa_offset 8
 2211              		.cfi_offset 7, -8
 2212              		.cfi_offset 14, -4
 2213 0002 84B0     		sub	sp, sp, #16
 2214              		.cfi_def_cfa_offset 24
 2215 0004 00AF     		add	r7, sp, #0
 2216              		.cfi_def_cfa_register 7
 2217 0006 7860     		str	r0, [r7, #4]
 2218 0008 3960     		str	r1, [r7]
1168:Source\portable\Common/mpu_wrappers.c **** EventBits_t xReturn;
1169:Source\portable\Common/mpu_wrappers.c **** BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 2219              		.loc 1 1169 0
 2220 000a FFF7FEFF 		bl	xPortRaisePrivilege
 2221 000e F860     		str	r0, [r7, #12]
1170:Source\portable\Common/mpu_wrappers.c **** 
1171:Source\portable\Common/mpu_wrappers.c **** 	xReturn = xEventGroupClearBits( xEventGroup, uxBitsToClear );
 2222              		.loc 1 1171 0
 2223 0010 3968     		ldr	r1, [r7]
 2224 0012 7868     		ldr	r0, [r7, #4]
 2225 0014 FFF7FEFF 		bl	xEventGroupClearBits
 2226 0018 B860     		str	r0, [r7, #8]
1172:Source\portable\Common/mpu_wrappers.c **** 	vPortResetPrivilege( xRunningPrivileged );
 2227              		.loc 1 1172 0
 2228 001a F868     		ldr	r0, [r7, #12]
 2229 001c FFF7FEFF 		bl	vPortResetPrivilege
1173:Source\portable\Common/mpu_wrappers.c **** 
1174:Source\portable\Common/mpu_wrappers.c **** 	return xReturn;
 2230              		.loc 1 1174 0
 2231 0020 BB68     		ldr	r3, [r7, #8]
1175:Source\portable\Common/mpu_wrappers.c **** }
 2232              		.loc 1 1175 0
 2233 0022 1846     		mov	r0, r3
 2234 0024 1037     		adds	r7, r7, #16
 2235              		.cfi_def_cfa_offset 8
 2236 0026 BD46     		mov	sp, r7
 2237              		.cfi_def_cfa_register 13
 2238              		@ sp needed
 2239 0028 80BD     		pop	{r7, pc}
 2240              		.cfi_endproc
 2241              	.LFE117:
 2242              		.size	MPU_xEventGroupClearBits, .-MPU_xEventGroupClearBits
 2243              		.section	.text.MPU_xEventGroupSetBits,"ax",%progbits
 2244              		.align	2
 2245              		.global	MPU_xEventGroupSetBits
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccQCZNNL.s 			page 61


 2246              		.thumb
 2247              		.thumb_func
 2248              		.type	MPU_xEventGroupSetBits, %function
 2249              	MPU_xEventGroupSetBits:
 2250              	.LFB118:
1176:Source\portable\Common/mpu_wrappers.c **** /*-----------------------------------------------------------*/
1177:Source\portable\Common/mpu_wrappers.c **** 
1178:Source\portable\Common/mpu_wrappers.c **** EventBits_t MPU_xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
1179:Source\portable\Common/mpu_wrappers.c **** {
 2251              		.loc 1 1179 0
 2252              		.cfi_startproc
 2253              		@ args = 0, pretend = 0, frame = 16
 2254              		@ frame_needed = 1, uses_anonymous_args = 0
 2255 0000 80B5     		push	{r7, lr}
 2256              		.cfi_def_cfa_offset 8
 2257              		.cfi_offset 7, -8
 2258              		.cfi_offset 14, -4
 2259 0002 84B0     		sub	sp, sp, #16
 2260              		.cfi_def_cfa_offset 24
 2261 0004 00AF     		add	r7, sp, #0
 2262              		.cfi_def_cfa_register 7
 2263 0006 7860     		str	r0, [r7, #4]
 2264 0008 3960     		str	r1, [r7]
1180:Source\portable\Common/mpu_wrappers.c **** EventBits_t xReturn;
1181:Source\portable\Common/mpu_wrappers.c **** BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 2265              		.loc 1 1181 0
 2266 000a FFF7FEFF 		bl	xPortRaisePrivilege
 2267 000e F860     		str	r0, [r7, #12]
1182:Source\portable\Common/mpu_wrappers.c **** 
1183:Source\portable\Common/mpu_wrappers.c **** 	xReturn = xEventGroupSetBits( xEventGroup, uxBitsToSet );
 2268              		.loc 1 1183 0
 2269 0010 3968     		ldr	r1, [r7]
 2270 0012 7868     		ldr	r0, [r7, #4]
 2271 0014 FFF7FEFF 		bl	xEventGroupSetBits
 2272 0018 B860     		str	r0, [r7, #8]
1184:Source\portable\Common/mpu_wrappers.c **** 	vPortResetPrivilege( xRunningPrivileged );
 2273              		.loc 1 1184 0
 2274 001a F868     		ldr	r0, [r7, #12]
 2275 001c FFF7FEFF 		bl	vPortResetPrivilege
1185:Source\portable\Common/mpu_wrappers.c **** 
1186:Source\portable\Common/mpu_wrappers.c **** 	return xReturn;
 2276              		.loc 1 1186 0
 2277 0020 BB68     		ldr	r3, [r7, #8]
1187:Source\portable\Common/mpu_wrappers.c **** }
 2278              		.loc 1 1187 0
 2279 0022 1846     		mov	r0, r3
 2280 0024 1037     		adds	r7, r7, #16
 2281              		.cfi_def_cfa_offset 8
 2282 0026 BD46     		mov	sp, r7
 2283              		.cfi_def_cfa_register 13
 2284              		@ sp needed
 2285 0028 80BD     		pop	{r7, pc}
 2286              		.cfi_endproc
 2287              	.LFE118:
 2288              		.size	MPU_xEventGroupSetBits, .-MPU_xEventGroupSetBits
 2289              		.section	.text.MPU_xEventGroupSync,"ax",%progbits
 2290              		.align	2
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccQCZNNL.s 			page 62


 2291              		.global	MPU_xEventGroupSync
 2292              		.thumb
 2293              		.thumb_func
 2294              		.type	MPU_xEventGroupSync, %function
 2295              	MPU_xEventGroupSync:
 2296              	.LFB119:
1188:Source\portable\Common/mpu_wrappers.c **** /*-----------------------------------------------------------*/
1189:Source\portable\Common/mpu_wrappers.c **** 
1190:Source\portable\Common/mpu_wrappers.c **** EventBits_t MPU_xEventGroupSync( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, con
1191:Source\portable\Common/mpu_wrappers.c **** {
 2297              		.loc 1 1191 0
 2298              		.cfi_startproc
 2299              		@ args = 0, pretend = 0, frame = 24
 2300              		@ frame_needed = 1, uses_anonymous_args = 0
 2301 0000 80B5     		push	{r7, lr}
 2302              		.cfi_def_cfa_offset 8
 2303              		.cfi_offset 7, -8
 2304              		.cfi_offset 14, -4
 2305 0002 86B0     		sub	sp, sp, #24
 2306              		.cfi_def_cfa_offset 32
 2307 0004 00AF     		add	r7, sp, #0
 2308              		.cfi_def_cfa_register 7
 2309 0006 F860     		str	r0, [r7, #12]
 2310 0008 B960     		str	r1, [r7, #8]
 2311 000a 7A60     		str	r2, [r7, #4]
 2312 000c 3B60     		str	r3, [r7]
1192:Source\portable\Common/mpu_wrappers.c **** EventBits_t xReturn;
1193:Source\portable\Common/mpu_wrappers.c **** BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 2313              		.loc 1 1193 0
 2314 000e FFF7FEFF 		bl	xPortRaisePrivilege
 2315 0012 7861     		str	r0, [r7, #20]
1194:Source\portable\Common/mpu_wrappers.c **** 
1195:Source\portable\Common/mpu_wrappers.c **** 	xReturn = xEventGroupSync( xEventGroup, uxBitsToSet, uxBitsToWaitFor, xTicksToWait );
 2316              		.loc 1 1195 0
 2317 0014 3B68     		ldr	r3, [r7]
 2318 0016 7A68     		ldr	r2, [r7, #4]
 2319 0018 B968     		ldr	r1, [r7, #8]
 2320 001a F868     		ldr	r0, [r7, #12]
 2321 001c FFF7FEFF 		bl	xEventGroupSync
 2322 0020 3861     		str	r0, [r7, #16]
1196:Source\portable\Common/mpu_wrappers.c **** 	vPortResetPrivilege( xRunningPrivileged );
 2323              		.loc 1 1196 0
 2324 0022 7869     		ldr	r0, [r7, #20]
 2325 0024 FFF7FEFF 		bl	vPortResetPrivilege
1197:Source\portable\Common/mpu_wrappers.c **** 
1198:Source\portable\Common/mpu_wrappers.c **** 	return xReturn;
 2326              		.loc 1 1198 0
 2327 0028 3B69     		ldr	r3, [r7, #16]
1199:Source\portable\Common/mpu_wrappers.c **** }
 2328              		.loc 1 1199 0
 2329 002a 1846     		mov	r0, r3
 2330 002c 1837     		adds	r7, r7, #24
 2331              		.cfi_def_cfa_offset 8
 2332 002e BD46     		mov	sp, r7
 2333              		.cfi_def_cfa_register 13
 2334              		@ sp needed
 2335 0030 80BD     		pop	{r7, pc}
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccQCZNNL.s 			page 63


 2336              		.cfi_endproc
 2337              	.LFE119:
 2338              		.size	MPU_xEventGroupSync, .-MPU_xEventGroupSync
 2339 0032 00BF     		.section	.text.MPU_vEventGroupDelete,"ax",%progbits
 2340              		.align	2
 2341              		.global	MPU_vEventGroupDelete
 2342              		.thumb
 2343              		.thumb_func
 2344              		.type	MPU_vEventGroupDelete, %function
 2345              	MPU_vEventGroupDelete:
 2346              	.LFB120:
1200:Source\portable\Common/mpu_wrappers.c **** /*-----------------------------------------------------------*/
1201:Source\portable\Common/mpu_wrappers.c **** 
1202:Source\portable\Common/mpu_wrappers.c **** void MPU_vEventGroupDelete( EventGroupHandle_t xEventGroup ) /* FREERTOS_SYSTEM_CALL */
1203:Source\portable\Common/mpu_wrappers.c **** {
 2347              		.loc 1 1203 0
 2348              		.cfi_startproc
 2349              		@ args = 0, pretend = 0, frame = 16
 2350              		@ frame_needed = 1, uses_anonymous_args = 0
 2351 0000 80B5     		push	{r7, lr}
 2352              		.cfi_def_cfa_offset 8
 2353              		.cfi_offset 7, -8
 2354              		.cfi_offset 14, -4
 2355 0002 84B0     		sub	sp, sp, #16
 2356              		.cfi_def_cfa_offset 24
 2357 0004 00AF     		add	r7, sp, #0
 2358              		.cfi_def_cfa_register 7
 2359 0006 7860     		str	r0, [r7, #4]
1204:Source\portable\Common/mpu_wrappers.c **** BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 2360              		.loc 1 1204 0
 2361 0008 FFF7FEFF 		bl	xPortRaisePrivilege
 2362 000c F860     		str	r0, [r7, #12]
1205:Source\portable\Common/mpu_wrappers.c **** 
1206:Source\portable\Common/mpu_wrappers.c **** 	vEventGroupDelete( xEventGroup );
 2363              		.loc 1 1206 0
 2364 000e 7868     		ldr	r0, [r7, #4]
 2365 0010 FFF7FEFF 		bl	vEventGroupDelete
1207:Source\portable\Common/mpu_wrappers.c **** 	vPortResetPrivilege( xRunningPrivileged );
 2366              		.loc 1 1207 0
 2367 0014 F868     		ldr	r0, [r7, #12]
 2368 0016 FFF7FEFF 		bl	vPortResetPrivilege
1208:Source\portable\Common/mpu_wrappers.c **** }
 2369              		.loc 1 1208 0
 2370 001a 00BF     		nop
 2371 001c 1037     		adds	r7, r7, #16
 2372              		.cfi_def_cfa_offset 8
 2373 001e BD46     		mov	sp, r7
 2374              		.cfi_def_cfa_register 13
 2375              		@ sp needed
 2376 0020 80BD     		pop	{r7, pc}
 2377              		.cfi_endproc
 2378              	.LFE120:
 2379              		.size	MPU_vEventGroupDelete, .-MPU_vEventGroupDelete
 2380 0022 00BF     		.section	.text.MPU_xStreamBufferSend,"ax",%progbits
 2381              		.align	2
 2382              		.global	MPU_xStreamBufferSend
 2383              		.thumb
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccQCZNNL.s 			page 64


 2384              		.thumb_func
 2385              		.type	MPU_xStreamBufferSend, %function
 2386              	MPU_xStreamBufferSend:
 2387              	.LFB121:
1209:Source\portable\Common/mpu_wrappers.c **** /*-----------------------------------------------------------*/
1210:Source\portable\Common/mpu_wrappers.c **** 
1211:Source\portable\Common/mpu_wrappers.c **** size_t MPU_xStreamBufferSend( StreamBufferHandle_t xStreamBuffer, const void *pvTxData, size_t xDat
1212:Source\portable\Common/mpu_wrappers.c **** {
 2388              		.loc 1 1212 0
 2389              		.cfi_startproc
 2390              		@ args = 0, pretend = 0, frame = 24
 2391              		@ frame_needed = 1, uses_anonymous_args = 0
 2392 0000 80B5     		push	{r7, lr}
 2393              		.cfi_def_cfa_offset 8
 2394              		.cfi_offset 7, -8
 2395              		.cfi_offset 14, -4
 2396 0002 86B0     		sub	sp, sp, #24
 2397              		.cfi_def_cfa_offset 32
 2398 0004 00AF     		add	r7, sp, #0
 2399              		.cfi_def_cfa_register 7
 2400 0006 F860     		str	r0, [r7, #12]
 2401 0008 B960     		str	r1, [r7, #8]
 2402 000a 7A60     		str	r2, [r7, #4]
 2403 000c 3B60     		str	r3, [r7]
1213:Source\portable\Common/mpu_wrappers.c **** size_t xReturn;
1214:Source\portable\Common/mpu_wrappers.c **** BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 2404              		.loc 1 1214 0
 2405 000e FFF7FEFF 		bl	xPortRaisePrivilege
 2406 0012 7861     		str	r0, [r7, #20]
1215:Source\portable\Common/mpu_wrappers.c **** 
1216:Source\portable\Common/mpu_wrappers.c **** 	xReturn = xStreamBufferSend( xStreamBuffer, pvTxData, xDataLengthBytes, xTicksToWait );
 2407              		.loc 1 1216 0
 2408 0014 3B68     		ldr	r3, [r7]
 2409 0016 7A68     		ldr	r2, [r7, #4]
 2410 0018 B968     		ldr	r1, [r7, #8]
 2411 001a F868     		ldr	r0, [r7, #12]
 2412 001c FFF7FEFF 		bl	xStreamBufferSend
 2413 0020 3861     		str	r0, [r7, #16]
1217:Source\portable\Common/mpu_wrappers.c **** 	vPortResetPrivilege( xRunningPrivileged );
 2414              		.loc 1 1217 0
 2415 0022 7869     		ldr	r0, [r7, #20]
 2416 0024 FFF7FEFF 		bl	vPortResetPrivilege
1218:Source\portable\Common/mpu_wrappers.c **** 
1219:Source\portable\Common/mpu_wrappers.c **** 	return xReturn;
 2417              		.loc 1 1219 0
 2418 0028 3B69     		ldr	r3, [r7, #16]
1220:Source\portable\Common/mpu_wrappers.c **** }
 2419              		.loc 1 1220 0
 2420 002a 1846     		mov	r0, r3
 2421 002c 1837     		adds	r7, r7, #24
 2422              		.cfi_def_cfa_offset 8
 2423 002e BD46     		mov	sp, r7
 2424              		.cfi_def_cfa_register 13
 2425              		@ sp needed
 2426 0030 80BD     		pop	{r7, pc}
 2427              		.cfi_endproc
 2428              	.LFE121:
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccQCZNNL.s 			page 65


 2429              		.size	MPU_xStreamBufferSend, .-MPU_xStreamBufferSend
 2430 0032 00BF     		.section	.text.MPU_xStreamBufferNextMessageLengthBytes,"ax",%progbits
 2431              		.align	2
 2432              		.global	MPU_xStreamBufferNextMessageLengthBytes
 2433              		.thumb
 2434              		.thumb_func
 2435              		.type	MPU_xStreamBufferNextMessageLengthBytes, %function
 2436              	MPU_xStreamBufferNextMessageLengthBytes:
 2437              	.LFB122:
1221:Source\portable\Common/mpu_wrappers.c **** /*-----------------------------------------------------------*/
1222:Source\portable\Common/mpu_wrappers.c **** 
1223:Source\portable\Common/mpu_wrappers.c **** size_t MPU_xStreamBufferNextMessageLengthBytes( StreamBufferHandle_t xStreamBuffer ) /* FREERTOS_SY
1224:Source\portable\Common/mpu_wrappers.c **** {
 2438              		.loc 1 1224 0
 2439              		.cfi_startproc
 2440              		@ args = 0, pretend = 0, frame = 16
 2441              		@ frame_needed = 1, uses_anonymous_args = 0
 2442 0000 80B5     		push	{r7, lr}
 2443              		.cfi_def_cfa_offset 8
 2444              		.cfi_offset 7, -8
 2445              		.cfi_offset 14, -4
 2446 0002 84B0     		sub	sp, sp, #16
 2447              		.cfi_def_cfa_offset 24
 2448 0004 00AF     		add	r7, sp, #0
 2449              		.cfi_def_cfa_register 7
 2450 0006 7860     		str	r0, [r7, #4]
1225:Source\portable\Common/mpu_wrappers.c **** size_t xReturn;
1226:Source\portable\Common/mpu_wrappers.c **** BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 2451              		.loc 1 1226 0
 2452 0008 FFF7FEFF 		bl	xPortRaisePrivilege
 2453 000c F860     		str	r0, [r7, #12]
1227:Source\portable\Common/mpu_wrappers.c **** 
1228:Source\portable\Common/mpu_wrappers.c **** 	xReturn = xStreamBufferNextMessageLengthBytes( xStreamBuffer );
 2454              		.loc 1 1228 0
 2455 000e 7868     		ldr	r0, [r7, #4]
 2456 0010 FFF7FEFF 		bl	xStreamBufferNextMessageLengthBytes
 2457 0014 B860     		str	r0, [r7, #8]
1229:Source\portable\Common/mpu_wrappers.c **** 	vPortResetPrivilege( xRunningPrivileged );
 2458              		.loc 1 1229 0
 2459 0016 F868     		ldr	r0, [r7, #12]
 2460 0018 FFF7FEFF 		bl	vPortResetPrivilege
1230:Source\portable\Common/mpu_wrappers.c **** 
1231:Source\portable\Common/mpu_wrappers.c **** 	return xReturn;
 2461              		.loc 1 1231 0
 2462 001c BB68     		ldr	r3, [r7, #8]
1232:Source\portable\Common/mpu_wrappers.c **** }
 2463              		.loc 1 1232 0
 2464 001e 1846     		mov	r0, r3
 2465 0020 1037     		adds	r7, r7, #16
 2466              		.cfi_def_cfa_offset 8
 2467 0022 BD46     		mov	sp, r7
 2468              		.cfi_def_cfa_register 13
 2469              		@ sp needed
 2470 0024 80BD     		pop	{r7, pc}
 2471              		.cfi_endproc
 2472              	.LFE122:
 2473              		.size	MPU_xStreamBufferNextMessageLengthBytes, .-MPU_xStreamBufferNextMessageLengthBytes
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccQCZNNL.s 			page 66


 2474 0026 00BF     		.section	.text.MPU_xStreamBufferReceive,"ax",%progbits
 2475              		.align	2
 2476              		.global	MPU_xStreamBufferReceive
 2477              		.thumb
 2478              		.thumb_func
 2479              		.type	MPU_xStreamBufferReceive, %function
 2480              	MPU_xStreamBufferReceive:
 2481              	.LFB123:
1233:Source\portable\Common/mpu_wrappers.c **** /*-----------------------------------------------------------*/
1234:Source\portable\Common/mpu_wrappers.c **** 
1235:Source\portable\Common/mpu_wrappers.c **** size_t MPU_xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer, void *pvRxData, size_t xBuffer
1236:Source\portable\Common/mpu_wrappers.c **** {
 2482              		.loc 1 1236 0
 2483              		.cfi_startproc
 2484              		@ args = 0, pretend = 0, frame = 24
 2485              		@ frame_needed = 1, uses_anonymous_args = 0
 2486 0000 80B5     		push	{r7, lr}
 2487              		.cfi_def_cfa_offset 8
 2488              		.cfi_offset 7, -8
 2489              		.cfi_offset 14, -4
 2490 0002 86B0     		sub	sp, sp, #24
 2491              		.cfi_def_cfa_offset 32
 2492 0004 00AF     		add	r7, sp, #0
 2493              		.cfi_def_cfa_register 7
 2494 0006 F860     		str	r0, [r7, #12]
 2495 0008 B960     		str	r1, [r7, #8]
 2496 000a 7A60     		str	r2, [r7, #4]
 2497 000c 3B60     		str	r3, [r7]
1237:Source\portable\Common/mpu_wrappers.c **** size_t xReturn;
1238:Source\portable\Common/mpu_wrappers.c **** BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 2498              		.loc 1 1238 0
 2499 000e FFF7FEFF 		bl	xPortRaisePrivilege
 2500 0012 7861     		str	r0, [r7, #20]
1239:Source\portable\Common/mpu_wrappers.c **** 
1240:Source\portable\Common/mpu_wrappers.c **** 	xReturn = xStreamBufferReceive( xStreamBuffer, pvRxData, xBufferLengthBytes, xTicksToWait );
 2501              		.loc 1 1240 0
 2502 0014 3B68     		ldr	r3, [r7]
 2503 0016 7A68     		ldr	r2, [r7, #4]
 2504 0018 B968     		ldr	r1, [r7, #8]
 2505 001a F868     		ldr	r0, [r7, #12]
 2506 001c FFF7FEFF 		bl	xStreamBufferReceive
 2507 0020 3861     		str	r0, [r7, #16]
1241:Source\portable\Common/mpu_wrappers.c **** 	vPortResetPrivilege( xRunningPrivileged );
 2508              		.loc 1 1241 0
 2509 0022 7869     		ldr	r0, [r7, #20]
 2510 0024 FFF7FEFF 		bl	vPortResetPrivilege
1242:Source\portable\Common/mpu_wrappers.c **** 
1243:Source\portable\Common/mpu_wrappers.c **** 	return xReturn;
 2511              		.loc 1 1243 0
 2512 0028 3B69     		ldr	r3, [r7, #16]
1244:Source\portable\Common/mpu_wrappers.c **** }
 2513              		.loc 1 1244 0
 2514 002a 1846     		mov	r0, r3
 2515 002c 1837     		adds	r7, r7, #24
 2516              		.cfi_def_cfa_offset 8
 2517 002e BD46     		mov	sp, r7
 2518              		.cfi_def_cfa_register 13
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccQCZNNL.s 			page 67


 2519              		@ sp needed
 2520 0030 80BD     		pop	{r7, pc}
 2521              		.cfi_endproc
 2522              	.LFE123:
 2523              		.size	MPU_xStreamBufferReceive, .-MPU_xStreamBufferReceive
 2524 0032 00BF     		.section	.text.MPU_vStreamBufferDelete,"ax",%progbits
 2525              		.align	2
 2526              		.global	MPU_vStreamBufferDelete
 2527              		.thumb
 2528              		.thumb_func
 2529              		.type	MPU_vStreamBufferDelete, %function
 2530              	MPU_vStreamBufferDelete:
 2531              	.LFB124:
1245:Source\portable\Common/mpu_wrappers.c **** /*-----------------------------------------------------------*/
1246:Source\portable\Common/mpu_wrappers.c **** 
1247:Source\portable\Common/mpu_wrappers.c **** void MPU_vStreamBufferDelete( StreamBufferHandle_t xStreamBuffer ) /* FREERTOS_SYSTEM_CALL */
1248:Source\portable\Common/mpu_wrappers.c **** {
 2532              		.loc 1 1248 0
 2533              		.cfi_startproc
 2534              		@ args = 0, pretend = 0, frame = 16
 2535              		@ frame_needed = 1, uses_anonymous_args = 0
 2536 0000 80B5     		push	{r7, lr}
 2537              		.cfi_def_cfa_offset 8
 2538              		.cfi_offset 7, -8
 2539              		.cfi_offset 14, -4
 2540 0002 84B0     		sub	sp, sp, #16
 2541              		.cfi_def_cfa_offset 24
 2542 0004 00AF     		add	r7, sp, #0
 2543              		.cfi_def_cfa_register 7
 2544 0006 7860     		str	r0, [r7, #4]
1249:Source\portable\Common/mpu_wrappers.c **** BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 2545              		.loc 1 1249 0
 2546 0008 FFF7FEFF 		bl	xPortRaisePrivilege
 2547 000c F860     		str	r0, [r7, #12]
1250:Source\portable\Common/mpu_wrappers.c **** 
1251:Source\portable\Common/mpu_wrappers.c **** 	vStreamBufferDelete( xStreamBuffer );
 2548              		.loc 1 1251 0
 2549 000e 7868     		ldr	r0, [r7, #4]
 2550 0010 FFF7FEFF 		bl	vStreamBufferDelete
1252:Source\portable\Common/mpu_wrappers.c **** 	vPortResetPrivilege( xRunningPrivileged );
 2551              		.loc 1 1252 0
 2552 0014 F868     		ldr	r0, [r7, #12]
 2553 0016 FFF7FEFF 		bl	vPortResetPrivilege
1253:Source\portable\Common/mpu_wrappers.c **** }
 2554              		.loc 1 1253 0
 2555 001a 00BF     		nop
 2556 001c 1037     		adds	r7, r7, #16
 2557              		.cfi_def_cfa_offset 8
 2558 001e BD46     		mov	sp, r7
 2559              		.cfi_def_cfa_register 13
 2560              		@ sp needed
 2561 0020 80BD     		pop	{r7, pc}
 2562              		.cfi_endproc
 2563              	.LFE124:
 2564              		.size	MPU_vStreamBufferDelete, .-MPU_vStreamBufferDelete
 2565 0022 00BF     		.section	.text.MPU_xStreamBufferIsFull,"ax",%progbits
 2566              		.align	2
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccQCZNNL.s 			page 68


 2567              		.global	MPU_xStreamBufferIsFull
 2568              		.thumb
 2569              		.thumb_func
 2570              		.type	MPU_xStreamBufferIsFull, %function
 2571              	MPU_xStreamBufferIsFull:
 2572              	.LFB125:
1254:Source\portable\Common/mpu_wrappers.c **** /*-----------------------------------------------------------*/
1255:Source\portable\Common/mpu_wrappers.c **** 
1256:Source\portable\Common/mpu_wrappers.c **** BaseType_t MPU_xStreamBufferIsFull( StreamBufferHandle_t xStreamBuffer ) /* FREERTOS_SYSTEM_CALL */
1257:Source\portable\Common/mpu_wrappers.c **** {
 2573              		.loc 1 1257 0
 2574              		.cfi_startproc
 2575              		@ args = 0, pretend = 0, frame = 16
 2576              		@ frame_needed = 1, uses_anonymous_args = 0
 2577 0000 80B5     		push	{r7, lr}
 2578              		.cfi_def_cfa_offset 8
 2579              		.cfi_offset 7, -8
 2580              		.cfi_offset 14, -4
 2581 0002 84B0     		sub	sp, sp, #16
 2582              		.cfi_def_cfa_offset 24
 2583 0004 00AF     		add	r7, sp, #0
 2584              		.cfi_def_cfa_register 7
 2585 0006 7860     		str	r0, [r7, #4]
1258:Source\portable\Common/mpu_wrappers.c **** BaseType_t xReturn;
1259:Source\portable\Common/mpu_wrappers.c **** BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 2586              		.loc 1 1259 0
 2587 0008 FFF7FEFF 		bl	xPortRaisePrivilege
 2588 000c F860     		str	r0, [r7, #12]
1260:Source\portable\Common/mpu_wrappers.c **** 
1261:Source\portable\Common/mpu_wrappers.c **** 	xReturn = xStreamBufferIsFull( xStreamBuffer );
 2589              		.loc 1 1261 0
 2590 000e 7868     		ldr	r0, [r7, #4]
 2591 0010 FFF7FEFF 		bl	xStreamBufferIsFull
 2592 0014 B860     		str	r0, [r7, #8]
1262:Source\portable\Common/mpu_wrappers.c **** 	vPortResetPrivilege( xRunningPrivileged );
 2593              		.loc 1 1262 0
 2594 0016 F868     		ldr	r0, [r7, #12]
 2595 0018 FFF7FEFF 		bl	vPortResetPrivilege
1263:Source\portable\Common/mpu_wrappers.c **** 
1264:Source\portable\Common/mpu_wrappers.c **** 	return xReturn;
 2596              		.loc 1 1264 0
 2597 001c BB68     		ldr	r3, [r7, #8]
1265:Source\portable\Common/mpu_wrappers.c **** }
 2598              		.loc 1 1265 0
 2599 001e 1846     		mov	r0, r3
 2600 0020 1037     		adds	r7, r7, #16
 2601              		.cfi_def_cfa_offset 8
 2602 0022 BD46     		mov	sp, r7
 2603              		.cfi_def_cfa_register 13
 2604              		@ sp needed
 2605 0024 80BD     		pop	{r7, pc}
 2606              		.cfi_endproc
 2607              	.LFE125:
 2608              		.size	MPU_xStreamBufferIsFull, .-MPU_xStreamBufferIsFull
 2609 0026 00BF     		.section	.text.MPU_xStreamBufferIsEmpty,"ax",%progbits
 2610              		.align	2
 2611              		.global	MPU_xStreamBufferIsEmpty
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccQCZNNL.s 			page 69


 2612              		.thumb
 2613              		.thumb_func
 2614              		.type	MPU_xStreamBufferIsEmpty, %function
 2615              	MPU_xStreamBufferIsEmpty:
 2616              	.LFB126:
1266:Source\portable\Common/mpu_wrappers.c **** /*-----------------------------------------------------------*/
1267:Source\portable\Common/mpu_wrappers.c **** 
1268:Source\portable\Common/mpu_wrappers.c **** BaseType_t MPU_xStreamBufferIsEmpty( StreamBufferHandle_t xStreamBuffer ) /* FREERTOS_SYSTEM_CALL *
1269:Source\portable\Common/mpu_wrappers.c **** {
 2617              		.loc 1 1269 0
 2618              		.cfi_startproc
 2619              		@ args = 0, pretend = 0, frame = 16
 2620              		@ frame_needed = 1, uses_anonymous_args = 0
 2621 0000 80B5     		push	{r7, lr}
 2622              		.cfi_def_cfa_offset 8
 2623              		.cfi_offset 7, -8
 2624              		.cfi_offset 14, -4
 2625 0002 84B0     		sub	sp, sp, #16
 2626              		.cfi_def_cfa_offset 24
 2627 0004 00AF     		add	r7, sp, #0
 2628              		.cfi_def_cfa_register 7
 2629 0006 7860     		str	r0, [r7, #4]
1270:Source\portable\Common/mpu_wrappers.c **** BaseType_t xReturn;
1271:Source\portable\Common/mpu_wrappers.c **** BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 2630              		.loc 1 1271 0
 2631 0008 FFF7FEFF 		bl	xPortRaisePrivilege
 2632 000c F860     		str	r0, [r7, #12]
1272:Source\portable\Common/mpu_wrappers.c **** 
1273:Source\portable\Common/mpu_wrappers.c **** 	xReturn = xStreamBufferIsEmpty( xStreamBuffer );
 2633              		.loc 1 1273 0
 2634 000e 7868     		ldr	r0, [r7, #4]
 2635 0010 FFF7FEFF 		bl	xStreamBufferIsEmpty
 2636 0014 B860     		str	r0, [r7, #8]
1274:Source\portable\Common/mpu_wrappers.c **** 	vPortResetPrivilege( xRunningPrivileged );
 2637              		.loc 1 1274 0
 2638 0016 F868     		ldr	r0, [r7, #12]
 2639 0018 FFF7FEFF 		bl	vPortResetPrivilege
1275:Source\portable\Common/mpu_wrappers.c **** 
1276:Source\portable\Common/mpu_wrappers.c **** 	return xReturn;
 2640              		.loc 1 1276 0
 2641 001c BB68     		ldr	r3, [r7, #8]
1277:Source\portable\Common/mpu_wrappers.c **** }
 2642              		.loc 1 1277 0
 2643 001e 1846     		mov	r0, r3
 2644 0020 1037     		adds	r7, r7, #16
 2645              		.cfi_def_cfa_offset 8
 2646 0022 BD46     		mov	sp, r7
 2647              		.cfi_def_cfa_register 13
 2648              		@ sp needed
 2649 0024 80BD     		pop	{r7, pc}
 2650              		.cfi_endproc
 2651              	.LFE126:
 2652              		.size	MPU_xStreamBufferIsEmpty, .-MPU_xStreamBufferIsEmpty
 2653 0026 00BF     		.section	.text.MPU_xStreamBufferReset,"ax",%progbits
 2654              		.align	2
 2655              		.global	MPU_xStreamBufferReset
 2656              		.thumb
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccQCZNNL.s 			page 70


 2657              		.thumb_func
 2658              		.type	MPU_xStreamBufferReset, %function
 2659              	MPU_xStreamBufferReset:
 2660              	.LFB127:
1278:Source\portable\Common/mpu_wrappers.c **** /*-----------------------------------------------------------*/
1279:Source\portable\Common/mpu_wrappers.c **** 
1280:Source\portable\Common/mpu_wrappers.c **** BaseType_t MPU_xStreamBufferReset( StreamBufferHandle_t xStreamBuffer ) /* FREERTOS_SYSTEM_CALL */
1281:Source\portable\Common/mpu_wrappers.c **** {
 2661              		.loc 1 1281 0
 2662              		.cfi_startproc
 2663              		@ args = 0, pretend = 0, frame = 16
 2664              		@ frame_needed = 1, uses_anonymous_args = 0
 2665 0000 80B5     		push	{r7, lr}
 2666              		.cfi_def_cfa_offset 8
 2667              		.cfi_offset 7, -8
 2668              		.cfi_offset 14, -4
 2669 0002 84B0     		sub	sp, sp, #16
 2670              		.cfi_def_cfa_offset 24
 2671 0004 00AF     		add	r7, sp, #0
 2672              		.cfi_def_cfa_register 7
 2673 0006 7860     		str	r0, [r7, #4]
1282:Source\portable\Common/mpu_wrappers.c **** BaseType_t xReturn;
1283:Source\portable\Common/mpu_wrappers.c **** BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 2674              		.loc 1 1283 0
 2675 0008 FFF7FEFF 		bl	xPortRaisePrivilege
 2676 000c F860     		str	r0, [r7, #12]
1284:Source\portable\Common/mpu_wrappers.c **** 
1285:Source\portable\Common/mpu_wrappers.c **** 	xReturn = xStreamBufferReset( xStreamBuffer );
 2677              		.loc 1 1285 0
 2678 000e 7868     		ldr	r0, [r7, #4]
 2679 0010 FFF7FEFF 		bl	xStreamBufferReset
 2680 0014 B860     		str	r0, [r7, #8]
1286:Source\portable\Common/mpu_wrappers.c **** 	vPortResetPrivilege( xRunningPrivileged );
 2681              		.loc 1 1286 0
 2682 0016 F868     		ldr	r0, [r7, #12]
 2683 0018 FFF7FEFF 		bl	vPortResetPrivilege
1287:Source\portable\Common/mpu_wrappers.c **** 
1288:Source\portable\Common/mpu_wrappers.c **** 	return xReturn;
 2684              		.loc 1 1288 0
 2685 001c BB68     		ldr	r3, [r7, #8]
1289:Source\portable\Common/mpu_wrappers.c **** }
 2686              		.loc 1 1289 0
 2687 001e 1846     		mov	r0, r3
 2688 0020 1037     		adds	r7, r7, #16
 2689              		.cfi_def_cfa_offset 8
 2690 0022 BD46     		mov	sp, r7
 2691              		.cfi_def_cfa_register 13
 2692              		@ sp needed
 2693 0024 80BD     		pop	{r7, pc}
 2694              		.cfi_endproc
 2695              	.LFE127:
 2696              		.size	MPU_xStreamBufferReset, .-MPU_xStreamBufferReset
 2697 0026 00BF     		.section	.text.MPU_xStreamBufferSpacesAvailable,"ax",%progbits
 2698              		.align	2
 2699              		.global	MPU_xStreamBufferSpacesAvailable
 2700              		.thumb
 2701              		.thumb_func
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccQCZNNL.s 			page 71


 2702              		.type	MPU_xStreamBufferSpacesAvailable, %function
 2703              	MPU_xStreamBufferSpacesAvailable:
 2704              	.LFB128:
1290:Source\portable\Common/mpu_wrappers.c **** /*-----------------------------------------------------------*/
1291:Source\portable\Common/mpu_wrappers.c **** 
1292:Source\portable\Common/mpu_wrappers.c **** size_t MPU_xStreamBufferSpacesAvailable( StreamBufferHandle_t xStreamBuffer ) /* FREERTOS_SYSTEM_CA
1293:Source\portable\Common/mpu_wrappers.c **** {
 2705              		.loc 1 1293 0
 2706              		.cfi_startproc
 2707              		@ args = 0, pretend = 0, frame = 16
 2708              		@ frame_needed = 1, uses_anonymous_args = 0
 2709 0000 80B5     		push	{r7, lr}
 2710              		.cfi_def_cfa_offset 8
 2711              		.cfi_offset 7, -8
 2712              		.cfi_offset 14, -4
 2713 0002 84B0     		sub	sp, sp, #16
 2714              		.cfi_def_cfa_offset 24
 2715 0004 00AF     		add	r7, sp, #0
 2716              		.cfi_def_cfa_register 7
 2717 0006 7860     		str	r0, [r7, #4]
1294:Source\portable\Common/mpu_wrappers.c **** size_t xReturn;
1295:Source\portable\Common/mpu_wrappers.c **** BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 2718              		.loc 1 1295 0
 2719 0008 FFF7FEFF 		bl	xPortRaisePrivilege
 2720 000c F860     		str	r0, [r7, #12]
1296:Source\portable\Common/mpu_wrappers.c **** 
1297:Source\portable\Common/mpu_wrappers.c **** 	xReturn = xStreamBufferSpacesAvailable( xStreamBuffer );
 2721              		.loc 1 1297 0
 2722 000e 7868     		ldr	r0, [r7, #4]
 2723 0010 FFF7FEFF 		bl	xStreamBufferSpacesAvailable
 2724 0014 B860     		str	r0, [r7, #8]
1298:Source\portable\Common/mpu_wrappers.c **** 	vPortResetPrivilege( xRunningPrivileged );
 2725              		.loc 1 1298 0
 2726 0016 F868     		ldr	r0, [r7, #12]
 2727 0018 FFF7FEFF 		bl	vPortResetPrivilege
1299:Source\portable\Common/mpu_wrappers.c **** 
1300:Source\portable\Common/mpu_wrappers.c **** 	return xReturn;
 2728              		.loc 1 1300 0
 2729 001c BB68     		ldr	r3, [r7, #8]
1301:Source\portable\Common/mpu_wrappers.c **** }
 2730              		.loc 1 1301 0
 2731 001e 1846     		mov	r0, r3
 2732 0020 1037     		adds	r7, r7, #16
 2733              		.cfi_def_cfa_offset 8
 2734 0022 BD46     		mov	sp, r7
 2735              		.cfi_def_cfa_register 13
 2736              		@ sp needed
 2737 0024 80BD     		pop	{r7, pc}
 2738              		.cfi_endproc
 2739              	.LFE128:
 2740              		.size	MPU_xStreamBufferSpacesAvailable, .-MPU_xStreamBufferSpacesAvailable
 2741 0026 00BF     		.section	.text.MPU_xStreamBufferBytesAvailable,"ax",%progbits
 2742              		.align	2
 2743              		.global	MPU_xStreamBufferBytesAvailable
 2744              		.thumb
 2745              		.thumb_func
 2746              		.type	MPU_xStreamBufferBytesAvailable, %function
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccQCZNNL.s 			page 72


 2747              	MPU_xStreamBufferBytesAvailable:
 2748              	.LFB129:
1302:Source\portable\Common/mpu_wrappers.c **** /*-----------------------------------------------------------*/
1303:Source\portable\Common/mpu_wrappers.c **** 
1304:Source\portable\Common/mpu_wrappers.c **** size_t MPU_xStreamBufferBytesAvailable( StreamBufferHandle_t xStreamBuffer ) /* FREERTOS_SYSTEM_CAL
1305:Source\portable\Common/mpu_wrappers.c **** {
 2749              		.loc 1 1305 0
 2750              		.cfi_startproc
 2751              		@ args = 0, pretend = 0, frame = 16
 2752              		@ frame_needed = 1, uses_anonymous_args = 0
 2753 0000 80B5     		push	{r7, lr}
 2754              		.cfi_def_cfa_offset 8
 2755              		.cfi_offset 7, -8
 2756              		.cfi_offset 14, -4
 2757 0002 84B0     		sub	sp, sp, #16
 2758              		.cfi_def_cfa_offset 24
 2759 0004 00AF     		add	r7, sp, #0
 2760              		.cfi_def_cfa_register 7
 2761 0006 7860     		str	r0, [r7, #4]
1306:Source\portable\Common/mpu_wrappers.c **** size_t xReturn;
1307:Source\portable\Common/mpu_wrappers.c **** BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 2762              		.loc 1 1307 0
 2763 0008 FFF7FEFF 		bl	xPortRaisePrivilege
 2764 000c F860     		str	r0, [r7, #12]
1308:Source\portable\Common/mpu_wrappers.c **** 
1309:Source\portable\Common/mpu_wrappers.c **** 	xReturn = xStreamBufferBytesAvailable( xStreamBuffer );
 2765              		.loc 1 1309 0
 2766 000e 7868     		ldr	r0, [r7, #4]
 2767 0010 FFF7FEFF 		bl	xStreamBufferBytesAvailable
 2768 0014 B860     		str	r0, [r7, #8]
1310:Source\portable\Common/mpu_wrappers.c **** 	vPortResetPrivilege( xRunningPrivileged );
 2769              		.loc 1 1310 0
 2770 0016 F868     		ldr	r0, [r7, #12]
 2771 0018 FFF7FEFF 		bl	vPortResetPrivilege
1311:Source\portable\Common/mpu_wrappers.c **** 
1312:Source\portable\Common/mpu_wrappers.c **** 	return xReturn;
 2772              		.loc 1 1312 0
 2773 001c BB68     		ldr	r3, [r7, #8]
1313:Source\portable\Common/mpu_wrappers.c **** }
 2774              		.loc 1 1313 0
 2775 001e 1846     		mov	r0, r3
 2776 0020 1037     		adds	r7, r7, #16
 2777              		.cfi_def_cfa_offset 8
 2778 0022 BD46     		mov	sp, r7
 2779              		.cfi_def_cfa_register 13
 2780              		@ sp needed
 2781 0024 80BD     		pop	{r7, pc}
 2782              		.cfi_endproc
 2783              	.LFE129:
 2784              		.size	MPU_xStreamBufferBytesAvailable, .-MPU_xStreamBufferBytesAvailable
 2785 0026 00BF     		.section	.text.MPU_xStreamBufferSetTriggerLevel,"ax",%progbits
 2786              		.align	2
 2787              		.global	MPU_xStreamBufferSetTriggerLevel
 2788              		.thumb
 2789              		.thumb_func
 2790              		.type	MPU_xStreamBufferSetTriggerLevel, %function
 2791              	MPU_xStreamBufferSetTriggerLevel:
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccQCZNNL.s 			page 73


 2792              	.LFB130:
1314:Source\portable\Common/mpu_wrappers.c **** /*-----------------------------------------------------------*/
1315:Source\portable\Common/mpu_wrappers.c **** 
1316:Source\portable\Common/mpu_wrappers.c **** BaseType_t MPU_xStreamBufferSetTriggerLevel( StreamBufferHandle_t xStreamBuffer, size_t xTriggerLev
1317:Source\portable\Common/mpu_wrappers.c **** {
 2793              		.loc 1 1317 0
 2794              		.cfi_startproc
 2795              		@ args = 0, pretend = 0, frame = 16
 2796              		@ frame_needed = 1, uses_anonymous_args = 0
 2797 0000 80B5     		push	{r7, lr}
 2798              		.cfi_def_cfa_offset 8
 2799              		.cfi_offset 7, -8
 2800              		.cfi_offset 14, -4
 2801 0002 84B0     		sub	sp, sp, #16
 2802              		.cfi_def_cfa_offset 24
 2803 0004 00AF     		add	r7, sp, #0
 2804              		.cfi_def_cfa_register 7
 2805 0006 7860     		str	r0, [r7, #4]
 2806 0008 3960     		str	r1, [r7]
1318:Source\portable\Common/mpu_wrappers.c **** BaseType_t xReturn;
1319:Source\portable\Common/mpu_wrappers.c **** BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 2807              		.loc 1 1319 0
 2808 000a FFF7FEFF 		bl	xPortRaisePrivilege
 2809 000e F860     		str	r0, [r7, #12]
1320:Source\portable\Common/mpu_wrappers.c **** 
1321:Source\portable\Common/mpu_wrappers.c **** 	xReturn = xStreamBufferSetTriggerLevel( xStreamBuffer, xTriggerLevel );
 2810              		.loc 1 1321 0
 2811 0010 3968     		ldr	r1, [r7]
 2812 0012 7868     		ldr	r0, [r7, #4]
 2813 0014 FFF7FEFF 		bl	xStreamBufferSetTriggerLevel
 2814 0018 B860     		str	r0, [r7, #8]
1322:Source\portable\Common/mpu_wrappers.c **** 	vPortResetPrivilege( xRunningPrivileged );
 2815              		.loc 1 1322 0
 2816 001a F868     		ldr	r0, [r7, #12]
 2817 001c FFF7FEFF 		bl	vPortResetPrivilege
1323:Source\portable\Common/mpu_wrappers.c **** 
1324:Source\portable\Common/mpu_wrappers.c **** 	return xReturn;
 2818              		.loc 1 1324 0
 2819 0020 BB68     		ldr	r3, [r7, #8]
1325:Source\portable\Common/mpu_wrappers.c **** }
 2820              		.loc 1 1325 0
 2821 0022 1846     		mov	r0, r3
 2822 0024 1037     		adds	r7, r7, #16
 2823              		.cfi_def_cfa_offset 8
 2824 0026 BD46     		mov	sp, r7
 2825              		.cfi_def_cfa_register 13
 2826              		@ sp needed
 2827 0028 80BD     		pop	{r7, pc}
 2828              		.cfi_endproc
 2829              	.LFE130:
 2830              		.size	MPU_xStreamBufferSetTriggerLevel, .-MPU_xStreamBufferSetTriggerLevel
 2831              		.section	.text.MPU_xStreamBufferGenericCreate,"ax",%progbits
 2832              		.align	2
 2833              		.global	MPU_xStreamBufferGenericCreate
 2834              		.thumb
 2835              		.thumb_func
 2836              		.type	MPU_xStreamBufferGenericCreate, %function
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccQCZNNL.s 			page 74


 2837              	MPU_xStreamBufferGenericCreate:
 2838              	.LFB131:
1326:Source\portable\Common/mpu_wrappers.c **** /*-----------------------------------------------------------*/
1327:Source\portable\Common/mpu_wrappers.c **** 
1328:Source\portable\Common/mpu_wrappers.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
1329:Source\portable\Common/mpu_wrappers.c **** 	StreamBufferHandle_t MPU_xStreamBufferGenericCreate( size_t xBufferSizeBytes, size_t xTriggerLevel
1330:Source\portable\Common/mpu_wrappers.c **** 	{
 2839              		.loc 1 1330 0
 2840              		.cfi_startproc
 2841              		@ args = 0, pretend = 0, frame = 24
 2842              		@ frame_needed = 1, uses_anonymous_args = 0
 2843 0000 80B5     		push	{r7, lr}
 2844              		.cfi_def_cfa_offset 8
 2845              		.cfi_offset 7, -8
 2846              		.cfi_offset 14, -4
 2847 0002 86B0     		sub	sp, sp, #24
 2848              		.cfi_def_cfa_offset 32
 2849 0004 00AF     		add	r7, sp, #0
 2850              		.cfi_def_cfa_register 7
 2851 0006 F860     		str	r0, [r7, #12]
 2852 0008 B960     		str	r1, [r7, #8]
 2853 000a 7A60     		str	r2, [r7, #4]
1331:Source\portable\Common/mpu_wrappers.c **** 	StreamBufferHandle_t xReturn;
1332:Source\portable\Common/mpu_wrappers.c **** 	BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 2854              		.loc 1 1332 0
 2855 000c FFF7FEFF 		bl	xPortRaisePrivilege
 2856 0010 7861     		str	r0, [r7, #20]
1333:Source\portable\Common/mpu_wrappers.c **** 
1334:Source\portable\Common/mpu_wrappers.c **** 		xReturn = xStreamBufferGenericCreate( xBufferSizeBytes, xTriggerLevelBytes, xIsMessageBuffer );
 2857              		.loc 1 1334 0
 2858 0012 7A68     		ldr	r2, [r7, #4]
 2859 0014 B968     		ldr	r1, [r7, #8]
 2860 0016 F868     		ldr	r0, [r7, #12]
 2861 0018 FFF7FEFF 		bl	xStreamBufferGenericCreate
 2862 001c 3861     		str	r0, [r7, #16]
1335:Source\portable\Common/mpu_wrappers.c **** 		vPortResetPrivilege( xRunningPrivileged );
 2863              		.loc 1 1335 0
 2864 001e 7869     		ldr	r0, [r7, #20]
 2865 0020 FFF7FEFF 		bl	vPortResetPrivilege
1336:Source\portable\Common/mpu_wrappers.c **** 
1337:Source\portable\Common/mpu_wrappers.c **** 		return xReturn;
 2866              		.loc 1 1337 0
 2867 0024 3B69     		ldr	r3, [r7, #16]
1338:Source\portable\Common/mpu_wrappers.c **** 	}
 2868              		.loc 1 1338 0
 2869 0026 1846     		mov	r0, r3
 2870 0028 1837     		adds	r7, r7, #24
 2871              		.cfi_def_cfa_offset 8
 2872 002a BD46     		mov	sp, r7
 2873              		.cfi_def_cfa_register 13
 2874              		@ sp needed
 2875 002c 80BD     		pop	{r7, pc}
 2876              		.cfi_endproc
 2877              	.LFE131:
 2878              		.size	MPU_xStreamBufferGenericCreate, .-MPU_xStreamBufferGenericCreate
 2879 002e 00BF     		.text
 2880              	.Letext0:
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccQCZNNL.s 			page 75


 2881              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\4.3\\psoc creator\\import\\gnu\\arm\\5.4.
 2882              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.3\\psoc creator\\import\\gnu\\arm\\5.4.
 2883              		.file 4 "c:\\program files (x86)\\cypress\\psoc creator\\4.3\\psoc creator\\import\\gnu\\arm\\5.4.
 2884              		.file 5 ".\\Source\\include/projdefs.h"
 2885              		.file 6 ".\\Source\\portable\\GCC\\ARM_CM3/portmacro.h"
 2886              		.file 7 ".\\Source\\include/task.h"
 2887              		.file 8 ".\\Source\\include/queue.h"
 2888              		.file 9 ".\\Source\\include/event_groups.h"
 2889              		.file 10 ".\\Source\\include/stream_buffer.h"
 2890              		.file 11 "Generated_Source\\PSoC5/core_cm3.h"
 2891              		.section	.debug_info,"",%progbits
 2892              	.Ldebug_info0:
 2893 0000 C2160000 		.4byte	0x16c2
 2894 0004 0400     		.2byte	0x4
 2895 0006 00000000 		.4byte	.Ldebug_abbrev0
 2896 000a 04       		.byte	0x4
 2897 000b 01       		.uleb128 0x1
 2898 000c A1010000 		.4byte	.LASF196
 2899 0010 0C       		.byte	0xc
 2900 0011 3D0C0000 		.4byte	.LASF197
 2901 0015 C0020000 		.4byte	.LASF198
 2902 0019 00000000 		.4byte	.Ldebug_ranges0+0
 2903 001d 00000000 		.4byte	0
 2904 0021 00000000 		.4byte	.Ldebug_line0
 2905 0025 02       		.uleb128 0x2
 2906 0026 04       		.byte	0x4
 2907 0027 05       		.byte	0x5
 2908 0028 696E7400 		.ascii	"int\000"
 2909 002c 03       		.uleb128 0x3
 2910 002d ED040000 		.4byte	.LASF4
 2911 0031 02       		.byte	0x2
 2912 0032 D8       		.byte	0xd8
 2913 0033 37000000 		.4byte	0x37
 2914 0037 04       		.uleb128 0x4
 2915 0038 04       		.byte	0x4
 2916 0039 07       		.byte	0x7
 2917 003a 23010000 		.4byte	.LASF0
 2918 003e 04       		.uleb128 0x4
 2919 003f 08       		.byte	0x8
 2920 0040 05       		.byte	0x5
 2921 0041 8A060000 		.4byte	.LASF1
 2922 0045 04       		.uleb128 0x4
 2923 0046 08       		.byte	0x8
 2924 0047 04       		.byte	0x4
 2925 0048 9A080000 		.4byte	.LASF2
 2926 004c 04       		.uleb128 0x4
 2927 004d 01       		.byte	0x1
 2928 004e 06       		.byte	0x6
 2929 004f 03030000 		.4byte	.LASF3
 2930 0053 03       		.uleb128 0x3
 2931 0054 D8090000 		.4byte	.LASF5
 2932 0058 03       		.byte	0x3
 2933 0059 1D       		.byte	0x1d
 2934 005a 5E000000 		.4byte	0x5e
 2935 005e 04       		.uleb128 0x4
 2936 005f 01       		.byte	0x1
 2937 0060 08       		.byte	0x8
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccQCZNNL.s 			page 76


 2938 0061 E90A0000 		.4byte	.LASF6
 2939 0065 04       		.uleb128 0x4
 2940 0066 02       		.byte	0x2
 2941 0067 05       		.byte	0x5
 2942 0068 07090000 		.4byte	.LASF7
 2943 006c 03       		.uleb128 0x3
 2944 006d 83040000 		.4byte	.LASF8
 2945 0071 03       		.byte	0x3
 2946 0072 2B       		.byte	0x2b
 2947 0073 77000000 		.4byte	0x77
 2948 0077 04       		.uleb128 0x4
 2949 0078 02       		.byte	0x2
 2950 0079 07       		.byte	0x7
 2951 007a 630C0000 		.4byte	.LASF9
 2952 007e 03       		.uleb128 0x3
 2953 007f 74010000 		.4byte	.LASF10
 2954 0083 03       		.byte	0x3
 2955 0084 3F       		.byte	0x3f
 2956 0085 89000000 		.4byte	0x89
 2957 0089 04       		.uleb128 0x4
 2958 008a 04       		.byte	0x4
 2959 008b 05       		.byte	0x5
 2960 008c 55090000 		.4byte	.LASF11
 2961 0090 03       		.uleb128 0x3
 2962 0091 0E0B0000 		.4byte	.LASF12
 2963 0095 03       		.byte	0x3
 2964 0096 41       		.byte	0x41
 2965 0097 9B000000 		.4byte	0x9b
 2966 009b 04       		.uleb128 0x4
 2967 009c 04       		.byte	0x4
 2968 009d 07       		.byte	0x7
 2969 009e 5F0A0000 		.4byte	.LASF13
 2970 00a2 04       		.uleb128 0x4
 2971 00a3 08       		.byte	0x8
 2972 00a4 07       		.byte	0x7
 2973 00a5 12040000 		.4byte	.LASF14
 2974 00a9 03       		.uleb128 0x3
 2975 00aa 2E060000 		.4byte	.LASF15
 2976 00ae 04       		.byte	0x4
 2977 00af 18       		.byte	0x18
 2978 00b0 53000000 		.4byte	0x53
 2979 00b4 03       		.uleb128 0x3
 2980 00b5 B5080000 		.4byte	.LASF16
 2981 00b9 04       		.byte	0x4
 2982 00ba 24       		.byte	0x24
 2983 00bb 6C000000 		.4byte	0x6c
 2984 00bf 03       		.uleb128 0x3
 2985 00c0 820A0000 		.4byte	.LASF17
 2986 00c4 04       		.byte	0x4
 2987 00c5 2C       		.byte	0x2c
 2988 00c6 7E000000 		.4byte	0x7e
 2989 00ca 03       		.uleb128 0x3
 2990 00cb 2F030000 		.4byte	.LASF18
 2991 00cf 04       		.byte	0x4
 2992 00d0 30       		.byte	0x30
 2993 00d1 90000000 		.4byte	0x90
 2994 00d5 04       		.uleb128 0x4
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccQCZNNL.s 			page 77


 2995 00d6 04       		.byte	0x4
 2996 00d7 04       		.byte	0x4
 2997 00d8 8A030000 		.4byte	.LASF19
 2998 00dc 04       		.uleb128 0x4
 2999 00dd 08       		.byte	0x8
 3000 00de 04       		.byte	0x4
 3001 00df B40C0000 		.4byte	.LASF20
 3002 00e3 04       		.uleb128 0x4
 3003 00e4 01       		.byte	0x1
 3004 00e5 08       		.byte	0x8
 3005 00e6 D1050000 		.4byte	.LASF21
 3006 00ea 04       		.uleb128 0x4
 3007 00eb 04       		.byte	0x4
 3008 00ec 07       		.byte	0x7
 3009 00ed 560A0000 		.4byte	.LASF22
 3010 00f1 05       		.uleb128 0x5
 3011 00f2 04       		.byte	0x4
 3012 00f3 06       		.uleb128 0x6
 3013 00f4 04       		.byte	0x4
 3014 00f5 E3000000 		.4byte	0xe3
 3015 00f9 06       		.uleb128 0x6
 3016 00fa 04       		.byte	0x4
 3017 00fb FF000000 		.4byte	0xff
 3018 00ff 07       		.uleb128 0x7
 3019 0100 E3000000 		.4byte	0xe3
 3020 0104 03       		.uleb128 0x3
 3021 0105 24070000 		.4byte	.LASF23
 3022 0109 05       		.byte	0x5
 3023 010a 23       		.byte	0x23
 3024 010b 0F010000 		.4byte	0x10f
 3025 010f 06       		.uleb128 0x6
 3026 0110 04       		.byte	0x4
 3027 0111 15010000 		.4byte	0x115
 3028 0115 08       		.uleb128 0x8
 3029 0116 20010000 		.4byte	0x120
 3030 011a 09       		.uleb128 0x9
 3031 011b F1000000 		.4byte	0xf1
 3032 011f 00       		.byte	0
 3033 0120 03       		.uleb128 0x3
 3034 0121 30010000 		.4byte	.LASF24
 3035 0125 06       		.byte	0x6
 3036 0126 37       		.byte	0x37
 3037 0127 CA000000 		.4byte	0xca
 3038 012b 03       		.uleb128 0x3
 3039 012c DD060000 		.4byte	.LASF25
 3040 0130 06       		.byte	0x6
 3041 0131 38       		.byte	0x38
 3042 0132 89000000 		.4byte	0x89
 3043 0136 03       		.uleb128 0x3
 3044 0137 04060000 		.4byte	.LASF26
 3045 013b 06       		.byte	0x6
 3046 013c 39       		.byte	0x39
 3047 013d 9B000000 		.4byte	0x9b
 3048 0141 03       		.uleb128 0x3
 3049 0142 0D080000 		.4byte	.LASF27
 3050 0146 06       		.byte	0x6
 3051 0147 3F       		.byte	0x3f
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccQCZNNL.s 			page 78


 3052 0148 CA000000 		.4byte	0xca
 3053 014c 03       		.uleb128 0x3
 3054 014d 82070000 		.4byte	.LASF28
 3055 0151 07       		.byte	0x7
 3056 0152 46       		.byte	0x46
 3057 0153 57010000 		.4byte	0x157
 3058 0157 06       		.uleb128 0x6
 3059 0158 04       		.byte	0x4
 3060 0159 5D010000 		.4byte	0x15d
 3061 015d 0A       		.uleb128 0xa
 3062 015e D3000000 		.4byte	.LASF61
 3063 0162 0B       		.uleb128 0xb
 3064 0163 01       		.byte	0x1
 3065 0164 5E000000 		.4byte	0x5e
 3066 0168 07       		.byte	0x7
 3067 0169 50       		.byte	0x50
 3068 016a 93010000 		.4byte	0x193
 3069 016e 0C       		.uleb128 0xc
 3070 016f A00A0000 		.4byte	.LASF29
 3071 0173 00       		.byte	0
 3072 0174 0C       		.uleb128 0xc
 3073 0175 36060000 		.4byte	.LASF30
 3074 0179 01       		.byte	0x1
 3075 017a 0C       		.uleb128 0xc
 3076 017b CE0B0000 		.4byte	.LASF31
 3077 017f 02       		.byte	0x2
 3078 0180 0C       		.uleb128 0xc
 3079 0181 B2000000 		.4byte	.LASF32
 3080 0185 03       		.byte	0x3
 3081 0186 0C       		.uleb128 0xc
 3082 0187 98060000 		.4byte	.LASF33
 3083 018b 04       		.byte	0x4
 3084 018c 0C       		.uleb128 0xc
 3085 018d 5F0B0000 		.4byte	.LASF34
 3086 0191 05       		.byte	0x5
 3087 0192 00       		.byte	0
 3088 0193 03       		.uleb128 0x3
 3089 0194 C9070000 		.4byte	.LASF35
 3090 0198 07       		.byte	0x7
 3091 0199 57       		.byte	0x57
 3092 019a 62010000 		.4byte	0x162
 3093 019e 0B       		.uleb128 0xb
 3094 019f 01       		.byte	0x1
 3095 01a0 5E000000 		.4byte	0x5e
 3096 01a4 07       		.byte	0x7
 3097 01a5 5B       		.byte	0x5b
 3098 01a6 C9010000 		.4byte	0x1c9
 3099 01aa 0C       		.uleb128 0xc
 3100 01ab 19010000 		.4byte	.LASF36
 3101 01af 00       		.byte	0
 3102 01b0 0C       		.uleb128 0xc
 3103 01b1 91080000 		.4byte	.LASF37
 3104 01b5 01       		.byte	0x1
 3105 01b6 0C       		.uleb128 0xc
 3106 01b7 0C050000 		.4byte	.LASF38
 3107 01bb 02       		.byte	0x2
 3108 01bc 0C       		.uleb128 0xc
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccQCZNNL.s 			page 79


 3109 01bd FB030000 		.4byte	.LASF39
 3110 01c1 03       		.byte	0x3
 3111 01c2 0C       		.uleb128 0xc
 3112 01c3 EA050000 		.4byte	.LASF40
 3113 01c7 04       		.byte	0x4
 3114 01c8 00       		.byte	0
 3115 01c9 03       		.uleb128 0x3
 3116 01ca BC040000 		.4byte	.LASF41
 3117 01ce 07       		.byte	0x7
 3118 01cf 61       		.byte	0x61
 3119 01d0 9E010000 		.4byte	0x19e
 3120 01d4 0D       		.uleb128 0xd
 3121 01d5 5C010000 		.4byte	.LASF45
 3122 01d9 08       		.byte	0x8
 3123 01da 07       		.byte	0x7
 3124 01db 66       		.byte	0x66
 3125 01dc F9010000 		.4byte	0x1f9
 3126 01e0 0E       		.uleb128 0xe
 3127 01e1 41020000 		.4byte	.LASF42
 3128 01e5 07       		.byte	0x7
 3129 01e6 68       		.byte	0x68
 3130 01e7 2B010000 		.4byte	0x12b
 3131 01eb 00       		.byte	0
 3132 01ec 0E       		.uleb128 0xe
 3133 01ed 06070000 		.4byte	.LASF43
 3134 01f1 07       		.byte	0x7
 3135 01f2 69       		.byte	0x69
 3136 01f3 41010000 		.4byte	0x141
 3137 01f7 04       		.byte	0x4
 3138 01f8 00       		.byte	0
 3139 01f9 03       		.uleb128 0x3
 3140 01fa 78070000 		.4byte	.LASF44
 3141 01fe 07       		.byte	0x7
 3142 01ff 6A       		.byte	0x6a
 3143 0200 D4010000 		.4byte	0x1d4
 3144 0204 0D       		.uleb128 0xd
 3145 0205 A6080000 		.4byte	.LASF46
 3146 0209 0C       		.byte	0xc
 3147 020a 07       		.byte	0x7
 3148 020b 6F       		.byte	0x6f
 3149 020c 35020000 		.4byte	0x235
 3150 0210 0E       		.uleb128 0xe
 3151 0211 BC0A0000 		.4byte	.LASF47
 3152 0215 07       		.byte	0x7
 3153 0216 71       		.byte	0x71
 3154 0217 F1000000 		.4byte	0xf1
 3155 021b 00       		.byte	0
 3156 021c 0E       		.uleb128 0xe
 3157 021d B6060000 		.4byte	.LASF48
 3158 0221 07       		.byte	0x7
 3159 0222 72       		.byte	0x72
 3160 0223 CA000000 		.4byte	0xca
 3161 0227 04       		.byte	0x4
 3162 0228 0E       		.uleb128 0xe
 3163 0229 94020000 		.4byte	.LASF49
 3164 022d 07       		.byte	0x7
 3165 022e 73       		.byte	0x73
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccQCZNNL.s 			page 80


 3166 022f CA000000 		.4byte	0xca
 3167 0233 08       		.byte	0x8
 3168 0234 00       		.byte	0
 3169 0235 03       		.uleb128 0x3
 3170 0236 7B060000 		.4byte	.LASF50
 3171 023a 07       		.byte	0x7
 3172 023b 74       		.byte	0x74
 3173 023c 04020000 		.4byte	0x204
 3174 0240 0D       		.uleb128 0xd
 3175 0241 030C0000 		.4byte	.LASF51
 3176 0245 24       		.byte	0x24
 3177 0246 07       		.byte	0x7
 3178 0247 79       		.byte	0x79
 3179 0248 A1020000 		.4byte	0x2a1
 3180 024c 0E       		.uleb128 0xe
 3181 024d 230C0000 		.4byte	.LASF52
 3182 0251 07       		.byte	0x7
 3183 0252 7B       		.byte	0x7b
 3184 0253 04010000 		.4byte	0x104
 3185 0257 00       		.byte	0
 3186 0258 0E       		.uleb128 0xe
 3187 0259 64050000 		.4byte	.LASF53
 3188 025d 07       		.byte	0x7
 3189 025e 7C       		.byte	0x7c
 3190 025f A1020000 		.4byte	0x2a1
 3191 0263 04       		.byte	0x4
 3192 0264 0E       		.uleb128 0xe
 3193 0265 90030000 		.4byte	.LASF54
 3194 0269 07       		.byte	0x7
 3195 026a 7D       		.byte	0x7d
 3196 026b B4000000 		.4byte	0xb4
 3197 026f 08       		.byte	0x8
 3198 0270 0E       		.uleb128 0xe
 3199 0271 34090000 		.4byte	.LASF55
 3200 0275 07       		.byte	0x7
 3201 0276 7E       		.byte	0x7e
 3202 0277 F1000000 		.4byte	0xf1
 3203 027b 0C       		.byte	0xc
 3204 027c 0E       		.uleb128 0xe
 3205 027d A7000000 		.4byte	.LASF56
 3206 0281 07       		.byte	0x7
 3207 0282 7F       		.byte	0x7f
 3208 0283 36010000 		.4byte	0x136
 3209 0287 10       		.byte	0x10
 3210 0288 0E       		.uleb128 0xe
 3211 0289 7E010000 		.4byte	.LASF57
 3212 028d 07       		.byte	0x7
 3213 028e 80       		.byte	0x80
 3214 028f A6020000 		.4byte	0x2a6
 3215 0293 14       		.byte	0x14
 3216 0294 0E       		.uleb128 0xe
 3217 0295 2F020000 		.4byte	.LASF58
 3218 0299 07       		.byte	0x7
 3219 029a 81       		.byte	0x81
 3220 029b AC020000 		.4byte	0x2ac
 3221 029f 18       		.byte	0x18
 3222 02a0 00       		.byte	0
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccQCZNNL.s 			page 81


 3223 02a1 07       		.uleb128 0x7
 3224 02a2 F9000000 		.4byte	0xf9
 3225 02a6 06       		.uleb128 0x6
 3226 02a7 04       		.byte	0x4
 3227 02a8 20010000 		.4byte	0x120
 3228 02ac 0F       		.uleb128 0xf
 3229 02ad 35020000 		.4byte	0x235
 3230 02b1 BC020000 		.4byte	0x2bc
 3231 02b5 10       		.uleb128 0x10
 3232 02b6 EA000000 		.4byte	0xea
 3233 02ba 00       		.byte	0
 3234 02bb 00       		.byte	0
 3235 02bc 03       		.uleb128 0x3
 3236 02bd 710A0000 		.4byte	.LASF59
 3237 02c1 07       		.byte	0x7
 3238 02c2 85       		.byte	0x85
 3239 02c3 40020000 		.4byte	0x240
 3240 02c7 03       		.uleb128 0x3
 3241 02c8 10060000 		.4byte	.LASF60
 3242 02cc 08       		.byte	0x8
 3243 02cd 30       		.byte	0x30
 3244 02ce D2020000 		.4byte	0x2d2
 3245 02d2 06       		.uleb128 0x6
 3246 02d3 04       		.byte	0x4
 3247 02d4 D8020000 		.4byte	0x2d8
 3248 02d8 0A       		.uleb128 0xa
 3249 02d9 9D030000 		.4byte	.LASF62
 3250 02dd 03       		.uleb128 0x3
 3251 02de 5E0D0000 		.4byte	.LASF63
 3252 02e2 09       		.byte	0x9
 3253 02e3 52       		.byte	0x52
 3254 02e4 E8020000 		.4byte	0x2e8
 3255 02e8 06       		.uleb128 0x6
 3256 02e9 04       		.byte	0x4
 3257 02ea EE020000 		.4byte	0x2ee
 3258 02ee 0A       		.uleb128 0xa
 3259 02ef 1E060000 		.4byte	.LASF64
 3260 02f3 03       		.uleb128 0x3
 3261 02f4 EA090000 		.4byte	.LASF65
 3262 02f8 09       		.byte	0x9
 3263 02f9 5C       		.byte	0x5c
 3264 02fa 41010000 		.4byte	0x141
 3265 02fe 03       		.uleb128 0x3
 3266 02ff A1060000 		.4byte	.LASF66
 3267 0303 0A       		.byte	0xa
 3268 0304 45       		.byte	0x45
 3269 0305 09030000 		.4byte	0x309
 3270 0309 06       		.uleb128 0x6
 3271 030a 04       		.byte	0x4
 3272 030b 0F030000 		.4byte	0x30f
 3273 030f 0A       		.uleb128 0xa
 3274 0310 AA040000 		.4byte	.LASF67
 3275 0314 11       		.uleb128 0x11
 3276 0315 41090000 		.4byte	.LASF70
 3277 0319 01       		.byte	0x1
 3278 031a 3F       		.byte	0x3f
 3279 031b 2B010000 		.4byte	0x12b
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccQCZNNL.s 			page 82


 3280 031f 00000000 		.4byte	.LFB68
 3281 0323 20000000 		.4byte	.LFE68-.LFB68
 3282 0327 01       		.uleb128 0x1
 3283 0328 9C       		.byte	0x9c
 3284 0329 64030000 		.4byte	0x364
 3285 032d 12       		.uleb128 0x12
 3286 032e 43060000 		.4byte	.LASF72
 3287 0332 01       		.byte	0x1
 3288 0333 41       		.byte	0x41
 3289 0334 2B010000 		.4byte	0x12b
 3290 0338 02       		.uleb128 0x2
 3291 0339 91       		.byte	0x91
 3292 033a 74       		.sleb128 -12
 3293 033b 13       		.uleb128 0x13
 3294 033c AB070000 		.4byte	.LASF199
 3295 0340 01       		.byte	0x1
 3296 0341 44       		.byte	0x44
 3297 0342 25000000 		.4byte	0x25
 3298 0346 4C030000 		.4byte	0x34c
 3299 034a 14       		.uleb128 0x14
 3300 034b 00       		.byte	0
 3301 034c 15       		.uleb128 0x15
 3302 034d 12000000 		.4byte	.LBB2
 3303 0351 04000000 		.4byte	.LBE2-.LBB2
 3304 0355 16       		.uleb128 0x16
 3305 0356 60030000 		.4byte	.LASF68
 3306 035a 01       		.byte	0x1
 3307 035b 49       		.byte	0x49
 3308 035c 25000000 		.4byte	0x25
 3309 0360 14       		.uleb128 0x14
 3310 0361 00       		.byte	0
 3311 0362 00       		.byte	0
 3312 0363 00       		.byte	0
 3313 0364 17       		.uleb128 0x17
 3314 0365 D6050000 		.4byte	.LASF78
 3315 0369 01       		.byte	0x1
 3316 036a 50       		.byte	0x50
 3317 036b 00000000 		.4byte	.LFB69
 3318 036f 1A000000 		.4byte	.LFE69-.LFB69
 3319 0373 01       		.uleb128 0x1
 3320 0374 9C       		.byte	0x9c
 3321 0375 9F030000 		.4byte	0x39f
 3322 0379 18       		.uleb128 0x18
 3323 037a 43060000 		.4byte	.LASF72
 3324 037e 01       		.byte	0x1
 3325 037f 50       		.byte	0x50
 3326 0380 2B010000 		.4byte	0x12b
 3327 0384 02       		.uleb128 0x2
 3328 0385 91       		.byte	0x91
 3329 0386 74       		.sleb128 -12
 3330 0387 15       		.uleb128 0x15
 3331 0388 0E000000 		.4byte	.LBB3
 3332 038c 04000000 		.4byte	.LBE3-.LBB3
 3333 0390 16       		.uleb128 0x16
 3334 0391 97070000 		.4byte	.LASF69
 3335 0395 01       		.byte	0x1
 3336 0396 54       		.byte	0x54
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccQCZNNL.s 			page 83


 3337 0397 25000000 		.4byte	0x25
 3338 039b 14       		.uleb128 0x14
 3339 039c 00       		.byte	0
 3340 039d 00       		.byte	0
 3341 039e 00       		.byte	0
 3342 039f 11       		.uleb128 0x11
 3343 03a0 8A050000 		.4byte	.LASF71
 3344 03a4 01       		.byte	0x1
 3345 03a5 5A       		.byte	0x5a
 3346 03a6 2B010000 		.4byte	0x12b
 3347 03aa 00000000 		.4byte	.LFB70
 3348 03ae 2A000000 		.4byte	.LFE70-.LFB70
 3349 03b2 01       		.uleb128 0x1
 3350 03b3 9C       		.byte	0x9c
 3351 03b4 FE030000 		.4byte	0x3fe
 3352 03b8 18       		.uleb128 0x18
 3353 03b9 26080000 		.4byte	.LASF73
 3354 03bd 01       		.byte	0x1
 3355 03be 5A       		.byte	0x5a
 3356 03bf 09040000 		.4byte	0x409
 3357 03c3 02       		.uleb128 0x2
 3358 03c4 91       		.byte	0x91
 3359 03c5 6C       		.sleb128 -20
 3360 03c6 18       		.uleb128 0x18
 3361 03c7 390D0000 		.4byte	.LASF74
 3362 03cb 01       		.byte	0x1
 3363 03cc 5A       		.byte	0x5a
 3364 03cd 0E040000 		.4byte	0x40e
 3365 03d1 02       		.uleb128 0x2
 3366 03d2 91       		.byte	0x91
 3367 03d3 68       		.sleb128 -24
 3368 03d4 12       		.uleb128 0x12
 3369 03d5 260A0000 		.4byte	.LASF75
 3370 03d9 01       		.byte	0x1
 3371 03da 5C       		.byte	0x5c
 3372 03db 2B010000 		.4byte	0x12b
 3373 03df 02       		.uleb128 0x2
 3374 03e0 91       		.byte	0x91
 3375 03e1 70       		.sleb128 -16
 3376 03e2 12       		.uleb128 0x12
 3377 03e3 43060000 		.4byte	.LASF72
 3378 03e7 01       		.byte	0x1
 3379 03e8 5D       		.byte	0x5d
 3380 03e9 2B010000 		.4byte	0x12b
 3381 03ed 02       		.uleb128 0x2
 3382 03ee 91       		.byte	0x91
 3383 03ef 74       		.sleb128 -12
 3384 03f0 16       		.uleb128 0x16
 3385 03f1 27050000 		.4byte	.LASF76
 3386 03f5 01       		.byte	0x1
 3387 03f6 5F       		.byte	0x5f
 3388 03f7 25000000 		.4byte	0x25
 3389 03fb 14       		.uleb128 0x14
 3390 03fc 00       		.byte	0
 3391 03fd 00       		.byte	0
 3392 03fe 06       		.uleb128 0x6
 3393 03ff 04       		.byte	0x4
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccQCZNNL.s 			page 84


 3394 0400 04040000 		.4byte	0x404
 3395 0404 07       		.uleb128 0x7
 3396 0405 BC020000 		.4byte	0x2bc
 3397 0409 07       		.uleb128 0x7
 3398 040a FE030000 		.4byte	0x3fe
 3399 040e 06       		.uleb128 0x6
 3400 040f 04       		.byte	0x4
 3401 0410 4C010000 		.4byte	0x14c
 3402 0414 11       		.uleb128 0x11
 3403 0415 EB0C0000 		.4byte	.LASF77
 3404 0419 01       		.byte	0x1
 3405 041a 74       		.byte	0x74
 3406 041b 2B010000 		.4byte	0x12b
 3407 041f 00000000 		.4byte	.LFB71
 3408 0423 3C000000 		.4byte	.LFE71-.LFB71
 3409 0427 01       		.uleb128 0x1
 3410 0428 9C       		.byte	0x9c
 3411 0429 9E040000 		.4byte	0x49e
 3412 042d 18       		.uleb128 0x18
 3413 042e 230C0000 		.4byte	.LASF52
 3414 0432 01       		.byte	0x1
 3415 0433 74       		.byte	0x74
 3416 0434 04010000 		.4byte	0x104
 3417 0438 02       		.uleb128 0x2
 3418 0439 91       		.byte	0x91
 3419 043a 6C       		.sleb128 -20
 3420 043b 18       		.uleb128 0x18
 3421 043c 64050000 		.4byte	.LASF53
 3422 0440 01       		.byte	0x1
 3423 0441 74       		.byte	0x74
 3424 0442 A1020000 		.4byte	0x2a1
 3425 0446 02       		.uleb128 0x2
 3426 0447 91       		.byte	0x91
 3427 0448 68       		.sleb128 -24
 3428 0449 18       		.uleb128 0x18
 3429 044a 90030000 		.4byte	.LASF54
 3430 044e 01       		.byte	0x1
 3431 044f 74       		.byte	0x74
 3432 0450 B4000000 		.4byte	0xb4
 3433 0454 02       		.uleb128 0x2
 3434 0455 91       		.byte	0x91
 3435 0456 66       		.sleb128 -26
 3436 0457 18       		.uleb128 0x18
 3437 0458 34090000 		.4byte	.LASF55
 3438 045c 01       		.byte	0x1
 3439 045d 74       		.byte	0x74
 3440 045e F1000000 		.4byte	0xf1
 3441 0462 02       		.uleb128 0x2
 3442 0463 91       		.byte	0x91
 3443 0464 60       		.sleb128 -32
 3444 0465 18       		.uleb128 0x18
 3445 0466 A7000000 		.4byte	.LASF56
 3446 046a 01       		.byte	0x1
 3447 046b 74       		.byte	0x74
 3448 046c 36010000 		.4byte	0x136
 3449 0470 02       		.uleb128 0x2
 3450 0471 91       		.byte	0x91
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccQCZNNL.s 			page 85


 3451 0472 00       		.sleb128 0
 3452 0473 18       		.uleb128 0x18
 3453 0474 390D0000 		.4byte	.LASF74
 3454 0478 01       		.byte	0x1
 3455 0479 74       		.byte	0x74
 3456 047a 0E040000 		.4byte	0x40e
 3457 047e 02       		.uleb128 0x2
 3458 047f 91       		.byte	0x91
 3459 0480 04       		.sleb128 4
 3460 0481 12       		.uleb128 0x12
 3461 0482 260A0000 		.4byte	.LASF75
 3462 0486 01       		.byte	0x1
 3463 0487 76       		.byte	0x76
 3464 0488 2B010000 		.4byte	0x12b
 3465 048c 02       		.uleb128 0x2
 3466 048d 91       		.byte	0x91
 3467 048e 70       		.sleb128 -16
 3468 048f 12       		.uleb128 0x12
 3469 0490 43060000 		.4byte	.LASF72
 3470 0494 01       		.byte	0x1
 3471 0495 77       		.byte	0x77
 3472 0496 2B010000 		.4byte	0x12b
 3473 049a 02       		.uleb128 0x2
 3474 049b 91       		.byte	0x91
 3475 049c 74       		.sleb128 -12
 3476 049d 00       		.byte	0
 3477 049e 17       		.uleb128 0x17
 3478 049f 740B0000 		.4byte	.LASF79
 3479 04a3 01       		.byte	0x1
 3480 04a4 8D       		.byte	0x8d
 3481 04a5 00000000 		.4byte	.LFB72
 3482 04a9 26000000 		.4byte	.LFE72-.LFB72
 3483 04ad 01       		.uleb128 0x1
 3484 04ae 9C       		.byte	0x9c
 3485 04af DE040000 		.4byte	0x4de
 3486 04b3 18       		.uleb128 0x18
 3487 04b4 3D060000 		.4byte	.LASF80
 3488 04b8 01       		.byte	0x1
 3489 04b9 8D       		.byte	0x8d
 3490 04ba 4C010000 		.4byte	0x14c
 3491 04be 02       		.uleb128 0x2
 3492 04bf 91       		.byte	0x91
 3493 04c0 6C       		.sleb128 -20
 3494 04c1 18       		.uleb128 0x18
 3495 04c2 2F020000 		.4byte	.LASF58
 3496 04c6 01       		.byte	0x1
 3497 04c7 8D       		.byte	0x8d
 3498 04c8 E9040000 		.4byte	0x4e9
 3499 04cc 02       		.uleb128 0x2
 3500 04cd 91       		.byte	0x91
 3501 04ce 68       		.sleb128 -24
 3502 04cf 12       		.uleb128 0x12
 3503 04d0 43060000 		.4byte	.LASF72
 3504 04d4 01       		.byte	0x1
 3505 04d5 8F       		.byte	0x8f
 3506 04d6 2B010000 		.4byte	0x12b
 3507 04da 02       		.uleb128 0x2
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccQCZNNL.s 			page 86


 3508 04db 91       		.byte	0x91
 3509 04dc 74       		.sleb128 -12
 3510 04dd 00       		.byte	0
 3511 04de 06       		.uleb128 0x6
 3512 04df 04       		.byte	0x4
 3513 04e0 E4040000 		.4byte	0x4e4
 3514 04e4 07       		.uleb128 0x7
 3515 04e5 35020000 		.4byte	0x235
 3516 04e9 07       		.uleb128 0x7
 3517 04ea DE040000 		.4byte	0x4de
 3518 04ee 17       		.uleb128 0x17
 3519 04ef 97000000 		.4byte	.LASF81
 3520 04f3 01       		.byte	0x1
 3521 04f4 97       		.byte	0x97
 3522 04f5 00000000 		.4byte	.LFB73
 3523 04f9 22000000 		.4byte	.LFE73-.LFB73
 3524 04fd 01       		.uleb128 0x1
 3525 04fe 9C       		.byte	0x9c
 3526 04ff 20050000 		.4byte	0x520
 3527 0503 18       		.uleb128 0x18
 3528 0504 11090000 		.4byte	.LASF82
 3529 0508 01       		.byte	0x1
 3530 0509 97       		.byte	0x97
 3531 050a 4C010000 		.4byte	0x14c
 3532 050e 02       		.uleb128 0x2
 3533 050f 91       		.byte	0x91
 3534 0510 6C       		.sleb128 -20
 3535 0511 12       		.uleb128 0x12
 3536 0512 43060000 		.4byte	.LASF72
 3537 0516 01       		.byte	0x1
 3538 0517 99       		.byte	0x99
 3539 0518 2B010000 		.4byte	0x12b
 3540 051c 02       		.uleb128 0x2
 3541 051d 91       		.byte	0x91
 3542 051e 74       		.sleb128 -12
 3543 051f 00       		.byte	0
 3544 0520 17       		.uleb128 0x17
 3545 0521 8D010000 		.4byte	.LASF83
 3546 0525 01       		.byte	0x1
 3547 0526 A2       		.byte	0xa2
 3548 0527 00000000 		.4byte	.LFB74
 3549 052b 26000000 		.4byte	.LFE74-.LFB74
 3550 052f 01       		.uleb128 0x1
 3551 0530 9C       		.byte	0x9c
 3552 0531 60050000 		.4byte	0x560
 3553 0535 18       		.uleb128 0x18
 3554 0536 C5090000 		.4byte	.LASF84
 3555 053a 01       		.byte	0x1
 3556 053b A2       		.byte	0xa2
 3557 053c 66050000 		.4byte	0x566
 3558 0540 02       		.uleb128 0x2
 3559 0541 91       		.byte	0x91
 3560 0542 6C       		.sleb128 -20
 3561 0543 18       		.uleb128 0x18
 3562 0544 2E0C0000 		.4byte	.LASF85
 3563 0548 01       		.byte	0x1
 3564 0549 A2       		.byte	0xa2
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccQCZNNL.s 			page 87


 3565 054a 41010000 		.4byte	0x141
 3566 054e 02       		.uleb128 0x2
 3567 054f 91       		.byte	0x91
 3568 0550 68       		.sleb128 -24
 3569 0551 12       		.uleb128 0x12
 3570 0552 43060000 		.4byte	.LASF72
 3571 0556 01       		.byte	0x1
 3572 0557 A4       		.byte	0xa4
 3573 0558 2B010000 		.4byte	0x12b
 3574 055c 02       		.uleb128 0x2
 3575 055d 91       		.byte	0x91
 3576 055e 74       		.sleb128 -12
 3577 055f 00       		.byte	0
 3578 0560 06       		.uleb128 0x6
 3579 0561 04       		.byte	0x4
 3580 0562 41010000 		.4byte	0x141
 3581 0566 07       		.uleb128 0x7
 3582 0567 60050000 		.4byte	0x560
 3583 056b 17       		.uleb128 0x17
 3584 056c 74030000 		.4byte	.LASF86
 3585 0570 01       		.byte	0x1
 3586 0571 BA       		.byte	0xba
 3587 0572 00000000 		.4byte	.LFB75
 3588 0576 22000000 		.4byte	.LFE75-.LFB75
 3589 057a 01       		.uleb128 0x1
 3590 057b 9C       		.byte	0x9c
 3591 057c 9D050000 		.4byte	0x59d
 3592 0580 18       		.uleb128 0x18
 3593 0581 CA0A0000 		.4byte	.LASF87
 3594 0585 01       		.byte	0x1
 3595 0586 BA       		.byte	0xba
 3596 0587 41010000 		.4byte	0x141
 3597 058b 02       		.uleb128 0x2
 3598 058c 91       		.byte	0x91
 3599 058d 6C       		.sleb128 -20
 3600 058e 12       		.uleb128 0x12
 3601 058f 43060000 		.4byte	.LASF72
 3602 0593 01       		.byte	0x1
 3603 0594 BC       		.byte	0xbc
 3604 0595 2B010000 		.4byte	0x12b
 3605 0599 02       		.uleb128 0x2
 3606 059a 91       		.byte	0x91
 3607 059b 74       		.sleb128 -12
 3608 059c 00       		.byte	0
 3609 059d 11       		.uleb128 0x11
 3610 059e 8A0A0000 		.4byte	.LASF88
 3611 05a2 01       		.byte	0x1
 3612 05a3 C5       		.byte	0xc5
 3613 05a4 36010000 		.4byte	0x136
 3614 05a8 00000000 		.4byte	.LFB76
 3615 05ac 26000000 		.4byte	.LFE76-.LFB76
 3616 05b0 01       		.uleb128 0x1
 3617 05b1 9C       		.byte	0x9c
 3618 05b2 E1050000 		.4byte	0x5e1
 3619 05b6 18       		.uleb128 0x18
 3620 05b7 BE050000 		.4byte	.LASF89
 3621 05bb 01       		.byte	0x1
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccQCZNNL.s 			page 88


 3622 05bc C5       		.byte	0xc5
 3623 05bd E1050000 		.4byte	0x5e1
 3624 05c1 02       		.uleb128 0x2
 3625 05c2 91       		.byte	0x91
 3626 05c3 6C       		.sleb128 -20
 3627 05c4 12       		.uleb128 0x12
 3628 05c5 B7020000 		.4byte	.LASF90
 3629 05c9 01       		.byte	0x1
 3630 05ca C7       		.byte	0xc7
 3631 05cb 36010000 		.4byte	0x136
 3632 05cf 02       		.uleb128 0x2
 3633 05d0 91       		.byte	0x91
 3634 05d1 70       		.sleb128 -16
 3635 05d2 12       		.uleb128 0x12
 3636 05d3 43060000 		.4byte	.LASF72
 3637 05d7 01       		.byte	0x1
 3638 05d8 C8       		.byte	0xc8
 3639 05d9 2B010000 		.4byte	0x12b
 3640 05dd 02       		.uleb128 0x2
 3641 05de 91       		.byte	0x91
 3642 05df 74       		.sleb128 -12
 3643 05e0 00       		.byte	0
 3644 05e1 07       		.uleb128 0x7
 3645 05e2 4C010000 		.4byte	0x14c
 3646 05e6 17       		.uleb128 0x17
 3647 05e7 66020000 		.4byte	.LASF91
 3648 05eb 01       		.byte	0x1
 3649 05ec D2       		.byte	0xd2
 3650 05ed 00000000 		.4byte	.LFB77
 3651 05f1 26000000 		.4byte	.LFE77-.LFB77
 3652 05f5 01       		.uleb128 0x1
 3653 05f6 9C       		.byte	0x9c
 3654 05f7 26060000 		.4byte	0x626
 3655 05fb 18       		.uleb128 0x18
 3656 05fc BE050000 		.4byte	.LASF89
 3657 0600 01       		.byte	0x1
 3658 0601 D2       		.byte	0xd2
 3659 0602 4C010000 		.4byte	0x14c
 3660 0606 02       		.uleb128 0x2
 3661 0607 91       		.byte	0x91
 3662 0608 6C       		.sleb128 -20
 3663 0609 18       		.uleb128 0x18
 3664 060a 16070000 		.4byte	.LASF92
 3665 060e 01       		.byte	0x1
 3666 060f D2       		.byte	0xd2
 3667 0610 36010000 		.4byte	0x136
 3668 0614 02       		.uleb128 0x2
 3669 0615 91       		.byte	0x91
 3670 0616 68       		.sleb128 -24
 3671 0617 12       		.uleb128 0x12
 3672 0618 43060000 		.4byte	.LASF72
 3673 061c 01       		.byte	0x1
 3674 061d D4       		.byte	0xd4
 3675 061e 2B010000 		.4byte	0x12b
 3676 0622 02       		.uleb128 0x2
 3677 0623 91       		.byte	0x91
 3678 0624 74       		.sleb128 -12
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccQCZNNL.s 			page 89


 3679 0625 00       		.byte	0
 3680 0626 11       		.uleb128 0x11
 3681 0627 71040000 		.4byte	.LASF93
 3682 062b 01       		.byte	0x1
 3683 062c DD       		.byte	0xdd
 3684 062d 93010000 		.4byte	0x193
 3685 0631 00000000 		.4byte	.LFB78
 3686 0635 28000000 		.4byte	.LFE78-.LFB78
 3687 0639 01       		.uleb128 0x1
 3688 063a 9C       		.byte	0x9c
 3689 063b 6A060000 		.4byte	0x66a
 3690 063f 18       		.uleb128 0x18
 3691 0640 BE050000 		.4byte	.LASF89
 3692 0644 01       		.byte	0x1
 3693 0645 DD       		.byte	0xdd
 3694 0646 4C010000 		.4byte	0x14c
 3695 064a 02       		.uleb128 0x2
 3696 064b 91       		.byte	0x91
 3697 064c 6C       		.sleb128 -20
 3698 064d 12       		.uleb128 0x12
 3699 064e 43060000 		.4byte	.LASF72
 3700 0652 01       		.byte	0x1
 3701 0653 DF       		.byte	0xdf
 3702 0654 2B010000 		.4byte	0x12b
 3703 0658 02       		.uleb128 0x2
 3704 0659 91       		.byte	0x91
 3705 065a 74       		.sleb128 -12
 3706 065b 12       		.uleb128 0x12
 3707 065c A1020000 		.4byte	.LASF94
 3708 0660 01       		.byte	0x1
 3709 0661 E0       		.byte	0xe0
 3710 0662 93010000 		.4byte	0x193
 3711 0666 02       		.uleb128 0x2
 3712 0667 91       		.byte	0x91
 3713 0668 73       		.sleb128 -13
 3714 0669 00       		.byte	0
 3715 066a 19       		.uleb128 0x19
 3716 066b E1070000 		.4byte	.LASF95
 3717 066f 01       		.byte	0x1
 3718 0670 0201     		.2byte	0x102
 3719 0672 00000000 		.4byte	.LFB79
 3720 0676 22000000 		.4byte	.LFE79-.LFB79
 3721 067a 01       		.uleb128 0x1
 3722 067b 9C       		.byte	0x9c
 3723 067c 9F060000 		.4byte	0x69f
 3724 0680 1A       		.uleb128 0x1a
 3725 0681 B5090000 		.4byte	.LASF96
 3726 0685 01       		.byte	0x1
 3727 0686 0201     		.2byte	0x102
 3728 0688 4C010000 		.4byte	0x14c
 3729 068c 02       		.uleb128 0x2
 3730 068d 91       		.byte	0x91
 3731 068e 6C       		.sleb128 -20
 3732 068f 1B       		.uleb128 0x1b
 3733 0690 43060000 		.4byte	.LASF72
 3734 0694 01       		.byte	0x1
 3735 0695 0401     		.2byte	0x104
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccQCZNNL.s 			page 90


 3736 0697 2B010000 		.4byte	0x12b
 3737 069b 02       		.uleb128 0x2
 3738 069c 91       		.byte	0x91
 3739 069d 74       		.sleb128 -12
 3740 069e 00       		.byte	0
 3741 069f 19       		.uleb128 0x19
 3742 06a0 6B060000 		.4byte	.LASF97
 3743 06a4 01       		.byte	0x1
 3744 06a5 0D01     		.2byte	0x10d
 3745 06a7 00000000 		.4byte	.LFB80
 3746 06ab 22000000 		.4byte	.LFE80-.LFB80
 3747 06af 01       		.uleb128 0x1
 3748 06b0 9C       		.byte	0x9c
 3749 06b1 D4060000 		.4byte	0x6d4
 3750 06b5 1A       		.uleb128 0x1a
 3751 06b6 0F030000 		.4byte	.LASF98
 3752 06ba 01       		.byte	0x1
 3753 06bb 0D01     		.2byte	0x10d
 3754 06bd 4C010000 		.4byte	0x14c
 3755 06c1 02       		.uleb128 0x2
 3756 06c2 91       		.byte	0x91
 3757 06c3 6C       		.sleb128 -20
 3758 06c4 1B       		.uleb128 0x1b
 3759 06c5 43060000 		.4byte	.LASF72
 3760 06c9 01       		.byte	0x1
 3761 06ca 0F01     		.2byte	0x10f
 3762 06cc 2B010000 		.4byte	0x12b
 3763 06d0 02       		.uleb128 0x2
 3764 06d1 91       		.byte	0x91
 3765 06d2 74       		.sleb128 -12
 3766 06d3 00       		.byte	0
 3767 06d4 19       		.uleb128 0x19
 3768 06d5 33070000 		.4byte	.LASF99
 3769 06d9 01       		.byte	0x1
 3770 06da 1701     		.2byte	0x117
 3771 06dc 00000000 		.4byte	.LFB81
 3772 06e0 1E000000 		.4byte	.LFE81-.LFB81
 3773 06e4 01       		.uleb128 0x1
 3774 06e5 9C       		.byte	0x9c
 3775 06e6 FA060000 		.4byte	0x6fa
 3776 06ea 1B       		.uleb128 0x1b
 3777 06eb 43060000 		.4byte	.LASF72
 3778 06ef 01       		.byte	0x1
 3779 06f0 1901     		.2byte	0x119
 3780 06f2 2B010000 		.4byte	0x12b
 3781 06f6 02       		.uleb128 0x2
 3782 06f7 91       		.byte	0x91
 3783 06f8 74       		.sleb128 -12
 3784 06f9 00       		.byte	0
 3785 06fa 1C       		.uleb128 0x1c
 3786 06fb D7080000 		.4byte	.LASF100
 3787 06ff 01       		.byte	0x1
 3788 0700 2001     		.2byte	0x120
 3789 0702 2B010000 		.4byte	0x12b
 3790 0706 00000000 		.4byte	.LFB82
 3791 070a 22000000 		.4byte	.LFE82-.LFB82
 3792 070e 01       		.uleb128 0x1
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccQCZNNL.s 			page 91


 3793 070f 9C       		.byte	0x9c
 3794 0710 33070000 		.4byte	0x733
 3795 0714 1B       		.uleb128 0x1b
 3796 0715 260A0000 		.4byte	.LASF75
 3797 0719 01       		.byte	0x1
 3798 071a 2201     		.2byte	0x122
 3799 071c 2B010000 		.4byte	0x12b
 3800 0720 02       		.uleb128 0x2
 3801 0721 91       		.byte	0x91
 3802 0722 70       		.sleb128 -16
 3803 0723 1B       		.uleb128 0x1b
 3804 0724 43060000 		.4byte	.LASF72
 3805 0728 01       		.byte	0x1
 3806 0729 2301     		.2byte	0x123
 3807 072b 2B010000 		.4byte	0x12b
 3808 072f 02       		.uleb128 0x2
 3809 0730 91       		.byte	0x91
 3810 0731 74       		.sleb128 -12
 3811 0732 00       		.byte	0
 3812 0733 1C       		.uleb128 0x1c
 3813 0734 230D0000 		.4byte	.LASF101
 3814 0738 01       		.byte	0x1
 3815 0739 2B01     		.2byte	0x12b
 3816 073b 41010000 		.4byte	0x141
 3817 073f 00000000 		.4byte	.LFB83
 3818 0743 22000000 		.4byte	.LFE83-.LFB83
 3819 0747 01       		.uleb128 0x1
 3820 0748 9C       		.byte	0x9c
 3821 0749 6C070000 		.4byte	0x76c
 3822 074d 1B       		.uleb128 0x1b
 3823 074e 260A0000 		.4byte	.LASF75
 3824 0752 01       		.byte	0x1
 3825 0753 2D01     		.2byte	0x12d
 3826 0755 41010000 		.4byte	0x141
 3827 0759 02       		.uleb128 0x2
 3828 075a 91       		.byte	0x91
 3829 075b 70       		.sleb128 -16
 3830 075c 1B       		.uleb128 0x1b
 3831 075d 43060000 		.4byte	.LASF72
 3832 0761 01       		.byte	0x1
 3833 0762 2E01     		.2byte	0x12e
 3834 0764 2B010000 		.4byte	0x12b
 3835 0768 02       		.uleb128 0x2
 3836 0769 91       		.byte	0x91
 3837 076a 74       		.sleb128 -12
 3838 076b 00       		.byte	0
 3839 076c 1C       		.uleb128 0x1c
 3840 076d 6E000000 		.4byte	.LASF102
 3841 0771 01       		.byte	0x1
 3842 0772 3601     		.2byte	0x136
 3843 0774 36010000 		.4byte	0x136
 3844 0778 00000000 		.4byte	.LFB84
 3845 077c 22000000 		.4byte	.LFE84-.LFB84
 3846 0780 01       		.uleb128 0x1
 3847 0781 9C       		.byte	0x9c
 3848 0782 A5070000 		.4byte	0x7a5
 3849 0786 1B       		.uleb128 0x1b
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccQCZNNL.s 			page 92


 3850 0787 B7020000 		.4byte	.LASF90
 3851 078b 01       		.byte	0x1
 3852 078c 3801     		.2byte	0x138
 3853 078e 36010000 		.4byte	0x136
 3854 0792 02       		.uleb128 0x2
 3855 0793 91       		.byte	0x91
 3856 0794 70       		.sleb128 -16
 3857 0795 1B       		.uleb128 0x1b
 3858 0796 43060000 		.4byte	.LASF72
 3859 079a 01       		.byte	0x1
 3860 079b 3901     		.2byte	0x139
 3861 079d 2B010000 		.4byte	0x12b
 3862 07a1 02       		.uleb128 0x2
 3863 07a2 91       		.byte	0x91
 3864 07a3 74       		.sleb128 -12
 3865 07a4 00       		.byte	0
 3866 07a5 1C       		.uleb128 0x1c
 3867 07a6 29040000 		.4byte	.LASF103
 3868 07aa 01       		.byte	0x1
 3869 07ab 4101     		.2byte	0x141
 3870 07ad F3000000 		.4byte	0xf3
 3871 07b1 00000000 		.4byte	.LFB85
 3872 07b5 26000000 		.4byte	.LFE85-.LFB85
 3873 07b9 01       		.uleb128 0x1
 3874 07ba 9C       		.byte	0x9c
 3875 07bb ED070000 		.4byte	0x7ed
 3876 07bf 1A       		.uleb128 0x1a
 3877 07c0 D4070000 		.4byte	.LASF104
 3878 07c4 01       		.byte	0x1
 3879 07c5 4101     		.2byte	0x141
 3880 07c7 4C010000 		.4byte	0x14c
 3881 07cb 02       		.uleb128 0x2
 3882 07cc 91       		.byte	0x91
 3883 07cd 6C       		.sleb128 -20
 3884 07ce 1B       		.uleb128 0x1b
 3885 07cf EA080000 		.4byte	.LASF105
 3886 07d3 01       		.byte	0x1
 3887 07d4 4301     		.2byte	0x143
 3888 07d6 F3000000 		.4byte	0xf3
 3889 07da 02       		.uleb128 0x2
 3890 07db 91       		.byte	0x91
 3891 07dc 70       		.sleb128 -16
 3892 07dd 1B       		.uleb128 0x1b
 3893 07de 43060000 		.4byte	.LASF72
 3894 07e2 01       		.byte	0x1
 3895 07e3 4401     		.2byte	0x144
 3896 07e5 2B010000 		.4byte	0x12b
 3897 07e9 02       		.uleb128 0x2
 3898 07ea 91       		.byte	0x91
 3899 07eb 74       		.sleb128 -12
 3900 07ec 00       		.byte	0
 3901 07ed 1C       		.uleb128 0x1c
 3902 07ee 62080000 		.4byte	.LASF106
 3903 07f2 01       		.byte	0x1
 3904 07f3 C601     		.2byte	0x1c6
 3905 07f5 2B010000 		.4byte	0x12b
 3906 07f9 00000000 		.4byte	.LFB86
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccQCZNNL.s 			page 93


 3907 07fd 26000000 		.4byte	.LFE86-.LFB86
 3908 0801 01       		.uleb128 0x1
 3909 0802 9C       		.byte	0x9c
 3910 0803 35080000 		.4byte	0x835
 3911 0807 1A       		.uleb128 0x1a
 3912 0808 F30B0000 		.4byte	.LASF107
 3913 080c 01       		.byte	0x1
 3914 080d C601     		.2byte	0x1c6
 3915 080f 41010000 		.4byte	0x141
 3916 0813 02       		.uleb128 0x2
 3917 0814 91       		.byte	0x91
 3918 0815 6C       		.sleb128 -20
 3919 0816 1B       		.uleb128 0x1b
 3920 0817 260A0000 		.4byte	.LASF75
 3921 081b 01       		.byte	0x1
 3922 081c C801     		.2byte	0x1c8
 3923 081e 2B010000 		.4byte	0x12b
 3924 0822 02       		.uleb128 0x2
 3925 0823 91       		.byte	0x91
 3926 0824 70       		.sleb128 -16
 3927 0825 1B       		.uleb128 0x1b
 3928 0826 43060000 		.4byte	.LASF72
 3929 082a 01       		.byte	0x1
 3930 082b C901     		.2byte	0x1c9
 3931 082d 2B010000 		.4byte	0x12b
 3932 0831 02       		.uleb128 0x2
 3933 0832 91       		.byte	0x91
 3934 0833 74       		.sleb128 -12
 3935 0834 00       		.byte	0
 3936 0835 1C       		.uleb128 0x1c
 3937 0836 760C0000 		.4byte	.LASF108
 3938 083a 01       		.byte	0x1
 3939 083b D201     		.2byte	0x1d2
 3940 083d 36010000 		.4byte	0x136
 3941 0841 00000000 		.4byte	.LFB87
 3942 0845 26000000 		.4byte	.LFE87-.LFB87
 3943 0849 01       		.uleb128 0x1
 3944 084a 9C       		.byte	0x9c
 3945 084b 7D080000 		.4byte	0x87d
 3946 084f 1A       		.uleb128 0x1a
 3947 0850 3D060000 		.4byte	.LASF80
 3948 0854 01       		.byte	0x1
 3949 0855 D201     		.2byte	0x1d2
 3950 0857 4C010000 		.4byte	0x14c
 3951 085b 02       		.uleb128 0x2
 3952 085c 91       		.byte	0x91
 3953 085d 6C       		.sleb128 -20
 3954 085e 1B       		.uleb128 0x1b
 3955 085f B7020000 		.4byte	.LASF90
 3956 0863 01       		.byte	0x1
 3957 0864 D401     		.2byte	0x1d4
 3958 0866 36010000 		.4byte	0x136
 3959 086a 02       		.uleb128 0x2
 3960 086b 91       		.byte	0x91
 3961 086c 70       		.sleb128 -16
 3962 086d 1B       		.uleb128 0x1b
 3963 086e 43060000 		.4byte	.LASF72
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccQCZNNL.s 			page 94


 3964 0872 01       		.byte	0x1
 3965 0873 D501     		.2byte	0x1d5
 3966 0875 2B010000 		.4byte	0x12b
 3967 0879 02       		.uleb128 0x2
 3968 087a 91       		.byte	0x91
 3969 087b 74       		.sleb128 -12
 3970 087c 00       		.byte	0
 3971 087d 19       		.uleb128 0x19
 3972 087e 7B020000 		.4byte	.LASF109
 3973 0882 01       		.byte	0x1
 3974 0883 0502     		.2byte	0x205
 3975 0885 00000000 		.4byte	.LFB88
 3976 0889 22000000 		.4byte	.LFE88-.LFB88
 3977 088d 01       		.uleb128 0x1
 3978 088e 9C       		.byte	0x9c
 3979 088f B2080000 		.4byte	0x8b2
 3980 0893 1A       		.uleb128 0x1a
 3981 0894 64070000 		.4byte	.LASF110
 3982 0898 01       		.byte	0x1
 3983 0899 0502     		.2byte	0x205
 3984 089b B8080000 		.4byte	0x8b8
 3985 089f 02       		.uleb128 0x2
 3986 08a0 91       		.byte	0x91
 3987 08a1 6C       		.sleb128 -20
 3988 08a2 1B       		.uleb128 0x1b
 3989 08a3 43060000 		.4byte	.LASF72
 3990 08a7 01       		.byte	0x1
 3991 08a8 0702     		.2byte	0x207
 3992 08aa 2B010000 		.4byte	0x12b
 3993 08ae 02       		.uleb128 0x2
 3994 08af 91       		.byte	0x91
 3995 08b0 74       		.sleb128 -12
 3996 08b1 00       		.byte	0
 3997 08b2 06       		.uleb128 0x6
 3998 08b3 04       		.byte	0x4
 3999 08b4 F9010000 		.4byte	0x1f9
 4000 08b8 07       		.uleb128 0x7
 4001 08b9 B2080000 		.4byte	0x8b2
 4002 08bd 1C       		.uleb128 0x1c
 4003 08be BE080000 		.4byte	.LASF111
 4004 08c2 01       		.byte	0x1
 4005 08c3 0E02     		.2byte	0x20e
 4006 08c5 2B010000 		.4byte	0x12b
 4007 08c9 00000000 		.4byte	.LFB89
 4008 08cd 2A000000 		.4byte	.LFE89-.LFB89
 4009 08d1 01       		.uleb128 0x1
 4010 08d2 9C       		.byte	0x9c
 4011 08d3 14090000 		.4byte	0x914
 4012 08d7 1A       		.uleb128 0x1a
 4013 08d8 64070000 		.4byte	.LASF110
 4014 08dc 01       		.byte	0x1
 4015 08dd 0E02     		.2byte	0x20e
 4016 08df B8080000 		.4byte	0x8b8
 4017 08e3 02       		.uleb128 0x2
 4018 08e4 91       		.byte	0x91
 4019 08e5 6C       		.sleb128 -20
 4020 08e6 1A       		.uleb128 0x1a
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccQCZNNL.s 			page 95


 4021 08e7 00000000 		.4byte	.LASF112
 4022 08eb 01       		.byte	0x1
 4023 08ec 0E02     		.2byte	0x20e
 4024 08ee 66050000 		.4byte	0x566
 4025 08f2 02       		.uleb128 0x2
 4026 08f3 91       		.byte	0x91
 4027 08f4 68       		.sleb128 -24
 4028 08f5 1B       		.uleb128 0x1b
 4029 08f6 260A0000 		.4byte	.LASF75
 4030 08fa 01       		.byte	0x1
 4031 08fb 1002     		.2byte	0x210
 4032 08fd 2B010000 		.4byte	0x12b
 4033 0901 02       		.uleb128 0x2
 4034 0902 91       		.byte	0x91
 4035 0903 70       		.sleb128 -16
 4036 0904 1B       		.uleb128 0x1b
 4037 0905 43060000 		.4byte	.LASF72
 4038 0909 01       		.byte	0x1
 4039 090a 1102     		.2byte	0x211
 4040 090c 2B010000 		.4byte	0x12b
 4041 0910 02       		.uleb128 0x2
 4042 0911 91       		.byte	0x91
 4043 0912 74       		.sleb128 -12
 4044 0913 00       		.byte	0
 4045 0914 1C       		.uleb128 0x1c
 4046 0915 F70A0000 		.4byte	.LASF113
 4047 0919 01       		.byte	0x1
 4048 091a 1A02     		.2byte	0x21a
 4049 091c 2B010000 		.4byte	0x12b
 4050 0920 00000000 		.4byte	.LFB90
 4051 0924 34000000 		.4byte	.LFE90-.LFB90
 4052 0928 01       		.uleb128 0x1
 4053 0929 9C       		.byte	0x9c
 4054 092a 89090000 		.4byte	0x989
 4055 092e 1A       		.uleb128 0x1a
 4056 092f 18080000 		.4byte	.LASF114
 4057 0933 01       		.byte	0x1
 4058 0934 1A02     		.2byte	0x21a
 4059 0936 4C010000 		.4byte	0x14c
 4060 093a 02       		.uleb128 0x2
 4061 093b 91       		.byte	0x91
 4062 093c 6C       		.sleb128 -20
 4063 093d 1A       		.uleb128 0x1a
 4064 093e AD090000 		.4byte	.LASF115
 4065 0942 01       		.byte	0x1
 4066 0943 1A02     		.2byte	0x21a
 4067 0945 CA000000 		.4byte	0xca
 4068 0949 02       		.uleb128 0x2
 4069 094a 91       		.byte	0x91
 4070 094b 68       		.sleb128 -24
 4071 094c 1A       		.uleb128 0x1a
 4072 094d 8F070000 		.4byte	.LASF116
 4073 0951 01       		.byte	0x1
 4074 0952 1A02     		.2byte	0x21a
 4075 0954 C9010000 		.4byte	0x1c9
 4076 0958 02       		.uleb128 0x2
 4077 0959 91       		.byte	0x91
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccQCZNNL.s 			page 96


 4078 095a 67       		.sleb128 -25
 4079 095b 1A       		.uleb128 0x1a
 4080 095c 47070000 		.4byte	.LASF117
 4081 0960 01       		.byte	0x1
 4082 0961 1A02     		.2byte	0x21a
 4083 0963 89090000 		.4byte	0x989
 4084 0967 02       		.uleb128 0x2
 4085 0968 91       		.byte	0x91
 4086 0969 60       		.sleb128 -32
 4087 096a 1B       		.uleb128 0x1b
 4088 096b 260A0000 		.4byte	.LASF75
 4089 096f 01       		.byte	0x1
 4090 0970 1C02     		.2byte	0x21c
 4091 0972 2B010000 		.4byte	0x12b
 4092 0976 02       		.uleb128 0x2
 4093 0977 91       		.byte	0x91
 4094 0978 70       		.sleb128 -16
 4095 0979 1B       		.uleb128 0x1b
 4096 097a 43060000 		.4byte	.LASF72
 4097 097e 01       		.byte	0x1
 4098 097f 1D02     		.2byte	0x21d
 4099 0981 2B010000 		.4byte	0x12b
 4100 0985 02       		.uleb128 0x2
 4101 0986 91       		.byte	0x91
 4102 0987 74       		.sleb128 -12
 4103 0988 00       		.byte	0
 4104 0989 06       		.uleb128 0x6
 4105 098a 04       		.byte	0x4
 4106 098b CA000000 		.4byte	0xca
 4107 098f 1C       		.uleb128 0x1c
 4108 0990 20090000 		.4byte	.LASF118
 4109 0994 01       		.byte	0x1
 4110 0995 2702     		.2byte	0x227
 4111 0997 2B010000 		.4byte	0x12b
 4112 099b 00000000 		.4byte	.LFB91
 4113 099f 32000000 		.4byte	.LFE91-.LFB91
 4114 09a3 01       		.uleb128 0x1
 4115 09a4 9C       		.byte	0x9c
 4116 09a5 040A0000 		.4byte	0xa04
 4117 09a9 1A       		.uleb128 0x1a
 4118 09aa 3B040000 		.4byte	.LASF119
 4119 09ae 01       		.byte	0x1
 4120 09af 2702     		.2byte	0x227
 4121 09b1 CA000000 		.4byte	0xca
 4122 09b5 02       		.uleb128 0x2
 4123 09b6 91       		.byte	0x91
 4124 09b7 6C       		.sleb128 -20
 4125 09b8 1A       		.uleb128 0x1a
 4126 09b9 E7000000 		.4byte	.LASF120
 4127 09bd 01       		.byte	0x1
 4128 09be 2702     		.2byte	0x227
 4129 09c0 CA000000 		.4byte	0xca
 4130 09c4 02       		.uleb128 0x2
 4131 09c5 91       		.byte	0x91
 4132 09c6 68       		.sleb128 -24
 4133 09c7 1A       		.uleb128 0x1a
 4134 09c8 F6090000 		.4byte	.LASF121
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccQCZNNL.s 			page 97


 4135 09cc 01       		.byte	0x1
 4136 09cd 2702     		.2byte	0x227
 4137 09cf 89090000 		.4byte	0x989
 4138 09d3 02       		.uleb128 0x2
 4139 09d4 91       		.byte	0x91
 4140 09d5 64       		.sleb128 -28
 4141 09d6 1A       		.uleb128 0x1a
 4142 09d7 A90B0000 		.4byte	.LASF122
 4143 09db 01       		.byte	0x1
 4144 09dc 2702     		.2byte	0x227
 4145 09de 41010000 		.4byte	0x141
 4146 09e2 02       		.uleb128 0x2
 4147 09e3 91       		.byte	0x91
 4148 09e4 60       		.sleb128 -32
 4149 09e5 1B       		.uleb128 0x1b
 4150 09e6 260A0000 		.4byte	.LASF75
 4151 09ea 01       		.byte	0x1
 4152 09eb 2902     		.2byte	0x229
 4153 09ed 2B010000 		.4byte	0x12b
 4154 09f1 02       		.uleb128 0x2
 4155 09f2 91       		.byte	0x91
 4156 09f3 70       		.sleb128 -16
 4157 09f4 1B       		.uleb128 0x1b
 4158 09f5 43060000 		.4byte	.LASF72
 4159 09f9 01       		.byte	0x1
 4160 09fa 2A02     		.2byte	0x22a
 4161 09fc 2B010000 		.4byte	0x12b
 4162 0a00 02       		.uleb128 0x2
 4163 0a01 91       		.byte	0x91
 4164 0a02 74       		.sleb128 -12
 4165 0a03 00       		.byte	0
 4166 0a04 1C       		.uleb128 0x1c
 4167 0a05 56060000 		.4byte	.LASF123
 4168 0a09 01       		.byte	0x1
 4169 0a0a 3402     		.2byte	0x234
 4170 0a0c CA000000 		.4byte	0xca
 4171 0a10 00000000 		.4byte	.LFB92
 4172 0a14 2A000000 		.4byte	.LFE92-.LFB92
 4173 0a18 01       		.uleb128 0x1
 4174 0a19 9C       		.byte	0x9c
 4175 0a1a 5B0A0000 		.4byte	0xa5b
 4176 0a1e 1A       		.uleb128 0x1a
 4177 0a1f CF030000 		.4byte	.LASF124
 4178 0a23 01       		.byte	0x1
 4179 0a24 3402     		.2byte	0x234
 4180 0a26 2B010000 		.4byte	0x12b
 4181 0a2a 02       		.uleb128 0x2
 4182 0a2b 91       		.byte	0x91
 4183 0a2c 6C       		.sleb128 -20
 4184 0a2d 1A       		.uleb128 0x1a
 4185 0a2e A90B0000 		.4byte	.LASF122
 4186 0a32 01       		.byte	0x1
 4187 0a33 3402     		.2byte	0x234
 4188 0a35 41010000 		.4byte	0x141
 4189 0a39 02       		.uleb128 0x2
 4190 0a3a 91       		.byte	0x91
 4191 0a3b 68       		.sleb128 -24
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccQCZNNL.s 			page 98


 4192 0a3c 1B       		.uleb128 0x1b
 4193 0a3d 710D0000 		.4byte	.LASF125
 4194 0a41 01       		.byte	0x1
 4195 0a42 3602     		.2byte	0x236
 4196 0a44 CA000000 		.4byte	0xca
 4197 0a48 02       		.uleb128 0x2
 4198 0a49 91       		.byte	0x91
 4199 0a4a 70       		.sleb128 -16
 4200 0a4b 1B       		.uleb128 0x1b
 4201 0a4c 43060000 		.4byte	.LASF72
 4202 0a50 01       		.byte	0x1
 4203 0a51 3702     		.2byte	0x237
 4204 0a53 2B010000 		.4byte	0x12b
 4205 0a57 02       		.uleb128 0x2
 4206 0a58 91       		.byte	0x91
 4207 0a59 74       		.sleb128 -12
 4208 0a5a 00       		.byte	0
 4209 0a5b 1C       		.uleb128 0x1c
 4210 0a5c D10C0000 		.4byte	.LASF126
 4211 0a60 01       		.byte	0x1
 4212 0a61 4102     		.2byte	0x241
 4213 0a63 2B010000 		.4byte	0x12b
 4214 0a67 00000000 		.4byte	.LFB93
 4215 0a6b 26000000 		.4byte	.LFE93-.LFB93
 4216 0a6f 01       		.uleb128 0x1
 4217 0a70 9C       		.byte	0x9c
 4218 0a71 A30A0000 		.4byte	0xaa3
 4219 0a75 1A       		.uleb128 0x1a
 4220 0a76 3D060000 		.4byte	.LASF80
 4221 0a7a 01       		.byte	0x1
 4222 0a7b 4102     		.2byte	0x241
 4223 0a7d 4C010000 		.4byte	0x14c
 4224 0a81 02       		.uleb128 0x2
 4225 0a82 91       		.byte	0x91
 4226 0a83 6C       		.sleb128 -20
 4227 0a84 1B       		.uleb128 0x1b
 4228 0a85 260A0000 		.4byte	.LASF75
 4229 0a89 01       		.byte	0x1
 4230 0a8a 4302     		.2byte	0x243
 4231 0a8c 2B010000 		.4byte	0x12b
 4232 0a90 02       		.uleb128 0x2
 4233 0a91 91       		.byte	0x91
 4234 0a92 70       		.sleb128 -16
 4235 0a93 1B       		.uleb128 0x1b
 4236 0a94 43060000 		.4byte	.LASF72
 4237 0a98 01       		.byte	0x1
 4238 0a99 4402     		.2byte	0x244
 4239 0a9b 2B010000 		.4byte	0x12b
 4240 0a9f 02       		.uleb128 0x2
 4241 0aa0 91       		.byte	0x91
 4242 0aa1 74       		.sleb128 -12
 4243 0aa2 00       		.byte	0
 4244 0aa3 1C       		.uleb128 0x1c
 4245 0aa4 0B0A0000 		.4byte	.LASF127
 4246 0aa8 01       		.byte	0x1
 4247 0aa9 4E02     		.2byte	0x24e
 4248 0aab CA000000 		.4byte	0xca
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccQCZNNL.s 			page 99


 4249 0aaf 00000000 		.4byte	.LFB94
 4250 0ab3 2A000000 		.4byte	.LFE94-.LFB94
 4251 0ab7 01       		.uleb128 0x1
 4252 0ab8 9C       		.byte	0x9c
 4253 0ab9 FA0A0000 		.4byte	0xafa
 4254 0abd 1A       		.uleb128 0x1a
 4255 0abe 3D060000 		.4byte	.LASF80
 4256 0ac2 01       		.byte	0x1
 4257 0ac3 4E02     		.2byte	0x24e
 4258 0ac5 4C010000 		.4byte	0x14c
 4259 0ac9 02       		.uleb128 0x2
 4260 0aca 91       		.byte	0x91
 4261 0acb 6C       		.sleb128 -20
 4262 0acc 1A       		.uleb128 0x1a
 4263 0acd 66010000 		.4byte	.LASF128
 4264 0ad1 01       		.byte	0x1
 4265 0ad2 4E02     		.2byte	0x24e
 4266 0ad4 CA000000 		.4byte	0xca
 4267 0ad8 02       		.uleb128 0x2
 4268 0ad9 91       		.byte	0x91
 4269 0ada 68       		.sleb128 -24
 4270 0adb 1B       		.uleb128 0x1b
 4271 0adc 710D0000 		.4byte	.LASF125
 4272 0ae0 01       		.byte	0x1
 4273 0ae1 5002     		.2byte	0x250
 4274 0ae3 CA000000 		.4byte	0xca
 4275 0ae7 02       		.uleb128 0x2
 4276 0ae8 91       		.byte	0x91
 4277 0ae9 70       		.sleb128 -16
 4278 0aea 1B       		.uleb128 0x1b
 4279 0aeb 43060000 		.4byte	.LASF72
 4280 0aef 01       		.byte	0x1
 4281 0af0 5102     		.2byte	0x251
 4282 0af2 2B010000 		.4byte	0x12b
 4283 0af6 02       		.uleb128 0x2
 4284 0af7 91       		.byte	0x91
 4285 0af8 74       		.sleb128 -12
 4286 0af9 00       		.byte	0
 4287 0afa 1C       		.uleb128 0x1c
 4288 0afb 3E0A0000 		.4byte	.LASF129
 4289 0aff 01       		.byte	0x1
 4290 0b00 5B02     		.2byte	0x25b
 4291 0b02 C7020000 		.4byte	0x2c7
 4292 0b06 00000000 		.4byte	.LFB95
 4293 0b0a 32000000 		.4byte	.LFE95-.LFB95
 4294 0b0e 01       		.uleb128 0x1
 4295 0b0f 9C       		.byte	0x9c
 4296 0b10 600B0000 		.4byte	0xb60
 4297 0b14 1A       		.uleb128 0x1a
 4298 0b15 37080000 		.4byte	.LASF130
 4299 0b19 01       		.byte	0x1
 4300 0b1a 5B02     		.2byte	0x25b
 4301 0b1c 36010000 		.4byte	0x136
 4302 0b20 02       		.uleb128 0x2
 4303 0b21 91       		.byte	0x91
 4304 0b22 6C       		.sleb128 -20
 4305 0b23 1A       		.uleb128 0x1a
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccQCZNNL.s 			page 100


 4306 0b24 A4050000 		.4byte	.LASF131
 4307 0b28 01       		.byte	0x1
 4308 0b29 5B02     		.2byte	0x25b
 4309 0b2b 36010000 		.4byte	0x136
 4310 0b2f 02       		.uleb128 0x2
 4311 0b30 91       		.byte	0x91
 4312 0b31 68       		.sleb128 -24
 4313 0b32 1A       		.uleb128 0x1a
 4314 0b33 BD070000 		.4byte	.LASF132
 4315 0b37 01       		.byte	0x1
 4316 0b38 5B02     		.2byte	0x25b
 4317 0b3a A9000000 		.4byte	0xa9
 4318 0b3e 02       		.uleb128 0x2
 4319 0b3f 91       		.byte	0x91
 4320 0b40 67       		.sleb128 -25
 4321 0b41 1B       		.uleb128 0x1b
 4322 0b42 260A0000 		.4byte	.LASF75
 4323 0b46 01       		.byte	0x1
 4324 0b47 5D02     		.2byte	0x25d
 4325 0b49 C7020000 		.4byte	0x2c7
 4326 0b4d 02       		.uleb128 0x2
 4327 0b4e 91       		.byte	0x91
 4328 0b4f 70       		.sleb128 -16
 4329 0b50 1B       		.uleb128 0x1b
 4330 0b51 43060000 		.4byte	.LASF72
 4331 0b55 01       		.byte	0x1
 4332 0b56 5E02     		.2byte	0x25e
 4333 0b58 2B010000 		.4byte	0x12b
 4334 0b5c 02       		.uleb128 0x2
 4335 0b5d 91       		.byte	0x91
 4336 0b5e 74       		.sleb128 -12
 4337 0b5f 00       		.byte	0
 4338 0b60 1C       		.uleb128 0x1c
 4339 0b61 E8060000 		.4byte	.LASF133
 4340 0b65 01       		.byte	0x1
 4341 0b66 7402     		.2byte	0x274
 4342 0b68 2B010000 		.4byte	0x12b
 4343 0b6c 00000000 		.4byte	.LFB96
 4344 0b70 2A000000 		.4byte	.LFE96-.LFB96
 4345 0b74 01       		.uleb128 0x1
 4346 0b75 9C       		.byte	0x9c
 4347 0b76 B70B0000 		.4byte	0xbb7
 4348 0b7a 1A       		.uleb128 0x1a
 4349 0b7b E2090000 		.4byte	.LASF134
 4350 0b7f 01       		.byte	0x1
 4351 0b80 7402     		.2byte	0x274
 4352 0b82 C7020000 		.4byte	0x2c7
 4353 0b86 02       		.uleb128 0x2
 4354 0b87 91       		.byte	0x91
 4355 0b88 6C       		.sleb128 -20
 4356 0b89 1A       		.uleb128 0x1a
 4357 0b8a 6E070000 		.4byte	.LASF135
 4358 0b8e 01       		.byte	0x1
 4359 0b8f 7402     		.2byte	0x274
 4360 0b91 2B010000 		.4byte	0x12b
 4361 0b95 02       		.uleb128 0x2
 4362 0b96 91       		.byte	0x91
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccQCZNNL.s 			page 101


 4363 0b97 68       		.sleb128 -24
 4364 0b98 1B       		.uleb128 0x1b
 4365 0b99 260A0000 		.4byte	.LASF75
 4366 0b9d 01       		.byte	0x1
 4367 0b9e 7602     		.2byte	0x276
 4368 0ba0 2B010000 		.4byte	0x12b
 4369 0ba4 02       		.uleb128 0x2
 4370 0ba5 91       		.byte	0x91
 4371 0ba6 70       		.sleb128 -16
 4372 0ba7 1B       		.uleb128 0x1b
 4373 0ba8 43060000 		.4byte	.LASF72
 4374 0bac 01       		.byte	0x1
 4375 0bad 7702     		.2byte	0x277
 4376 0baf 2B010000 		.4byte	0x12b
 4377 0bb3 02       		.uleb128 0x2
 4378 0bb4 91       		.byte	0x91
 4379 0bb5 74       		.sleb128 -12
 4380 0bb6 00       		.byte	0
 4381 0bb7 1C       		.uleb128 0x1c
 4382 0bb8 BB0C0000 		.4byte	.LASF136
 4383 0bbc 01       		.byte	0x1
 4384 0bbd 7F02     		.2byte	0x27f
 4385 0bbf 2B010000 		.4byte	0x12b
 4386 0bc3 00000000 		.4byte	.LFB97
 4387 0bc7 32000000 		.4byte	.LFE97-.LFB97
 4388 0bcb 01       		.uleb128 0x1
 4389 0bcc 9C       		.byte	0x9c
 4390 0bcd 2C0C0000 		.4byte	0xc2c
 4391 0bd1 1A       		.uleb128 0x1a
 4392 0bd2 83030000 		.4byte	.LASF137
 4393 0bd6 01       		.byte	0x1
 4394 0bd7 7F02     		.2byte	0x27f
 4395 0bd9 C7020000 		.4byte	0x2c7
 4396 0bdd 02       		.uleb128 0x2
 4397 0bde 91       		.byte	0x91
 4398 0bdf 6C       		.sleb128 -20
 4399 0be0 1A       		.uleb128 0x1a
 4400 0be1 8C090000 		.4byte	.LASF138
 4401 0be5 01       		.byte	0x1
 4402 0be6 7F02     		.2byte	0x27f
 4403 0be8 330C0000 		.4byte	0xc33
 4404 0bec 02       		.uleb128 0x2
 4405 0bed 91       		.byte	0x91
 4406 0bee 68       		.sleb128 -24
 4407 0bef 1A       		.uleb128 0x1a
 4408 0bf0 A90B0000 		.4byte	.LASF122
 4409 0bf4 01       		.byte	0x1
 4410 0bf5 7F02     		.2byte	0x27f
 4411 0bf7 41010000 		.4byte	0x141
 4412 0bfb 02       		.uleb128 0x2
 4413 0bfc 91       		.byte	0x91
 4414 0bfd 64       		.sleb128 -28
 4415 0bfe 1A       		.uleb128 0x1a
 4416 0bff A9020000 		.4byte	.LASF139
 4417 0c03 01       		.byte	0x1
 4418 0c04 7F02     		.2byte	0x27f
 4419 0c06 2B010000 		.4byte	0x12b
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccQCZNNL.s 			page 102


 4420 0c0a 02       		.uleb128 0x2
 4421 0c0b 91       		.byte	0x91
 4422 0c0c 60       		.sleb128 -32
 4423 0c0d 1B       		.uleb128 0x1b
 4424 0c0e 260A0000 		.4byte	.LASF75
 4425 0c12 01       		.byte	0x1
 4426 0c13 8102     		.2byte	0x281
 4427 0c15 2B010000 		.4byte	0x12b
 4428 0c19 02       		.uleb128 0x2
 4429 0c1a 91       		.byte	0x91
 4430 0c1b 70       		.sleb128 -16
 4431 0c1c 1B       		.uleb128 0x1b
 4432 0c1d 43060000 		.4byte	.LASF72
 4433 0c21 01       		.byte	0x1
 4434 0c22 8202     		.2byte	0x282
 4435 0c24 2B010000 		.4byte	0x12b
 4436 0c28 02       		.uleb128 0x2
 4437 0c29 91       		.byte	0x91
 4438 0c2a 74       		.sleb128 -12
 4439 0c2b 00       		.byte	0
 4440 0c2c 06       		.uleb128 0x6
 4441 0c2d 04       		.byte	0x4
 4442 0c2e 320C0000 		.4byte	0xc32
 4443 0c32 1D       		.uleb128 0x1d
 4444 0c33 07       		.uleb128 0x7
 4445 0c34 2C0C0000 		.4byte	0xc2c
 4446 0c38 1C       		.uleb128 0x1c
 4447 0c39 F2070000 		.4byte	.LASF140
 4448 0c3d 01       		.byte	0x1
 4449 0c3e 8A02     		.2byte	0x28a
 4450 0c40 36010000 		.4byte	0x136
 4451 0c44 00000000 		.4byte	.LFB98
 4452 0c48 26000000 		.4byte	.LFE98-.LFB98
 4453 0c4c 01       		.uleb128 0x1
 4454 0c4d 9C       		.byte	0x9c
 4455 0c4e 800C0000 		.4byte	0xc80
 4456 0c52 1A       		.uleb128 0x1a
 4457 0c53 E2090000 		.4byte	.LASF134
 4458 0c57 01       		.byte	0x1
 4459 0c58 8A02     		.2byte	0x28a
 4460 0c5a 800C0000 		.4byte	0xc80
 4461 0c5e 02       		.uleb128 0x2
 4462 0c5f 91       		.byte	0x91
 4463 0c60 6C       		.sleb128 -20
 4464 0c61 1B       		.uleb128 0x1b
 4465 0c62 43060000 		.4byte	.LASF72
 4466 0c66 01       		.byte	0x1
 4467 0c67 8C02     		.2byte	0x28c
 4468 0c69 2B010000 		.4byte	0x12b
 4469 0c6d 02       		.uleb128 0x2
 4470 0c6e 91       		.byte	0x91
 4471 0c6f 74       		.sleb128 -12
 4472 0c70 1B       		.uleb128 0x1b
 4473 0c71 B7020000 		.4byte	.LASF90
 4474 0c75 01       		.byte	0x1
 4475 0c76 8D02     		.2byte	0x28d
 4476 0c78 36010000 		.4byte	0x136
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccQCZNNL.s 			page 103


 4477 0c7c 02       		.uleb128 0x2
 4478 0c7d 91       		.byte	0x91
 4479 0c7e 70       		.sleb128 -16
 4480 0c7f 00       		.byte	0
 4481 0c80 07       		.uleb128 0x7
 4482 0c81 C7020000 		.4byte	0x2c7
 4483 0c85 1C       		.uleb128 0x1c
 4484 0c86 930D0000 		.4byte	.LASF141
 4485 0c8a 01       		.byte	0x1
 4486 0c8b 9502     		.2byte	0x295
 4487 0c8d 36010000 		.4byte	0x136
 4488 0c91 00000000 		.4byte	.LFB99
 4489 0c95 26000000 		.4byte	.LFE99-.LFB99
 4490 0c99 01       		.uleb128 0x1
 4491 0c9a 9C       		.byte	0x9c
 4492 0c9b CD0C0000 		.4byte	0xccd
 4493 0c9f 1A       		.uleb128 0x1a
 4494 0ca0 83030000 		.4byte	.LASF137
 4495 0ca4 01       		.byte	0x1
 4496 0ca5 9502     		.2byte	0x295
 4497 0ca7 800C0000 		.4byte	0xc80
 4498 0cab 02       		.uleb128 0x2
 4499 0cac 91       		.byte	0x91
 4500 0cad 6C       		.sleb128 -20
 4501 0cae 1B       		.uleb128 0x1b
 4502 0caf 43060000 		.4byte	.LASF72
 4503 0cb3 01       		.byte	0x1
 4504 0cb4 9702     		.2byte	0x297
 4505 0cb6 2B010000 		.4byte	0x12b
 4506 0cba 02       		.uleb128 0x2
 4507 0cbb 91       		.byte	0x91
 4508 0cbc 74       		.sleb128 -12
 4509 0cbd 1B       		.uleb128 0x1b
 4510 0cbe B7020000 		.4byte	.LASF90
 4511 0cc2 01       		.byte	0x1
 4512 0cc3 9802     		.2byte	0x298
 4513 0cc5 36010000 		.4byte	0x136
 4514 0cc9 02       		.uleb128 0x2
 4515 0cca 91       		.byte	0x91
 4516 0ccb 70       		.sleb128 -16
 4517 0ccc 00       		.byte	0
 4518 0ccd 1C       		.uleb128 0x1c
 4519 0cce FB0C0000 		.4byte	.LASF142
 4520 0cd2 01       		.byte	0x1
 4521 0cd3 A002     		.2byte	0x2a0
 4522 0cd5 2B010000 		.4byte	0x12b
 4523 0cd9 00000000 		.4byte	.LFB100
 4524 0cdd 2E000000 		.4byte	.LFE100-.LFB100
 4525 0ce1 01       		.uleb128 0x1
 4526 0ce2 9C       		.byte	0x9c
 4527 0ce3 330D0000 		.4byte	0xd33
 4528 0ce7 1A       		.uleb128 0x1a
 4529 0ce8 E2090000 		.4byte	.LASF134
 4530 0cec 01       		.byte	0x1
 4531 0ced A002     		.2byte	0x2a0
 4532 0cef C7020000 		.4byte	0x2c7
 4533 0cf3 02       		.uleb128 0x2
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccQCZNNL.s 			page 104


 4534 0cf4 91       		.byte	0x91
 4535 0cf5 6C       		.sleb128 -20
 4536 0cf6 1A       		.uleb128 0x1a
 4537 0cf7 68040000 		.4byte	.LASF143
 4538 0cfb 01       		.byte	0x1
 4539 0cfc A002     		.2byte	0x2a0
 4540 0cfe 330D0000 		.4byte	0xd33
 4541 0d02 02       		.uleb128 0x2
 4542 0d03 91       		.byte	0x91
 4543 0d04 68       		.sleb128 -24
 4544 0d05 1A       		.uleb128 0x1a
 4545 0d06 A90B0000 		.4byte	.LASF122
 4546 0d0a 01       		.byte	0x1
 4547 0d0b A002     		.2byte	0x2a0
 4548 0d0d 41010000 		.4byte	0x141
 4549 0d11 02       		.uleb128 0x2
 4550 0d12 91       		.byte	0x91
 4551 0d13 64       		.sleb128 -28
 4552 0d14 1B       		.uleb128 0x1b
 4553 0d15 43060000 		.4byte	.LASF72
 4554 0d19 01       		.byte	0x1
 4555 0d1a A202     		.2byte	0x2a2
 4556 0d1c 2B010000 		.4byte	0x12b
 4557 0d20 02       		.uleb128 0x2
 4558 0d21 91       		.byte	0x91
 4559 0d22 74       		.sleb128 -12
 4560 0d23 1B       		.uleb128 0x1b
 4561 0d24 260A0000 		.4byte	.LASF75
 4562 0d28 01       		.byte	0x1
 4563 0d29 A302     		.2byte	0x2a3
 4564 0d2b 2B010000 		.4byte	0x12b
 4565 0d2f 02       		.uleb128 0x2
 4566 0d30 91       		.byte	0x91
 4567 0d31 70       		.sleb128 -16
 4568 0d32 00       		.byte	0
 4569 0d33 07       		.uleb128 0x7
 4570 0d34 F1000000 		.4byte	0xf1
 4571 0d38 1C       		.uleb128 0x1c
 4572 0d39 140C0000 		.4byte	.LASF144
 4573 0d3d 01       		.byte	0x1
 4574 0d3e AB02     		.2byte	0x2ab
 4575 0d40 2B010000 		.4byte	0x12b
 4576 0d44 00000000 		.4byte	.LFB101
 4577 0d48 2E000000 		.4byte	.LFE101-.LFB101
 4578 0d4c 01       		.uleb128 0x1
 4579 0d4d 9C       		.byte	0x9c
 4580 0d4e 9E0D0000 		.4byte	0xd9e
 4581 0d52 1A       		.uleb128 0x1a
 4582 0d53 83030000 		.4byte	.LASF137
 4583 0d57 01       		.byte	0x1
 4584 0d58 AB02     		.2byte	0x2ab
 4585 0d5a C7020000 		.4byte	0x2c7
 4586 0d5e 02       		.uleb128 0x2
 4587 0d5f 91       		.byte	0x91
 4588 0d60 6C       		.sleb128 -20
 4589 0d61 1A       		.uleb128 0x1a
 4590 0d62 68040000 		.4byte	.LASF143
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccQCZNNL.s 			page 105


 4591 0d66 01       		.byte	0x1
 4592 0d67 AB02     		.2byte	0x2ab
 4593 0d69 330D0000 		.4byte	0xd33
 4594 0d6d 02       		.uleb128 0x2
 4595 0d6e 91       		.byte	0x91
 4596 0d6f 68       		.sleb128 -24
 4597 0d70 1A       		.uleb128 0x1a
 4598 0d71 A90B0000 		.4byte	.LASF122
 4599 0d75 01       		.byte	0x1
 4600 0d76 AB02     		.2byte	0x2ab
 4601 0d78 41010000 		.4byte	0x141
 4602 0d7c 02       		.uleb128 0x2
 4603 0d7d 91       		.byte	0x91
 4604 0d7e 64       		.sleb128 -28
 4605 0d7f 1B       		.uleb128 0x1b
 4606 0d80 43060000 		.4byte	.LASF72
 4607 0d84 01       		.byte	0x1
 4608 0d85 AD02     		.2byte	0x2ad
 4609 0d87 2B010000 		.4byte	0x12b
 4610 0d8b 02       		.uleb128 0x2
 4611 0d8c 91       		.byte	0x91
 4612 0d8d 74       		.sleb128 -12
 4613 0d8e 1B       		.uleb128 0x1b
 4614 0d8f 260A0000 		.4byte	.LASF75
 4615 0d93 01       		.byte	0x1
 4616 0d94 AE02     		.2byte	0x2ae
 4617 0d96 2B010000 		.4byte	0x12b
 4618 0d9a 02       		.uleb128 0x2
 4619 0d9b 91       		.byte	0x91
 4620 0d9c 70       		.sleb128 -16
 4621 0d9d 00       		.byte	0
 4622 0d9e 1C       		.uleb128 0x1c
 4623 0d9f F4040000 		.4byte	.LASF145
 4624 0da3 01       		.byte	0x1
 4625 0da4 B602     		.2byte	0x2b6
 4626 0da6 2B010000 		.4byte	0x12b
 4627 0daa 00000000 		.4byte	.LFB102
 4628 0dae 2A000000 		.4byte	.LFE102-.LFB102
 4629 0db2 01       		.uleb128 0x1
 4630 0db3 9C       		.byte	0x9c
 4631 0db4 F50D0000 		.4byte	0xdf5
 4632 0db8 1A       		.uleb128 0x1a
 4633 0db9 83030000 		.4byte	.LASF137
 4634 0dbd 01       		.byte	0x1
 4635 0dbe B602     		.2byte	0x2b6
 4636 0dc0 C7020000 		.4byte	0x2c7
 4637 0dc4 02       		.uleb128 0x2
 4638 0dc5 91       		.byte	0x91
 4639 0dc6 6C       		.sleb128 -20
 4640 0dc7 1A       		.uleb128 0x1a
 4641 0dc8 A90B0000 		.4byte	.LASF122
 4642 0dcc 01       		.byte	0x1
 4643 0dcd B602     		.2byte	0x2b6
 4644 0dcf 41010000 		.4byte	0x141
 4645 0dd3 02       		.uleb128 0x2
 4646 0dd4 91       		.byte	0x91
 4647 0dd5 68       		.sleb128 -24
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccQCZNNL.s 			page 106


 4648 0dd6 1B       		.uleb128 0x1b
 4649 0dd7 43060000 		.4byte	.LASF72
 4650 0ddb 01       		.byte	0x1
 4651 0ddc B802     		.2byte	0x2b8
 4652 0dde 2B010000 		.4byte	0x12b
 4653 0de2 02       		.uleb128 0x2
 4654 0de3 91       		.byte	0x91
 4655 0de4 74       		.sleb128 -12
 4656 0de5 1B       		.uleb128 0x1b
 4657 0de6 260A0000 		.4byte	.LASF75
 4658 0dea 01       		.byte	0x1
 4659 0deb B902     		.2byte	0x2b9
 4660 0ded 2B010000 		.4byte	0x12b
 4661 0df1 02       		.uleb128 0x2
 4662 0df2 91       		.byte	0x91
 4663 0df3 70       		.sleb128 -16
 4664 0df4 00       		.byte	0
 4665 0df5 1C       		.uleb128 0x1c
 4666 0df6 BD000000 		.4byte	.LASF146
 4667 0dfa 01       		.byte	0x1
 4668 0dfb CF02     		.2byte	0x2cf
 4669 0dfd C7020000 		.4byte	0x2c7
 4670 0e01 00000000 		.4byte	.LFB103
 4671 0e05 2A000000 		.4byte	.LFE103-.LFB103
 4672 0e09 01       		.uleb128 0x1
 4673 0e0a 9C       		.byte	0x9c
 4674 0e0b 3D0E0000 		.4byte	0xe3d
 4675 0e0f 1A       		.uleb128 0x1a
 4676 0e10 BD070000 		.4byte	.LASF132
 4677 0e14 01       		.byte	0x1
 4678 0e15 CF02     		.2byte	0x2cf
 4679 0e17 3D0E0000 		.4byte	0xe3d
 4680 0e1b 02       		.uleb128 0x2
 4681 0e1c 91       		.byte	0x91
 4682 0e1d 6F       		.sleb128 -17
 4683 0e1e 1B       		.uleb128 0x1b
 4684 0e1f 260A0000 		.4byte	.LASF75
 4685 0e23 01       		.byte	0x1
 4686 0e24 D102     		.2byte	0x2d1
 4687 0e26 C7020000 		.4byte	0x2c7
 4688 0e2a 02       		.uleb128 0x2
 4689 0e2b 91       		.byte	0x91
 4690 0e2c 70       		.sleb128 -16
 4691 0e2d 1B       		.uleb128 0x1b
 4692 0e2e 43060000 		.4byte	.LASF72
 4693 0e32 01       		.byte	0x1
 4694 0e33 D202     		.2byte	0x2d2
 4695 0e35 2B010000 		.4byte	0x12b
 4696 0e39 02       		.uleb128 0x2
 4697 0e3a 91       		.byte	0x91
 4698 0e3b 74       		.sleb128 -12
 4699 0e3c 00       		.byte	0
 4700 0e3d 07       		.uleb128 0x7
 4701 0e3e A9000000 		.4byte	0xa9
 4702 0e42 1C       		.uleb128 0x1c
 4703 0e43 AD030000 		.4byte	.LASF147
 4704 0e47 01       		.byte	0x1
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccQCZNNL.s 			page 107


 4705 0e48 E902     		.2byte	0x2e9
 4706 0e4a C7020000 		.4byte	0x2c7
 4707 0e4e 00000000 		.4byte	.LFB104
 4708 0e52 2A000000 		.4byte	.LFE104-.LFB104
 4709 0e56 01       		.uleb128 0x1
 4710 0e57 9C       		.byte	0x9c
 4711 0e58 990E0000 		.4byte	0xe99
 4712 0e5c 1A       		.uleb128 0x1a
 4713 0e5d 520B0000 		.4byte	.LASF148
 4714 0e61 01       		.byte	0x1
 4715 0e62 E902     		.2byte	0x2e9
 4716 0e64 36010000 		.4byte	0x136
 4717 0e68 02       		.uleb128 0x2
 4718 0e69 91       		.byte	0x91
 4719 0e6a 6C       		.sleb128 -20
 4720 0e6b 1A       		.uleb128 0x1a
 4721 0e6c AF050000 		.4byte	.LASF149
 4722 0e70 01       		.byte	0x1
 4723 0e71 E902     		.2byte	0x2e9
 4724 0e73 36010000 		.4byte	0x136
 4725 0e77 02       		.uleb128 0x2
 4726 0e78 91       		.byte	0x91
 4727 0e79 68       		.sleb128 -24
 4728 0e7a 1B       		.uleb128 0x1b
 4729 0e7b 260A0000 		.4byte	.LASF75
 4730 0e7f 01       		.byte	0x1
 4731 0e80 EB02     		.2byte	0x2eb
 4732 0e82 C7020000 		.4byte	0x2c7
 4733 0e86 02       		.uleb128 0x2
 4734 0e87 91       		.byte	0x91
 4735 0e88 70       		.sleb128 -16
 4736 0e89 1B       		.uleb128 0x1b
 4737 0e8a 43060000 		.4byte	.LASF72
 4738 0e8e 01       		.byte	0x1
 4739 0e8f EC02     		.2byte	0x2ec
 4740 0e91 2B010000 		.4byte	0x12b
 4741 0e95 02       		.uleb128 0x2
 4742 0e96 91       		.byte	0x91
 4743 0e97 74       		.sleb128 -12
 4744 0e98 00       		.byte	0
 4745 0e99 1C       		.uleb128 0x1c
 4746 0e9a 45080000 		.4byte	.LASF150
 4747 0e9e 01       		.byte	0x1
 4748 0e9f 0403     		.2byte	0x304
 4749 0ea1 2B010000 		.4byte	0x12b
 4750 0ea5 00000000 		.4byte	.LFB105
 4751 0ea9 2A000000 		.4byte	.LFE105-.LFB105
 4752 0ead 01       		.uleb128 0x1
 4753 0eae 9C       		.byte	0x9c
 4754 0eaf F00E0000 		.4byte	0xef0
 4755 0eb3 1A       		.uleb128 0x1a
 4756 0eb4 FF060000 		.4byte	.LASF151
 4757 0eb8 01       		.byte	0x1
 4758 0eb9 0403     		.2byte	0x304
 4759 0ebb C7020000 		.4byte	0x2c7
 4760 0ebf 02       		.uleb128 0x2
 4761 0ec0 91       		.byte	0x91
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccQCZNNL.s 			page 108


 4762 0ec1 6C       		.sleb128 -20
 4763 0ec2 1A       		.uleb128 0x1a
 4764 0ec3 81090000 		.4byte	.LASF152
 4765 0ec7 01       		.byte	0x1
 4766 0ec8 0403     		.2byte	0x304
 4767 0eca 41010000 		.4byte	0x141
 4768 0ece 02       		.uleb128 0x2
 4769 0ecf 91       		.byte	0x91
 4770 0ed0 68       		.sleb128 -24
 4771 0ed1 1B       		.uleb128 0x1b
 4772 0ed2 260A0000 		.4byte	.LASF75
 4773 0ed6 01       		.byte	0x1
 4774 0ed7 0603     		.2byte	0x306
 4775 0ed9 2B010000 		.4byte	0x12b
 4776 0edd 02       		.uleb128 0x2
 4777 0ede 91       		.byte	0x91
 4778 0edf 70       		.sleb128 -16
 4779 0ee0 1B       		.uleb128 0x1b
 4780 0ee1 43060000 		.4byte	.LASF72
 4781 0ee5 01       		.byte	0x1
 4782 0ee6 0703     		.2byte	0x307
 4783 0ee8 2B010000 		.4byte	0x12b
 4784 0eec 02       		.uleb128 0x2
 4785 0eed 91       		.byte	0x91
 4786 0eee 74       		.sleb128 -12
 4787 0eef 00       		.byte	0
 4788 0ef0 1C       		.uleb128 0x1c
 4789 0ef1 0E000000 		.4byte	.LASF153
 4790 0ef5 01       		.byte	0x1
 4791 0ef6 1103     		.2byte	0x311
 4792 0ef8 2B010000 		.4byte	0x12b
 4793 0efc 00000000 		.4byte	.LFB106
 4794 0f00 26000000 		.4byte	.LFE106-.LFB106
 4795 0f04 01       		.uleb128 0x1
 4796 0f05 9C       		.byte	0x9c
 4797 0f06 380F0000 		.4byte	0xf38
 4798 0f0a 1A       		.uleb128 0x1a
 4799 0f0b FF060000 		.4byte	.LASF151
 4800 0f0f 01       		.byte	0x1
 4801 0f10 1103     		.2byte	0x311
 4802 0f12 C7020000 		.4byte	0x2c7
 4803 0f16 02       		.uleb128 0x2
 4804 0f17 91       		.byte	0x91
 4805 0f18 6C       		.sleb128 -20
 4806 0f19 1B       		.uleb128 0x1b
 4807 0f1a 260A0000 		.4byte	.LASF75
 4808 0f1e 01       		.byte	0x1
 4809 0f1f 1303     		.2byte	0x313
 4810 0f21 2B010000 		.4byte	0x12b
 4811 0f25 02       		.uleb128 0x2
 4812 0f26 91       		.byte	0x91
 4813 0f27 70       		.sleb128 -16
 4814 0f28 1B       		.uleb128 0x1b
 4815 0f29 43060000 		.4byte	.LASF72
 4816 0f2d 01       		.byte	0x1
 4817 0f2e 1403     		.2byte	0x314
 4818 0f30 2B010000 		.4byte	0x12b
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccQCZNNL.s 			page 109


 4819 0f34 02       		.uleb128 0x2
 4820 0f35 91       		.byte	0x91
 4821 0f36 74       		.sleb128 -12
 4822 0f37 00       		.byte	0
 4823 0f38 19       		.uleb128 0x19
 4824 0f39 B60B0000 		.4byte	.LASF154
 4825 0f3d 01       		.byte	0x1
 4826 0f3e 5203     		.2byte	0x352
 4827 0f40 00000000 		.4byte	.LFB107
 4828 0f44 26000000 		.4byte	.LFE107-.LFB107
 4829 0f48 01       		.uleb128 0x1
 4830 0f49 9C       		.byte	0x9c
 4831 0f4a 7C0F0000 		.4byte	0xf7c
 4832 0f4e 1A       		.uleb128 0x1a
 4833 0f4f 83030000 		.4byte	.LASF137
 4834 0f53 01       		.byte	0x1
 4835 0f54 5203     		.2byte	0x352
 4836 0f56 C7020000 		.4byte	0x2c7
 4837 0f5a 02       		.uleb128 0x2
 4838 0f5b 91       		.byte	0x91
 4839 0f5c 6C       		.sleb128 -20
 4840 0f5d 1A       		.uleb128 0x1a
 4841 0f5e 64050000 		.4byte	.LASF53
 4842 0f62 01       		.byte	0x1
 4843 0f63 5203     		.2byte	0x352
 4844 0f65 F9000000 		.4byte	0xf9
 4845 0f69 02       		.uleb128 0x2
 4846 0f6a 91       		.byte	0x91
 4847 0f6b 68       		.sleb128 -24
 4848 0f6c 1B       		.uleb128 0x1b
 4849 0f6d 43060000 		.4byte	.LASF72
 4850 0f71 01       		.byte	0x1
 4851 0f72 5403     		.2byte	0x354
 4852 0f74 2B010000 		.4byte	0x12b
 4853 0f78 02       		.uleb128 0x2
 4854 0f79 91       		.byte	0x91
 4855 0f7a 74       		.sleb128 -12
 4856 0f7b 00       		.byte	0
 4857 0f7c 19       		.uleb128 0x19
 4858 0f7d E1030000 		.4byte	.LASF155
 4859 0f81 01       		.byte	0x1
 4860 0f82 5E03     		.2byte	0x35e
 4861 0f84 00000000 		.4byte	.LFB108
 4862 0f88 22000000 		.4byte	.LFE108-.LFB108
 4863 0f8c 01       		.uleb128 0x1
 4864 0f8d 9C       		.byte	0x9c
 4865 0f8e B10F0000 		.4byte	0xfb1
 4866 0f92 1A       		.uleb128 0x1a
 4867 0f93 83030000 		.4byte	.LASF137
 4868 0f97 01       		.byte	0x1
 4869 0f98 5E03     		.2byte	0x35e
 4870 0f9a C7020000 		.4byte	0x2c7
 4871 0f9e 02       		.uleb128 0x2
 4872 0f9f 91       		.byte	0x91
 4873 0fa0 6C       		.sleb128 -20
 4874 0fa1 1B       		.uleb128 0x1b
 4875 0fa2 43060000 		.4byte	.LASF72
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccQCZNNL.s 			page 110


 4876 0fa6 01       		.byte	0x1
 4877 0fa7 6003     		.2byte	0x360
 4878 0fa9 2B010000 		.4byte	0x12b
 4879 0fad 02       		.uleb128 0x2
 4880 0fae 91       		.byte	0x91
 4881 0faf 74       		.sleb128 -12
 4882 0fb0 00       		.byte	0
 4883 0fb1 1C       		.uleb128 0x1c
 4884 0fb2 9A090000 		.4byte	.LASF156
 4885 0fb6 01       		.byte	0x1
 4886 0fb7 6A03     		.2byte	0x36a
 4887 0fb9 F9000000 		.4byte	0xf9
 4888 0fbd 00000000 		.4byte	.LFB109
 4889 0fc1 26000000 		.4byte	.LFE109-.LFB109
 4890 0fc5 01       		.uleb128 0x1
 4891 0fc6 9C       		.byte	0x9c
 4892 0fc7 F90F0000 		.4byte	0xff9
 4893 0fcb 1A       		.uleb128 0x1a
 4894 0fcc 83030000 		.4byte	.LASF137
 4895 0fd0 01       		.byte	0x1
 4896 0fd1 6A03     		.2byte	0x36a
 4897 0fd3 C7020000 		.4byte	0x2c7
 4898 0fd7 02       		.uleb128 0x2
 4899 0fd8 91       		.byte	0x91
 4900 0fd9 6C       		.sleb128 -20
 4901 0fda 1B       		.uleb128 0x1b
 4902 0fdb 43060000 		.4byte	.LASF72
 4903 0fdf 01       		.byte	0x1
 4904 0fe0 6C03     		.2byte	0x36c
 4905 0fe2 2B010000 		.4byte	0x12b
 4906 0fe6 02       		.uleb128 0x2
 4907 0fe7 91       		.byte	0x91
 4908 0fe8 74       		.sleb128 -12
 4909 0fe9 1B       		.uleb128 0x1b
 4910 0fea EA080000 		.4byte	.LASF105
 4911 0fee 01       		.byte	0x1
 4912 0fef 6D03     		.2byte	0x36d
 4913 0ff1 F9000000 		.4byte	0xf9
 4914 0ff5 02       		.uleb128 0x2
 4915 0ff6 91       		.byte	0x91
 4916 0ff7 70       		.sleb128 -16
 4917 0ff8 00       		.byte	0
 4918 0ff9 19       		.uleb128 0x19
 4919 0ffa D80A0000 		.4byte	.LASF157
 4920 0ffe 01       		.byte	0x1
 4921 0fff 7703     		.2byte	0x377
 4922 1001 00000000 		.4byte	.LFB110
 4923 1005 22000000 		.4byte	.LFE110-.LFB110
 4924 1009 01       		.uleb128 0x1
 4925 100a 9C       		.byte	0x9c
 4926 100b 2E100000 		.4byte	0x102e
 4927 100f 1A       		.uleb128 0x1a
 4928 1010 83030000 		.4byte	.LASF137
 4929 1014 01       		.byte	0x1
 4930 1015 7703     		.2byte	0x377
 4931 1017 C7020000 		.4byte	0x2c7
 4932 101b 02       		.uleb128 0x2
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccQCZNNL.s 			page 111


 4933 101c 91       		.byte	0x91
 4934 101d 6C       		.sleb128 -20
 4935 101e 1B       		.uleb128 0x1b
 4936 101f 43060000 		.4byte	.LASF72
 4937 1023 01       		.byte	0x1
 4938 1024 7903     		.2byte	0x379
 4939 1026 2B010000 		.4byte	0x12b
 4940 102a 02       		.uleb128 0x2
 4941 102b 91       		.byte	0x91
 4942 102c 74       		.sleb128 -12
 4943 102d 00       		.byte	0
 4944 102e 1C       		.uleb128 0x1c
 4945 102f 2B000000 		.4byte	.LASF158
 4946 1033 01       		.byte	0x1
 4947 1034 8203     		.2byte	0x382
 4948 1036 F1000000 		.4byte	0xf1
 4949 103a 00000000 		.4byte	.LFB111
 4950 103e 26000000 		.4byte	.LFE111-.LFB111
 4951 1042 01       		.uleb128 0x1
 4952 1043 9C       		.byte	0x9c
 4953 1044 76100000 		.4byte	0x1076
 4954 1048 1A       		.uleb128 0x1a
 4955 1049 13010000 		.4byte	.LASF159
 4956 104d 01       		.byte	0x1
 4957 104e 8203     		.2byte	0x382
 4958 1050 2C000000 		.4byte	0x2c
 4959 1054 02       		.uleb128 0x2
 4960 1055 91       		.byte	0x91
 4961 1056 6C       		.sleb128 -20
 4962 1057 1B       		.uleb128 0x1b
 4963 1058 A1040000 		.4byte	.LASF160
 4964 105c 01       		.byte	0x1
 4965 105d 8403     		.2byte	0x384
 4966 105f F1000000 		.4byte	0xf1
 4967 1063 02       		.uleb128 0x2
 4968 1064 91       		.byte	0x91
 4969 1065 70       		.sleb128 -16
 4970 1066 1B       		.uleb128 0x1b
 4971 1067 43060000 		.4byte	.LASF72
 4972 106b 01       		.byte	0x1
 4973 106c 8503     		.2byte	0x385
 4974 106e 2B010000 		.4byte	0x12b
 4975 1072 02       		.uleb128 0x2
 4976 1073 91       		.byte	0x91
 4977 1074 74       		.sleb128 -12
 4978 1075 00       		.byte	0
 4979 1076 19       		.uleb128 0x19
 4980 1077 89000000 		.4byte	.LASF161
 4981 107b 01       		.byte	0x1
 4982 107c 9103     		.2byte	0x391
 4983 107e 00000000 		.4byte	.LFB112
 4984 1082 22000000 		.4byte	.LFE112-.LFB112
 4985 1086 01       		.uleb128 0x1
 4986 1087 9C       		.byte	0x9c
 4987 1088 AA100000 		.4byte	0x10aa
 4988 108c 1E       		.uleb128 0x1e
 4989 108d 707600   		.ascii	"pv\000"
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccQCZNNL.s 			page 112


 4990 1090 01       		.byte	0x1
 4991 1091 9103     		.2byte	0x391
 4992 1093 F1000000 		.4byte	0xf1
 4993 1097 02       		.uleb128 0x2
 4994 1098 91       		.byte	0x91
 4995 1099 6C       		.sleb128 -20
 4996 109a 1B       		.uleb128 0x1b
 4997 109b 43060000 		.4byte	.LASF72
 4998 109f 01       		.byte	0x1
 4999 10a0 9303     		.2byte	0x393
 5000 10a2 2B010000 		.4byte	0x12b
 5001 10a6 02       		.uleb128 0x2
 5002 10a7 91       		.byte	0x91
 5003 10a8 74       		.sleb128 -12
 5004 10a9 00       		.byte	0
 5005 10aa 19       		.uleb128 0x19
 5006 10ab D3040000 		.4byte	.LASF162
 5007 10af 01       		.byte	0x1
 5008 10b0 9D03     		.2byte	0x39d
 5009 10b2 00000000 		.4byte	.LFB113
 5010 10b6 1E000000 		.4byte	.LFE113-.LFB113
 5011 10ba 01       		.uleb128 0x1
 5012 10bb 9C       		.byte	0x9c
 5013 10bc D0100000 		.4byte	0x10d0
 5014 10c0 1B       		.uleb128 0x1b
 5015 10c1 43060000 		.4byte	.LASF72
 5016 10c5 01       		.byte	0x1
 5017 10c6 9F03     		.2byte	0x39f
 5018 10c8 2B010000 		.4byte	0x12b
 5019 10cc 02       		.uleb128 0x2
 5020 10cd 91       		.byte	0x91
 5021 10ce 74       		.sleb128 -12
 5022 10cf 00       		.byte	0
 5023 10d0 1C       		.uleb128 0x1c
 5024 10d1 4B050000 		.4byte	.LASF163
 5025 10d5 01       		.byte	0x1
 5026 10d6 A903     		.2byte	0x3a9
 5027 10d8 2C000000 		.4byte	0x2c
 5028 10dc 00000000 		.4byte	.LFB114
 5029 10e0 22000000 		.4byte	.LFE114-.LFB114
 5030 10e4 01       		.uleb128 0x1
 5031 10e5 9C       		.byte	0x9c
 5032 10e6 09110000 		.4byte	0x1109
 5033 10ea 1B       		.uleb128 0x1b
 5034 10eb 260A0000 		.4byte	.LASF75
 5035 10ef 01       		.byte	0x1
 5036 10f0 AB03     		.2byte	0x3ab
 5037 10f2 2C000000 		.4byte	0x2c
 5038 10f6 02       		.uleb128 0x2
 5039 10f7 91       		.byte	0x91
 5040 10f8 70       		.sleb128 -16
 5041 10f9 1B       		.uleb128 0x1b
 5042 10fa 43060000 		.4byte	.LASF72
 5043 10fe 01       		.byte	0x1
 5044 10ff AC03     		.2byte	0x3ac
 5045 1101 2B010000 		.4byte	0x12b
 5046 1105 02       		.uleb128 0x2
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccQCZNNL.s 			page 113


 5047 1106 91       		.byte	0x91
 5048 1107 74       		.sleb128 -12
 5049 1108 00       		.byte	0
 5050 1109 1C       		.uleb128 0x1c
 5051 110a 6B090000 		.4byte	.LASF164
 5052 110e 01       		.byte	0x1
 5053 110f 6704     		.2byte	0x467
 5054 1111 DD020000 		.4byte	0x2dd
 5055 1115 00000000 		.4byte	.LFB115
 5056 1119 22000000 		.4byte	.LFE115-.LFB115
 5057 111d 01       		.uleb128 0x1
 5058 111e 9C       		.byte	0x9c
 5059 111f 42110000 		.4byte	0x1142
 5060 1123 1B       		.uleb128 0x1b
 5061 1124 260A0000 		.4byte	.LASF75
 5062 1128 01       		.byte	0x1
 5063 1129 6904     		.2byte	0x469
 5064 112b DD020000 		.4byte	0x2dd
 5065 112f 02       		.uleb128 0x2
 5066 1130 91       		.byte	0x91
 5067 1131 70       		.sleb128 -16
 5068 1132 1B       		.uleb128 0x1b
 5069 1133 43060000 		.4byte	.LASF72
 5070 1137 01       		.byte	0x1
 5071 1138 6A04     		.2byte	0x46a
 5072 113a 2B010000 		.4byte	0x12b
 5073 113e 02       		.uleb128 0x2
 5074 113f 91       		.byte	0x91
 5075 1140 74       		.sleb128 -12
 5076 1141 00       		.byte	0
 5077 1142 1C       		.uleb128 0x1c
 5078 1143 3A0B0000 		.4byte	.LASF165
 5079 1147 01       		.byte	0x1
 5080 1148 8204     		.2byte	0x482
 5081 114a F3020000 		.4byte	0x2f3
 5082 114e 00000000 		.4byte	.LFB116
 5083 1152 36000000 		.4byte	.LFE116-.LFB116
 5084 1156 01       		.uleb128 0x1
 5085 1157 9C       		.byte	0x9c
 5086 1158 C6110000 		.4byte	0x11c6
 5087 115c 1A       		.uleb128 0x1a
 5088 115d C5050000 		.4byte	.LASF166
 5089 1161 01       		.byte	0x1
 5090 1162 8204     		.2byte	0x482
 5091 1164 DD020000 		.4byte	0x2dd
 5092 1168 02       		.uleb128 0x2
 5093 1169 91       		.byte	0x91
 5094 116a 6C       		.sleb128 -20
 5095 116b 1A       		.uleb128 0x1a
 5096 116c 2E0A0000 		.4byte	.LASF167
 5097 1170 01       		.byte	0x1
 5098 1171 8204     		.2byte	0x482
 5099 1173 C6110000 		.4byte	0x11c6
 5100 1177 02       		.uleb128 0x2
 5101 1178 91       		.byte	0x91
 5102 1179 68       		.sleb128 -24
 5103 117a 1A       		.uleb128 0x1a
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccQCZNNL.s 			page 114


 5104 117b A70C0000 		.4byte	.LASF168
 5105 117f 01       		.byte	0x1
 5106 1180 8204     		.2byte	0x482
 5107 1182 CB110000 		.4byte	0x11cb
 5108 1186 02       		.uleb128 0x2
 5109 1187 91       		.byte	0x91
 5110 1188 64       		.sleb128 -28
 5111 1189 1A       		.uleb128 0x1a
 5112 118a 17050000 		.4byte	.LASF169
 5113 118e 01       		.byte	0x1
 5114 118f 8204     		.2byte	0x482
 5115 1191 CB110000 		.4byte	0x11cb
 5116 1195 02       		.uleb128 0x2
 5117 1196 91       		.byte	0x91
 5118 1197 60       		.sleb128 -32
 5119 1198 1A       		.uleb128 0x1a
 5120 1199 A90B0000 		.4byte	.LASF122
 5121 119d 01       		.byte	0x1
 5122 119e 8204     		.2byte	0x482
 5123 11a0 41010000 		.4byte	0x141
 5124 11a4 02       		.uleb128 0x2
 5125 11a5 91       		.byte	0x91
 5126 11a6 00       		.sleb128 0
 5127 11a7 1B       		.uleb128 0x1b
 5128 11a8 260A0000 		.4byte	.LASF75
 5129 11ac 01       		.byte	0x1
 5130 11ad 8404     		.2byte	0x484
 5131 11af F3020000 		.4byte	0x2f3
 5132 11b3 02       		.uleb128 0x2
 5133 11b4 91       		.byte	0x91
 5134 11b5 70       		.sleb128 -16
 5135 11b6 1B       		.uleb128 0x1b
 5136 11b7 43060000 		.4byte	.LASF72
 5137 11bb 01       		.byte	0x1
 5138 11bc 8504     		.2byte	0x485
 5139 11be 2B010000 		.4byte	0x12b
 5140 11c2 02       		.uleb128 0x2
 5141 11c3 91       		.byte	0x91
 5142 11c4 74       		.sleb128 -12
 5143 11c5 00       		.byte	0
 5144 11c6 07       		.uleb128 0x7
 5145 11c7 F3020000 		.4byte	0x2f3
 5146 11cb 07       		.uleb128 0x7
 5147 11cc 2B010000 		.4byte	0x12b
 5148 11d0 1C       		.uleb128 0x1c
 5149 11d1 78080000 		.4byte	.LASF170
 5150 11d5 01       		.byte	0x1
 5151 11d6 8E04     		.2byte	0x48e
 5152 11d8 F3020000 		.4byte	0x2f3
 5153 11dc 00000000 		.4byte	.LFB117
 5154 11e0 2A000000 		.4byte	.LFE117-.LFB117
 5155 11e4 01       		.uleb128 0x1
 5156 11e5 9C       		.byte	0x9c
 5157 11e6 27120000 		.4byte	0x1227
 5158 11ea 1A       		.uleb128 0x1a
 5159 11eb C5050000 		.4byte	.LASF166
 5160 11ef 01       		.byte	0x1
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccQCZNNL.s 			page 115


 5161 11f0 8E04     		.2byte	0x48e
 5162 11f2 DD020000 		.4byte	0x2dd
 5163 11f6 02       		.uleb128 0x2
 5164 11f7 91       		.byte	0x91
 5165 11f8 6C       		.sleb128 -20
 5166 11f9 1A       		.uleb128 0x1a
 5167 11fa 3D050000 		.4byte	.LASF171
 5168 11fe 01       		.byte	0x1
 5169 11ff 8E04     		.2byte	0x48e
 5170 1201 C6110000 		.4byte	0x11c6
 5171 1205 02       		.uleb128 0x2
 5172 1206 91       		.byte	0x91
 5173 1207 68       		.sleb128 -24
 5174 1208 1B       		.uleb128 0x1b
 5175 1209 260A0000 		.4byte	.LASF75
 5176 120d 01       		.byte	0x1
 5177 120e 9004     		.2byte	0x490
 5178 1210 F3020000 		.4byte	0x2f3
 5179 1214 02       		.uleb128 0x2
 5180 1215 91       		.byte	0x91
 5181 1216 70       		.sleb128 -16
 5182 1217 1B       		.uleb128 0x1b
 5183 1218 43060000 		.4byte	.LASF72
 5184 121c 01       		.byte	0x1
 5185 121d 9104     		.2byte	0x491
 5186 121f 2B010000 		.4byte	0x12b
 5187 1223 02       		.uleb128 0x2
 5188 1224 91       		.byte	0x91
 5189 1225 74       		.sleb128 -12
 5190 1226 00       		.byte	0
 5191 1227 1C       		.uleb128 0x1c
 5192 1228 470D0000 		.4byte	.LASF172
 5193 122c 01       		.byte	0x1
 5194 122d 9A04     		.2byte	0x49a
 5195 122f F3020000 		.4byte	0x2f3
 5196 1233 00000000 		.4byte	.LFB118
 5197 1237 2A000000 		.4byte	.LFE118-.LFB118
 5198 123b 01       		.uleb128 0x1
 5199 123c 9C       		.byte	0x9c
 5200 123d 7E120000 		.4byte	0x127e
 5201 1241 1A       		.uleb128 0x1a
 5202 1242 C5050000 		.4byte	.LASF166
 5203 1246 01       		.byte	0x1
 5204 1247 9A04     		.2byte	0x49a
 5205 1249 DD020000 		.4byte	0x2dd
 5206 124d 02       		.uleb128 0x2
 5207 124e 91       		.byte	0x91
 5208 124f 6C       		.sleb128 -20
 5209 1250 1A       		.uleb128 0x1a
 5210 1251 680B0000 		.4byte	.LASF173
 5211 1255 01       		.byte	0x1
 5212 1256 9A04     		.2byte	0x49a
 5213 1258 C6110000 		.4byte	0x11c6
 5214 125c 02       		.uleb128 0x2
 5215 125d 91       		.byte	0x91
 5216 125e 68       		.sleb128 -24
 5217 125f 1B       		.uleb128 0x1b
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccQCZNNL.s 			page 116


 5218 1260 260A0000 		.4byte	.LASF75
 5219 1264 01       		.byte	0x1
 5220 1265 9C04     		.2byte	0x49c
 5221 1267 F3020000 		.4byte	0x2f3
 5222 126b 02       		.uleb128 0x2
 5223 126c 91       		.byte	0x91
 5224 126d 70       		.sleb128 -16
 5225 126e 1B       		.uleb128 0x1b
 5226 126f 43060000 		.4byte	.LASF72
 5227 1273 01       		.byte	0x1
 5228 1274 9D04     		.2byte	0x49d
 5229 1276 2B010000 		.4byte	0x12b
 5230 127a 02       		.uleb128 0x2
 5231 127b 91       		.byte	0x91
 5232 127c 74       		.sleb128 -12
 5233 127d 00       		.byte	0
 5234 127e 1C       		.uleb128 0x1c
 5235 127f F3080000 		.4byte	.LASF174
 5236 1283 01       		.byte	0x1
 5237 1284 A604     		.2byte	0x4a6
 5238 1286 F3020000 		.4byte	0x2f3
 5239 128a 00000000 		.4byte	.LFB119
 5240 128e 32000000 		.4byte	.LFE119-.LFB119
 5241 1292 01       		.uleb128 0x1
 5242 1293 9C       		.byte	0x9c
 5243 1294 F3120000 		.4byte	0x12f3
 5244 1298 1A       		.uleb128 0x1a
 5245 1299 C5050000 		.4byte	.LASF166
 5246 129d 01       		.byte	0x1
 5247 129e A604     		.2byte	0x4a6
 5248 12a0 DD020000 		.4byte	0x2dd
 5249 12a4 02       		.uleb128 0x2
 5250 12a5 91       		.byte	0x91
 5251 12a6 6C       		.sleb128 -20
 5252 12a7 1A       		.uleb128 0x1a
 5253 12a8 680B0000 		.4byte	.LASF173
 5254 12ac 01       		.byte	0x1
 5255 12ad A604     		.2byte	0x4a6
 5256 12af C6110000 		.4byte	0x11c6
 5257 12b3 02       		.uleb128 0x2
 5258 12b4 91       		.byte	0x91
 5259 12b5 68       		.sleb128 -24
 5260 12b6 1A       		.uleb128 0x1a
 5261 12b7 2E0A0000 		.4byte	.LASF167
 5262 12bb 01       		.byte	0x1
 5263 12bc A604     		.2byte	0x4a6
 5264 12be C6110000 		.4byte	0x11c6
 5265 12c2 02       		.uleb128 0x2
 5266 12c3 91       		.byte	0x91
 5267 12c4 64       		.sleb128 -28
 5268 12c5 1A       		.uleb128 0x1a
 5269 12c6 A90B0000 		.4byte	.LASF122
 5270 12ca 01       		.byte	0x1
 5271 12cb A604     		.2byte	0x4a6
 5272 12cd 41010000 		.4byte	0x141
 5273 12d1 02       		.uleb128 0x2
 5274 12d2 91       		.byte	0x91
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccQCZNNL.s 			page 117


 5275 12d3 60       		.sleb128 -32
 5276 12d4 1B       		.uleb128 0x1b
 5277 12d5 260A0000 		.4byte	.LASF75
 5278 12d9 01       		.byte	0x1
 5279 12da A804     		.2byte	0x4a8
 5280 12dc F3020000 		.4byte	0x2f3
 5281 12e0 02       		.uleb128 0x2
 5282 12e1 91       		.byte	0x91
 5283 12e2 70       		.sleb128 -16
 5284 12e3 1B       		.uleb128 0x1b
 5285 12e4 43060000 		.4byte	.LASF72
 5286 12e8 01       		.byte	0x1
 5287 12e9 A904     		.2byte	0x4a9
 5288 12eb 2B010000 		.4byte	0x12b
 5289 12ef 02       		.uleb128 0x2
 5290 12f0 91       		.byte	0x91
 5291 12f1 74       		.sleb128 -12
 5292 12f2 00       		.byte	0
 5293 12f3 19       		.uleb128 0x19
 5294 12f4 0D0D0000 		.4byte	.LASF175
 5295 12f8 01       		.byte	0x1
 5296 12f9 B204     		.2byte	0x4b2
 5297 12fb 00000000 		.4byte	.LFB120
 5298 12ff 22000000 		.4byte	.LFE120-.LFB120
 5299 1303 01       		.uleb128 0x1
 5300 1304 9C       		.byte	0x9c
 5301 1305 28130000 		.4byte	0x1328
 5302 1309 1A       		.uleb128 0x1a
 5303 130a C5050000 		.4byte	.LASF166
 5304 130e 01       		.byte	0x1
 5305 130f B204     		.2byte	0x4b2
 5306 1311 DD020000 		.4byte	0x2dd
 5307 1315 02       		.uleb128 0x2
 5308 1316 91       		.byte	0x91
 5309 1317 6C       		.sleb128 -20
 5310 1318 1B       		.uleb128 0x1b
 5311 1319 43060000 		.4byte	.LASF72
 5312 131d 01       		.byte	0x1
 5313 131e B404     		.2byte	0x4b4
 5314 1320 2B010000 		.4byte	0x12b
 5315 1324 02       		.uleb128 0x2
 5316 1325 91       		.byte	0x91
 5317 1326 74       		.sleb128 -12
 5318 1327 00       		.byte	0
 5319 1328 1C       		.uleb128 0x1c
 5320 1329 50020000 		.4byte	.LASF176
 5321 132d 01       		.byte	0x1
 5322 132e BB04     		.2byte	0x4bb
 5323 1330 2C000000 		.4byte	0x2c
 5324 1334 00000000 		.4byte	.LFB121
 5325 1338 32000000 		.4byte	.LFE121-.LFB121
 5326 133c 01       		.uleb128 0x1
 5327 133d 9C       		.byte	0x9c
 5328 133e 9D130000 		.4byte	0x139d
 5329 1342 1A       		.uleb128 0x1a
 5330 1343 D70B0000 		.4byte	.LASF177
 5331 1347 01       		.byte	0x1
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccQCZNNL.s 			page 118


 5332 1348 BB04     		.2byte	0x4bb
 5333 134a FE020000 		.4byte	0x2fe
 5334 134e 02       		.uleb128 0x2
 5335 134f 91       		.byte	0x91
 5336 1350 6C       		.sleb128 -20
 5337 1351 1A       		.uleb128 0x1a
 5338 1352 CA040000 		.4byte	.LASF178
 5339 1356 01       		.byte	0x1
 5340 1357 BB04     		.2byte	0x4bb
 5341 1359 2C0C0000 		.4byte	0xc2c
 5342 135d 02       		.uleb128 0x2
 5343 135e 91       		.byte	0x91
 5344 135f 68       		.sleb128 -24
 5345 1360 1A       		.uleb128 0x1a
 5346 1361 1E030000 		.4byte	.LASF179
 5347 1365 01       		.byte	0x1
 5348 1366 BB04     		.2byte	0x4bb
 5349 1368 2C000000 		.4byte	0x2c
 5350 136c 02       		.uleb128 0x2
 5351 136d 91       		.byte	0x91
 5352 136e 64       		.sleb128 -28
 5353 136f 1A       		.uleb128 0x1a
 5354 1370 A90B0000 		.4byte	.LASF122
 5355 1374 01       		.byte	0x1
 5356 1375 BB04     		.2byte	0x4bb
 5357 1377 41010000 		.4byte	0x141
 5358 137b 02       		.uleb128 0x2
 5359 137c 91       		.byte	0x91
 5360 137d 60       		.sleb128 -32
 5361 137e 1B       		.uleb128 0x1b
 5362 137f 260A0000 		.4byte	.LASF75
 5363 1383 01       		.byte	0x1
 5364 1384 BD04     		.2byte	0x4bd
 5365 1386 2C000000 		.4byte	0x2c
 5366 138a 02       		.uleb128 0x2
 5367 138b 91       		.byte	0x91
 5368 138c 70       		.sleb128 -16
 5369 138d 1B       		.uleb128 0x1b
 5370 138e 43060000 		.4byte	.LASF72
 5371 1392 01       		.byte	0x1
 5372 1393 BE04     		.2byte	0x4be
 5373 1395 2B010000 		.4byte	0x12b
 5374 1399 02       		.uleb128 0x2
 5375 139a 91       		.byte	0x91
 5376 139b 74       		.sleb128 -12
 5377 139c 00       		.byte	0
 5378 139d 1C       		.uleb128 0x1c
 5379 139e 38030000 		.4byte	.LASF180
 5380 13a2 01       		.byte	0x1
 5381 13a3 C704     		.2byte	0x4c7
 5382 13a5 2C000000 		.4byte	0x2c
 5383 13a9 00000000 		.4byte	.LFB122
 5384 13ad 26000000 		.4byte	.LFE122-.LFB122
 5385 13b1 01       		.uleb128 0x1
 5386 13b2 9C       		.byte	0x9c
 5387 13b3 E5130000 		.4byte	0x13e5
 5388 13b7 1A       		.uleb128 0x1a
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccQCZNNL.s 			page 119


 5389 13b8 D70B0000 		.4byte	.LASF177
 5390 13bc 01       		.byte	0x1
 5391 13bd C704     		.2byte	0x4c7
 5392 13bf FE020000 		.4byte	0x2fe
 5393 13c3 02       		.uleb128 0x2
 5394 13c4 91       		.byte	0x91
 5395 13c5 6C       		.sleb128 -20
 5396 13c6 1B       		.uleb128 0x1b
 5397 13c7 260A0000 		.4byte	.LASF75
 5398 13cb 01       		.byte	0x1
 5399 13cc C904     		.2byte	0x4c9
 5400 13ce 2C000000 		.4byte	0x2c
 5401 13d2 02       		.uleb128 0x2
 5402 13d3 91       		.byte	0x91
 5403 13d4 70       		.sleb128 -16
 5404 13d5 1B       		.uleb128 0x1b
 5405 13d6 43060000 		.4byte	.LASF72
 5406 13da 01       		.byte	0x1
 5407 13db CA04     		.2byte	0x4ca
 5408 13dd 2B010000 		.4byte	0x12b
 5409 13e1 02       		.uleb128 0x2
 5410 13e2 91       		.byte	0x91
 5411 13e3 74       		.sleb128 -12
 5412 13e4 00       		.byte	0
 5413 13e5 1C       		.uleb128 0x1c
 5414 13e6 7A0D0000 		.4byte	.LASF181
 5415 13ea 01       		.byte	0x1
 5416 13eb D304     		.2byte	0x4d3
 5417 13ed 2C000000 		.4byte	0x2c
 5418 13f1 00000000 		.4byte	.LFB123
 5419 13f5 32000000 		.4byte	.LFE123-.LFB123
 5420 13f9 01       		.uleb128 0x1
 5421 13fa 9C       		.byte	0x9c
 5422 13fb 5A140000 		.4byte	0x145a
 5423 13ff 1A       		.uleb128 0x1a
 5424 1400 D70B0000 		.4byte	.LASF177
 5425 1404 01       		.byte	0x1
 5426 1405 D304     		.2byte	0x4d3
 5427 1407 FE020000 		.4byte	0x2fe
 5428 140b 02       		.uleb128 0x2
 5429 140c 91       		.byte	0x91
 5430 140d 6C       		.sleb128 -20
 5431 140e 1A       		.uleb128 0x1a
 5432 140f 38020000 		.4byte	.LASF182
 5433 1413 01       		.byte	0x1
 5434 1414 D304     		.2byte	0x4d3
 5435 1416 F1000000 		.4byte	0xf1
 5436 141a 02       		.uleb128 0x2
 5437 141b 91       		.byte	0x91
 5438 141c 68       		.sleb128 -24
 5439 141d 1A       		.uleb128 0x1a
 5440 141e A90A0000 		.4byte	.LASF183
 5441 1422 01       		.byte	0x1
 5442 1423 D304     		.2byte	0x4d3
 5443 1425 2C000000 		.4byte	0x2c
 5444 1429 02       		.uleb128 0x2
 5445 142a 91       		.byte	0x91
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccQCZNNL.s 			page 120


 5446 142b 64       		.sleb128 -28
 5447 142c 1A       		.uleb128 0x1a
 5448 142d A90B0000 		.4byte	.LASF122
 5449 1431 01       		.byte	0x1
 5450 1432 D304     		.2byte	0x4d3
 5451 1434 41010000 		.4byte	0x141
 5452 1438 02       		.uleb128 0x2
 5453 1439 91       		.byte	0x91
 5454 143a 60       		.sleb128 -32
 5455 143b 1B       		.uleb128 0x1b
 5456 143c 260A0000 		.4byte	.LASF75
 5457 1440 01       		.byte	0x1
 5458 1441 D504     		.2byte	0x4d5
 5459 1443 2C000000 		.4byte	0x2c
 5460 1447 02       		.uleb128 0x2
 5461 1448 91       		.byte	0x91
 5462 1449 70       		.sleb128 -16
 5463 144a 1B       		.uleb128 0x1b
 5464 144b 43060000 		.4byte	.LASF72
 5465 144f 01       		.byte	0x1
 5466 1450 D604     		.2byte	0x4d6
 5467 1452 2B010000 		.4byte	0x12b
 5468 1456 02       		.uleb128 0x2
 5469 1457 91       		.byte	0x91
 5470 1458 74       		.sleb128 -12
 5471 1459 00       		.byte	0
 5472 145a 19       		.uleb128 0x19
 5473 145b 50040000 		.4byte	.LASF184
 5474 145f 01       		.byte	0x1
 5475 1460 DF04     		.2byte	0x4df
 5476 1462 00000000 		.4byte	.LFB124
 5477 1466 22000000 		.4byte	.LFE124-.LFB124
 5478 146a 01       		.uleb128 0x1
 5479 146b 9C       		.byte	0x9c
 5480 146c 8F140000 		.4byte	0x148f
 5481 1470 1A       		.uleb128 0x1a
 5482 1471 D70B0000 		.4byte	.LASF177
 5483 1475 01       		.byte	0x1
 5484 1476 DF04     		.2byte	0x4df
 5485 1478 FE020000 		.4byte	0x2fe
 5486 147c 02       		.uleb128 0x2
 5487 147d 91       		.byte	0x91
 5488 147e 6C       		.sleb128 -20
 5489 147f 1B       		.uleb128 0x1b
 5490 1480 43060000 		.4byte	.LASF72
 5491 1484 01       		.byte	0x1
 5492 1485 E104     		.2byte	0x4e1
 5493 1487 2B010000 		.4byte	0x12b
 5494 148b 02       		.uleb128 0x2
 5495 148c 91       		.byte	0x91
 5496 148d 74       		.sleb128 -12
 5497 148e 00       		.byte	0
 5498 148f 1C       		.uleb128 0x1c
 5499 1490 FB000000 		.4byte	.LASF185
 5500 1494 01       		.byte	0x1
 5501 1495 E804     		.2byte	0x4e8
 5502 1497 2B010000 		.4byte	0x12b
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccQCZNNL.s 			page 121


 5503 149b 00000000 		.4byte	.LFB125
 5504 149f 26000000 		.4byte	.LFE125-.LFB125
 5505 14a3 01       		.uleb128 0x1
 5506 14a4 9C       		.byte	0x9c
 5507 14a5 D7140000 		.4byte	0x14d7
 5508 14a9 1A       		.uleb128 0x1a
 5509 14aa D70B0000 		.4byte	.LASF177
 5510 14ae 01       		.byte	0x1
 5511 14af E804     		.2byte	0x4e8
 5512 14b1 FE020000 		.4byte	0x2fe
 5513 14b5 02       		.uleb128 0x2
 5514 14b6 91       		.byte	0x91
 5515 14b7 6C       		.sleb128 -20
 5516 14b8 1B       		.uleb128 0x1b
 5517 14b9 260A0000 		.4byte	.LASF75
 5518 14bd 01       		.byte	0x1
 5519 14be EA04     		.2byte	0x4ea
 5520 14c0 2B010000 		.4byte	0x12b
 5521 14c4 02       		.uleb128 0x2
 5522 14c5 91       		.byte	0x91
 5523 14c6 70       		.sleb128 -16
 5524 14c7 1B       		.uleb128 0x1b
 5525 14c8 43060000 		.4byte	.LASF72
 5526 14cc 01       		.byte	0x1
 5527 14cd EB04     		.2byte	0x4eb
 5528 14cf 2B010000 		.4byte	0x12b
 5529 14d3 02       		.uleb128 0x2
 5530 14d4 91       		.byte	0x91
 5531 14d5 74       		.sleb128 -12
 5532 14d6 00       		.byte	0
 5533 14d7 1C       		.uleb128 0x1c
 5534 14d8 900B0000 		.4byte	.LASF186
 5535 14dc 01       		.byte	0x1
 5536 14dd F404     		.2byte	0x4f4
 5537 14df 2B010000 		.4byte	0x12b
 5538 14e3 00000000 		.4byte	.LFB126
 5539 14e7 26000000 		.4byte	.LFE126-.LFB126
 5540 14eb 01       		.uleb128 0x1
 5541 14ec 9C       		.byte	0x9c
 5542 14ed 1F150000 		.4byte	0x151f
 5543 14f1 1A       		.uleb128 0x1a
 5544 14f2 D70B0000 		.4byte	.LASF177
 5545 14f6 01       		.byte	0x1
 5546 14f7 F404     		.2byte	0x4f4
 5547 14f9 FE020000 		.4byte	0x2fe
 5548 14fd 02       		.uleb128 0x2
 5549 14fe 91       		.byte	0x91
 5550 14ff 6C       		.sleb128 -20
 5551 1500 1B       		.uleb128 0x1b
 5552 1501 260A0000 		.4byte	.LASF75
 5553 1505 01       		.byte	0x1
 5554 1506 F604     		.2byte	0x4f6
 5555 1508 2B010000 		.4byte	0x12b
 5556 150c 02       		.uleb128 0x2
 5557 150d 91       		.byte	0x91
 5558 150e 70       		.sleb128 -16
 5559 150f 1B       		.uleb128 0x1b
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccQCZNNL.s 			page 122


 5560 1510 43060000 		.4byte	.LASF72
 5561 1514 01       		.byte	0x1
 5562 1515 F704     		.2byte	0x4f7
 5563 1517 2B010000 		.4byte	0x12b
 5564 151b 02       		.uleb128 0x2
 5565 151c 91       		.byte	0x91
 5566 151d 74       		.sleb128 -12
 5567 151e 00       		.byte	0
 5568 151f 1C       		.uleb128 0x1c
 5569 1520 C6060000 		.4byte	.LASF187
 5570 1524 01       		.byte	0x1
 5571 1525 0005     		.2byte	0x500
 5572 1527 2B010000 		.4byte	0x12b
 5573 152b 00000000 		.4byte	.LFB127
 5574 152f 26000000 		.4byte	.LFE127-.LFB127
 5575 1533 01       		.uleb128 0x1
 5576 1534 9C       		.byte	0x9c
 5577 1535 67150000 		.4byte	0x1567
 5578 1539 1A       		.uleb128 0x1a
 5579 153a D70B0000 		.4byte	.LASF177
 5580 153e 01       		.byte	0x1
 5581 153f 0005     		.2byte	0x500
 5582 1541 FE020000 		.4byte	0x2fe
 5583 1545 02       		.uleb128 0x2
 5584 1546 91       		.byte	0x91
 5585 1547 6C       		.sleb128 -20
 5586 1548 1B       		.uleb128 0x1b
 5587 1549 260A0000 		.4byte	.LASF75
 5588 154d 01       		.byte	0x1
 5589 154e 0205     		.2byte	0x502
 5590 1550 2B010000 		.4byte	0x12b
 5591 1554 02       		.uleb128 0x2
 5592 1555 91       		.byte	0x91
 5593 1556 70       		.sleb128 -16
 5594 1557 1B       		.uleb128 0x1b
 5595 1558 43060000 		.4byte	.LASF72
 5596 155c 01       		.byte	0x1
 5597 155d 0305     		.2byte	0x503
 5598 155f 2B010000 		.4byte	0x12b
 5599 1563 02       		.uleb128 0x2
 5600 1564 91       		.byte	0x91
 5601 1565 74       		.sleb128 -12
 5602 1566 00       		.byte	0
 5603 1567 1C       		.uleb128 0x1c
 5604 1568 190B0000 		.4byte	.LASF188
 5605 156c 01       		.byte	0x1
 5606 156d 0C05     		.2byte	0x50c
 5607 156f 2C000000 		.4byte	0x2c
 5608 1573 00000000 		.4byte	.LFB128
 5609 1577 26000000 		.4byte	.LFE128-.LFB128
 5610 157b 01       		.uleb128 0x1
 5611 157c 9C       		.byte	0x9c
 5612 157d AF150000 		.4byte	0x15af
 5613 1581 1A       		.uleb128 0x1a
 5614 1582 D70B0000 		.4byte	.LASF177
 5615 1586 01       		.byte	0x1
 5616 1587 0C05     		.2byte	0x50c
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccQCZNNL.s 			page 123


 5617 1589 FE020000 		.4byte	0x2fe
 5618 158d 02       		.uleb128 0x2
 5619 158e 91       		.byte	0x91
 5620 158f 6C       		.sleb128 -20
 5621 1590 1B       		.uleb128 0x1b
 5622 1591 260A0000 		.4byte	.LASF75
 5623 1595 01       		.byte	0x1
 5624 1596 0E05     		.2byte	0x50e
 5625 1598 2C000000 		.4byte	0x2c
 5626 159c 02       		.uleb128 0x2
 5627 159d 91       		.byte	0x91
 5628 159e 70       		.sleb128 -16
 5629 159f 1B       		.uleb128 0x1b
 5630 15a0 43060000 		.4byte	.LASF72
 5631 15a4 01       		.byte	0x1
 5632 15a5 0F05     		.2byte	0x50f
 5633 15a7 2B010000 		.4byte	0x12b
 5634 15ab 02       		.uleb128 0x2
 5635 15ac 91       		.byte	0x91
 5636 15ad 74       		.sleb128 -12
 5637 15ae 00       		.byte	0
 5638 15af 1C       		.uleb128 0x1c
 5639 15b0 3C010000 		.4byte	.LASF189
 5640 15b4 01       		.byte	0x1
 5641 15b5 1805     		.2byte	0x518
 5642 15b7 2C000000 		.4byte	0x2c
 5643 15bb 00000000 		.4byte	.LFB129
 5644 15bf 26000000 		.4byte	.LFE129-.LFB129
 5645 15c3 01       		.uleb128 0x1
 5646 15c4 9C       		.byte	0x9c
 5647 15c5 F7150000 		.4byte	0x15f7
 5648 15c9 1A       		.uleb128 0x1a
 5649 15ca D70B0000 		.4byte	.LASF177
 5650 15ce 01       		.byte	0x1
 5651 15cf 1805     		.2byte	0x518
 5652 15d1 FE020000 		.4byte	0x2fe
 5653 15d5 02       		.uleb128 0x2
 5654 15d6 91       		.byte	0x91
 5655 15d7 6C       		.sleb128 -20
 5656 15d8 1B       		.uleb128 0x1b
 5657 15d9 260A0000 		.4byte	.LASF75
 5658 15dd 01       		.byte	0x1
 5659 15de 1A05     		.2byte	0x51a
 5660 15e0 2C000000 		.4byte	0x2c
 5661 15e4 02       		.uleb128 0x2
 5662 15e5 91       		.byte	0x91
 5663 15e6 70       		.sleb128 -16
 5664 15e7 1B       		.uleb128 0x1b
 5665 15e8 43060000 		.4byte	.LASF72
 5666 15ec 01       		.byte	0x1
 5667 15ed 1B05     		.2byte	0x51b
 5668 15ef 2B010000 		.4byte	0x12b
 5669 15f3 02       		.uleb128 0x2
 5670 15f4 91       		.byte	0x91
 5671 15f5 74       		.sleb128 -12
 5672 15f6 00       		.byte	0
 5673 15f7 1C       		.uleb128 0x1c
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccQCZNNL.s 			page 124


 5674 15f8 4D000000 		.4byte	.LASF190
 5675 15fc 01       		.byte	0x1
 5676 15fd 2405     		.2byte	0x524
 5677 15ff 2B010000 		.4byte	0x12b
 5678 1603 00000000 		.4byte	.LFB130
 5679 1607 2A000000 		.4byte	.LFE130-.LFB130
 5680 160b 01       		.uleb128 0x1
 5681 160c 9C       		.byte	0x9c
 5682 160d 4E160000 		.4byte	0x164e
 5683 1611 1A       		.uleb128 0x1a
 5684 1612 D70B0000 		.4byte	.LASF177
 5685 1616 01       		.byte	0x1
 5686 1617 2405     		.2byte	0x524
 5687 1619 FE020000 		.4byte	0x2fe
 5688 161d 02       		.uleb128 0x2
 5689 161e 91       		.byte	0x91
 5690 161f 6C       		.sleb128 -20
 5691 1620 1A       		.uleb128 0x1a
 5692 1621 E50B0000 		.4byte	.LASF191
 5693 1625 01       		.byte	0x1
 5694 1626 2405     		.2byte	0x524
 5695 1628 2C000000 		.4byte	0x2c
 5696 162c 02       		.uleb128 0x2
 5697 162d 91       		.byte	0x91
 5698 162e 68       		.sleb128 -24
 5699 162f 1B       		.uleb128 0x1b
 5700 1630 260A0000 		.4byte	.LASF75
 5701 1634 01       		.byte	0x1
 5702 1635 2605     		.2byte	0x526
 5703 1637 2B010000 		.4byte	0x12b
 5704 163b 02       		.uleb128 0x2
 5705 163c 91       		.byte	0x91
 5706 163d 70       		.sleb128 -16
 5707 163e 1B       		.uleb128 0x1b
 5708 163f 43060000 		.4byte	.LASF72
 5709 1643 01       		.byte	0x1
 5710 1644 2705     		.2byte	0x527
 5711 1646 2B010000 		.4byte	0x12b
 5712 164a 02       		.uleb128 0x2
 5713 164b 91       		.byte	0x91
 5714 164c 74       		.sleb128 -12
 5715 164d 00       		.byte	0
 5716 164e 1C       		.uleb128 0x1c
 5717 164f 6B050000 		.4byte	.LASF192
 5718 1653 01       		.byte	0x1
 5719 1654 3105     		.2byte	0x531
 5720 1656 FE020000 		.4byte	0x2fe
 5721 165a 00000000 		.4byte	.LFB131
 5722 165e 2E000000 		.4byte	.LFE131-.LFB131
 5723 1662 01       		.uleb128 0x1
 5724 1663 9C       		.byte	0x9c
 5725 1664 B4160000 		.4byte	0x16b4
 5726 1668 1A       		.uleb128 0x1a
 5727 1669 3C000000 		.4byte	.LASF193
 5728 166d 01       		.byte	0x1
 5729 166e 3105     		.2byte	0x531
 5730 1670 2C000000 		.4byte	0x2c
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccQCZNNL.s 			page 125


 5731 1674 02       		.uleb128 0x2
 5732 1675 91       		.byte	0x91
 5733 1676 6C       		.sleb128 -20
 5734 1677 1A       		.uleb128 0x1a
 5735 1678 8E040000 		.4byte	.LASF194
 5736 167c 01       		.byte	0x1
 5737 167d 3105     		.2byte	0x531
 5738 167f 2C000000 		.4byte	0x2c
 5739 1683 02       		.uleb128 0x2
 5740 1684 91       		.byte	0x91
 5741 1685 68       		.sleb128 -24
 5742 1686 1A       		.uleb128 0x1a
 5743 1687 960C0000 		.4byte	.LASF195
 5744 168b 01       		.byte	0x1
 5745 168c 3105     		.2byte	0x531
 5746 168e 2B010000 		.4byte	0x12b
 5747 1692 02       		.uleb128 0x2
 5748 1693 91       		.byte	0x91
 5749 1694 64       		.sleb128 -28
 5750 1695 1B       		.uleb128 0x1b
 5751 1696 260A0000 		.4byte	.LASF75
 5752 169a 01       		.byte	0x1
 5753 169b 3305     		.2byte	0x533
 5754 169d FE020000 		.4byte	0x2fe
 5755 16a1 02       		.uleb128 0x2
 5756 16a2 91       		.byte	0x91
 5757 16a3 70       		.sleb128 -16
 5758 16a4 1B       		.uleb128 0x1b
 5759 16a5 43060000 		.4byte	.LASF72
 5760 16a9 01       		.byte	0x1
 5761 16aa 3405     		.2byte	0x534
 5762 16ac 2B010000 		.4byte	0x12b
 5763 16b0 02       		.uleb128 0x2
 5764 16b1 91       		.byte	0x91
 5765 16b2 74       		.sleb128 -12
 5766 16b3 00       		.byte	0
 5767 16b4 1F       		.uleb128 0x1f
 5768 16b5 5E090000 		.4byte	.LASF200
 5769 16b9 0B       		.byte	0xb
 5770 16ba 1207     		.2byte	0x712
 5771 16bc C0160000 		.4byte	0x16c0
 5772 16c0 20       		.uleb128 0x20
 5773 16c1 BF000000 		.4byte	0xbf
 5774 16c5 00       		.byte	0
 5775              		.section	.debug_abbrev,"",%progbits
 5776              	.Ldebug_abbrev0:
 5777 0000 01       		.uleb128 0x1
 5778 0001 11       		.uleb128 0x11
 5779 0002 01       		.byte	0x1
 5780 0003 25       		.uleb128 0x25
 5781 0004 0E       		.uleb128 0xe
 5782 0005 13       		.uleb128 0x13
 5783 0006 0B       		.uleb128 0xb
 5784 0007 03       		.uleb128 0x3
 5785 0008 0E       		.uleb128 0xe
 5786 0009 1B       		.uleb128 0x1b
 5787 000a 0E       		.uleb128 0xe
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccQCZNNL.s 			page 126


 5788 000b 55       		.uleb128 0x55
 5789 000c 17       		.uleb128 0x17
 5790 000d 11       		.uleb128 0x11
 5791 000e 01       		.uleb128 0x1
 5792 000f 10       		.uleb128 0x10
 5793 0010 17       		.uleb128 0x17
 5794 0011 00       		.byte	0
 5795 0012 00       		.byte	0
 5796 0013 02       		.uleb128 0x2
 5797 0014 24       		.uleb128 0x24
 5798 0015 00       		.byte	0
 5799 0016 0B       		.uleb128 0xb
 5800 0017 0B       		.uleb128 0xb
 5801 0018 3E       		.uleb128 0x3e
 5802 0019 0B       		.uleb128 0xb
 5803 001a 03       		.uleb128 0x3
 5804 001b 08       		.uleb128 0x8
 5805 001c 00       		.byte	0
 5806 001d 00       		.byte	0
 5807 001e 03       		.uleb128 0x3
 5808 001f 16       		.uleb128 0x16
 5809 0020 00       		.byte	0
 5810 0021 03       		.uleb128 0x3
 5811 0022 0E       		.uleb128 0xe
 5812 0023 3A       		.uleb128 0x3a
 5813 0024 0B       		.uleb128 0xb
 5814 0025 3B       		.uleb128 0x3b
 5815 0026 0B       		.uleb128 0xb
 5816 0027 49       		.uleb128 0x49
 5817 0028 13       		.uleb128 0x13
 5818 0029 00       		.byte	0
 5819 002a 00       		.byte	0
 5820 002b 04       		.uleb128 0x4
 5821 002c 24       		.uleb128 0x24
 5822 002d 00       		.byte	0
 5823 002e 0B       		.uleb128 0xb
 5824 002f 0B       		.uleb128 0xb
 5825 0030 3E       		.uleb128 0x3e
 5826 0031 0B       		.uleb128 0xb
 5827 0032 03       		.uleb128 0x3
 5828 0033 0E       		.uleb128 0xe
 5829 0034 00       		.byte	0
 5830 0035 00       		.byte	0
 5831 0036 05       		.uleb128 0x5
 5832 0037 0F       		.uleb128 0xf
 5833 0038 00       		.byte	0
 5834 0039 0B       		.uleb128 0xb
 5835 003a 0B       		.uleb128 0xb
 5836 003b 00       		.byte	0
 5837 003c 00       		.byte	0
 5838 003d 06       		.uleb128 0x6
 5839 003e 0F       		.uleb128 0xf
 5840 003f 00       		.byte	0
 5841 0040 0B       		.uleb128 0xb
 5842 0041 0B       		.uleb128 0xb
 5843 0042 49       		.uleb128 0x49
 5844 0043 13       		.uleb128 0x13
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccQCZNNL.s 			page 127


 5845 0044 00       		.byte	0
 5846 0045 00       		.byte	0
 5847 0046 07       		.uleb128 0x7
 5848 0047 26       		.uleb128 0x26
 5849 0048 00       		.byte	0
 5850 0049 49       		.uleb128 0x49
 5851 004a 13       		.uleb128 0x13
 5852 004b 00       		.byte	0
 5853 004c 00       		.byte	0
 5854 004d 08       		.uleb128 0x8
 5855 004e 15       		.uleb128 0x15
 5856 004f 01       		.byte	0x1
 5857 0050 27       		.uleb128 0x27
 5858 0051 19       		.uleb128 0x19
 5859 0052 01       		.uleb128 0x1
 5860 0053 13       		.uleb128 0x13
 5861 0054 00       		.byte	0
 5862 0055 00       		.byte	0
 5863 0056 09       		.uleb128 0x9
 5864 0057 05       		.uleb128 0x5
 5865 0058 00       		.byte	0
 5866 0059 49       		.uleb128 0x49
 5867 005a 13       		.uleb128 0x13
 5868 005b 00       		.byte	0
 5869 005c 00       		.byte	0
 5870 005d 0A       		.uleb128 0xa
 5871 005e 13       		.uleb128 0x13
 5872 005f 00       		.byte	0
 5873 0060 03       		.uleb128 0x3
 5874 0061 0E       		.uleb128 0xe
 5875 0062 3C       		.uleb128 0x3c
 5876 0063 19       		.uleb128 0x19
 5877 0064 00       		.byte	0
 5878 0065 00       		.byte	0
 5879 0066 0B       		.uleb128 0xb
 5880 0067 04       		.uleb128 0x4
 5881 0068 01       		.byte	0x1
 5882 0069 0B       		.uleb128 0xb
 5883 006a 0B       		.uleb128 0xb
 5884 006b 49       		.uleb128 0x49
 5885 006c 13       		.uleb128 0x13
 5886 006d 3A       		.uleb128 0x3a
 5887 006e 0B       		.uleb128 0xb
 5888 006f 3B       		.uleb128 0x3b
 5889 0070 0B       		.uleb128 0xb
 5890 0071 01       		.uleb128 0x1
 5891 0072 13       		.uleb128 0x13
 5892 0073 00       		.byte	0
 5893 0074 00       		.byte	0
 5894 0075 0C       		.uleb128 0xc
 5895 0076 28       		.uleb128 0x28
 5896 0077 00       		.byte	0
 5897 0078 03       		.uleb128 0x3
 5898 0079 0E       		.uleb128 0xe
 5899 007a 1C       		.uleb128 0x1c
 5900 007b 0B       		.uleb128 0xb
 5901 007c 00       		.byte	0
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccQCZNNL.s 			page 128


 5902 007d 00       		.byte	0
 5903 007e 0D       		.uleb128 0xd
 5904 007f 13       		.uleb128 0x13
 5905 0080 01       		.byte	0x1
 5906 0081 03       		.uleb128 0x3
 5907 0082 0E       		.uleb128 0xe
 5908 0083 0B       		.uleb128 0xb
 5909 0084 0B       		.uleb128 0xb
 5910 0085 3A       		.uleb128 0x3a
 5911 0086 0B       		.uleb128 0xb
 5912 0087 3B       		.uleb128 0x3b
 5913 0088 0B       		.uleb128 0xb
 5914 0089 01       		.uleb128 0x1
 5915 008a 13       		.uleb128 0x13
 5916 008b 00       		.byte	0
 5917 008c 00       		.byte	0
 5918 008d 0E       		.uleb128 0xe
 5919 008e 0D       		.uleb128 0xd
 5920 008f 00       		.byte	0
 5921 0090 03       		.uleb128 0x3
 5922 0091 0E       		.uleb128 0xe
 5923 0092 3A       		.uleb128 0x3a
 5924 0093 0B       		.uleb128 0xb
 5925 0094 3B       		.uleb128 0x3b
 5926 0095 0B       		.uleb128 0xb
 5927 0096 49       		.uleb128 0x49
 5928 0097 13       		.uleb128 0x13
 5929 0098 38       		.uleb128 0x38
 5930 0099 0B       		.uleb128 0xb
 5931 009a 00       		.byte	0
 5932 009b 00       		.byte	0
 5933 009c 0F       		.uleb128 0xf
 5934 009d 01       		.uleb128 0x1
 5935 009e 01       		.byte	0x1
 5936 009f 49       		.uleb128 0x49
 5937 00a0 13       		.uleb128 0x13
 5938 00a1 01       		.uleb128 0x1
 5939 00a2 13       		.uleb128 0x13
 5940 00a3 00       		.byte	0
 5941 00a4 00       		.byte	0
 5942 00a5 10       		.uleb128 0x10
 5943 00a6 21       		.uleb128 0x21
 5944 00a7 00       		.byte	0
 5945 00a8 49       		.uleb128 0x49
 5946 00a9 13       		.uleb128 0x13
 5947 00aa 2F       		.uleb128 0x2f
 5948 00ab 0B       		.uleb128 0xb
 5949 00ac 00       		.byte	0
 5950 00ad 00       		.byte	0
 5951 00ae 11       		.uleb128 0x11
 5952 00af 2E       		.uleb128 0x2e
 5953 00b0 01       		.byte	0x1
 5954 00b1 3F       		.uleb128 0x3f
 5955 00b2 19       		.uleb128 0x19
 5956 00b3 03       		.uleb128 0x3
 5957 00b4 0E       		.uleb128 0xe
 5958 00b5 3A       		.uleb128 0x3a
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccQCZNNL.s 			page 129


 5959 00b6 0B       		.uleb128 0xb
 5960 00b7 3B       		.uleb128 0x3b
 5961 00b8 0B       		.uleb128 0xb
 5962 00b9 27       		.uleb128 0x27
 5963 00ba 19       		.uleb128 0x19
 5964 00bb 49       		.uleb128 0x49
 5965 00bc 13       		.uleb128 0x13
 5966 00bd 11       		.uleb128 0x11
 5967 00be 01       		.uleb128 0x1
 5968 00bf 12       		.uleb128 0x12
 5969 00c0 06       		.uleb128 0x6
 5970 00c1 40       		.uleb128 0x40
 5971 00c2 18       		.uleb128 0x18
 5972 00c3 9642     		.uleb128 0x2116
 5973 00c5 19       		.uleb128 0x19
 5974 00c6 01       		.uleb128 0x1
 5975 00c7 13       		.uleb128 0x13
 5976 00c8 00       		.byte	0
 5977 00c9 00       		.byte	0
 5978 00ca 12       		.uleb128 0x12
 5979 00cb 34       		.uleb128 0x34
 5980 00cc 00       		.byte	0
 5981 00cd 03       		.uleb128 0x3
 5982 00ce 0E       		.uleb128 0xe
 5983 00cf 3A       		.uleb128 0x3a
 5984 00d0 0B       		.uleb128 0xb
 5985 00d1 3B       		.uleb128 0x3b
 5986 00d2 0B       		.uleb128 0xb
 5987 00d3 49       		.uleb128 0x49
 5988 00d4 13       		.uleb128 0x13
 5989 00d5 02       		.uleb128 0x2
 5990 00d6 18       		.uleb128 0x18
 5991 00d7 00       		.byte	0
 5992 00d8 00       		.byte	0
 5993 00d9 13       		.uleb128 0x13
 5994 00da 2E       		.uleb128 0x2e
 5995 00db 01       		.byte	0x1
 5996 00dc 3F       		.uleb128 0x3f
 5997 00dd 19       		.uleb128 0x19
 5998 00de 03       		.uleb128 0x3
 5999 00df 0E       		.uleb128 0xe
 6000 00e0 3A       		.uleb128 0x3a
 6001 00e1 0B       		.uleb128 0xb
 6002 00e2 3B       		.uleb128 0x3b
 6003 00e3 0B       		.uleb128 0xb
 6004 00e4 49       		.uleb128 0x49
 6005 00e5 13       		.uleb128 0x13
 6006 00e6 3C       		.uleb128 0x3c
 6007 00e7 19       		.uleb128 0x19
 6008 00e8 01       		.uleb128 0x1
 6009 00e9 13       		.uleb128 0x13
 6010 00ea 00       		.byte	0
 6011 00eb 00       		.byte	0
 6012 00ec 14       		.uleb128 0x14
 6013 00ed 18       		.uleb128 0x18
 6014 00ee 00       		.byte	0
 6015 00ef 00       		.byte	0
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccQCZNNL.s 			page 130


 6016 00f0 00       		.byte	0
 6017 00f1 15       		.uleb128 0x15
 6018 00f2 0B       		.uleb128 0xb
 6019 00f3 01       		.byte	0x1
 6020 00f4 11       		.uleb128 0x11
 6021 00f5 01       		.uleb128 0x1
 6022 00f6 12       		.uleb128 0x12
 6023 00f7 06       		.uleb128 0x6
 6024 00f8 00       		.byte	0
 6025 00f9 00       		.byte	0
 6026 00fa 16       		.uleb128 0x16
 6027 00fb 2E       		.uleb128 0x2e
 6028 00fc 01       		.byte	0x1
 6029 00fd 3F       		.uleb128 0x3f
 6030 00fe 19       		.uleb128 0x19
 6031 00ff 03       		.uleb128 0x3
 6032 0100 0E       		.uleb128 0xe
 6033 0101 3A       		.uleb128 0x3a
 6034 0102 0B       		.uleb128 0xb
 6035 0103 3B       		.uleb128 0x3b
 6036 0104 0B       		.uleb128 0xb
 6037 0105 49       		.uleb128 0x49
 6038 0106 13       		.uleb128 0x13
 6039 0107 3C       		.uleb128 0x3c
 6040 0108 19       		.uleb128 0x19
 6041 0109 00       		.byte	0
 6042 010a 00       		.byte	0
 6043 010b 17       		.uleb128 0x17
 6044 010c 2E       		.uleb128 0x2e
 6045 010d 01       		.byte	0x1
 6046 010e 3F       		.uleb128 0x3f
 6047 010f 19       		.uleb128 0x19
 6048 0110 03       		.uleb128 0x3
 6049 0111 0E       		.uleb128 0xe
 6050 0112 3A       		.uleb128 0x3a
 6051 0113 0B       		.uleb128 0xb
 6052 0114 3B       		.uleb128 0x3b
 6053 0115 0B       		.uleb128 0xb
 6054 0116 27       		.uleb128 0x27
 6055 0117 19       		.uleb128 0x19
 6056 0118 11       		.uleb128 0x11
 6057 0119 01       		.uleb128 0x1
 6058 011a 12       		.uleb128 0x12
 6059 011b 06       		.uleb128 0x6
 6060 011c 40       		.uleb128 0x40
 6061 011d 18       		.uleb128 0x18
 6062 011e 9642     		.uleb128 0x2116
 6063 0120 19       		.uleb128 0x19
 6064 0121 01       		.uleb128 0x1
 6065 0122 13       		.uleb128 0x13
 6066 0123 00       		.byte	0
 6067 0124 00       		.byte	0
 6068 0125 18       		.uleb128 0x18
 6069 0126 05       		.uleb128 0x5
 6070 0127 00       		.byte	0
 6071 0128 03       		.uleb128 0x3
 6072 0129 0E       		.uleb128 0xe
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccQCZNNL.s 			page 131


 6073 012a 3A       		.uleb128 0x3a
 6074 012b 0B       		.uleb128 0xb
 6075 012c 3B       		.uleb128 0x3b
 6076 012d 0B       		.uleb128 0xb
 6077 012e 49       		.uleb128 0x49
 6078 012f 13       		.uleb128 0x13
 6079 0130 02       		.uleb128 0x2
 6080 0131 18       		.uleb128 0x18
 6081 0132 00       		.byte	0
 6082 0133 00       		.byte	0
 6083 0134 19       		.uleb128 0x19
 6084 0135 2E       		.uleb128 0x2e
 6085 0136 01       		.byte	0x1
 6086 0137 3F       		.uleb128 0x3f
 6087 0138 19       		.uleb128 0x19
 6088 0139 03       		.uleb128 0x3
 6089 013a 0E       		.uleb128 0xe
 6090 013b 3A       		.uleb128 0x3a
 6091 013c 0B       		.uleb128 0xb
 6092 013d 3B       		.uleb128 0x3b
 6093 013e 05       		.uleb128 0x5
 6094 013f 27       		.uleb128 0x27
 6095 0140 19       		.uleb128 0x19
 6096 0141 11       		.uleb128 0x11
 6097 0142 01       		.uleb128 0x1
 6098 0143 12       		.uleb128 0x12
 6099 0144 06       		.uleb128 0x6
 6100 0145 40       		.uleb128 0x40
 6101 0146 18       		.uleb128 0x18
 6102 0147 9642     		.uleb128 0x2116
 6103 0149 19       		.uleb128 0x19
 6104 014a 01       		.uleb128 0x1
 6105 014b 13       		.uleb128 0x13
 6106 014c 00       		.byte	0
 6107 014d 00       		.byte	0
 6108 014e 1A       		.uleb128 0x1a
 6109 014f 05       		.uleb128 0x5
 6110 0150 00       		.byte	0
 6111 0151 03       		.uleb128 0x3
 6112 0152 0E       		.uleb128 0xe
 6113 0153 3A       		.uleb128 0x3a
 6114 0154 0B       		.uleb128 0xb
 6115 0155 3B       		.uleb128 0x3b
 6116 0156 05       		.uleb128 0x5
 6117 0157 49       		.uleb128 0x49
 6118 0158 13       		.uleb128 0x13
 6119 0159 02       		.uleb128 0x2
 6120 015a 18       		.uleb128 0x18
 6121 015b 00       		.byte	0
 6122 015c 00       		.byte	0
 6123 015d 1B       		.uleb128 0x1b
 6124 015e 34       		.uleb128 0x34
 6125 015f 00       		.byte	0
 6126 0160 03       		.uleb128 0x3
 6127 0161 0E       		.uleb128 0xe
 6128 0162 3A       		.uleb128 0x3a
 6129 0163 0B       		.uleb128 0xb
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccQCZNNL.s 			page 132


 6130 0164 3B       		.uleb128 0x3b
 6131 0165 05       		.uleb128 0x5
 6132 0166 49       		.uleb128 0x49
 6133 0167 13       		.uleb128 0x13
 6134 0168 02       		.uleb128 0x2
 6135 0169 18       		.uleb128 0x18
 6136 016a 00       		.byte	0
 6137 016b 00       		.byte	0
 6138 016c 1C       		.uleb128 0x1c
 6139 016d 2E       		.uleb128 0x2e
 6140 016e 01       		.byte	0x1
 6141 016f 3F       		.uleb128 0x3f
 6142 0170 19       		.uleb128 0x19
 6143 0171 03       		.uleb128 0x3
 6144 0172 0E       		.uleb128 0xe
 6145 0173 3A       		.uleb128 0x3a
 6146 0174 0B       		.uleb128 0xb
 6147 0175 3B       		.uleb128 0x3b
 6148 0176 05       		.uleb128 0x5
 6149 0177 27       		.uleb128 0x27
 6150 0178 19       		.uleb128 0x19
 6151 0179 49       		.uleb128 0x49
 6152 017a 13       		.uleb128 0x13
 6153 017b 11       		.uleb128 0x11
 6154 017c 01       		.uleb128 0x1
 6155 017d 12       		.uleb128 0x12
 6156 017e 06       		.uleb128 0x6
 6157 017f 40       		.uleb128 0x40
 6158 0180 18       		.uleb128 0x18
 6159 0181 9642     		.uleb128 0x2116
 6160 0183 19       		.uleb128 0x19
 6161 0184 01       		.uleb128 0x1
 6162 0185 13       		.uleb128 0x13
 6163 0186 00       		.byte	0
 6164 0187 00       		.byte	0
 6165 0188 1D       		.uleb128 0x1d
 6166 0189 26       		.uleb128 0x26
 6167 018a 00       		.byte	0
 6168 018b 00       		.byte	0
 6169 018c 00       		.byte	0
 6170 018d 1E       		.uleb128 0x1e
 6171 018e 05       		.uleb128 0x5
 6172 018f 00       		.byte	0
 6173 0190 03       		.uleb128 0x3
 6174 0191 08       		.uleb128 0x8
 6175 0192 3A       		.uleb128 0x3a
 6176 0193 0B       		.uleb128 0xb
 6177 0194 3B       		.uleb128 0x3b
 6178 0195 05       		.uleb128 0x5
 6179 0196 49       		.uleb128 0x49
 6180 0197 13       		.uleb128 0x13
 6181 0198 02       		.uleb128 0x2
 6182 0199 18       		.uleb128 0x18
 6183 019a 00       		.byte	0
 6184 019b 00       		.byte	0
 6185 019c 1F       		.uleb128 0x1f
 6186 019d 34       		.uleb128 0x34
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccQCZNNL.s 			page 133


 6187 019e 00       		.byte	0
 6188 019f 03       		.uleb128 0x3
 6189 01a0 0E       		.uleb128 0xe
 6190 01a1 3A       		.uleb128 0x3a
 6191 01a2 0B       		.uleb128 0xb
 6192 01a3 3B       		.uleb128 0x3b
 6193 01a4 05       		.uleb128 0x5
 6194 01a5 49       		.uleb128 0x49
 6195 01a6 13       		.uleb128 0x13
 6196 01a7 3F       		.uleb128 0x3f
 6197 01a8 19       		.uleb128 0x19
 6198 01a9 3C       		.uleb128 0x3c
 6199 01aa 19       		.uleb128 0x19
 6200 01ab 00       		.byte	0
 6201 01ac 00       		.byte	0
 6202 01ad 20       		.uleb128 0x20
 6203 01ae 35       		.uleb128 0x35
 6204 01af 00       		.byte	0
 6205 01b0 49       		.uleb128 0x49
 6206 01b1 13       		.uleb128 0x13
 6207 01b2 00       		.byte	0
 6208 01b3 00       		.byte	0
 6209 01b4 00       		.byte	0
 6210              		.section	.debug_aranges,"",%progbits
 6211 0000 14020000 		.4byte	0x214
 6212 0004 0200     		.2byte	0x2
 6213 0006 00000000 		.4byte	.Ldebug_info0
 6214 000a 04       		.byte	0x4
 6215 000b 00       		.byte	0
 6216 000c 0000     		.2byte	0
 6217 000e 0000     		.2byte	0
 6218 0010 00000000 		.4byte	.LFB68
 6219 0014 20000000 		.4byte	.LFE68-.LFB68
 6220 0018 00000000 		.4byte	.LFB69
 6221 001c 1A000000 		.4byte	.LFE69-.LFB69
 6222 0020 00000000 		.4byte	.LFB70
 6223 0024 2A000000 		.4byte	.LFE70-.LFB70
 6224 0028 00000000 		.4byte	.LFB71
 6225 002c 3C000000 		.4byte	.LFE71-.LFB71
 6226 0030 00000000 		.4byte	.LFB72
 6227 0034 26000000 		.4byte	.LFE72-.LFB72
 6228 0038 00000000 		.4byte	.LFB73
 6229 003c 22000000 		.4byte	.LFE73-.LFB73
 6230 0040 00000000 		.4byte	.LFB74
 6231 0044 26000000 		.4byte	.LFE74-.LFB74
 6232 0048 00000000 		.4byte	.LFB75
 6233 004c 22000000 		.4byte	.LFE75-.LFB75
 6234 0050 00000000 		.4byte	.LFB76
 6235 0054 26000000 		.4byte	.LFE76-.LFB76
 6236 0058 00000000 		.4byte	.LFB77
 6237 005c 26000000 		.4byte	.LFE77-.LFB77
 6238 0060 00000000 		.4byte	.LFB78
 6239 0064 28000000 		.4byte	.LFE78-.LFB78
 6240 0068 00000000 		.4byte	.LFB79
 6241 006c 22000000 		.4byte	.LFE79-.LFB79
 6242 0070 00000000 		.4byte	.LFB80
 6243 0074 22000000 		.4byte	.LFE80-.LFB80
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccQCZNNL.s 			page 134


 6244 0078 00000000 		.4byte	.LFB81
 6245 007c 1E000000 		.4byte	.LFE81-.LFB81
 6246 0080 00000000 		.4byte	.LFB82
 6247 0084 22000000 		.4byte	.LFE82-.LFB82
 6248 0088 00000000 		.4byte	.LFB83
 6249 008c 22000000 		.4byte	.LFE83-.LFB83
 6250 0090 00000000 		.4byte	.LFB84
 6251 0094 22000000 		.4byte	.LFE84-.LFB84
 6252 0098 00000000 		.4byte	.LFB85
 6253 009c 26000000 		.4byte	.LFE85-.LFB85
 6254 00a0 00000000 		.4byte	.LFB86
 6255 00a4 26000000 		.4byte	.LFE86-.LFB86
 6256 00a8 00000000 		.4byte	.LFB87
 6257 00ac 26000000 		.4byte	.LFE87-.LFB87
 6258 00b0 00000000 		.4byte	.LFB88
 6259 00b4 22000000 		.4byte	.LFE88-.LFB88
 6260 00b8 00000000 		.4byte	.LFB89
 6261 00bc 2A000000 		.4byte	.LFE89-.LFB89
 6262 00c0 00000000 		.4byte	.LFB90
 6263 00c4 34000000 		.4byte	.LFE90-.LFB90
 6264 00c8 00000000 		.4byte	.LFB91
 6265 00cc 32000000 		.4byte	.LFE91-.LFB91
 6266 00d0 00000000 		.4byte	.LFB92
 6267 00d4 2A000000 		.4byte	.LFE92-.LFB92
 6268 00d8 00000000 		.4byte	.LFB93
 6269 00dc 26000000 		.4byte	.LFE93-.LFB93
 6270 00e0 00000000 		.4byte	.LFB94
 6271 00e4 2A000000 		.4byte	.LFE94-.LFB94
 6272 00e8 00000000 		.4byte	.LFB95
 6273 00ec 32000000 		.4byte	.LFE95-.LFB95
 6274 00f0 00000000 		.4byte	.LFB96
 6275 00f4 2A000000 		.4byte	.LFE96-.LFB96
 6276 00f8 00000000 		.4byte	.LFB97
 6277 00fc 32000000 		.4byte	.LFE97-.LFB97
 6278 0100 00000000 		.4byte	.LFB98
 6279 0104 26000000 		.4byte	.LFE98-.LFB98
 6280 0108 00000000 		.4byte	.LFB99
 6281 010c 26000000 		.4byte	.LFE99-.LFB99
 6282 0110 00000000 		.4byte	.LFB100
 6283 0114 2E000000 		.4byte	.LFE100-.LFB100
 6284 0118 00000000 		.4byte	.LFB101
 6285 011c 2E000000 		.4byte	.LFE101-.LFB101
 6286 0120 00000000 		.4byte	.LFB102
 6287 0124 2A000000 		.4byte	.LFE102-.LFB102
 6288 0128 00000000 		.4byte	.LFB103
 6289 012c 2A000000 		.4byte	.LFE103-.LFB103
 6290 0130 00000000 		.4byte	.LFB104
 6291 0134 2A000000 		.4byte	.LFE104-.LFB104
 6292 0138 00000000 		.4byte	.LFB105
 6293 013c 2A000000 		.4byte	.LFE105-.LFB105
 6294 0140 00000000 		.4byte	.LFB106
 6295 0144 26000000 		.4byte	.LFE106-.LFB106
 6296 0148 00000000 		.4byte	.LFB107
 6297 014c 26000000 		.4byte	.LFE107-.LFB107
 6298 0150 00000000 		.4byte	.LFB108
 6299 0154 22000000 		.4byte	.LFE108-.LFB108
 6300 0158 00000000 		.4byte	.LFB109
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccQCZNNL.s 			page 135


 6301 015c 26000000 		.4byte	.LFE109-.LFB109
 6302 0160 00000000 		.4byte	.LFB110
 6303 0164 22000000 		.4byte	.LFE110-.LFB110
 6304 0168 00000000 		.4byte	.LFB111
 6305 016c 26000000 		.4byte	.LFE111-.LFB111
 6306 0170 00000000 		.4byte	.LFB112
 6307 0174 22000000 		.4byte	.LFE112-.LFB112
 6308 0178 00000000 		.4byte	.LFB113
 6309 017c 1E000000 		.4byte	.LFE113-.LFB113
 6310 0180 00000000 		.4byte	.LFB114
 6311 0184 22000000 		.4byte	.LFE114-.LFB114
 6312 0188 00000000 		.4byte	.LFB115
 6313 018c 22000000 		.4byte	.LFE115-.LFB115
 6314 0190 00000000 		.4byte	.LFB116
 6315 0194 36000000 		.4byte	.LFE116-.LFB116
 6316 0198 00000000 		.4byte	.LFB117
 6317 019c 2A000000 		.4byte	.LFE117-.LFB117
 6318 01a0 00000000 		.4byte	.LFB118
 6319 01a4 2A000000 		.4byte	.LFE118-.LFB118
 6320 01a8 00000000 		.4byte	.LFB119
 6321 01ac 32000000 		.4byte	.LFE119-.LFB119
 6322 01b0 00000000 		.4byte	.LFB120
 6323 01b4 22000000 		.4byte	.LFE120-.LFB120
 6324 01b8 00000000 		.4byte	.LFB121
 6325 01bc 32000000 		.4byte	.LFE121-.LFB121
 6326 01c0 00000000 		.4byte	.LFB122
 6327 01c4 26000000 		.4byte	.LFE122-.LFB122
 6328 01c8 00000000 		.4byte	.LFB123
 6329 01cc 32000000 		.4byte	.LFE123-.LFB123
 6330 01d0 00000000 		.4byte	.LFB124
 6331 01d4 22000000 		.4byte	.LFE124-.LFB124
 6332 01d8 00000000 		.4byte	.LFB125
 6333 01dc 26000000 		.4byte	.LFE125-.LFB125
 6334 01e0 00000000 		.4byte	.LFB126
 6335 01e4 26000000 		.4byte	.LFE126-.LFB126
 6336 01e8 00000000 		.4byte	.LFB127
 6337 01ec 26000000 		.4byte	.LFE127-.LFB127
 6338 01f0 00000000 		.4byte	.LFB128
 6339 01f4 26000000 		.4byte	.LFE128-.LFB128
 6340 01f8 00000000 		.4byte	.LFB129
 6341 01fc 26000000 		.4byte	.LFE129-.LFB129
 6342 0200 00000000 		.4byte	.LFB130
 6343 0204 2A000000 		.4byte	.LFE130-.LFB130
 6344 0208 00000000 		.4byte	.LFB131
 6345 020c 2E000000 		.4byte	.LFE131-.LFB131
 6346 0210 00000000 		.4byte	0
 6347 0214 00000000 		.4byte	0
 6348              		.section	.debug_ranges,"",%progbits
 6349              	.Ldebug_ranges0:
 6350 0000 00000000 		.4byte	.LFB68
 6351 0004 20000000 		.4byte	.LFE68
 6352 0008 00000000 		.4byte	.LFB69
 6353 000c 1A000000 		.4byte	.LFE69
 6354 0010 00000000 		.4byte	.LFB70
 6355 0014 2A000000 		.4byte	.LFE70
 6356 0018 00000000 		.4byte	.LFB71
 6357 001c 3C000000 		.4byte	.LFE71
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccQCZNNL.s 			page 136


 6358 0020 00000000 		.4byte	.LFB72
 6359 0024 26000000 		.4byte	.LFE72
 6360 0028 00000000 		.4byte	.LFB73
 6361 002c 22000000 		.4byte	.LFE73
 6362 0030 00000000 		.4byte	.LFB74
 6363 0034 26000000 		.4byte	.LFE74
 6364 0038 00000000 		.4byte	.LFB75
 6365 003c 22000000 		.4byte	.LFE75
 6366 0040 00000000 		.4byte	.LFB76
 6367 0044 26000000 		.4byte	.LFE76
 6368 0048 00000000 		.4byte	.LFB77
 6369 004c 26000000 		.4byte	.LFE77
 6370 0050 00000000 		.4byte	.LFB78
 6371 0054 28000000 		.4byte	.LFE78
 6372 0058 00000000 		.4byte	.LFB79
 6373 005c 22000000 		.4byte	.LFE79
 6374 0060 00000000 		.4byte	.LFB80
 6375 0064 22000000 		.4byte	.LFE80
 6376 0068 00000000 		.4byte	.LFB81
 6377 006c 1E000000 		.4byte	.LFE81
 6378 0070 00000000 		.4byte	.LFB82
 6379 0074 22000000 		.4byte	.LFE82
 6380 0078 00000000 		.4byte	.LFB83
 6381 007c 22000000 		.4byte	.LFE83
 6382 0080 00000000 		.4byte	.LFB84
 6383 0084 22000000 		.4byte	.LFE84
 6384 0088 00000000 		.4byte	.LFB85
 6385 008c 26000000 		.4byte	.LFE85
 6386 0090 00000000 		.4byte	.LFB86
 6387 0094 26000000 		.4byte	.LFE86
 6388 0098 00000000 		.4byte	.LFB87
 6389 009c 26000000 		.4byte	.LFE87
 6390 00a0 00000000 		.4byte	.LFB88
 6391 00a4 22000000 		.4byte	.LFE88
 6392 00a8 00000000 		.4byte	.LFB89
 6393 00ac 2A000000 		.4byte	.LFE89
 6394 00b0 00000000 		.4byte	.LFB90
 6395 00b4 34000000 		.4byte	.LFE90
 6396 00b8 00000000 		.4byte	.LFB91
 6397 00bc 32000000 		.4byte	.LFE91
 6398 00c0 00000000 		.4byte	.LFB92
 6399 00c4 2A000000 		.4byte	.LFE92
 6400 00c8 00000000 		.4byte	.LFB93
 6401 00cc 26000000 		.4byte	.LFE93
 6402 00d0 00000000 		.4byte	.LFB94
 6403 00d4 2A000000 		.4byte	.LFE94
 6404 00d8 00000000 		.4byte	.LFB95
 6405 00dc 32000000 		.4byte	.LFE95
 6406 00e0 00000000 		.4byte	.LFB96
 6407 00e4 2A000000 		.4byte	.LFE96
 6408 00e8 00000000 		.4byte	.LFB97
 6409 00ec 32000000 		.4byte	.LFE97
 6410 00f0 00000000 		.4byte	.LFB98
 6411 00f4 26000000 		.4byte	.LFE98
 6412 00f8 00000000 		.4byte	.LFB99
 6413 00fc 26000000 		.4byte	.LFE99
 6414 0100 00000000 		.4byte	.LFB100
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccQCZNNL.s 			page 137


 6415 0104 2E000000 		.4byte	.LFE100
 6416 0108 00000000 		.4byte	.LFB101
 6417 010c 2E000000 		.4byte	.LFE101
 6418 0110 00000000 		.4byte	.LFB102
 6419 0114 2A000000 		.4byte	.LFE102
 6420 0118 00000000 		.4byte	.LFB103
 6421 011c 2A000000 		.4byte	.LFE103
 6422 0120 00000000 		.4byte	.LFB104
 6423 0124 2A000000 		.4byte	.LFE104
 6424 0128 00000000 		.4byte	.LFB105
 6425 012c 2A000000 		.4byte	.LFE105
 6426 0130 00000000 		.4byte	.LFB106
 6427 0134 26000000 		.4byte	.LFE106
 6428 0138 00000000 		.4byte	.LFB107
 6429 013c 26000000 		.4byte	.LFE107
 6430 0140 00000000 		.4byte	.LFB108
 6431 0144 22000000 		.4byte	.LFE108
 6432 0148 00000000 		.4byte	.LFB109
 6433 014c 26000000 		.4byte	.LFE109
 6434 0150 00000000 		.4byte	.LFB110
 6435 0154 22000000 		.4byte	.LFE110
 6436 0158 00000000 		.4byte	.LFB111
 6437 015c 26000000 		.4byte	.LFE111
 6438 0160 00000000 		.4byte	.LFB112
 6439 0164 22000000 		.4byte	.LFE112
 6440 0168 00000000 		.4byte	.LFB113
 6441 016c 1E000000 		.4byte	.LFE113
 6442 0170 00000000 		.4byte	.LFB114
 6443 0174 22000000 		.4byte	.LFE114
 6444 0178 00000000 		.4byte	.LFB115
 6445 017c 22000000 		.4byte	.LFE115
 6446 0180 00000000 		.4byte	.LFB116
 6447 0184 36000000 		.4byte	.LFE116
 6448 0188 00000000 		.4byte	.LFB117
 6449 018c 2A000000 		.4byte	.LFE117
 6450 0190 00000000 		.4byte	.LFB118
 6451 0194 2A000000 		.4byte	.LFE118
 6452 0198 00000000 		.4byte	.LFB119
 6453 019c 32000000 		.4byte	.LFE119
 6454 01a0 00000000 		.4byte	.LFB120
 6455 01a4 22000000 		.4byte	.LFE120
 6456 01a8 00000000 		.4byte	.LFB121
 6457 01ac 32000000 		.4byte	.LFE121
 6458 01b0 00000000 		.4byte	.LFB122
 6459 01b4 26000000 		.4byte	.LFE122
 6460 01b8 00000000 		.4byte	.LFB123
 6461 01bc 32000000 		.4byte	.LFE123
 6462 01c0 00000000 		.4byte	.LFB124
 6463 01c4 22000000 		.4byte	.LFE124
 6464 01c8 00000000 		.4byte	.LFB125
 6465 01cc 26000000 		.4byte	.LFE125
 6466 01d0 00000000 		.4byte	.LFB126
 6467 01d4 26000000 		.4byte	.LFE126
 6468 01d8 00000000 		.4byte	.LFB127
 6469 01dc 26000000 		.4byte	.LFE127
 6470 01e0 00000000 		.4byte	.LFB128
 6471 01e4 26000000 		.4byte	.LFE128
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccQCZNNL.s 			page 138


 6472 01e8 00000000 		.4byte	.LFB129
 6473 01ec 26000000 		.4byte	.LFE129
 6474 01f0 00000000 		.4byte	.LFB130
 6475 01f4 2A000000 		.4byte	.LFE130
 6476 01f8 00000000 		.4byte	.LFB131
 6477 01fc 2E000000 		.4byte	.LFE131
 6478 0200 00000000 		.4byte	0
 6479 0204 00000000 		.4byte	0
 6480              		.section	.debug_line,"",%progbits
 6481              	.Ldebug_line0:
 6482 0000 99070000 		.section	.debug_str,"MS",%progbits,1
 6482      02006602 
 6482      00000201 
 6482      FB0E0D00 
 6482      01010101 
 6483              	.LASF112:
 6484 0000 70785469 		.ascii	"pxTicksToWait\000"
 6484      636B7354 
 6484      6F576169 
 6484      7400
 6485              	.LASF153:
 6486 000e 4D50555F 		.ascii	"MPU_xQueueGiveMutexRecursive\000"
 6486      78517565 
 6486      75654769 
 6486      76654D75 
 6486      74657852 
 6487              	.LASF158:
 6488 002b 4D50555F 		.ascii	"MPU_pvPortMalloc\000"
 6488      7076506F 
 6488      72744D61 
 6488      6C6C6F63 
 6488      00
 6489              	.LASF193:
 6490 003c 78427566 		.ascii	"xBufferSizeBytes\000"
 6490      66657253 
 6490      697A6542 
 6490      79746573 
 6490      00
 6491              	.LASF190:
 6492 004d 4D50555F 		.ascii	"MPU_xStreamBufferSetTriggerLevel\000"
 6492      78537472 
 6492      65616D42 
 6492      75666665 
 6492      72536574 
 6493              	.LASF102:
 6494 006e 4D50555F 		.ascii	"MPU_uxTaskGetNumberOfTasks\000"
 6494      75785461 
 6494      736B4765 
 6494      744E756D 
 6494      6265724F 
 6495              	.LASF161:
 6496 0089 4D50555F 		.ascii	"MPU_vPortFree\000"
 6496      76506F72 
 6496      74467265 
 6496      6500
 6497              	.LASF81:
 6498 0097 4D50555F 		.ascii	"MPU_vTaskDelete\000"
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccQCZNNL.s 			page 139


 6498      76546173 
 6498      6B44656C 
 6498      65746500 
 6499              	.LASF56:
 6500 00a7 75785072 		.ascii	"uxPriority\000"
 6500      696F7269 
 6500      747900
 6501              	.LASF32:
 6502 00b2 65537573 		.ascii	"eSuspended\000"
 6502      70656E64 
 6502      656400
 6503              	.LASF146:
 6504 00bd 4D50555F 		.ascii	"MPU_xQueueCreateMutex\000"
 6504      78517565 
 6504      75654372 
 6504      65617465 
 6504      4D757465 
 6505              	.LASF61:
 6506 00d3 74736B54 		.ascii	"tskTaskControlBlock\000"
 6506      61736B43 
 6506      6F6E7472 
 6506      6F6C426C 
 6506      6F636B00 
 6507              	.LASF120:
 6508 00e7 756C4269 		.ascii	"ulBitsToClearOnExit\000"
 6508      7473546F 
 6508      436C6561 
 6508      724F6E45 
 6508      78697400 
 6509              	.LASF185:
 6510 00fb 4D50555F 		.ascii	"MPU_xStreamBufferIsFull\000"
 6510      78537472 
 6510      65616D42 
 6510      75666665 
 6510      72497346 
 6511              	.LASF159:
 6512 0113 7853697A 		.ascii	"xSize\000"
 6512      6500
 6513              	.LASF36:
 6514 0119 654E6F41 		.ascii	"eNoAction\000"
 6514      6374696F 
 6514      6E00
 6515              	.LASF0:
 6516 0123 756E7369 		.ascii	"unsigned int\000"
 6516      676E6564 
 6516      20696E74 
 6516      00
 6517              	.LASF24:
 6518 0130 53746163 		.ascii	"StackType_t\000"
 6518      6B547970 
 6518      655F7400 
 6519              	.LASF189:
 6520 013c 4D50555F 		.ascii	"MPU_xStreamBufferBytesAvailable\000"
 6520      78537472 
 6520      65616D42 
 6520      75666665 
 6520      72427974 
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccQCZNNL.s 			page 140


 6521              	.LASF45:
 6522 015c 7854494D 		.ascii	"xTIME_OUT\000"
 6522      455F4F55 
 6522      5400
 6523              	.LASF128:
 6524 0166 756C4269 		.ascii	"ulBitsToClear\000"
 6524      7473546F 
 6524      436C6561 
 6524      7200
 6525              	.LASF10:
 6526 0174 5F5F696E 		.ascii	"__int32_t\000"
 6526      7433325F 
 6526      7400
 6527              	.LASF57:
 6528 017e 70757853 		.ascii	"puxStackBuffer\000"
 6528      7461636B 
 6528      42756666 
 6528      657200
 6529              	.LASF83:
 6530 018d 4D50555F 		.ascii	"MPU_vTaskDelayUntil\000"
 6530      76546173 
 6530      6B44656C 
 6530      6179556E 
 6530      74696C00 
 6531              	.LASF196:
 6532 01a1 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 6532      43313120 
 6532      352E342E 
 6532      31203230 
 6532      31363036 
 6533 01d4 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 6533      20726576 
 6533      6973696F 
 6533      6E203233 
 6533      37373135 
 6534 0207 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 6534      66756E63 
 6534      74696F6E 
 6534      2D736563 
 6534      74696F6E 
 6535              	.LASF58:
 6536 022f 78526567 		.ascii	"xRegions\000"
 6536      696F6E73 
 6536      00
 6537              	.LASF182:
 6538 0238 70765278 		.ascii	"pvRxData\000"
 6538      44617461 
 6538      00
 6539              	.LASF42:
 6540 0241 784F7665 		.ascii	"xOverflowCount\000"
 6540      72666C6F 
 6540      77436F75 
 6540      6E7400
 6541              	.LASF176:
 6542 0250 4D50555F 		.ascii	"MPU_xStreamBufferSend\000"
 6542      78537472 
 6542      65616D42 
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccQCZNNL.s 			page 141


 6542      75666665 
 6542      7253656E 
 6543              	.LASF91:
 6544 0266 4D50555F 		.ascii	"MPU_vTaskPrioritySet\000"
 6544      76546173 
 6544      6B507269 
 6544      6F726974 
 6544      79536574 
 6545              	.LASF109:
 6546 027b 4D50555F 		.ascii	"MPU_vTaskSetTimeOutState\000"
 6546      76546173 
 6546      6B536574 
 6546      54696D65 
 6546      4F757453 
 6547              	.LASF49:
 6548 0294 756C5061 		.ascii	"ulParameters\000"
 6548      72616D65 
 6548      74657273 
 6548      00
 6549              	.LASF94:
 6550 02a1 65526574 		.ascii	"eReturn\000"
 6550      75726E00 
 6551              	.LASF139:
 6552 02a9 78436F70 		.ascii	"xCopyPosition\000"
 6552      79506F73 
 6552      6974696F 
 6552      6E00
 6553              	.LASF90:
 6554 02b7 75785265 		.ascii	"uxReturn\000"
 6554      7475726E 
 6554      00
 6555              	.LASF198:
 6556 02c0 433A5C43 		.ascii	"C:\\Code\\P4\\P4_Vertical_farm\\RTOS_TEMPLATE-maste"
 6556      6F64655C 
 6556      50345C50 
 6556      345F5665 
 6556      72746963 
 6557 02ef 725C506C 		.ascii	"r\\PlanteModul.cydsn\000"
 6557      616E7465 
 6557      4D6F6475 
 6557      6C2E6379 
 6557      64736E00 
 6558              	.LASF3:
 6559 0303 7369676E 		.ascii	"signed char\000"
 6559      65642063 
 6559      68617200 
 6560              	.LASF98:
 6561 030f 70785461 		.ascii	"pxTaskToResume\000"
 6561      736B546F 
 6561      52657375 
 6561      6D6500
 6562              	.LASF179:
 6563 031e 78446174 		.ascii	"xDataLengthBytes\000"
 6563      614C656E 
 6563      67746842 
 6563      79746573 
 6563      00
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccQCZNNL.s 			page 142


 6564              	.LASF18:
 6565 032f 75696E74 		.ascii	"uint32_t\000"
 6565      33325F74 
 6565      00
 6566              	.LASF180:
 6567 0338 4D50555F 		.ascii	"MPU_xStreamBufferNextMessageLengthBytes\000"
 6567      78537472 
 6567      65616D42 
 6567      75666665 
 6567      724E6578 
 6568              	.LASF68:
 6569 0360 706F7274 		.ascii	"portRAISE_PRIVILEGE\000"
 6569      52414953 
 6569      455F5052 
 6569      4956494C 
 6569      45474500 
 6570              	.LASF86:
 6571 0374 4D50555F 		.ascii	"MPU_vTaskDelay\000"
 6571      76546173 
 6571      6B44656C 
 6571      617900
 6572              	.LASF137:
 6573 0383 78517565 		.ascii	"xQueue\000"
 6573      756500
 6574              	.LASF19:
 6575 038a 666C6F61 		.ascii	"float\000"
 6575      7400
 6576              	.LASF54:
 6577 0390 75735374 		.ascii	"usStackDepth\000"
 6577      61636B44 
 6577      65707468 
 6577      00
 6578              	.LASF62:
 6579 039d 51756575 		.ascii	"QueueDefinition\000"
 6579      65446566 
 6579      696E6974 
 6579      696F6E00 
 6580              	.LASF147:
 6581 03ad 4D50555F 		.ascii	"MPU_xQueueCreateCountingSemaphore\000"
 6581      78517565 
 6581      75654372 
 6581      65617465 
 6581      436F756E 
 6582              	.LASF124:
 6583 03cf 78436C65 		.ascii	"xClearCountOnExit\000"
 6583      6172436F 
 6583      756E744F 
 6583      6E457869 
 6583      7400
 6584              	.LASF155:
 6585 03e1 4D50555F 		.ascii	"MPU_vQueueUnregisterQueue\000"
 6585      76517565 
 6585      7565556E 
 6585      72656769 
 6585      73746572 
 6586              	.LASF39:
 6587 03fb 65536574 		.ascii	"eSetValueWithOverwrite\000"
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccQCZNNL.s 			page 143


 6587      56616C75 
 6587      65576974 
 6587      684F7665 
 6587      72777269 
 6588              	.LASF14:
 6589 0412 6C6F6E67 		.ascii	"long long unsigned int\000"
 6589      206C6F6E 
 6589      6720756E 
 6589      7369676E 
 6589      65642069 
 6590              	.LASF103:
 6591 0429 4D50555F 		.ascii	"MPU_pcTaskGetName\000"
 6591      70635461 
 6591      736B4765 
 6591      744E616D 
 6591      6500
 6592              	.LASF119:
 6593 043b 756C4269 		.ascii	"ulBitsToClearOnEntry\000"
 6593      7473546F 
 6593      436C6561 
 6593      724F6E45 
 6593      6E747279 
 6594              	.LASF184:
 6595 0450 4D50555F 		.ascii	"MPU_vStreamBufferDelete\000"
 6595      76537472 
 6595      65616D42 
 6595      75666665 
 6595      7244656C 
 6596              	.LASF143:
 6597 0468 70764275 		.ascii	"pvBuffer\000"
 6597      66666572 
 6597      00
 6598              	.LASF93:
 6599 0471 4D50555F 		.ascii	"MPU_eTaskGetState\000"
 6599      65546173 
 6599      6B476574 
 6599      53746174 
 6599      6500
 6600              	.LASF8:
 6601 0483 5F5F7569 		.ascii	"__uint16_t\000"
 6601      6E743136 
 6601      5F7400
 6602              	.LASF194:
 6603 048e 78547269 		.ascii	"xTriggerLevelBytes\000"
 6603      67676572 
 6603      4C657665 
 6603      6C427974 
 6603      657300
 6604              	.LASF160:
 6605 04a1 70765265 		.ascii	"pvReturn\000"
 6605      7475726E 
 6605      00
 6606              	.LASF67:
 6607 04aa 53747265 		.ascii	"StreamBufferDef_t\000"
 6607      616D4275 
 6607      66666572 
 6607      4465665F 
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccQCZNNL.s 			page 144


 6607      7400
 6608              	.LASF41:
 6609 04bc 654E6F74 		.ascii	"eNotifyAction\000"
 6609      69667941 
 6609      6374696F 
 6609      6E00
 6610              	.LASF178:
 6611 04ca 70765478 		.ascii	"pvTxData\000"
 6611      44617461 
 6611      00
 6612              	.LASF162:
 6613 04d3 4D50555F 		.ascii	"MPU_vPortInitialiseBlocks\000"
 6613      76506F72 
 6613      74496E69 
 6613      7469616C 
 6613      69736542 
 6614              	.LASF4:
 6615 04ed 73697A65 		.ascii	"size_t\000"
 6615      5F7400
 6616              	.LASF145:
 6617 04f4 4D50555F 		.ascii	"MPU_xQueueSemaphoreTake\000"
 6617      78517565 
 6617      75655365 
 6617      6D617068 
 6617      6F726554 
 6618              	.LASF38:
 6619 050c 65496E63 		.ascii	"eIncrement\000"
 6619      72656D65 
 6619      6E7400
 6620              	.LASF169:
 6621 0517 78576169 		.ascii	"xWaitForAllBits\000"
 6621      74466F72 
 6621      416C6C42 
 6621      69747300 
 6622              	.LASF76:
 6623 0527 78546173 		.ascii	"xTaskCreateRestricted\000"
 6623      6B437265 
 6623      61746552 
 6623      65737472 
 6623      69637465 
 6624              	.LASF171:
 6625 053d 75784269 		.ascii	"uxBitsToClear\000"
 6625      7473546F 
 6625      436C6561 
 6625      7200
 6626              	.LASF163:
 6627 054b 4D50555F 		.ascii	"MPU_xPortGetFreeHeapSize\000"
 6627      78506F72 
 6627      74476574 
 6627      46726565 
 6627      48656170 
 6628              	.LASF53:
 6629 0564 70634E61 		.ascii	"pcName\000"
 6629      6D6500
 6630              	.LASF192:
 6631 056b 4D50555F 		.ascii	"MPU_xStreamBufferGenericCreate\000"
 6631      78537472 
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccQCZNNL.s 			page 145


 6631      65616D42 
 6631      75666665 
 6631      7247656E 
 6632              	.LASF71:
 6633 058a 4D50555F 		.ascii	"MPU_xTaskCreateRestricted\000"
 6633      78546173 
 6633      6B437265 
 6633      61746552 
 6633      65737472 
 6634              	.LASF131:
 6635 05a4 75784974 		.ascii	"uxItemSize\000"
 6635      656D5369 
 6635      7A6500
 6636              	.LASF149:
 6637 05af 7578496E 		.ascii	"uxInitialCount\000"
 6637      69746961 
 6637      6C436F75 
 6637      6E7400
 6638              	.LASF89:
 6639 05be 70785461 		.ascii	"pxTask\000"
 6639      736B00
 6640              	.LASF166:
 6641 05c5 78457665 		.ascii	"xEventGroup\000"
 6641      6E744772 
 6641      6F757000 
 6642              	.LASF21:
 6643 05d1 63686172 		.ascii	"char\000"
 6643      00
 6644              	.LASF78:
 6645 05d6 76506F72 		.ascii	"vPortResetPrivilege\000"
 6645      74526573 
 6645      65745072 
 6645      6976696C 
 6645      65676500 
 6646              	.LASF40:
 6647 05ea 65536574 		.ascii	"eSetValueWithoutOverwrite\000"
 6647      56616C75 
 6647      65576974 
 6647      686F7574 
 6647      4F766572 
 6648              	.LASF26:
 6649 0604 55426173 		.ascii	"UBaseType_t\000"
 6649      65547970 
 6649      655F7400 
 6650              	.LASF60:
 6651 0610 51756575 		.ascii	"QueueHandle_t\000"
 6651      6548616E 
 6651      646C655F 
 6651      7400
 6652              	.LASF64:
 6653 061e 4576656E 		.ascii	"EventGroupDef_t\000"
 6653      7447726F 
 6653      75704465 
 6653      665F7400 
 6654              	.LASF15:
 6655 062e 75696E74 		.ascii	"uint8_t\000"
 6655      385F7400 
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccQCZNNL.s 			page 146


 6656              	.LASF30:
 6657 0636 65526561 		.ascii	"eReady\000"
 6657      647900
 6658              	.LASF80:
 6659 063d 78546173 		.ascii	"xTask\000"
 6659      6B00
 6660              	.LASF72:
 6661 0643 7852756E 		.ascii	"xRunningPrivileged\000"
 6661      6E696E67 
 6661      50726976 
 6661      696C6567 
 6661      656400
 6662              	.LASF123:
 6663 0656 4D50555F 		.ascii	"MPU_ulTaskNotifyTake\000"
 6663      756C5461 
 6663      736B4E6F 
 6663      74696679 
 6663      54616B65 
 6664              	.LASF97:
 6665 066b 4D50555F 		.ascii	"MPU_vTaskResume\000"
 6665      76546173 
 6665      6B526573 
 6665      756D6500 
 6666              	.LASF50:
 6667 067b 4D656D6F 		.ascii	"MemoryRegion_t\000"
 6667      72795265 
 6667      67696F6E 
 6667      5F7400
 6668              	.LASF1:
 6669 068a 6C6F6E67 		.ascii	"long long int\000"
 6669      206C6F6E 
 6669      6720696E 
 6669      7400
 6670              	.LASF33:
 6671 0698 6544656C 		.ascii	"eDeleted\000"
 6671      65746564 
 6671      00
 6672              	.LASF66:
 6673 06a1 53747265 		.ascii	"StreamBufferHandle_t\000"
 6673      616D4275 
 6673      66666572 
 6673      48616E64 
 6673      6C655F74 
 6674              	.LASF48:
 6675 06b6 756C4C65 		.ascii	"ulLengthInBytes\000"
 6675      6E677468 
 6675      496E4279 
 6675      74657300 
 6676              	.LASF187:
 6677 06c6 4D50555F 		.ascii	"MPU_xStreamBufferReset\000"
 6677      78537472 
 6677      65616D42 
 6677      75666665 
 6677      72526573 
 6678              	.LASF25:
 6679 06dd 42617365 		.ascii	"BaseType_t\000"
 6679      54797065 
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccQCZNNL.s 			page 147


 6679      5F7400
 6680              	.LASF133:
 6681 06e8 4D50555F 		.ascii	"MPU_xQueueGenericReset\000"
 6681      78517565 
 6681      75654765 
 6681      6E657269 
 6681      63526573 
 6682              	.LASF151:
 6683 06ff 784D7574 		.ascii	"xMutex\000"
 6683      657800
 6684              	.LASF43:
 6685 0706 7854696D 		.ascii	"xTimeOnEntering\000"
 6685      654F6E45 
 6685      6E746572 
 6685      696E6700 
 6686              	.LASF92:
 6687 0716 75784E65 		.ascii	"uxNewPriority\000"
 6687      77507269 
 6687      6F726974 
 6687      7900
 6688              	.LASF23:
 6689 0724 5461736B 		.ascii	"TaskFunction_t\000"
 6689      46756E63 
 6689      74696F6E 
 6689      5F7400
 6690              	.LASF99:
 6691 0733 4D50555F 		.ascii	"MPU_vTaskSuspendAll\000"
 6691      76546173 
 6691      6B537573 
 6691      70656E64 
 6691      416C6C00 
 6692              	.LASF117:
 6693 0747 70756C50 		.ascii	"pulPreviousNotificationValue\000"
 6693      72657669 
 6693      6F75734E 
 6693      6F746966 
 6693      69636174 
 6694              	.LASF110:
 6695 0764 70785469 		.ascii	"pxTimeOut\000"
 6695      6D654F75 
 6695      7400
 6696              	.LASF135:
 6697 076e 784E6577 		.ascii	"xNewQueue\000"
 6697      51756575 
 6697      6500
 6698              	.LASF44:
 6699 0778 54696D65 		.ascii	"TimeOut_t\000"
 6699      4F75745F 
 6699      7400
 6700              	.LASF28:
 6701 0782 5461736B 		.ascii	"TaskHandle_t\000"
 6701      48616E64 
 6701      6C655F74 
 6701      00
 6702              	.LASF116:
 6703 078f 65416374 		.ascii	"eAction\000"
 6703      696F6E00 
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccQCZNNL.s 			page 148


 6704              	.LASF69:
 6705 0797 706F7274 		.ascii	"portRESET_PRIVILEGE\000"
 6705      52455345 
 6705      545F5052 
 6705      4956494C 
 6705      45474500 
 6706              	.LASF199:
 6707 07ab 706F7274 		.ascii	"portIS_PRIVILEGED\000"
 6707      49535F50 
 6707      52495649 
 6707      4C454745 
 6707      4400
 6708              	.LASF132:
 6709 07bd 75635175 		.ascii	"ucQueueType\000"
 6709      65756554 
 6709      79706500 
 6710              	.LASF35:
 6711 07c9 65546173 		.ascii	"eTaskState\000"
 6711      6B537461 
 6711      746500
 6712              	.LASF104:
 6713 07d4 78546173 		.ascii	"xTaskToQuery\000"
 6713      6B546F51 
 6713      75657279 
 6713      00
 6714              	.LASF95:
 6715 07e1 4D50555F 		.ascii	"MPU_vTaskSuspend\000"
 6715      76546173 
 6715      6B537573 
 6715      70656E64 
 6715      00
 6716              	.LASF140:
 6717 07f2 4D50555F 		.ascii	"MPU_uxQueueMessagesWaiting\000"
 6717      75785175 
 6717      6575654D 
 6717      65737361 
 6717      67657357 
 6718              	.LASF27:
 6719 080d 5469636B 		.ascii	"TickType_t\000"
 6719      54797065 
 6719      5F7400
 6720              	.LASF114:
 6721 0818 78546173 		.ascii	"xTaskToNotify\000"
 6721      6B546F4E 
 6721      6F746966 
 6721      7900
 6722              	.LASF73:
 6723 0826 70785461 		.ascii	"pxTaskDefinition\000"
 6723      736B4465 
 6723      66696E69 
 6723      74696F6E 
 6723      00
 6724              	.LASF130:
 6725 0837 75785175 		.ascii	"uxQueueLength\000"
 6725      6575654C 
 6725      656E6774 
 6725      6800
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccQCZNNL.s 			page 149


 6726              	.LASF150:
 6727 0845 4D50555F 		.ascii	"MPU_xQueueTakeMutexRecursive\000"
 6727      78517565 
 6727      75655461 
 6727      6B654D75 
 6727      74657852 
 6728              	.LASF106:
 6729 0862 4D50555F 		.ascii	"MPU_xTaskCatchUpTicks\000"
 6729      78546173 
 6729      6B436174 
 6729      63685570 
 6729      5469636B 
 6730              	.LASF170:
 6731 0878 4D50555F 		.ascii	"MPU_xEventGroupClearBits\000"
 6731      78457665 
 6731      6E744772 
 6731      6F757043 
 6731      6C656172 
 6732              	.LASF37:
 6733 0891 65536574 		.ascii	"eSetBits\000"
 6733      42697473 
 6733      00
 6734              	.LASF2:
 6735 089a 6C6F6E67 		.ascii	"long double\000"
 6735      20646F75 
 6735      626C6500 
 6736              	.LASF46:
 6737 08a6 784D454D 		.ascii	"xMEMORY_REGION\000"
 6737      4F52595F 
 6737      52454749 
 6737      4F4E00
 6738              	.LASF16:
 6739 08b5 75696E74 		.ascii	"uint16_t\000"
 6739      31365F74 
 6739      00
 6740              	.LASF111:
 6741 08be 4D50555F 		.ascii	"MPU_xTaskCheckForTimeOut\000"
 6741      78546173 
 6741      6B436865 
 6741      636B466F 
 6741      7254696D 
 6742              	.LASF100:
 6743 08d7 4D50555F 		.ascii	"MPU_xTaskResumeAll\000"
 6743      78546173 
 6743      6B526573 
 6743      756D6541 
 6743      6C6C00
 6744              	.LASF105:
 6745 08ea 70635265 		.ascii	"pcReturn\000"
 6745      7475726E 
 6745      00
 6746              	.LASF174:
 6747 08f3 4D50555F 		.ascii	"MPU_xEventGroupSync\000"
 6747      78457665 
 6747      6E744772 
 6747      6F757053 
 6747      796E6300 
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccQCZNNL.s 			page 150


 6748              	.LASF7:
 6749 0907 73686F72 		.ascii	"short int\000"
 6749      7420696E 
 6749      7400
 6750              	.LASF82:
 6751 0911 70785461 		.ascii	"pxTaskToDelete\000"
 6751      736B546F 
 6751      44656C65 
 6751      746500
 6752              	.LASF118:
 6753 0920 4D50555F 		.ascii	"MPU_xTaskNotifyWait\000"
 6753      78546173 
 6753      6B4E6F74 
 6753      69667957 
 6753      61697400 
 6754              	.LASF55:
 6755 0934 70765061 		.ascii	"pvParameters\000"
 6755      72616D65 
 6755      74657273 
 6755      00
 6756              	.LASF70:
 6757 0941 78506F72 		.ascii	"xPortRaisePrivilege\000"
 6757      74526169 
 6757      73655072 
 6757      6976696C 
 6757      65676500 
 6758              	.LASF11:
 6759 0955 6C6F6E67 		.ascii	"long int\000"
 6759      20696E74 
 6759      00
 6760              	.LASF200:
 6761 095e 49544D5F 		.ascii	"ITM_RxBuffer\000"
 6761      52784275 
 6761      66666572 
 6761      00
 6762              	.LASF164:
 6763 096b 4D50555F 		.ascii	"MPU_xEventGroupCreate\000"
 6763      78457665 
 6763      6E744772 
 6763      6F757043 
 6763      72656174 
 6764              	.LASF152:
 6765 0981 78426C6F 		.ascii	"xBlockTime\000"
 6765      636B5469 
 6765      6D6500
 6766              	.LASF138:
 6767 098c 70764974 		.ascii	"pvItemToQueue\000"
 6767      656D546F 
 6767      51756575 
 6767      6500
 6768              	.LASF156:
 6769 099a 4D50555F 		.ascii	"MPU_pcQueueGetName\000"
 6769      70635175 
 6769      65756547 
 6769      65744E61 
 6769      6D6500
 6770              	.LASF115:
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccQCZNNL.s 			page 151


 6771 09ad 756C5661 		.ascii	"ulValue\000"
 6771      6C756500 
 6772              	.LASF96:
 6773 09b5 70785461 		.ascii	"pxTaskToSuspend\000"
 6773      736B546F 
 6773      53757370 
 6773      656E6400 
 6774              	.LASF84:
 6775 09c5 70785072 		.ascii	"pxPreviousWakeTime\000"
 6775      6576696F 
 6775      75735761 
 6775      6B655469 
 6775      6D6500
 6776              	.LASF5:
 6777 09d8 5F5F7569 		.ascii	"__uint8_t\000"
 6777      6E74385F 
 6777      7400
 6778              	.LASF134:
 6779 09e2 70785175 		.ascii	"pxQueue\000"
 6779      65756500 
 6780              	.LASF65:
 6781 09ea 4576656E 		.ascii	"EventBits_t\000"
 6781      74426974 
 6781      735F7400 
 6782              	.LASF121:
 6783 09f6 70756C4E 		.ascii	"pulNotificationValue\000"
 6783      6F746966 
 6783      69636174 
 6783      696F6E56 
 6783      616C7565 
 6784              	.LASF127:
 6785 0a0b 4D50555F 		.ascii	"MPU_ulTaskNotifyValueClear\000"
 6785      756C5461 
 6785      736B4E6F 
 6785      74696679 
 6785      56616C75 
 6786              	.LASF75:
 6787 0a26 78526574 		.ascii	"xReturn\000"
 6787      75726E00 
 6788              	.LASF167:
 6789 0a2e 75784269 		.ascii	"uxBitsToWaitFor\000"
 6789      7473546F 
 6789      57616974 
 6789      466F7200 
 6790              	.LASF129:
 6791 0a3e 4D50555F 		.ascii	"MPU_xQueueGenericCreate\000"
 6791      78517565 
 6791      75654765 
 6791      6E657269 
 6791      63437265 
 6792              	.LASF22:
 6793 0a56 73697A65 		.ascii	"sizetype\000"
 6793      74797065 
 6793      00
 6794              	.LASF13:
 6795 0a5f 6C6F6E67 		.ascii	"long unsigned int\000"
 6795      20756E73 
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccQCZNNL.s 			page 152


 6795      69676E65 
 6795      6420696E 
 6795      7400
 6796              	.LASF59:
 6797 0a71 5461736B 		.ascii	"TaskParameters_t\000"
 6797      50617261 
 6797      6D657465 
 6797      72735F74 
 6797      00
 6798              	.LASF17:
 6799 0a82 696E7433 		.ascii	"int32_t\000"
 6799      325F7400 
 6800              	.LASF88:
 6801 0a8a 4D50555F 		.ascii	"MPU_uxTaskPriorityGet\000"
 6801      75785461 
 6801      736B5072 
 6801      696F7269 
 6801      74794765 
 6802              	.LASF29:
 6803 0aa0 6552756E 		.ascii	"eRunning\000"
 6803      6E696E67 
 6803      00
 6804              	.LASF183:
 6805 0aa9 78427566 		.ascii	"xBufferLengthBytes\000"
 6805      6665724C 
 6805      656E6774 
 6805      68427974 
 6805      657300
 6806              	.LASF47:
 6807 0abc 70764261 		.ascii	"pvBaseAddress\000"
 6807      73654164 
 6807      64726573 
 6807      7300
 6808              	.LASF87:
 6809 0aca 78546963 		.ascii	"xTicksToDelay\000"
 6809      6B73546F 
 6809      44656C61 
 6809      7900
 6810              	.LASF157:
 6811 0ad8 4D50555F 		.ascii	"MPU_vQueueDelete\000"
 6811      76517565 
 6811      75654465 
 6811      6C657465 
 6811      00
 6812              	.LASF6:
 6813 0ae9 756E7369 		.ascii	"unsigned char\000"
 6813      676E6564 
 6813      20636861 
 6813      7200
 6814              	.LASF113:
 6815 0af7 4D50555F 		.ascii	"MPU_xTaskGenericNotify\000"
 6815      78546173 
 6815      6B47656E 
 6815      65726963 
 6815      4E6F7469 
 6816              	.LASF12:
 6817 0b0e 5F5F7569 		.ascii	"__uint32_t\000"
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccQCZNNL.s 			page 153


 6817      6E743332 
 6817      5F7400
 6818              	.LASF188:
 6819 0b19 4D50555F 		.ascii	"MPU_xStreamBufferSpacesAvailable\000"
 6819      78537472 
 6819      65616D42 
 6819      75666665 
 6819      72537061 
 6820              	.LASF165:
 6821 0b3a 4D50555F 		.ascii	"MPU_xEventGroupWaitBits\000"
 6821      78457665 
 6821      6E744772 
 6821      6F757057 
 6821      61697442 
 6822              	.LASF148:
 6823 0b52 7578436F 		.ascii	"uxCountValue\000"
 6823      756E7456 
 6823      616C7565 
 6823      00
 6824              	.LASF34:
 6825 0b5f 65496E76 		.ascii	"eInvalid\000"
 6825      616C6964 
 6825      00
 6826              	.LASF173:
 6827 0b68 75784269 		.ascii	"uxBitsToSet\000"
 6827      7473546F 
 6827      53657400 
 6828              	.LASF79:
 6829 0b74 4D50555F 		.ascii	"MPU_vTaskAllocateMPURegions\000"
 6829      76546173 
 6829      6B416C6C 
 6829      6F636174 
 6829      654D5055 
 6830              	.LASF186:
 6831 0b90 4D50555F 		.ascii	"MPU_xStreamBufferIsEmpty\000"
 6831      78537472 
 6831      65616D42 
 6831      75666665 
 6831      72497345 
 6832              	.LASF122:
 6833 0ba9 78546963 		.ascii	"xTicksToWait\000"
 6833      6B73546F 
 6833      57616974 
 6833      00
 6834              	.LASF154:
 6835 0bb6 4D50555F 		.ascii	"MPU_vQueueAddToRegistry\000"
 6835      76517565 
 6835      75654164 
 6835      64546F52 
 6835      65676973 
 6836              	.LASF31:
 6837 0bce 65426C6F 		.ascii	"eBlocked\000"
 6837      636B6564 
 6837      00
 6838              	.LASF177:
 6839 0bd7 78537472 		.ascii	"xStreamBuffer\000"
 6839      65616D42 
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccQCZNNL.s 			page 154


 6839      75666665 
 6839      7200
 6840              	.LASF191:
 6841 0be5 78547269 		.ascii	"xTriggerLevel\000"
 6841      67676572 
 6841      4C657665 
 6841      6C00
 6842              	.LASF107:
 6843 0bf3 78546963 		.ascii	"xTicksToCatchUp\000"
 6843      6B73546F 
 6843      43617463 
 6843      68557000 
 6844              	.LASF51:
 6845 0c03 78544153 		.ascii	"xTASK_PARAMETERS\000"
 6845      4B5F5041 
 6845      52414D45 
 6845      54455253 
 6845      00
 6846              	.LASF144:
 6847 0c14 4D50555F 		.ascii	"MPU_xQueuePeek\000"
 6847      78517565 
 6847      75655065 
 6847      656B00
 6848              	.LASF52:
 6849 0c23 70765461 		.ascii	"pvTaskCode\000"
 6849      736B436F 
 6849      646500
 6850              	.LASF85:
 6851 0c2e 7854696D 		.ascii	"xTimeIncrement\000"
 6851      65496E63 
 6851      72656D65 
 6851      6E7400
 6852              	.LASF197:
 6853 0c3d 536F7572 		.ascii	"Source\\portable\\Common\\mpu_wrappers.c\000"
 6853      63655C70 
 6853      6F727461 
 6853      626C655C 
 6853      436F6D6D 
 6854              	.LASF9:
 6855 0c63 73686F72 		.ascii	"short unsigned int\000"
 6855      7420756E 
 6855      7369676E 
 6855      65642069 
 6855      6E7400
 6856              	.LASF108:
 6857 0c76 4D50555F 		.ascii	"MPU_uxTaskGetStackHighWaterMark\000"
 6857      75785461 
 6857      736B4765 
 6857      74537461 
 6857      636B4869 
 6858              	.LASF195:
 6859 0c96 7849734D 		.ascii	"xIsMessageBuffer\000"
 6859      65737361 
 6859      67654275 
 6859      66666572 
 6859      00
 6860              	.LASF168:
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccQCZNNL.s 			page 155


 6861 0ca7 78436C65 		.ascii	"xClearOnExit\000"
 6861      61724F6E 
 6861      45786974 
 6861      00
 6862              	.LASF20:
 6863 0cb4 646F7562 		.ascii	"double\000"
 6863      6C6500
 6864              	.LASF136:
 6865 0cbb 4D50555F 		.ascii	"MPU_xQueueGenericSend\000"
 6865      78517565 
 6865      75654765 
 6865      6E657269 
 6865      6353656E 
 6866              	.LASF126:
 6867 0cd1 4D50555F 		.ascii	"MPU_xTaskNotifyStateClear\000"
 6867      78546173 
 6867      6B4E6F74 
 6867      69667953 
 6867      74617465 
 6868              	.LASF77:
 6869 0ceb 4D50555F 		.ascii	"MPU_xTaskCreate\000"
 6869      78546173 
 6869      6B437265 
 6869      61746500 
 6870              	.LASF142:
 6871 0cfb 4D50555F 		.ascii	"MPU_xQueueReceive\000"
 6871      78517565 
 6871      75655265 
 6871      63656976 
 6871      6500
 6872              	.LASF175:
 6873 0d0d 4D50555F 		.ascii	"MPU_vEventGroupDelete\000"
 6873      76457665 
 6873      6E744772 
 6873      6F757044 
 6873      656C6574 
 6874              	.LASF101:
 6875 0d23 4D50555F 		.ascii	"MPU_xTaskGetTickCount\000"
 6875      78546173 
 6875      6B476574 
 6875      5469636B 
 6875      436F756E 
 6876              	.LASF74:
 6877 0d39 70784372 		.ascii	"pxCreatedTask\000"
 6877      65617465 
 6877      64546173 
 6877      6B00
 6878              	.LASF172:
 6879 0d47 4D50555F 		.ascii	"MPU_xEventGroupSetBits\000"
 6879      78457665 
 6879      6E744772 
 6879      6F757053 
 6879      65744269 
 6880              	.LASF63:
 6881 0d5e 4576656E 		.ascii	"EventGroupHandle_t\000"
 6881      7447726F 
 6881      75704861 
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccQCZNNL.s 			page 156


 6881      6E646C65 
 6881      5F7400
 6882              	.LASF125:
 6883 0d71 756C5265 		.ascii	"ulReturn\000"
 6883      7475726E 
 6883      00
 6884              	.LASF181:
 6885 0d7a 4D50555F 		.ascii	"MPU_xStreamBufferReceive\000"
 6885      78537472 
 6885      65616D42 
 6885      75666665 
 6885      72526563 
 6886              	.LASF141:
 6887 0d93 4D50555F 		.ascii	"MPU_uxQueueSpacesAvailable\000"
 6887      75785175 
 6887      65756553 
 6887      70616365 
 6887      73417661 
 6888              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
