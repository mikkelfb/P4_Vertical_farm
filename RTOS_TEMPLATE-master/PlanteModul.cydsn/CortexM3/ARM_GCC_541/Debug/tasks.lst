ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"tasks.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.global	pxCurrentTCB
  20              		.bss
  21              		.align	2
  22              		.type	pxCurrentTCB, %object
  23              		.size	pxCurrentTCB, 4
  24              	pxCurrentTCB:
  25 0000 00000000 		.space	4
  26              		.align	2
  27              	pxReadyTasksLists:
  28 0004 00000000 		.space	100
  28      00000000 
  28      00000000 
  28      00000000 
  28      00000000 
  29              		.align	2
  30              	xDelayedTaskList1:
  31 0068 00000000 		.space	20
  31      00000000 
  31      00000000 
  31      00000000 
  31      00000000 
  32              		.align	2
  33              	xDelayedTaskList2:
  34 007c 00000000 		.space	20
  34      00000000 
  34      00000000 
  34      00000000 
  34      00000000 
  35              		.align	2
  36              	pxDelayedTaskList:
  37 0090 00000000 		.space	4
  38              		.align	2
  39              	pxOverflowDelayedTaskList:
  40 0094 00000000 		.space	4
  41              		.align	2
  42              	xPendingReadyList:
  43 0098 00000000 		.space	20
  43      00000000 
  43      00000000 
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 2


  43      00000000 
  43      00000000 
  44              		.align	2
  45              	xTasksWaitingTermination:
  46 00ac 00000000 		.space	20
  46      00000000 
  46      00000000 
  46      00000000 
  46      00000000 
  47              		.align	2
  48              	uxDeletedTasksWaitingCleanUp:
  49 00c0 00000000 		.space	4
  50              		.align	2
  51              	xSuspendedTaskList:
  52 00c4 00000000 		.space	20
  52      00000000 
  52      00000000 
  52      00000000 
  52      00000000 
  53              		.align	2
  54              	uxCurrentNumberOfTasks:
  55 00d8 00000000 		.space	4
  56              		.align	2
  57              	xTickCount:
  58 00dc 00000000 		.space	4
  59              		.align	2
  60              	uxTopReadyPriority:
  61 00e0 00000000 		.space	4
  62              		.align	2
  63              	xSchedulerRunning:
  64 00e4 00000000 		.space	4
  65              		.align	2
  66              	xPendedTicks:
  67 00e8 00000000 		.space	4
  68              		.align	2
  69              	xYieldPending:
  70 00ec 00000000 		.space	4
  71              		.align	2
  72              	xNumOfOverflows:
  73 00f0 00000000 		.space	4
  74              		.align	2
  75              	uxTaskNumber:
  76 00f4 00000000 		.space	4
  77              		.align	2
  78              	xNextTaskUnblockTime:
  79 00f8 00000000 		.space	4
  80              		.align	2
  81              	xIdleTaskHandle:
  82 00fc 00000000 		.space	4
  83              		.align	2
  84              	uxSchedulerSuspended:
  85 0100 00000000 		.space	4
  86              		.section	.text.xTaskCreate,"ax",%progbits
  87              		.align	2
  88              		.global	xTaskCreate
  89              		.thumb
  90              		.thumb_func
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 3


  91              		.type	xTaskCreate, %function
  92              	xTaskCreate:
  93              	.LFB68:
  94              		.file 1 "Source\\tasks.c"
   1:Source/tasks.c **** /*
   2:Source/tasks.c ****  * FreeRTOS Kernel V10.3.1
   3:Source/tasks.c ****  * Copyright (C) 2020 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:Source/tasks.c ****  *
   5:Source/tasks.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:Source/tasks.c ****  * this software and associated documentation files (the "Software"), to deal in
   7:Source/tasks.c ****  * the Software without restriction, including without limitation the rights to
   8:Source/tasks.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:Source/tasks.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:Source/tasks.c ****  * subject to the following conditions:
  11:Source/tasks.c ****  *
  12:Source/tasks.c ****  * The above copyright notice and this permission notice shall be included in all
  13:Source/tasks.c ****  * copies or substantial portions of the Software.
  14:Source/tasks.c ****  *
  15:Source/tasks.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:Source/tasks.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:Source/tasks.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:Source/tasks.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:Source/tasks.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:Source/tasks.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:Source/tasks.c ****  *
  22:Source/tasks.c ****  * http://www.FreeRTOS.org
  23:Source/tasks.c ****  * http://aws.amazon.com/freertos
  24:Source/tasks.c ****  *
  25:Source/tasks.c ****  * 1 tab == 4 spaces!
  26:Source/tasks.c ****  */
  27:Source/tasks.c **** 
  28:Source/tasks.c **** /* Standard includes. */
  29:Source/tasks.c **** #include <stdlib.h>
  30:Source/tasks.c **** #include <string.h>
  31:Source/tasks.c **** 
  32:Source/tasks.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  33:Source/tasks.c **** all the API functions to use the MPU wrappers.  That should only be done when
  34:Source/tasks.c **** task.h is included from an application file. */
  35:Source/tasks.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  36:Source/tasks.c **** 
  37:Source/tasks.c **** /* FreeRTOS includes. */
  38:Source/tasks.c **** #include "FreeRTOS.h"
  39:Source/tasks.c **** #include "task.h"
  40:Source/tasks.c **** #include "timers.h"
  41:Source/tasks.c **** #include "stack_macros.h"
  42:Source/tasks.c **** 
  43:Source/tasks.c **** /* Lint e9021, e961 and e750 are suppressed as a MISRA exception justified
  44:Source/tasks.c **** because the MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined
  45:Source/tasks.c **** for the header files above, but not in this file, in order to generate the
  46:Source/tasks.c **** correct privileged Vs unprivileged linkage and placement. */
  47:Source/tasks.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750 !e9021. */
  48:Source/tasks.c **** 
  49:Source/tasks.c **** /* Set configUSE_STATS_FORMATTING_FUNCTIONS to 2 to include the stats formatting
  50:Source/tasks.c **** functions but without including stdio.h here. */
  51:Source/tasks.c **** #if ( configUSE_STATS_FORMATTING_FUNCTIONS == 1 )
  52:Source/tasks.c **** 	/* At the bottom of this file are two optional functions that can be used
  53:Source/tasks.c **** 	to generate human readable text from the raw data generated by the
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 4


  54:Source/tasks.c **** 	uxTaskGetSystemState() function.  Note the formatting functions are provided
  55:Source/tasks.c **** 	for convenience only, and are NOT considered part of the kernel. */
  56:Source/tasks.c **** 	#include <stdio.h>
  57:Source/tasks.c **** #endif /* configUSE_STATS_FORMATTING_FUNCTIONS == 1 ) */
  58:Source/tasks.c **** 
  59:Source/tasks.c **** #if( configUSE_PREEMPTION == 0 )
  60:Source/tasks.c **** 	/* If the cooperative scheduler is being used then a yield should not be
  61:Source/tasks.c **** 	performed just because a higher priority task has been woken. */
  62:Source/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION()
  63:Source/tasks.c **** #else
  64:Source/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION() portYIELD_WITHIN_API()
  65:Source/tasks.c **** #endif
  66:Source/tasks.c **** 
  67:Source/tasks.c **** /* Values that can be assigned to the ucNotifyState member of the TCB. */
  68:Source/tasks.c **** #define taskNOT_WAITING_NOTIFICATION	( ( uint8_t ) 0 )
  69:Source/tasks.c **** #define taskWAITING_NOTIFICATION		( ( uint8_t ) 1 )
  70:Source/tasks.c **** #define taskNOTIFICATION_RECEIVED		( ( uint8_t ) 2 )
  71:Source/tasks.c **** 
  72:Source/tasks.c **** /*
  73:Source/tasks.c ****  * The value used to fill the stack of a task when the task is created.  This
  74:Source/tasks.c ****  * is used purely for checking the high water mark for tasks.
  75:Source/tasks.c ****  */
  76:Source/tasks.c **** #define tskSTACK_FILL_BYTE	( 0xa5U )
  77:Source/tasks.c **** 
  78:Source/tasks.c **** /* Bits used to recored how a task's stack and TCB were allocated. */
  79:Source/tasks.c **** #define tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB 		( ( uint8_t ) 0 )
  80:Source/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_ONLY 			( ( uint8_t ) 1 )
  81:Source/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_AND_TCB		( ( uint8_t ) 2 )
  82:Source/tasks.c **** 
  83:Source/tasks.c **** /* If any of the following are set then task stacks are filled with a known
  84:Source/tasks.c **** value so the high water mark can be determined.  If none of the following are
  85:Source/tasks.c **** set then don't fill the stack so there is no unnecessary dependency on memset. */
  86:Source/tasks.c **** #if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTas
  87:Source/tasks.c **** 	#define tskSET_NEW_STACKS_TO_KNOWN_VALUE	1
  88:Source/tasks.c **** #else
  89:Source/tasks.c **** 	#define tskSET_NEW_STACKS_TO_KNOWN_VALUE	0
  90:Source/tasks.c **** #endif
  91:Source/tasks.c **** 
  92:Source/tasks.c **** /*
  93:Source/tasks.c ****  * Macros used by vListTask to indicate which state a task is in.
  94:Source/tasks.c ****  */
  95:Source/tasks.c **** #define tskRUNNING_CHAR		( 'X' )
  96:Source/tasks.c **** #define tskBLOCKED_CHAR		( 'B' )
  97:Source/tasks.c **** #define tskREADY_CHAR		( 'R' )
  98:Source/tasks.c **** #define tskDELETED_CHAR		( 'D' )
  99:Source/tasks.c **** #define tskSUSPENDED_CHAR	( 'S' )
 100:Source/tasks.c **** 
 101:Source/tasks.c **** /*
 102:Source/tasks.c ****  * Some kernel aware debuggers require the data the debugger needs access to be
 103:Source/tasks.c ****  * global, rather than file scope.
 104:Source/tasks.c ****  */
 105:Source/tasks.c **** #ifdef portREMOVE_STATIC_QUALIFIER
 106:Source/tasks.c **** 	#define static
 107:Source/tasks.c **** #endif
 108:Source/tasks.c **** 
 109:Source/tasks.c **** /* The name allocated to the Idle task.  This can be overridden by defining
 110:Source/tasks.c **** configIDLE_TASK_NAME in FreeRTOSConfig.h. */
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 5


 111:Source/tasks.c **** #ifndef configIDLE_TASK_NAME
 112:Source/tasks.c **** 	#define configIDLE_TASK_NAME "IDLE"
 113:Source/tasks.c **** #endif
 114:Source/tasks.c **** 
 115:Source/tasks.c **** #if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
 116:Source/tasks.c **** 
 117:Source/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 0 then task selection is
 118:Source/tasks.c **** 	performed in a generic way that is not optimised to any particular
 119:Source/tasks.c **** 	microcontroller architecture. */
 120:Source/tasks.c **** 
 121:Source/tasks.c **** 	/* uxTopReadyPriority holds the priority of the highest priority ready
 122:Source/tasks.c **** 	state task. */
 123:Source/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )														\
 124:Source/tasks.c **** 	{																									\
 125:Source/tasks.c **** 		if( ( uxPriority ) > uxTopReadyPriority )														\
 126:Source/tasks.c **** 		{																								\
 127:Source/tasks.c **** 			uxTopReadyPriority = ( uxPriority );														\
 128:Source/tasks.c **** 		}																								\
 129:Source/tasks.c **** 	} /* taskRECORD_READY_PRIORITY */
 130:Source/tasks.c **** 
 131:Source/tasks.c **** 	/*-----------------------------------------------------------*/
 132:Source/tasks.c **** 
 133:Source/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()															\
 134:Source/tasks.c **** 	{																									\
 135:Source/tasks.c **** 	UBaseType_t uxTopPriority = uxTopReadyPriority;														\
 136:Source/tasks.c **** 																										\
 137:Source/tasks.c **** 		/* Find the highest priority queue that contains ready tasks. */								\
 138:Source/tasks.c **** 		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopPriority ] ) ) )							\
 139:Source/tasks.c **** 		{																								\
 140:Source/tasks.c **** 			configASSERT( uxTopPriority );																\
 141:Source/tasks.c **** 			--uxTopPriority;																			\
 142:Source/tasks.c **** 		}																								\
 143:Source/tasks.c **** 																										\
 144:Source/tasks.c **** 		/* listGET_OWNER_OF_NEXT_ENTRY indexes through the list, so the tasks of						\
 145:Source/tasks.c **** 		the	same priority get an equal share of the processor time. */									\
 146:Source/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );			\
 147:Source/tasks.c **** 		uxTopReadyPriority = uxTopPriority;																\
 148:Source/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK */
 149:Source/tasks.c **** 
 150:Source/tasks.c **** 	/*-----------------------------------------------------------*/
 151:Source/tasks.c **** 
 152:Source/tasks.c **** 	/* Define away taskRESET_READY_PRIORITY() and portRESET_READY_PRIORITY() as
 153:Source/tasks.c **** 	they are only required when a port optimised method of task selection is
 154:Source/tasks.c **** 	being used. */
 155:Source/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )
 156:Source/tasks.c **** 	#define portRESET_READY_PRIORITY( uxPriority, uxTopReadyPriority )
 157:Source/tasks.c **** 
 158:Source/tasks.c **** #else /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 159:Source/tasks.c **** 
 160:Source/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 1 then task selection is
 161:Source/tasks.c **** 	performed in a way that is tailored to the particular microcontroller
 162:Source/tasks.c **** 	architecture being used. */
 163:Source/tasks.c **** 
 164:Source/tasks.c **** 	/* A port optimised version is provided.  Call the port defined macros. */
 165:Source/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )	portRECORD_READY_PRIORITY( uxPriority, uxTopReadyP
 166:Source/tasks.c **** 
 167:Source/tasks.c **** 	/*-----------------------------------------------------------*/
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 6


 168:Source/tasks.c **** 
 169:Source/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()														\
 170:Source/tasks.c **** 	{																								\
 171:Source/tasks.c **** 	UBaseType_t uxTopPriority;																		\
 172:Source/tasks.c **** 																									\
 173:Source/tasks.c **** 		/* Find the highest priority list that contains ready tasks. */								\
 174:Source/tasks.c **** 		portGET_HIGHEST_PRIORITY( uxTopPriority, uxTopReadyPriority );								\
 175:Source/tasks.c **** 		configASSERT( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ uxTopPriority ] ) ) > 0 );		\
 176:Source/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );		\
 177:Source/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK() */
 178:Source/tasks.c **** 
 179:Source/tasks.c **** 	/*-----------------------------------------------------------*/
 180:Source/tasks.c **** 
 181:Source/tasks.c **** 	/* A port optimised version is provided, call it only if the TCB being reset
 182:Source/tasks.c **** 	is being referenced from a ready list.  If it is referenced from a delayed
 183:Source/tasks.c **** 	or suspended list then it won't be in a ready list. */
 184:Source/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )														\
 185:Source/tasks.c **** 	{																									\
 186:Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ ( uxPriority ) ] ) ) == ( UBaseType_t ) 0 )	\
 187:Source/tasks.c **** 		{																								\
 188:Source/tasks.c **** 			portRESET_READY_PRIORITY( ( uxPriority ), ( uxTopReadyPriority ) );							\
 189:Source/tasks.c **** 		}																								\
 190:Source/tasks.c **** 	}
 191:Source/tasks.c **** 
 192:Source/tasks.c **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 193:Source/tasks.c **** 
 194:Source/tasks.c **** /*-----------------------------------------------------------*/
 195:Source/tasks.c **** 
 196:Source/tasks.c **** /* pxDelayedTaskList and pxOverflowDelayedTaskList are switched when the tick
 197:Source/tasks.c **** count overflows. */
 198:Source/tasks.c **** #define taskSWITCH_DELAYED_LISTS()																	\
 199:Source/tasks.c **** {																									\
 200:Source/tasks.c **** 	List_t *pxTemp;																					\
 201:Source/tasks.c **** 																									\
 202:Source/tasks.c **** 	/* The delayed tasks list should be empty when the lists are switched. */						\
 203:Source/tasks.c **** 	configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );										\
 204:Source/tasks.c **** 																									\
 205:Source/tasks.c **** 	pxTemp = pxDelayedTaskList;																		\
 206:Source/tasks.c **** 	pxDelayedTaskList = pxOverflowDelayedTaskList;													\
 207:Source/tasks.c **** 	pxOverflowDelayedTaskList = pxTemp;																\
 208:Source/tasks.c **** 	xNumOfOverflows++;																				\
 209:Source/tasks.c **** 	prvResetNextTaskUnblockTime();																	\
 210:Source/tasks.c **** }
 211:Source/tasks.c **** 
 212:Source/tasks.c **** /*-----------------------------------------------------------*/
 213:Source/tasks.c **** 
 214:Source/tasks.c **** /*
 215:Source/tasks.c ****  * Place the task represented by pxTCB into the appropriate ready list for
 216:Source/tasks.c ****  * the task.  It is inserted at the end of the list.
 217:Source/tasks.c ****  */
 218:Source/tasks.c **** #define prvAddTaskToReadyList( pxTCB )																\
 219:Source/tasks.c **** 	traceMOVED_TASK_TO_READY_STATE( pxTCB );														\
 220:Source/tasks.c **** 	taskRECORD_READY_PRIORITY( ( pxTCB )->uxPriority );												\
 221:Source/tasks.c **** 	vListInsertEnd( &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ), &( ( pxTCB )->xStateListItem ) );
 222:Source/tasks.c **** 	tracePOST_MOVED_TASK_TO_READY_STATE( pxTCB )
 223:Source/tasks.c **** /*-----------------------------------------------------------*/
 224:Source/tasks.c **** 
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 7


 225:Source/tasks.c **** /*
 226:Source/tasks.c ****  * Several functions take an TaskHandle_t parameter that can optionally be NULL,
 227:Source/tasks.c ****  * where NULL is used to indicate that the handle of the currently executing
 228:Source/tasks.c ****  * task should be used in place of the parameter.  This macro simply checks to
 229:Source/tasks.c ****  * see if the parameter is NULL and returns a pointer to the appropriate TCB.
 230:Source/tasks.c ****  */
 231:Source/tasks.c **** #define prvGetTCBFromHandle( pxHandle ) ( ( ( pxHandle ) == NULL ) ? pxCurrentTCB : ( pxHandle ) )
 232:Source/tasks.c **** 
 233:Source/tasks.c **** /* The item value of the event list item is normally used to hold the priority
 234:Source/tasks.c **** of the task to which it belongs (coded to allow it to be held in reverse
 235:Source/tasks.c **** priority order).  However, it is occasionally borrowed for other purposes.  It
 236:Source/tasks.c **** is important its value is not updated due to a task priority change while it is
 237:Source/tasks.c **** being used for another purpose.  The following bit definition is used to inform
 238:Source/tasks.c **** the scheduler that the value should not be changed - in which case it is the
 239:Source/tasks.c **** responsibility of whichever module is using the value to ensure it gets set back
 240:Source/tasks.c **** to its original value when it is released. */
 241:Source/tasks.c **** #if( configUSE_16_BIT_TICKS == 1 )
 242:Source/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x8000U
 243:Source/tasks.c **** #else
 244:Source/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x80000000UL
 245:Source/tasks.c **** #endif
 246:Source/tasks.c **** 
 247:Source/tasks.c **** /*
 248:Source/tasks.c ****  * Task control block.  A task control block (TCB) is allocated for each task,
 249:Source/tasks.c ****  * and stores task state information, including a pointer to the task's context
 250:Source/tasks.c ****  * (the task's run time environment, including register values)
 251:Source/tasks.c ****  */
 252:Source/tasks.c **** typedef struct tskTaskControlBlock 			/* The old naming convention is used to prevent breaking kern
 253:Source/tasks.c **** {
 254:Source/tasks.c **** 	volatile StackType_t	*pxTopOfStack;	/*< Points to the location of the last item placed on the task
 255:Source/tasks.c **** 
 256:Source/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 257:Source/tasks.c **** 		xMPU_SETTINGS	xMPUSettings;		/*< The MPU settings are defined as part of the port layer.  THIS MU
 258:Source/tasks.c **** 	#endif
 259:Source/tasks.c **** 
 260:Source/tasks.c **** 	ListItem_t			xStateListItem;	/*< The list that the state list item of a task is reference from den
 261:Source/tasks.c **** 	ListItem_t			xEventListItem;		/*< Used to reference a task from an event list. */
 262:Source/tasks.c **** 	UBaseType_t			uxPriority;			/*< The priority of the task.  0 is the lowest priority. */
 263:Source/tasks.c **** 	StackType_t			*pxStack;			/*< Points to the start of the stack. */
 264:Source/tasks.c **** 	char				pcTaskName[ configMAX_TASK_NAME_LEN ];/*< Descriptive name given to the task when created.
 265:Source/tasks.c **** 
 266:Source/tasks.c **** 	#if ( ( portSTACK_GROWTH > 0 ) || ( configRECORD_STACK_HIGH_ADDRESS == 1 ) )
 267:Source/tasks.c **** 		StackType_t		*pxEndOfStack;		/*< Points to the highest valid address for the stack. */
 268:Source/tasks.c **** 	#endif
 269:Source/tasks.c **** 
 270:Source/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 271:Source/tasks.c **** 		UBaseType_t		uxCriticalNesting;	/*< Holds the critical section nesting depth for ports that do no
 272:Source/tasks.c **** 	#endif
 273:Source/tasks.c **** 
 274:Source/tasks.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 275:Source/tasks.c **** 		UBaseType_t		uxTCBNumber;		/*< Stores a number that increments each time a TCB is created.  It al
 276:Source/tasks.c **** 		UBaseType_t		uxTaskNumber;		/*< Stores a number specifically for use by third party trace code. *
 277:Source/tasks.c **** 	#endif
 278:Source/tasks.c **** 
 279:Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 280:Source/tasks.c **** 		UBaseType_t		uxBasePriority;		/*< The priority last assigned to the task - used by the priority i
 281:Source/tasks.c **** 		UBaseType_t		uxMutexesHeld;
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 8


 282:Source/tasks.c **** 	#endif
 283:Source/tasks.c **** 
 284:Source/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 285:Source/tasks.c **** 		TaskHookFunction_t pxTaskTag;
 286:Source/tasks.c **** 	#endif
 287:Source/tasks.c **** 
 288:Source/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS > 0 )
 289:Source/tasks.c **** 		void			*pvThreadLocalStoragePointers[ configNUM_THREAD_LOCAL_STORAGE_POINTERS ];
 290:Source/tasks.c **** 	#endif
 291:Source/tasks.c **** 
 292:Source/tasks.c **** 	#if( configGENERATE_RUN_TIME_STATS == 1 )
 293:Source/tasks.c **** 		uint32_t		ulRunTimeCounter;	/*< Stores the amount of time the task has spent in the Running state
 294:Source/tasks.c **** 	#endif
 295:Source/tasks.c **** 
 296:Source/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 297:Source/tasks.c **** 		/* Allocate a Newlib reent structure that is specific to this task.
 298:Source/tasks.c **** 		Note Newlib support has been included by popular demand, but is not
 299:Source/tasks.c **** 		used by the FreeRTOS maintainers themselves.  FreeRTOS is not
 300:Source/tasks.c **** 		responsible for resulting newlib operation.  User must be familiar with
 301:Source/tasks.c **** 		newlib and must provide system-wide implementations of the necessary
 302:Source/tasks.c **** 		stubs. Be warned that (at the time of writing) the current newlib design
 303:Source/tasks.c **** 		implements a system-wide malloc() that must be provided with locks.
 304:Source/tasks.c **** 
 305:Source/tasks.c **** 		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
 306:Source/tasks.c **** 		for additional information. */
 307:Source/tasks.c **** 		struct	_reent xNewLib_reent;
 308:Source/tasks.c **** 	#endif
 309:Source/tasks.c **** 
 310:Source/tasks.c **** 	#if( configUSE_TASK_NOTIFICATIONS == 1 )
 311:Source/tasks.c **** 		volatile uint32_t ulNotifiedValue;
 312:Source/tasks.c **** 		volatile uint8_t ucNotifyState;
 313:Source/tasks.c **** 	#endif
 314:Source/tasks.c **** 
 315:Source/tasks.c **** 	/* See the comments in FreeRTOS.h with the definition of
 316:Source/tasks.c **** 	tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE. */
 317:Source/tasks.c **** 	#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolida
 318:Source/tasks.c **** 		uint8_t	ucStaticallyAllocated; 		/*< Set to pdTRUE if the task is a statically allocated to ensur
 319:Source/tasks.c **** 	#endif
 320:Source/tasks.c **** 
 321:Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
 322:Source/tasks.c **** 		uint8_t ucDelayAborted;
 323:Source/tasks.c **** 	#endif
 324:Source/tasks.c **** 
 325:Source/tasks.c **** 	#if( configUSE_POSIX_ERRNO == 1 )
 326:Source/tasks.c **** 		int iTaskErrno;
 327:Source/tasks.c **** 	#endif
 328:Source/tasks.c **** 
 329:Source/tasks.c **** } tskTCB;
 330:Source/tasks.c **** 
 331:Source/tasks.c **** /* The old tskTCB name is maintained above then typedefed to the new TCB_t name
 332:Source/tasks.c **** below to enable the use of older kernel aware debuggers. */
 333:Source/tasks.c **** typedef tskTCB TCB_t;
 334:Source/tasks.c **** 
 335:Source/tasks.c **** /*lint -save -e956 A manual analysis and inspection has been used to determine
 336:Source/tasks.c **** which static variables must be declared volatile. */
 337:Source/tasks.c **** PRIVILEGED_DATA TCB_t * volatile pxCurrentTCB = NULL;
 338:Source/tasks.c **** 
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 9


 339:Source/tasks.c **** /* Lists for ready and blocked tasks. --------------------
 340:Source/tasks.c **** xDelayedTaskList1 and xDelayedTaskList2 could be move to function scople but
 341:Source/tasks.c **** doing so breaks some kernel aware debuggers and debuggers that rely on removing
 342:Source/tasks.c **** the static qualifier. */
 343:Source/tasks.c **** PRIVILEGED_DATA static List_t pxReadyTasksLists[ configMAX_PRIORITIES ];/*< Prioritised ready tasks
 344:Source/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList1;						/*< Delayed tasks. */
 345:Source/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList2;						/*< Delayed tasks (two lists are used - one f
 346:Source/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxDelayedTaskList;				/*< Points to the delayed task list 
 347:Source/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxOverflowDelayedTaskList;		/*< Points to the delayed task
 348:Source/tasks.c **** PRIVILEGED_DATA static List_t xPendingReadyList;						/*< Tasks that have been readied while the sc
 349:Source/tasks.c **** 
 350:Source/tasks.c **** #if( INCLUDE_vTaskDelete == 1 )
 351:Source/tasks.c **** 
 352:Source/tasks.c **** 	PRIVILEGED_DATA static List_t xTasksWaitingTermination;				/*< Tasks that have been deleted - but 
 353:Source/tasks.c **** 	PRIVILEGED_DATA static volatile UBaseType_t uxDeletedTasksWaitingCleanUp = ( UBaseType_t ) 0U;
 354:Source/tasks.c **** 
 355:Source/tasks.c **** #endif
 356:Source/tasks.c **** 
 357:Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 358:Source/tasks.c **** 
 359:Source/tasks.c **** 	PRIVILEGED_DATA static List_t xSuspendedTaskList;					/*< Tasks that are currently suspended. */
 360:Source/tasks.c **** 
 361:Source/tasks.c **** #endif
 362:Source/tasks.c **** 
 363:Source/tasks.c **** /* Global POSIX errno. Its value is changed upon context switching to match
 364:Source/tasks.c **** the errno of the currently running task. */
 365:Source/tasks.c **** #if ( configUSE_POSIX_ERRNO == 1 )
 366:Source/tasks.c **** 	int FreeRTOS_errno = 0;
 367:Source/tasks.c **** #endif
 368:Source/tasks.c **** 
 369:Source/tasks.c **** /* Other file private variables. --------------------------------*/
 370:Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxCurrentNumberOfTasks 	= ( UBaseType_t ) 0U;
 371:Source/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xTickCount 				= ( TickType_t ) configINITIAL_TICK_COUNT
 372:Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxTopReadyPriority 		= tskIDLE_PRIORITY;
 373:Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xSchedulerRunning 		= pdFALSE;
 374:Source/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xPendedTicks 			= ( TickType_t ) 0U;
 375:Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xYieldPending 			= pdFALSE;
 376:Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xNumOfOverflows 			= ( BaseType_t ) 0;
 377:Source/tasks.c **** PRIVILEGED_DATA static UBaseType_t uxTaskNumber 					= ( UBaseType_t ) 0U;
 378:Source/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xNextTaskUnblockTime		= ( TickType_t ) 0U; /* Initialise
 379:Source/tasks.c **** PRIVILEGED_DATA static TaskHandle_t xIdleTaskHandle					= NULL;			/*< Holds the handle of the idle 
 380:Source/tasks.c **** 
 381:Source/tasks.c **** /* Context switches are held pending while the scheduler is suspended.  Also,
 382:Source/tasks.c **** interrupts must not manipulate the xStateListItem of a TCB, or any of the
 383:Source/tasks.c **** lists the xStateListItem can be referenced from, if the scheduler is suspended.
 384:Source/tasks.c **** If an interrupt needs to unblock a task while the scheduler is suspended then it
 385:Source/tasks.c **** moves the task's event list item into the xPendingReadyList, ready for the
 386:Source/tasks.c **** kernel to move the task from the pending ready list into the real ready list
 387:Source/tasks.c **** when the scheduler is unsuspended.  The pending ready list itself can only be
 388:Source/tasks.c **** accessed from a critical section. */
 389:Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxSchedulerSuspended	= ( UBaseType_t ) pdFALSE;
 390:Source/tasks.c **** 
 391:Source/tasks.c **** #if ( configGENERATE_RUN_TIME_STATS == 1 )
 392:Source/tasks.c **** 
 393:Source/tasks.c **** 	/* Do not move these variables to function scope as doing so prevents the
 394:Source/tasks.c **** 	code working with debuggers that need to remove the static qualifier. */
 395:Source/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTaskSwitchedInTime = 0UL;	/*< Holds the value of a timer/counter
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 10


 396:Source/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTotalRunTime = 0UL;		/*< Holds the total amount of execution tim
 397:Source/tasks.c **** 
 398:Source/tasks.c **** #endif
 399:Source/tasks.c **** 
 400:Source/tasks.c **** /*lint -restore */
 401:Source/tasks.c **** 
 402:Source/tasks.c **** /*-----------------------------------------------------------*/
 403:Source/tasks.c **** 
 404:Source/tasks.c **** /* Callback function prototypes. --------------------------*/
 405:Source/tasks.c **** #if(  configCHECK_FOR_STACK_OVERFLOW > 0 )
 406:Source/tasks.c **** 
 407:Source/tasks.c **** 	extern void vApplicationStackOverflowHook( TaskHandle_t xTask, char *pcTaskName );
 408:Source/tasks.c **** 
 409:Source/tasks.c **** #endif
 410:Source/tasks.c **** 
 411:Source/tasks.c **** #if( configUSE_TICK_HOOK > 0 )
 412:Source/tasks.c **** 
 413:Source/tasks.c **** 	extern void vApplicationTickHook( void ); /*lint !e526 Symbol not defined as it is an application 
 414:Source/tasks.c **** 
 415:Source/tasks.c **** #endif
 416:Source/tasks.c **** 
 417:Source/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 418:Source/tasks.c **** 
 419:Source/tasks.c **** 	extern void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxI
 420:Source/tasks.c **** 
 421:Source/tasks.c **** #endif
 422:Source/tasks.c **** 
 423:Source/tasks.c **** /* File private functions. --------------------------------*/
 424:Source/tasks.c **** 
 425:Source/tasks.c **** /**
 426:Source/tasks.c ****  * Utility task that simply returns pdTRUE if the task referenced by xTask is
 427:Source/tasks.c ****  * currently in the Suspended state, or pdFALSE if the task referenced by xTask
 428:Source/tasks.c ****  * is in any other state.
 429:Source/tasks.c ****  */
 430:Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 431:Source/tasks.c **** 
 432:Source/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask ) PRIVILEGED_FUNCTION;
 433:Source/tasks.c **** 
 434:Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
 435:Source/tasks.c **** 
 436:Source/tasks.c **** /*
 437:Source/tasks.c ****  * Utility to ready all the lists used by the scheduler.  This is called
 438:Source/tasks.c ****  * automatically upon the creation of the first task.
 439:Source/tasks.c ****  */
 440:Source/tasks.c **** static void prvInitialiseTaskLists( void ) PRIVILEGED_FUNCTION;
 441:Source/tasks.c **** 
 442:Source/tasks.c **** /*
 443:Source/tasks.c ****  * The idle task, which as all tasks is implemented as a never ending loop.
 444:Source/tasks.c ****  * The idle task is automatically created and added to the ready lists upon
 445:Source/tasks.c ****  * creation of the first user task.
 446:Source/tasks.c ****  *
 447:Source/tasks.c ****  * The portTASK_FUNCTION_PROTO() macro is used to allow port/compiler specific
 448:Source/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
 449:Source/tasks.c ****  *
 450:Source/tasks.c ****  * void prvIdleTask( void *pvParameters );
 451:Source/tasks.c ****  *
 452:Source/tasks.c ****  */
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 11


 453:Source/tasks.c **** static portTASK_FUNCTION_PROTO( prvIdleTask, pvParameters );
 454:Source/tasks.c **** 
 455:Source/tasks.c **** /*
 456:Source/tasks.c ****  * Utility to free all memory allocated by the scheduler to hold a TCB,
 457:Source/tasks.c ****  * including the stack pointed to by the TCB.
 458:Source/tasks.c ****  *
 459:Source/tasks.c ****  * This does not free memory allocated by the task itself (i.e. memory
 460:Source/tasks.c ****  * allocated by calls to pvPortMalloc from within the tasks application code).
 461:Source/tasks.c ****  */
 462:Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 463:Source/tasks.c **** 
 464:Source/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB ) PRIVILEGED_FUNCTION;
 465:Source/tasks.c **** 
 466:Source/tasks.c **** #endif
 467:Source/tasks.c **** 
 468:Source/tasks.c **** /*
 469:Source/tasks.c ****  * Used only by the idle task.  This checks to see if anything has been placed
 470:Source/tasks.c ****  * in the list of tasks waiting to be deleted.  If so the task is cleaned up
 471:Source/tasks.c ****  * and its TCB deleted.
 472:Source/tasks.c ****  */
 473:Source/tasks.c **** static void prvCheckTasksWaitingTermination( void ) PRIVILEGED_FUNCTION;
 474:Source/tasks.c **** 
 475:Source/tasks.c **** /*
 476:Source/tasks.c ****  * The currently executing task is entering the Blocked state.  Add the task to
 477:Source/tasks.c ****  * either the current or the overflow delayed task list.
 478:Source/tasks.c ****  */
 479:Source/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockInde
 480:Source/tasks.c **** 
 481:Source/tasks.c **** /*
 482:Source/tasks.c ****  * Fills an TaskStatus_t structure with information on each task that is
 483:Source/tasks.c ****  * referenced from the pxList list (which may be a ready list, a delayed list,
 484:Source/tasks.c ****  * a suspended list, etc.).
 485:Source/tasks.c ****  *
 486:Source/tasks.c ****  * THIS FUNCTION IS INTENDED FOR DEBUGGING ONLY, AND SHOULD NOT BE CALLED FROM
 487:Source/tasks.c ****  * NORMAL APPLICATION CODE.
 488:Source/tasks.c ****  */
 489:Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
 490:Source/tasks.c **** 
 491:Source/tasks.c **** 	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, 
 492:Source/tasks.c **** 
 493:Source/tasks.c **** #endif
 494:Source/tasks.c **** 
 495:Source/tasks.c **** /*
 496:Source/tasks.c ****  * Searches pxList for a task with name pcNameToQuery - returning a handle to
 497:Source/tasks.c ****  * the task if it is found, or NULL if the task is not found.
 498:Source/tasks.c ****  */
 499:Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
 500:Source/tasks.c **** 
 501:Source/tasks.c **** 	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] ) PRIVI
 502:Source/tasks.c **** 
 503:Source/tasks.c **** #endif
 504:Source/tasks.c **** 
 505:Source/tasks.c **** /*
 506:Source/tasks.c ****  * When a task is created, the stack of the task is filled with a known value.
 507:Source/tasks.c ****  * This function determines the 'high water mark' of the task stack by
 508:Source/tasks.c ****  * determining how much of the stack remains at the original preset value.
 509:Source/tasks.c ****  */
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 12


 510:Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUD
 511:Source/tasks.c **** 
 512:Source/tasks.c **** 	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte ) PRIVILEGE
 513:Source/tasks.c **** 
 514:Source/tasks.c **** #endif
 515:Source/tasks.c **** 
 516:Source/tasks.c **** /*
 517:Source/tasks.c ****  * Return the amount of time, in ticks, that will pass before the kernel will
 518:Source/tasks.c ****  * next move a task from the Blocked state to the Running state.
 519:Source/tasks.c ****  *
 520:Source/tasks.c ****  * This conditional compilation should use inequality to 0, not equality to 1.
 521:Source/tasks.c ****  * This is to ensure portSUPPRESS_TICKS_AND_SLEEP() can be called when user
 522:Source/tasks.c ****  * defined low power mode implementations require configUSE_TICKLESS_IDLE to be
 523:Source/tasks.c ****  * set to a value other than 1.
 524:Source/tasks.c ****  */
 525:Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
 526:Source/tasks.c **** 
 527:Source/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void ) PRIVILEGED_FUNCTION;
 528:Source/tasks.c **** 
 529:Source/tasks.c **** #endif
 530:Source/tasks.c **** 
 531:Source/tasks.c **** /*
 532:Source/tasks.c ****  * Set xNextTaskUnblockTime to the time at which the next Blocked state task
 533:Source/tasks.c ****  * will exit the Blocked state.
 534:Source/tasks.c ****  */
 535:Source/tasks.c **** static void prvResetNextTaskUnblockTime( void );
 536:Source/tasks.c **** 
 537:Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
 538:Source/tasks.c **** 
 539:Source/tasks.c **** 	/*
 540:Source/tasks.c **** 	 * Helper function used to pad task names with spaces when printing out
 541:Source/tasks.c **** 	 * human readable tables of task information.
 542:Source/tasks.c **** 	 */
 543:Source/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName ) PRIVILEGED_FUNCTION;
 544:Source/tasks.c **** 
 545:Source/tasks.c **** #endif
 546:Source/tasks.c **** 
 547:Source/tasks.c **** /*
 548:Source/tasks.c ****  * Called after a Task_t structure has been allocated either statically or
 549:Source/tasks.c ****  * dynamically to fill in the structure's members.
 550:Source/tasks.c ****  */
 551:Source/tasks.c **** static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 552:Source/tasks.c **** 									const char * const pcName, 		/*lint !e971 Unqualified char types are allowed for strings a
 553:Source/tasks.c **** 									const uint32_t ulStackDepth,
 554:Source/tasks.c **** 									void * const pvParameters,
 555:Source/tasks.c **** 									UBaseType_t uxPriority,
 556:Source/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
 557:Source/tasks.c **** 									TCB_t *pxNewTCB,
 558:Source/tasks.c **** 									const MemoryRegion_t * const xRegions ) PRIVILEGED_FUNCTION;
 559:Source/tasks.c **** 
 560:Source/tasks.c **** /*
 561:Source/tasks.c ****  * Called after a new task has been created and initialised to place the task
 562:Source/tasks.c ****  * under the control of the scheduler.
 563:Source/tasks.c ****  */
 564:Source/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB ) PRIVILEGED_FUNCTION;
 565:Source/tasks.c **** 
 566:Source/tasks.c **** /*
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 13


 567:Source/tasks.c ****  * freertos_tasks_c_additions_init() should only be called if the user definable
 568:Source/tasks.c ****  * macro FREERTOS_TASKS_C_ADDITIONS_INIT() is defined, as that is the only macro
 569:Source/tasks.c ****  * called by the function.
 570:Source/tasks.c ****  */
 571:Source/tasks.c **** #ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
 572:Source/tasks.c **** 
 573:Source/tasks.c **** 	static void freertos_tasks_c_additions_init( void ) PRIVILEGED_FUNCTION;
 574:Source/tasks.c **** 
 575:Source/tasks.c **** #endif
 576:Source/tasks.c **** 
 577:Source/tasks.c **** /*-----------------------------------------------------------*/
 578:Source/tasks.c **** 
 579:Source/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 580:Source/tasks.c **** 
 581:Source/tasks.c **** 	TaskHandle_t xTaskCreateStatic(	TaskFunction_t pxTaskCode,
 582:Source/tasks.c **** 									const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings an
 583:Source/tasks.c **** 									const uint32_t ulStackDepth,
 584:Source/tasks.c **** 									void * const pvParameters,
 585:Source/tasks.c **** 									UBaseType_t uxPriority,
 586:Source/tasks.c **** 									StackType_t * const puxStackBuffer,
 587:Source/tasks.c **** 									StaticTask_t * const pxTaskBuffer )
 588:Source/tasks.c **** 	{
 589:Source/tasks.c **** 	TCB_t *pxNewTCB;
 590:Source/tasks.c **** 	TaskHandle_t xReturn;
 591:Source/tasks.c **** 
 592:Source/tasks.c **** 		configASSERT( puxStackBuffer != NULL );
 593:Source/tasks.c **** 		configASSERT( pxTaskBuffer != NULL );
 594:Source/tasks.c **** 
 595:Source/tasks.c **** 		#if( configASSERT_DEFINED == 1 )
 596:Source/tasks.c **** 		{
 597:Source/tasks.c **** 			/* Sanity check that the size of the structure used to declare a
 598:Source/tasks.c **** 			variable of type StaticTask_t equals the size of the real task
 599:Source/tasks.c **** 			structure. */
 600:Source/tasks.c **** 			volatile size_t xSize = sizeof( StaticTask_t );
 601:Source/tasks.c **** 			configASSERT( xSize == sizeof( TCB_t ) );
 602:Source/tasks.c **** 			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 603:Source/tasks.c **** 		}
 604:Source/tasks.c **** 		#endif /* configASSERT_DEFINED */
 605:Source/tasks.c **** 
 606:Source/tasks.c **** 
 607:Source/tasks.c **** 		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 608:Source/tasks.c **** 		{
 609:Source/tasks.c **** 			/* The memory used for the task's TCB and stack are passed into this
 610:Source/tasks.c **** 			function - use them. */
 611:Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures ar
 612:Source/tasks.c **** 			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 613:Source/tasks.c **** 
 614:Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consoli
 615:Source/tasks.c **** 			{
 616:Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 617:Source/tasks.c **** 				task was created statically in case the task is later deleted. */
 618:Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 619:Source/tasks.c **** 			}
 620:Source/tasks.c **** 			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 621:Source/tasks.c **** 
 622:Source/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNe
 623:Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 14


 624:Source/tasks.c **** 		}
 625:Source/tasks.c **** 		else
 626:Source/tasks.c **** 		{
 627:Source/tasks.c **** 			xReturn = NULL;
 628:Source/tasks.c **** 		}
 629:Source/tasks.c **** 
 630:Source/tasks.c **** 		return xReturn;
 631:Source/tasks.c **** 	}
 632:Source/tasks.c **** 
 633:Source/tasks.c **** #endif /* SUPPORT_STATIC_ALLOCATION */
 634:Source/tasks.c **** /*-----------------------------------------------------------*/
 635:Source/tasks.c **** 
 636:Source/tasks.c **** #if( ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 637:Source/tasks.c **** 
 638:Source/tasks.c **** 	BaseType_t xTaskCreateRestrictedStatic( const TaskParameters_t * const pxTaskDefinition, TaskHandl
 639:Source/tasks.c **** 	{
 640:Source/tasks.c **** 	TCB_t *pxNewTCB;
 641:Source/tasks.c **** 	BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 642:Source/tasks.c **** 
 643:Source/tasks.c **** 		configASSERT( pxTaskDefinition->puxStackBuffer != NULL );
 644:Source/tasks.c **** 		configASSERT( pxTaskDefinition->pxTaskBuffer != NULL );
 645:Source/tasks.c **** 
 646:Source/tasks.c **** 		if( ( pxTaskDefinition->puxStackBuffer != NULL ) && ( pxTaskDefinition->pxTaskBuffer != NULL ) )
 647:Source/tasks.c **** 		{
 648:Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends
 649:Source/tasks.c **** 			on the implementation of the port malloc function and whether or
 650:Source/tasks.c **** 			not static allocation is being used. */
 651:Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pxTaskDefinition->pxTaskBuffer;
 652:Source/tasks.c **** 
 653:Source/tasks.c **** 			/* Store the stack location in the TCB. */
 654:Source/tasks.c **** 			pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 655:Source/tasks.c **** 
 656:Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 657:Source/tasks.c **** 			{
 658:Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 659:Source/tasks.c **** 				task was created statically in case the task is later deleted. */
 660:Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 661:Source/tasks.c **** 			}
 662:Source/tasks.c **** 			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 663:Source/tasks.c **** 
 664:Source/tasks.c **** 			prvInitialiseNewTask(	pxTaskDefinition->pvTaskCode,
 665:Source/tasks.c **** 									pxTaskDefinition->pcName,
 666:Source/tasks.c **** 									( uint32_t ) pxTaskDefinition->usStackDepth,
 667:Source/tasks.c **** 									pxTaskDefinition->pvParameters,
 668:Source/tasks.c **** 									pxTaskDefinition->uxPriority,
 669:Source/tasks.c **** 									pxCreatedTask, pxNewTCB,
 670:Source/tasks.c **** 									pxTaskDefinition->xRegions );
 671:Source/tasks.c **** 
 672:Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 673:Source/tasks.c **** 			xReturn = pdPASS;
 674:Source/tasks.c **** 		}
 675:Source/tasks.c **** 
 676:Source/tasks.c **** 		return xReturn;
 677:Source/tasks.c **** 	}
 678:Source/tasks.c **** 
 679:Source/tasks.c **** #endif /* ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
 680:Source/tasks.c **** /*-----------------------------------------------------------*/
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 15


 681:Source/tasks.c **** 
 682:Source/tasks.c **** #if( ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 683:Source/tasks.c **** 
 684:Source/tasks.c **** 	BaseType_t xTaskCreateRestricted( const TaskParameters_t * const pxTaskDefinition, TaskHandle_t *p
 685:Source/tasks.c **** 	{
 686:Source/tasks.c **** 	TCB_t *pxNewTCB;
 687:Source/tasks.c **** 	BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 688:Source/tasks.c **** 
 689:Source/tasks.c **** 		configASSERT( pxTaskDefinition->puxStackBuffer );
 690:Source/tasks.c **** 
 691:Source/tasks.c **** 		if( pxTaskDefinition->puxStackBuffer != NULL )
 692:Source/tasks.c **** 		{
 693:Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends
 694:Source/tasks.c **** 			on the implementation of the port malloc function and whether or
 695:Source/tasks.c **** 			not static allocation is being used. */
 696:Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 697:Source/tasks.c **** 
 698:Source/tasks.c **** 			if( pxNewTCB != NULL )
 699:Source/tasks.c **** 			{
 700:Source/tasks.c **** 				/* Store the stack location in the TCB. */
 701:Source/tasks.c **** 				pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 702:Source/tasks.c **** 
 703:Source/tasks.c **** 				#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 704:Source/tasks.c **** 				{
 705:Source/tasks.c **** 					/* Tasks can be created statically or dynamically, so note
 706:Source/tasks.c **** 					this task had a statically allocated stack in case it is
 707:Source/tasks.c **** 					later deleted.  The TCB was allocated dynamically. */
 708:Source/tasks.c **** 					pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_ONLY;
 709:Source/tasks.c **** 				}
 710:Source/tasks.c **** 				#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 711:Source/tasks.c **** 
 712:Source/tasks.c **** 				prvInitialiseNewTask(	pxTaskDefinition->pvTaskCode,
 713:Source/tasks.c **** 										pxTaskDefinition->pcName,
 714:Source/tasks.c **** 										( uint32_t ) pxTaskDefinition->usStackDepth,
 715:Source/tasks.c **** 										pxTaskDefinition->pvParameters,
 716:Source/tasks.c **** 										pxTaskDefinition->uxPriority,
 717:Source/tasks.c **** 										pxCreatedTask, pxNewTCB,
 718:Source/tasks.c **** 										pxTaskDefinition->xRegions );
 719:Source/tasks.c **** 
 720:Source/tasks.c **** 				prvAddNewTaskToReadyList( pxNewTCB );
 721:Source/tasks.c **** 				xReturn = pdPASS;
 722:Source/tasks.c **** 			}
 723:Source/tasks.c **** 		}
 724:Source/tasks.c **** 
 725:Source/tasks.c **** 		return xReturn;
 726:Source/tasks.c **** 	}
 727:Source/tasks.c **** 
 728:Source/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
 729:Source/tasks.c **** /*-----------------------------------------------------------*/
 730:Source/tasks.c **** 
 731:Source/tasks.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 732:Source/tasks.c **** 
 733:Source/tasks.c **** 	BaseType_t xTaskCreate(	TaskFunction_t pxTaskCode,
 734:Source/tasks.c **** 							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and 
 735:Source/tasks.c **** 							const configSTACK_DEPTH_TYPE usStackDepth,
 736:Source/tasks.c **** 							void * const pvParameters,
 737:Source/tasks.c **** 							UBaseType_t uxPriority,
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 16


 738:Source/tasks.c **** 							TaskHandle_t * const pxCreatedTask )
 739:Source/tasks.c **** 	{
  95              		.loc 1 739 0
  96              		.cfi_startproc
  97              		@ args = 8, pretend = 0, frame = 32
  98              		@ frame_needed = 1, uses_anonymous_args = 0
  99 0000 80B5     		push	{r7, lr}
 100              		.cfi_def_cfa_offset 8
 101              		.cfi_offset 7, -8
 102              		.cfi_offset 14, -4
 103 0002 8CB0     		sub	sp, sp, #48
 104              		.cfi_def_cfa_offset 56
 105 0004 04AF     		add	r7, sp, #16
 106              		.cfi_def_cfa 7, 40
 107 0006 F860     		str	r0, [r7, #12]
 108 0008 B960     		str	r1, [r7, #8]
 109 000a 3B60     		str	r3, [r7]
 110 000c 1346     		mov	r3, r2	@ movhi
 111 000e FB80     		strh	r3, [r7, #6]	@ movhi
 112              	.LBB27:
 740:Source/tasks.c **** 	TCB_t *pxNewTCB;
 741:Source/tasks.c **** 	BaseType_t xReturn;
 742:Source/tasks.c **** 
 743:Source/tasks.c **** 		/* If the stack grows down then allocate the stack then the TCB so the stack
 744:Source/tasks.c **** 		does not grow into the TCB.  Likewise if the stack grows up then allocate
 745:Source/tasks.c **** 		the TCB then the stack. */
 746:Source/tasks.c **** 		#if( portSTACK_GROWTH > 0 )
 747:Source/tasks.c **** 		{
 748:Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends on
 749:Source/tasks.c **** 			the implementation of the port malloc function and whether or not static
 750:Source/tasks.c **** 			allocation is being used. */
 751:Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 752:Source/tasks.c **** 
 753:Source/tasks.c **** 			if( pxNewTCB != NULL )
 754:Source/tasks.c **** 			{
 755:Source/tasks.c **** 				/* Allocate space for the stack used by the task being created.
 756:Source/tasks.c **** 				The base of the stack memory stored in the TCB so the task can
 757:Source/tasks.c **** 				be deleted later if required. */
 758:Source/tasks.c **** 				pxNewTCB->pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( Sta
 759:Source/tasks.c **** 
 760:Source/tasks.c **** 				if( pxNewTCB->pxStack == NULL )
 761:Source/tasks.c **** 				{
 762:Source/tasks.c **** 					/* Could not allocate the stack.  Delete the allocated TCB. */
 763:Source/tasks.c **** 					vPortFree( pxNewTCB );
 764:Source/tasks.c **** 					pxNewTCB = NULL;
 765:Source/tasks.c **** 				}
 766:Source/tasks.c **** 			}
 767:Source/tasks.c **** 		}
 768:Source/tasks.c **** 		#else /* portSTACK_GROWTH */
 769:Source/tasks.c **** 		{
 770:Source/tasks.c **** 		StackType_t *pxStack;
 771:Source/tasks.c **** 
 772:Source/tasks.c **** 			/* Allocate space for the stack used by the task being created. */
 773:Source/tasks.c **** 			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079
 113              		.loc 1 773 0
 114 0010 FB88     		ldrh	r3, [r7, #6]
 115 0012 9B00     		lsls	r3, r3, #2
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 17


 116 0014 1846     		mov	r0, r3
 117 0016 FFF7FEFF 		bl	pvPortMalloc
 118 001a 7861     		str	r0, [r7, #20]
 774:Source/tasks.c **** 
 775:Source/tasks.c **** 			if( pxStack != NULL )
 119              		.loc 1 775 0
 120 001c 7B69     		ldr	r3, [r7, #20]
 121 001e 002B     		cmp	r3, #0
 122 0020 0ED0     		beq	.L2
 776:Source/tasks.c **** 			{
 777:Source/tasks.c **** 				/* Allocate space for the TCB. */
 778:Source/tasks.c **** 				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returne
 123              		.loc 1 778 0
 124 0022 5020     		movs	r0, #80
 125 0024 FFF7FEFF 		bl	pvPortMalloc
 126 0028 F861     		str	r0, [r7, #28]
 779:Source/tasks.c **** 
 780:Source/tasks.c **** 				if( pxNewTCB != NULL )
 127              		.loc 1 780 0
 128 002a FB69     		ldr	r3, [r7, #28]
 129 002c 002B     		cmp	r3, #0
 130 002e 03D0     		beq	.L3
 781:Source/tasks.c **** 				{
 782:Source/tasks.c **** 					/* Store the stack location in the TCB. */
 783:Source/tasks.c **** 					pxNewTCB->pxStack = pxStack;
 131              		.loc 1 783 0
 132 0030 FB69     		ldr	r3, [r7, #28]
 133 0032 7A69     		ldr	r2, [r7, #20]
 134 0034 1A63     		str	r2, [r3, #48]
 135 0036 05E0     		b	.L5
 136              	.L3:
 784:Source/tasks.c **** 				}
 785:Source/tasks.c **** 				else
 786:Source/tasks.c **** 				{
 787:Source/tasks.c **** 					/* The stack cannot be used as the TCB was not created.  Free
 788:Source/tasks.c **** 					it again. */
 789:Source/tasks.c **** 					vPortFree( pxStack );
 137              		.loc 1 789 0
 138 0038 7869     		ldr	r0, [r7, #20]
 139 003a FFF7FEFF 		bl	vPortFree
 140 003e 01E0     		b	.L5
 141              	.L2:
 790:Source/tasks.c **** 				}
 791:Source/tasks.c **** 			}
 792:Source/tasks.c **** 			else
 793:Source/tasks.c **** 			{
 794:Source/tasks.c **** 				pxNewTCB = NULL;
 142              		.loc 1 794 0
 143 0040 0023     		movs	r3, #0
 144 0042 FB61     		str	r3, [r7, #28]
 145              	.L5:
 146              	.LBE27:
 795:Source/tasks.c **** 			}
 796:Source/tasks.c **** 		}
 797:Source/tasks.c **** 		#endif /* portSTACK_GROWTH */
 798:Source/tasks.c **** 
 799:Source/tasks.c **** 		if( pxNewTCB != NULL )
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 18


 147              		.loc 1 799 0
 148 0044 FB69     		ldr	r3, [r7, #28]
 149 0046 002B     		cmp	r3, #0
 150 0048 13D0     		beq	.L6
 800:Source/tasks.c **** 		{
 801:Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consoli
 802:Source/tasks.c **** 			{
 803:Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 804:Source/tasks.c **** 				task was created dynamically in case it is later deleted. */
 805:Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 806:Source/tasks.c **** 			}
 807:Source/tasks.c **** 			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 808:Source/tasks.c **** 
 809:Source/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, p
 151              		.loc 1 809 0
 152 004a FA88     		ldrh	r2, [r7, #6]
 153 004c 0023     		movs	r3, #0
 154 004e 0393     		str	r3, [sp, #12]
 155 0050 FB69     		ldr	r3, [r7, #28]
 156 0052 0293     		str	r3, [sp, #8]
 157 0054 FB6A     		ldr	r3, [r7, #44]
 158 0056 0193     		str	r3, [sp, #4]
 159 0058 BB6A     		ldr	r3, [r7, #40]
 160 005a 0093     		str	r3, [sp]
 161 005c 3B68     		ldr	r3, [r7]
 162 005e B968     		ldr	r1, [r7, #8]
 163 0060 F868     		ldr	r0, [r7, #12]
 164 0062 FFF7FEFF 		bl	prvInitialiseNewTask
 810:Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 165              		.loc 1 810 0
 166 0066 F869     		ldr	r0, [r7, #28]
 167 0068 FFF7FEFF 		bl	prvAddNewTaskToReadyList
 811:Source/tasks.c **** 			xReturn = pdPASS;
 168              		.loc 1 811 0
 169 006c 0123     		movs	r3, #1
 170 006e BB61     		str	r3, [r7, #24]
 171 0070 02E0     		b	.L7
 172              	.L6:
 812:Source/tasks.c **** 		}
 813:Source/tasks.c **** 		else
 814:Source/tasks.c **** 		{
 815:Source/tasks.c **** 			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 173              		.loc 1 815 0
 174 0072 4FF0FF33 		mov	r3, #-1
 175 0076 BB61     		str	r3, [r7, #24]
 176              	.L7:
 816:Source/tasks.c **** 		}
 817:Source/tasks.c **** 
 818:Source/tasks.c **** 		return xReturn;
 177              		.loc 1 818 0
 178 0078 BB69     		ldr	r3, [r7, #24]
 819:Source/tasks.c **** 	}
 179              		.loc 1 819 0
 180 007a 1846     		mov	r0, r3
 181 007c 2037     		adds	r7, r7, #32
 182              		.cfi_def_cfa_offset 8
 183 007e BD46     		mov	sp, r7
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 19


 184              		.cfi_def_cfa_register 13
 185              		@ sp needed
 186 0080 80BD     		pop	{r7, pc}
 187              		.cfi_endproc
 188              	.LFE68:
 189              		.size	xTaskCreate, .-xTaskCreate
 190 0082 00BF     		.section	.text.prvInitialiseNewTask,"ax",%progbits
 191              		.align	2
 192              		.thumb
 193              		.thumb_func
 194              		.type	prvInitialiseNewTask, %function
 195              	prvInitialiseNewTask:
 196              	.LFB69:
 820:Source/tasks.c **** 
 821:Source/tasks.c **** #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 822:Source/tasks.c **** /*-----------------------------------------------------------*/
 823:Source/tasks.c **** 
 824:Source/tasks.c **** static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 825:Source/tasks.c **** 									const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings an
 826:Source/tasks.c **** 									const uint32_t ulStackDepth,
 827:Source/tasks.c **** 									void * const pvParameters,
 828:Source/tasks.c **** 									UBaseType_t uxPriority,
 829:Source/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
 830:Source/tasks.c **** 									TCB_t *pxNewTCB,
 831:Source/tasks.c **** 									const MemoryRegion_t * const xRegions )
 832:Source/tasks.c **** {
 197              		.loc 1 832 0
 198              		.cfi_startproc
 199              		@ args = 16, pretend = 0, frame = 24
 200              		@ frame_needed = 1, uses_anonymous_args = 0
 201 0000 80B5     		push	{r7, lr}
 202              		.cfi_def_cfa_offset 8
 203              		.cfi_offset 7, -8
 204              		.cfi_offset 14, -4
 205 0002 86B0     		sub	sp, sp, #24
 206              		.cfi_def_cfa_offset 32
 207 0004 00AF     		add	r7, sp, #0
 208              		.cfi_def_cfa_register 7
 209 0006 F860     		str	r0, [r7, #12]
 210 0008 B960     		str	r1, [r7, #8]
 211 000a 7A60     		str	r2, [r7, #4]
 212 000c 3B60     		str	r3, [r7]
 833:Source/tasks.c **** StackType_t *pxTopOfStack;
 834:Source/tasks.c **** UBaseType_t x;
 835:Source/tasks.c **** 
 836:Source/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
 837:Source/tasks.c **** 		/* Should the task be created in privileged mode? */
 838:Source/tasks.c **** 		BaseType_t xRunPrivileged;
 839:Source/tasks.c **** 		if( ( uxPriority & portPRIVILEGE_BIT ) != 0U )
 840:Source/tasks.c **** 		{
 841:Source/tasks.c **** 			xRunPrivileged = pdTRUE;
 842:Source/tasks.c **** 		}
 843:Source/tasks.c **** 		else
 844:Source/tasks.c **** 		{
 845:Source/tasks.c **** 			xRunPrivileged = pdFALSE;
 846:Source/tasks.c **** 		}
 847:Source/tasks.c **** 		uxPriority &= ~portPRIVILEGE_BIT;
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 20


 848:Source/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS == 1 */
 849:Source/tasks.c **** 
 850:Source/tasks.c **** 	/* Avoid dependency on memset() if it is not required. */
 851:Source/tasks.c **** 	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
 852:Source/tasks.c **** 	{
 853:Source/tasks.c **** 		/* Fill the stack with a known value to assist debugging. */
 854:Source/tasks.c **** 		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof(
 213              		.loc 1 854 0
 214 000e BB6A     		ldr	r3, [r7, #40]
 215 0010 186B     		ldr	r0, [r3, #48]
 216 0012 7B68     		ldr	r3, [r7, #4]
 217 0014 9B00     		lsls	r3, r3, #2
 218 0016 1A46     		mov	r2, r3
 219 0018 A521     		movs	r1, #165
 220 001a FFF7FEFF 		bl	memset
 855:Source/tasks.c **** 	}
 856:Source/tasks.c **** 	#endif /* tskSET_NEW_STACKS_TO_KNOWN_VALUE */
 857:Source/tasks.c **** 
 858:Source/tasks.c **** 	/* Calculate the top of stack address.  This depends on whether the stack
 859:Source/tasks.c **** 	grows from high memory to low (as per the 80x86) or vice versa.
 860:Source/tasks.c **** 	portSTACK_GROWTH is used to make the result positive or negative as required
 861:Source/tasks.c **** 	by the port. */
 862:Source/tasks.c **** 	#if( portSTACK_GROWTH < 0 )
 863:Source/tasks.c **** 	{
 864:Source/tasks.c **** 		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 221              		.loc 1 864 0
 222 001e BB6A     		ldr	r3, [r7, #40]
 223 0020 1A6B     		ldr	r2, [r3, #48]
 224 0022 7B68     		ldr	r3, [r7, #4]
 225 0024 03F18043 		add	r3, r3, #1073741824
 226 0028 013B     		subs	r3, r3, #1
 227 002a 9B00     		lsls	r3, r3, #2
 228 002c 1344     		add	r3, r3, r2
 229 002e 3B61     		str	r3, [r7, #16]
 865:Source/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 230              		.loc 1 865 0
 231 0030 3B69     		ldr	r3, [r7, #16]
 232 0032 23F00703 		bic	r3, r3, #7
 233 0036 3B61     		str	r3, [r7, #16]
 866:Source/tasks.c **** 
 867:Source/tasks.c **** 		/* Check the alignment of the calculated top of stack is correct. */
 868:Source/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALI
 869:Source/tasks.c **** 
 870:Source/tasks.c **** 		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
 871:Source/tasks.c **** 		{
 872:Source/tasks.c **** 			/* Also record the stack's high address, which may assist
 873:Source/tasks.c **** 			debugging. */
 874:Source/tasks.c **** 			pxNewTCB->pxEndOfStack = pxTopOfStack;
 875:Source/tasks.c **** 		}
 876:Source/tasks.c **** 		#endif /* configRECORD_STACK_HIGH_ADDRESS */
 877:Source/tasks.c **** 	}
 878:Source/tasks.c **** 	#else /* portSTACK_GROWTH */
 879:Source/tasks.c **** 	{
 880:Source/tasks.c **** 		pxTopOfStack = pxNewTCB->pxStack;
 881:Source/tasks.c **** 
 882:Source/tasks.c **** 		/* Check the alignment of the stack buffer is correct. */
 883:Source/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxNewTCB->pxStack & ( portPOINTER_SIZE_TYPE ) portBYT
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 21


 884:Source/tasks.c **** 
 885:Source/tasks.c **** 		/* The other extreme of the stack space is required if stack checking is
 886:Source/tasks.c **** 		performed. */
 887:Source/tasks.c **** 		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 888:Source/tasks.c **** 	}
 889:Source/tasks.c **** 	#endif /* portSTACK_GROWTH */
 890:Source/tasks.c **** 
 891:Source/tasks.c **** 	/* Store the task name in the TCB. */
 892:Source/tasks.c **** 	if( pcName != NULL )
 234              		.loc 1 892 0
 235 0038 BB68     		ldr	r3, [r7, #8]
 236 003a 002B     		cmp	r3, #0
 237 003c 1FD0     		beq	.L10
 893:Source/tasks.c **** 	{
 894:Source/tasks.c **** 		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 238              		.loc 1 894 0
 239 003e 0023     		movs	r3, #0
 240 0040 7B61     		str	r3, [r7, #20]
 241 0042 12E0     		b	.L11
 242              	.L14:
 895:Source/tasks.c **** 		{
 896:Source/tasks.c **** 			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 243              		.loc 1 896 0
 244 0044 BA68     		ldr	r2, [r7, #8]
 245 0046 7B69     		ldr	r3, [r7, #20]
 246 0048 1344     		add	r3, r3, r2
 247 004a 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 248 004c BA6A     		ldr	r2, [r7, #40]
 249 004e 7B69     		ldr	r3, [r7, #20]
 250 0050 1344     		add	r3, r3, r2
 251 0052 3433     		adds	r3, r3, #52
 252 0054 0A46     		mov	r2, r1
 253 0056 1A70     		strb	r2, [r3]
 897:Source/tasks.c **** 
 898:Source/tasks.c **** 			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
 899:Source/tasks.c **** 			configMAX_TASK_NAME_LEN characters just in case the memory after the
 900:Source/tasks.c **** 			string is not accessible (extremely unlikely). */
 901:Source/tasks.c **** 			if( pcName[ x ] == ( char ) 0x00 )
 254              		.loc 1 901 0
 255 0058 BA68     		ldr	r2, [r7, #8]
 256 005a 7B69     		ldr	r3, [r7, #20]
 257 005c 1344     		add	r3, r3, r2
 258 005e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 259 0060 002B     		cmp	r3, #0
 260 0062 06D0     		beq	.L18
 894:Source/tasks.c **** 		{
 261              		.loc 1 894 0 discriminator 2
 262 0064 7B69     		ldr	r3, [r7, #20]
 263 0066 0133     		adds	r3, r3, #1
 264 0068 7B61     		str	r3, [r7, #20]
 265              	.L11:
 894:Source/tasks.c **** 		{
 266              		.loc 1 894 0 is_stmt 0 discriminator 1
 267 006a 7B69     		ldr	r3, [r7, #20]
 268 006c 0B2B     		cmp	r3, #11
 269 006e E9D9     		bls	.L14
 270 0070 00E0     		b	.L13
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 22


 271              	.L18:
 902:Source/tasks.c **** 			{
 903:Source/tasks.c **** 				break;
 272              		.loc 1 903 0 is_stmt 1
 273 0072 00BF     		nop
 274              	.L13:
 904:Source/tasks.c **** 			}
 905:Source/tasks.c **** 			else
 906:Source/tasks.c **** 			{
 907:Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
 908:Source/tasks.c **** 			}
 909:Source/tasks.c **** 		}
 910:Source/tasks.c **** 
 911:Source/tasks.c **** 		/* Ensure the name string is terminated in the case that the string length
 912:Source/tasks.c **** 		was greater or equal to configMAX_TASK_NAME_LEN. */
 913:Source/tasks.c **** 		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 275              		.loc 1 913 0
 276 0074 BB6A     		ldr	r3, [r7, #40]
 277 0076 0022     		movs	r2, #0
 278 0078 83F83F20 		strb	r2, [r3, #63]
 279 007c 03E0     		b	.L15
 280              	.L10:
 914:Source/tasks.c **** 	}
 915:Source/tasks.c **** 	else
 916:Source/tasks.c **** 	{
 917:Source/tasks.c **** 		/* The task has not been given a name, so just ensure there is a NULL
 918:Source/tasks.c **** 		terminator when it is read out. */
 919:Source/tasks.c **** 		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 281              		.loc 1 919 0
 282 007e BB6A     		ldr	r3, [r7, #40]
 283 0080 0022     		movs	r2, #0
 284 0082 83F83420 		strb	r2, [r3, #52]
 285              	.L15:
 920:Source/tasks.c **** 	}
 921:Source/tasks.c **** 
 922:Source/tasks.c **** 	/* This is used as an array index so must ensure it's not too large.  First
 923:Source/tasks.c **** 	remove the privilege bit if one is present. */
 924:Source/tasks.c **** 	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 286              		.loc 1 924 0
 287 0086 3B6A     		ldr	r3, [r7, #32]
 288 0088 042B     		cmp	r3, #4
 289 008a 01D9     		bls	.L16
 925:Source/tasks.c **** 	{
 926:Source/tasks.c **** 		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 290              		.loc 1 926 0
 291 008c 0423     		movs	r3, #4
 292 008e 3B62     		str	r3, [r7, #32]
 293              	.L16:
 927:Source/tasks.c **** 	}
 928:Source/tasks.c **** 	else
 929:Source/tasks.c **** 	{
 930:Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
 931:Source/tasks.c **** 	}
 932:Source/tasks.c **** 
 933:Source/tasks.c **** 	pxNewTCB->uxPriority = uxPriority;
 294              		.loc 1 933 0
 295 0090 BB6A     		ldr	r3, [r7, #40]
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 23


 296 0092 3A6A     		ldr	r2, [r7, #32]
 297 0094 DA62     		str	r2, [r3, #44]
 934:Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 935:Source/tasks.c **** 	{
 936:Source/tasks.c **** 		pxNewTCB->uxBasePriority = uxPriority;
 298              		.loc 1 936 0
 299 0096 BB6A     		ldr	r3, [r7, #40]
 300 0098 3A6A     		ldr	r2, [r7, #32]
 301 009a 1A64     		str	r2, [r3, #64]
 937:Source/tasks.c **** 		pxNewTCB->uxMutexesHeld = 0;
 302              		.loc 1 937 0
 303 009c BB6A     		ldr	r3, [r7, #40]
 304 009e 0022     		movs	r2, #0
 305 00a0 5A64     		str	r2, [r3, #68]
 938:Source/tasks.c **** 	}
 939:Source/tasks.c **** 	#endif /* configUSE_MUTEXES */
 940:Source/tasks.c **** 
 941:Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 306              		.loc 1 941 0
 307 00a2 BB6A     		ldr	r3, [r7, #40]
 308 00a4 0433     		adds	r3, r3, #4
 309 00a6 1846     		mov	r0, r3
 310 00a8 FFF7FEFF 		bl	vListInitialiseItem
 942:Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 311              		.loc 1 942 0
 312 00ac BB6A     		ldr	r3, [r7, #40]
 313 00ae 1833     		adds	r3, r3, #24
 314 00b0 1846     		mov	r0, r3
 315 00b2 FFF7FEFF 		bl	vListInitialiseItem
 943:Source/tasks.c **** 
 944:Source/tasks.c **** 	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
 945:Source/tasks.c **** 	back to	the containing TCB from a generic item in a list. */
 946:Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 316              		.loc 1 946 0
 317 00b6 BB6A     		ldr	r3, [r7, #40]
 318 00b8 BA6A     		ldr	r2, [r7, #40]
 319 00ba 1A61     		str	r2, [r3, #16]
 947:Source/tasks.c **** 
 948:Source/tasks.c **** 	/* Event lists are always in priority order. */
 949:Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( Ti
 320              		.loc 1 949 0
 321 00bc 3B6A     		ldr	r3, [r7, #32]
 322 00be C3F10502 		rsb	r2, r3, #5
 323 00c2 BB6A     		ldr	r3, [r7, #40]
 324 00c4 9A61     		str	r2, [r3, #24]
 950:Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 325              		.loc 1 950 0
 326 00c6 BB6A     		ldr	r3, [r7, #40]
 327 00c8 BA6A     		ldr	r2, [r7, #40]
 328 00ca 5A62     		str	r2, [r3, #36]
 951:Source/tasks.c **** 
 952:Source/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 953:Source/tasks.c **** 	{
 954:Source/tasks.c **** 		pxNewTCB->uxCriticalNesting = ( UBaseType_t ) 0U;
 955:Source/tasks.c **** 	}
 956:Source/tasks.c **** 	#endif /* portCRITICAL_NESTING_IN_TCB */
 957:Source/tasks.c **** 
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 24


 958:Source/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 959:Source/tasks.c **** 	{
 960:Source/tasks.c **** 		pxNewTCB->pxTaskTag = NULL;
 961:Source/tasks.c **** 	}
 962:Source/tasks.c **** 	#endif /* configUSE_APPLICATION_TASK_TAG */
 963:Source/tasks.c **** 
 964:Source/tasks.c **** 	#if ( configGENERATE_RUN_TIME_STATS == 1 )
 965:Source/tasks.c **** 	{
 966:Source/tasks.c **** 		pxNewTCB->ulRunTimeCounter = 0UL;
 967:Source/tasks.c **** 	}
 968:Source/tasks.c **** 	#endif /* configGENERATE_RUN_TIME_STATS */
 969:Source/tasks.c **** 
 970:Source/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 971:Source/tasks.c **** 	{
 972:Source/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxNewTCB->xMPUSettings ), xRegions, pxNewTCB->pxStack, ulStackDepth
 973:Source/tasks.c **** 	}
 974:Source/tasks.c **** 	#else
 975:Source/tasks.c **** 	{
 976:Source/tasks.c **** 		/* Avoid compiler warning about unreferenced parameter. */
 977:Source/tasks.c **** 		( void ) xRegions;
 978:Source/tasks.c **** 	}
 979:Source/tasks.c **** 	#endif
 980:Source/tasks.c **** 
 981:Source/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
 982:Source/tasks.c **** 	{
 983:Source/tasks.c **** 		for( x = 0; x < ( UBaseType_t ) configNUM_THREAD_LOCAL_STORAGE_POINTERS; x++ )
 984:Source/tasks.c **** 		{
 985:Source/tasks.c **** 			pxNewTCB->pvThreadLocalStoragePointers[ x ] = NULL;
 986:Source/tasks.c **** 		}
 987:Source/tasks.c **** 	}
 988:Source/tasks.c **** 	#endif
 989:Source/tasks.c **** 
 990:Source/tasks.c **** 	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
 991:Source/tasks.c **** 	{
 992:Source/tasks.c **** 		pxNewTCB->ulNotifiedValue = 0;
 329              		.loc 1 992 0
 330 00cc BB6A     		ldr	r3, [r7, #40]
 331 00ce 0022     		movs	r2, #0
 332 00d0 9A64     		str	r2, [r3, #72]
 993:Source/tasks.c **** 		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 333              		.loc 1 993 0
 334 00d2 BB6A     		ldr	r3, [r7, #40]
 335 00d4 0022     		movs	r2, #0
 336 00d6 83F84C20 		strb	r2, [r3, #76]
 994:Source/tasks.c **** 	}
 995:Source/tasks.c **** 	#endif
 996:Source/tasks.c **** 
 997:Source/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 998:Source/tasks.c **** 	{
 999:Source/tasks.c **** 		/* Initialise this task's Newlib reent structure.
1000:Source/tasks.c **** 		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
1001:Source/tasks.c **** 		for additional information. */
1002:Source/tasks.c **** 		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
1003:Source/tasks.c **** 	}
1004:Source/tasks.c **** 	#endif
1005:Source/tasks.c **** 
1006:Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 25


1007:Source/tasks.c **** 	{
1008:Source/tasks.c **** 		pxNewTCB->ucDelayAborted = pdFALSE;
1009:Source/tasks.c **** 	}
1010:Source/tasks.c **** 	#endif
1011:Source/tasks.c **** 
1012:Source/tasks.c **** 	/* Initialize the TCB stack to look as if the task was already running,
1013:Source/tasks.c **** 	but had been interrupted by the scheduler.  The return address is set
1014:Source/tasks.c **** 	to the start of the task function. Once the stack has been initialised
1015:Source/tasks.c **** 	the top of stack variable is updated. */
1016:Source/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
1017:Source/tasks.c **** 	{
1018:Source/tasks.c **** 		/* If the port has capability to detect stack overflow,
1019:Source/tasks.c **** 		pass the stack end address to the stack initialization
1020:Source/tasks.c **** 		function as well. */
1021:Source/tasks.c **** 		#if( portHAS_STACK_OVERFLOW_CHECKING == 1 )
1022:Source/tasks.c **** 		{
1023:Source/tasks.c **** 			#if( portSTACK_GROWTH < 0 )
1024:Source/tasks.c **** 			{
1025:Source/tasks.c **** 				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pv
1026:Source/tasks.c **** 			}
1027:Source/tasks.c **** 			#else /* portSTACK_GROWTH */
1028:Source/tasks.c **** 			{
1029:Source/tasks.c **** 				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxEndOfStack, pxTaskCod
1030:Source/tasks.c **** 			}
1031:Source/tasks.c **** 			#endif /* portSTACK_GROWTH */
1032:Source/tasks.c **** 		}
1033:Source/tasks.c **** 		#else /* portHAS_STACK_OVERFLOW_CHECKING */
1034:Source/tasks.c **** 		{
1035:Source/tasks.c **** 			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPriv
1036:Source/tasks.c **** 		}
1037:Source/tasks.c **** 		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
1038:Source/tasks.c **** 	}
1039:Source/tasks.c **** 	#else /* portUSING_MPU_WRAPPERS */
1040:Source/tasks.c **** 	{
1041:Source/tasks.c **** 		/* If the port has capability to detect stack overflow,
1042:Source/tasks.c **** 		pass the stack end address to the stack initialization
1043:Source/tasks.c **** 		function as well. */
1044:Source/tasks.c **** 		#if( portHAS_STACK_OVERFLOW_CHECKING == 1 )
1045:Source/tasks.c **** 		{
1046:Source/tasks.c **** 			#if( portSTACK_GROWTH < 0 )
1047:Source/tasks.c **** 			{
1048:Source/tasks.c **** 				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pv
1049:Source/tasks.c **** 			}
1050:Source/tasks.c **** 			#else /* portSTACK_GROWTH */
1051:Source/tasks.c **** 			{
1052:Source/tasks.c **** 				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxEndOfStack, pxTaskCod
1053:Source/tasks.c **** 			}
1054:Source/tasks.c **** 			#endif /* portSTACK_GROWTH */
1055:Source/tasks.c **** 		}
1056:Source/tasks.c **** 		#else /* portHAS_STACK_OVERFLOW_CHECKING */
1057:Source/tasks.c **** 		{
1058:Source/tasks.c **** 			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 337              		.loc 1 1058 0
 338 00da 3A68     		ldr	r2, [r7]
 339 00dc F968     		ldr	r1, [r7, #12]
 340 00de 3869     		ldr	r0, [r7, #16]
 341 00e0 FFF7FEFF 		bl	pxPortInitialiseStack
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 26


 342 00e4 0246     		mov	r2, r0
 343 00e6 BB6A     		ldr	r3, [r7, #40]
 344 00e8 1A60     		str	r2, [r3]
1059:Source/tasks.c **** 		}
1060:Source/tasks.c **** 		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
1061:Source/tasks.c **** 	}
1062:Source/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS */
1063:Source/tasks.c **** 
1064:Source/tasks.c **** 	if( pxCreatedTask != NULL )
 345              		.loc 1 1064 0
 346 00ea 7B6A     		ldr	r3, [r7, #36]
 347 00ec 002B     		cmp	r3, #0
 348 00ee 02D0     		beq	.L19
1065:Source/tasks.c **** 	{
1066:Source/tasks.c **** 		/* Pass the handle out in an anonymous way.  The handle can be used to
1067:Source/tasks.c **** 		change the created task's priority, delete the created task, etc.*/
1068:Source/tasks.c **** 		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 349              		.loc 1 1068 0
 350 00f0 7B6A     		ldr	r3, [r7, #36]
 351 00f2 BA6A     		ldr	r2, [r7, #40]
 352 00f4 1A60     		str	r2, [r3]
 353              	.L19:
1069:Source/tasks.c **** 	}
1070:Source/tasks.c **** 	else
1071:Source/tasks.c **** 	{
1072:Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
1073:Source/tasks.c **** 	}
1074:Source/tasks.c **** }
 354              		.loc 1 1074 0
 355 00f6 00BF     		nop
 356 00f8 1837     		adds	r7, r7, #24
 357              		.cfi_def_cfa_offset 8
 358 00fa BD46     		mov	sp, r7
 359              		.cfi_def_cfa_register 13
 360              		@ sp needed
 361 00fc 80BD     		pop	{r7, pc}
 362              		.cfi_endproc
 363              	.LFE69:
 364              		.size	prvInitialiseNewTask, .-prvInitialiseNewTask
 365 00fe 00BF     		.section	.text.prvAddNewTaskToReadyList,"ax",%progbits
 366              		.align	2
 367              		.thumb
 368              		.thumb_func
 369              		.type	prvAddNewTaskToReadyList, %function
 370              	prvAddNewTaskToReadyList:
 371              	.LFB70:
1075:Source/tasks.c **** /*-----------------------------------------------------------*/
1076:Source/tasks.c **** 
1077:Source/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
1078:Source/tasks.c **** {
 372              		.loc 1 1078 0
 373              		.cfi_startproc
 374              		@ args = 0, pretend = 0, frame = 8
 375              		@ frame_needed = 1, uses_anonymous_args = 0
 376 0000 80B5     		push	{r7, lr}
 377              		.cfi_def_cfa_offset 8
 378              		.cfi_offset 7, -8
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 27


 379              		.cfi_offset 14, -4
 380 0002 82B0     		sub	sp, sp, #8
 381              		.cfi_def_cfa_offset 16
 382 0004 00AF     		add	r7, sp, #0
 383              		.cfi_def_cfa_register 7
 384 0006 7860     		str	r0, [r7, #4]
1079:Source/tasks.c **** 	/* Ensure interrupts don't access the task lists while the lists are being
1080:Source/tasks.c **** 	updated. */
1081:Source/tasks.c **** 	taskENTER_CRITICAL();
 385              		.loc 1 1081 0
 386 0008 FFF7FEFF 		bl	vPortEnterCritical
1082:Source/tasks.c **** 	{
1083:Source/tasks.c **** 		uxCurrentNumberOfTasks++;
 387              		.loc 1 1083 0
 388 000c 2A4B     		ldr	r3, .L25
 389 000e 1B68     		ldr	r3, [r3]
 390 0010 0133     		adds	r3, r3, #1
 391 0012 294A     		ldr	r2, .L25
 392 0014 1360     		str	r3, [r2]
1084:Source/tasks.c **** 		if( pxCurrentTCB == NULL )
 393              		.loc 1 1084 0
 394 0016 294B     		ldr	r3, .L25+4
 395 0018 1B68     		ldr	r3, [r3]
 396 001a 002B     		cmp	r3, #0
 397 001c 09D1     		bne	.L21
1085:Source/tasks.c **** 		{
1086:Source/tasks.c **** 			/* There are no other tasks, or all the other tasks are in
1087:Source/tasks.c **** 			the suspended state - make this the current task. */
1088:Source/tasks.c **** 			pxCurrentTCB = pxNewTCB;
 398              		.loc 1 1088 0
 399 001e 274A     		ldr	r2, .L25+4
 400 0020 7B68     		ldr	r3, [r7, #4]
 401 0022 1360     		str	r3, [r2]
1089:Source/tasks.c **** 
1090:Source/tasks.c **** 			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 402              		.loc 1 1090 0
 403 0024 244B     		ldr	r3, .L25
 404 0026 1B68     		ldr	r3, [r3]
 405 0028 012B     		cmp	r3, #1
 406 002a 10D1     		bne	.L22
1091:Source/tasks.c **** 			{
1092:Source/tasks.c **** 				/* This is the first task to be created so do the preliminary
1093:Source/tasks.c **** 				initialisation required.  We will not recover if this call
1094:Source/tasks.c **** 				fails, but we will report the failure. */
1095:Source/tasks.c **** 				prvInitialiseTaskLists();
 407              		.loc 1 1095 0
 408 002c FFF7FEFF 		bl	prvInitialiseTaskLists
 409 0030 0DE0     		b	.L22
 410              	.L21:
1096:Source/tasks.c **** 			}
1097:Source/tasks.c **** 			else
1098:Source/tasks.c **** 			{
1099:Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1100:Source/tasks.c **** 			}
1101:Source/tasks.c **** 		}
1102:Source/tasks.c **** 		else
1103:Source/tasks.c **** 		{
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 28


1104:Source/tasks.c **** 			/* If the scheduler is not already running, make this task the
1105:Source/tasks.c **** 			current task if it is the highest priority task to be created
1106:Source/tasks.c **** 			so far. */
1107:Source/tasks.c **** 			if( xSchedulerRunning == pdFALSE )
 411              		.loc 1 1107 0
 412 0032 234B     		ldr	r3, .L25+8
 413 0034 1B68     		ldr	r3, [r3]
 414 0036 002B     		cmp	r3, #0
 415 0038 09D1     		bne	.L22
1108:Source/tasks.c **** 			{
1109:Source/tasks.c **** 				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 416              		.loc 1 1109 0
 417 003a 204B     		ldr	r3, .L25+4
 418 003c 1B68     		ldr	r3, [r3]
 419 003e DA6A     		ldr	r2, [r3, #44]
 420 0040 7B68     		ldr	r3, [r7, #4]
 421 0042 DB6A     		ldr	r3, [r3, #44]
 422 0044 9A42     		cmp	r2, r3
 423 0046 02D8     		bhi	.L22
1110:Source/tasks.c **** 				{
1111:Source/tasks.c **** 					pxCurrentTCB = pxNewTCB;
 424              		.loc 1 1111 0
 425 0048 1C4A     		ldr	r2, .L25+4
 426 004a 7B68     		ldr	r3, [r7, #4]
 427 004c 1360     		str	r3, [r2]
 428              	.L22:
1112:Source/tasks.c **** 				}
1113:Source/tasks.c **** 				else
1114:Source/tasks.c **** 				{
1115:Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1116:Source/tasks.c **** 				}
1117:Source/tasks.c **** 			}
1118:Source/tasks.c **** 			else
1119:Source/tasks.c **** 			{
1120:Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1121:Source/tasks.c **** 			}
1122:Source/tasks.c **** 		}
1123:Source/tasks.c **** 
1124:Source/tasks.c **** 		uxTaskNumber++;
 429              		.loc 1 1124 0
 430 004e 1D4B     		ldr	r3, .L25+12
 431 0050 1B68     		ldr	r3, [r3]
 432 0052 0133     		adds	r3, r3, #1
 433 0054 1B4A     		ldr	r2, .L25+12
 434 0056 1360     		str	r3, [r2]
1125:Source/tasks.c **** 
1126:Source/tasks.c **** 		#if ( configUSE_TRACE_FACILITY == 1 )
1127:Source/tasks.c **** 		{
1128:Source/tasks.c **** 			/* Add a counter into the TCB for tracing only. */
1129:Source/tasks.c **** 			pxNewTCB->uxTCBNumber = uxTaskNumber;
1130:Source/tasks.c **** 		}
1131:Source/tasks.c **** 		#endif /* configUSE_TRACE_FACILITY */
1132:Source/tasks.c **** 		traceTASK_CREATE( pxNewTCB );
1133:Source/tasks.c **** 
1134:Source/tasks.c **** 		prvAddTaskToReadyList( pxNewTCB );
 435              		.loc 1 1134 0
 436 0058 7B68     		ldr	r3, [r7, #4]
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 29


 437 005a DB6A     		ldr	r3, [r3, #44]
 438 005c 0122     		movs	r2, #1
 439 005e 9A40     		lsls	r2, r2, r3
 440 0060 194B     		ldr	r3, .L25+16
 441 0062 1B68     		ldr	r3, [r3]
 442 0064 1343     		orrs	r3, r3, r2
 443 0066 184A     		ldr	r2, .L25+16
 444 0068 1360     		str	r3, [r2]
 445 006a 7B68     		ldr	r3, [r7, #4]
 446 006c DA6A     		ldr	r2, [r3, #44]
 447 006e 1346     		mov	r3, r2
 448 0070 9B00     		lsls	r3, r3, #2
 449 0072 1344     		add	r3, r3, r2
 450 0074 9B00     		lsls	r3, r3, #2
 451 0076 154A     		ldr	r2, .L25+20
 452 0078 1A44     		add	r2, r2, r3
 453 007a 7B68     		ldr	r3, [r7, #4]
 454 007c 0433     		adds	r3, r3, #4
 455 007e 1946     		mov	r1, r3
 456 0080 1046     		mov	r0, r2
 457 0082 FFF7FEFF 		bl	vListInsertEnd
1135:Source/tasks.c **** 
1136:Source/tasks.c **** 		portSETUP_TCB( pxNewTCB );
1137:Source/tasks.c **** 	}
1138:Source/tasks.c **** 	taskEXIT_CRITICAL();
 458              		.loc 1 1138 0
 459 0086 FFF7FEFF 		bl	vPortExitCritical
1139:Source/tasks.c **** 
1140:Source/tasks.c **** 	if( xSchedulerRunning != pdFALSE )
 460              		.loc 1 1140 0
 461 008a 0D4B     		ldr	r3, .L25+8
 462 008c 1B68     		ldr	r3, [r3]
 463 008e 002B     		cmp	r3, #0
 464 0090 0ED0     		beq	.L24
1141:Source/tasks.c **** 	{
1142:Source/tasks.c **** 		/* If the created task is of a higher priority than the current task
1143:Source/tasks.c **** 		then it should run now. */
1144:Source/tasks.c **** 		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 465              		.loc 1 1144 0
 466 0092 0A4B     		ldr	r3, .L25+4
 467 0094 1B68     		ldr	r3, [r3]
 468 0096 DA6A     		ldr	r2, [r3, #44]
 469 0098 7B68     		ldr	r3, [r7, #4]
 470 009a DB6A     		ldr	r3, [r3, #44]
 471 009c 9A42     		cmp	r2, r3
 472 009e 07D2     		bcs	.L24
1145:Source/tasks.c **** 		{
1146:Source/tasks.c **** 			taskYIELD_IF_USING_PREEMPTION();
 473              		.loc 1 1146 0
 474 00a0 0B4B     		ldr	r3, .L25+24
 475 00a2 4FF08052 		mov	r2, #268435456
 476 00a6 1A60     		str	r2, [r3]
 477              		.syntax unified
 478              	@ 1146 "Source\tasks.c" 1
 479 00a8 BFF34F8F 		dsb
 480              	@ 0 "" 2
 481              	@ 1146 "Source\tasks.c" 1
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 30


 482 00ac BFF36F8F 		isb
 483              	@ 0 "" 2
 484              		.thumb
 485              		.syntax unified
 486              	.L24:
1147:Source/tasks.c **** 		}
1148:Source/tasks.c **** 		else
1149:Source/tasks.c **** 		{
1150:Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1151:Source/tasks.c **** 		}
1152:Source/tasks.c **** 	}
1153:Source/tasks.c **** 	else
1154:Source/tasks.c **** 	{
1155:Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
1156:Source/tasks.c **** 	}
1157:Source/tasks.c **** }
 487              		.loc 1 1157 0
 488 00b0 00BF     		nop
 489 00b2 0837     		adds	r7, r7, #8
 490              		.cfi_def_cfa_offset 8
 491 00b4 BD46     		mov	sp, r7
 492              		.cfi_def_cfa_register 13
 493              		@ sp needed
 494 00b6 80BD     		pop	{r7, pc}
 495              	.L26:
 496              		.align	2
 497              	.L25:
 498 00b8 D8000000 		.word	uxCurrentNumberOfTasks
 499 00bc 00000000 		.word	pxCurrentTCB
 500 00c0 E4000000 		.word	xSchedulerRunning
 501 00c4 F4000000 		.word	uxTaskNumber
 502 00c8 E0000000 		.word	uxTopReadyPriority
 503 00cc 04000000 		.word	pxReadyTasksLists
 504 00d0 04ED00E0 		.word	-536810236
 505              		.cfi_endproc
 506              	.LFE70:
 507              		.size	prvAddNewTaskToReadyList, .-prvAddNewTaskToReadyList
 508              		.section	.text.vTaskDelete,"ax",%progbits
 509              		.align	2
 510              		.global	vTaskDelete
 511              		.thumb
 512              		.thumb_func
 513              		.type	vTaskDelete, %function
 514              	vTaskDelete:
 515              	.LFB71:
1158:Source/tasks.c **** /*-----------------------------------------------------------*/
1159:Source/tasks.c **** 
1160:Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
1161:Source/tasks.c **** 
1162:Source/tasks.c **** 	void vTaskDelete( TaskHandle_t xTaskToDelete )
1163:Source/tasks.c **** 	{
 516              		.loc 1 1163 0
 517              		.cfi_startproc
 518              		@ args = 0, pretend = 0, frame = 16
 519              		@ frame_needed = 1, uses_anonymous_args = 0
 520 0000 80B5     		push	{r7, lr}
 521              		.cfi_def_cfa_offset 8
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 31


 522              		.cfi_offset 7, -8
 523              		.cfi_offset 14, -4
 524 0002 84B0     		sub	sp, sp, #16
 525              		.cfi_def_cfa_offset 24
 526 0004 00AF     		add	r7, sp, #0
 527              		.cfi_def_cfa_register 7
 528 0006 7860     		str	r0, [r7, #4]
1164:Source/tasks.c **** 	TCB_t *pxTCB;
1165:Source/tasks.c **** 
1166:Source/tasks.c **** 		taskENTER_CRITICAL();
 529              		.loc 1 1166 0
 530 0008 FFF7FEFF 		bl	vPortEnterCritical
1167:Source/tasks.c **** 		{
1168:Source/tasks.c **** 			/* If null is passed in here then it is the calling task that is
1169:Source/tasks.c **** 			being deleted. */
1170:Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 531              		.loc 1 1170 0
 532 000c 7B68     		ldr	r3, [r7, #4]
 533 000e 002B     		cmp	r3, #0
 534 0010 02D1     		bne	.L28
 535              		.loc 1 1170 0 is_stmt 0 discriminator 1
 536 0012 314B     		ldr	r3, .L37
 537 0014 1B68     		ldr	r3, [r3]
 538 0016 00E0     		b	.L29
 539              	.L28:
 540              		.loc 1 1170 0 discriminator 2
 541 0018 7B68     		ldr	r3, [r7, #4]
 542              	.L29:
 543              		.loc 1 1170 0 discriminator 4
 544 001a FB60     		str	r3, [r7, #12]
1171:Source/tasks.c **** 
1172:Source/tasks.c **** 			/* Remove task from the ready/delayed list. */
1173:Source/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 545              		.loc 1 1173 0 is_stmt 1 discriminator 4
 546 001c FB68     		ldr	r3, [r7, #12]
 547 001e 0433     		adds	r3, r3, #4
 548 0020 1846     		mov	r0, r3
 549 0022 FFF7FEFF 		bl	uxListRemove
 550 0026 0346     		mov	r3, r0
 551 0028 002B     		cmp	r3, #0
 552 002a 15D1     		bne	.L30
1174:Source/tasks.c **** 			{
1175:Source/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 553              		.loc 1 1175 0
 554 002c FB68     		ldr	r3, [r7, #12]
 555 002e DA6A     		ldr	r2, [r3, #44]
 556 0030 2A49     		ldr	r1, .L37+4
 557 0032 1346     		mov	r3, r2
 558 0034 9B00     		lsls	r3, r3, #2
 559 0036 1344     		add	r3, r3, r2
 560 0038 9B00     		lsls	r3, r3, #2
 561 003a 0B44     		add	r3, r3, r1
 562 003c 1B68     		ldr	r3, [r3]
 563 003e 002B     		cmp	r3, #0
 564 0040 0AD1     		bne	.L30
 565              		.loc 1 1175 0 is_stmt 0 discriminator 1
 566 0042 FB68     		ldr	r3, [r7, #12]
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 32


 567 0044 DB6A     		ldr	r3, [r3, #44]
 568 0046 0122     		movs	r2, #1
 569 0048 02FA03F3 		lsl	r3, r2, r3
 570 004c DA43     		mvns	r2, r3
 571 004e 244B     		ldr	r3, .L37+8
 572 0050 1B68     		ldr	r3, [r3]
 573 0052 1340     		ands	r3, r3, r2
 574 0054 224A     		ldr	r2, .L37+8
 575 0056 1360     		str	r3, [r2]
 576              	.L30:
1176:Source/tasks.c **** 			}
1177:Source/tasks.c **** 			else
1178:Source/tasks.c **** 			{
1179:Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1180:Source/tasks.c **** 			}
1181:Source/tasks.c **** 
1182:Source/tasks.c **** 			/* Is the task waiting on an event also? */
1183:Source/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 577              		.loc 1 1183 0 is_stmt 1
 578 0058 FB68     		ldr	r3, [r7, #12]
 579 005a 9B6A     		ldr	r3, [r3, #40]
 580 005c 002B     		cmp	r3, #0
 581 005e 04D0     		beq	.L32
1184:Source/tasks.c **** 			{
1185:Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 582              		.loc 1 1185 0
 583 0060 FB68     		ldr	r3, [r7, #12]
 584 0062 1833     		adds	r3, r3, #24
 585 0064 1846     		mov	r0, r3
 586 0066 FFF7FEFF 		bl	uxListRemove
 587              	.L32:
1186:Source/tasks.c **** 			}
1187:Source/tasks.c **** 			else
1188:Source/tasks.c **** 			{
1189:Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1190:Source/tasks.c **** 			}
1191:Source/tasks.c **** 
1192:Source/tasks.c **** 			/* Increment the uxTaskNumber also so kernel aware debuggers can
1193:Source/tasks.c **** 			detect that the task lists need re-generating.  This is done before
1194:Source/tasks.c **** 			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
1195:Source/tasks.c **** 			not return. */
1196:Source/tasks.c **** 			uxTaskNumber++;
 588              		.loc 1 1196 0
 589 006a 1E4B     		ldr	r3, .L37+12
 590 006c 1B68     		ldr	r3, [r3]
 591 006e 0133     		adds	r3, r3, #1
 592 0070 1C4A     		ldr	r2, .L37+12
 593 0072 1360     		str	r3, [r2]
1197:Source/tasks.c **** 
1198:Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
 594              		.loc 1 1198 0
 595 0074 184B     		ldr	r3, .L37
 596 0076 1B68     		ldr	r3, [r3]
 597 0078 FA68     		ldr	r2, [r7, #12]
 598 007a 9A42     		cmp	r2, r3
 599 007c 0BD1     		bne	.L33
1199:Source/tasks.c **** 			{
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 33


1200:Source/tasks.c **** 				/* A task is deleting itself.  This cannot complete within the
1201:Source/tasks.c **** 				task itself, as a context switch to another task is required.
1202:Source/tasks.c **** 				Place the task in the termination list.  The idle task will
1203:Source/tasks.c **** 				check the termination list and free up any memory allocated by
1204:Source/tasks.c **** 				the scheduler for the TCB and stack of the deleted task. */
1205:Source/tasks.c **** 				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 600              		.loc 1 1205 0
 601 007e FB68     		ldr	r3, [r7, #12]
 602 0080 0433     		adds	r3, r3, #4
 603 0082 1946     		mov	r1, r3
 604 0084 1848     		ldr	r0, .L37+16
 605 0086 FFF7FEFF 		bl	vListInsertEnd
1206:Source/tasks.c **** 
1207:Source/tasks.c **** 				/* Increment the ucTasksDeleted variable so the idle task knows
1208:Source/tasks.c **** 				there is a task that has been deleted and that it should therefore
1209:Source/tasks.c **** 				check the xTasksWaitingTermination list. */
1210:Source/tasks.c **** 				++uxDeletedTasksWaitingCleanUp;
 606              		.loc 1 1210 0
 607 008a 184B     		ldr	r3, .L37+20
 608 008c 1B68     		ldr	r3, [r3]
 609 008e 0133     		adds	r3, r3, #1
 610 0090 164A     		ldr	r2, .L37+20
 611 0092 1360     		str	r3, [r2]
 612 0094 09E0     		b	.L34
 613              	.L33:
1211:Source/tasks.c **** 
1212:Source/tasks.c **** 				/* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
1213:Source/tasks.c **** 				portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
1214:Source/tasks.c **** 				traceTASK_DELETE( pxTCB );
1215:Source/tasks.c **** 
1216:Source/tasks.c **** 				/* The pre-delete hook is primarily for the Windows simulator,
1217:Source/tasks.c **** 				in which Windows specific clean up operations are performed,
1218:Source/tasks.c **** 				after which it is not possible to yield away from this task -
1219:Source/tasks.c **** 				hence xYieldPending is used to latch that a context switch is
1220:Source/tasks.c **** 				required. */
1221:Source/tasks.c **** 				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
1222:Source/tasks.c **** 			}
1223:Source/tasks.c **** 			else
1224:Source/tasks.c **** 			{
1225:Source/tasks.c **** 				--uxCurrentNumberOfTasks;
 614              		.loc 1 1225 0
 615 0096 164B     		ldr	r3, .L37+24
 616 0098 1B68     		ldr	r3, [r3]
 617 009a 013B     		subs	r3, r3, #1
 618 009c 144A     		ldr	r2, .L37+24
 619 009e 1360     		str	r3, [r2]
1226:Source/tasks.c **** 				traceTASK_DELETE( pxTCB );
1227:Source/tasks.c **** 				prvDeleteTCB( pxTCB );
 620              		.loc 1 1227 0
 621 00a0 F868     		ldr	r0, [r7, #12]
 622 00a2 FFF7FEFF 		bl	prvDeleteTCB
1228:Source/tasks.c **** 
1229:Source/tasks.c **** 				/* Reset the next expected unblock time in case it referred to
1230:Source/tasks.c **** 				the task that has just been deleted. */
1231:Source/tasks.c **** 				prvResetNextTaskUnblockTime();
 623              		.loc 1 1231 0
 624 00a6 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 34


 625              	.L34:
1232:Source/tasks.c **** 			}
1233:Source/tasks.c **** 		}
1234:Source/tasks.c **** 		taskEXIT_CRITICAL();
 626              		.loc 1 1234 0
 627 00aa FFF7FEFF 		bl	vPortExitCritical
1235:Source/tasks.c **** 
1236:Source/tasks.c **** 		/* Force a reschedule if it is the currently running task that has just
1237:Source/tasks.c **** 		been deleted. */
1238:Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
 628              		.loc 1 1238 0
 629 00ae 114B     		ldr	r3, .L37+28
 630 00b0 1B68     		ldr	r3, [r3]
 631 00b2 002B     		cmp	r3, #0
 632 00b4 0CD0     		beq	.L36
1239:Source/tasks.c **** 		{
1240:Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
 633              		.loc 1 1240 0
 634 00b6 084B     		ldr	r3, .L37
 635 00b8 1B68     		ldr	r3, [r3]
 636 00ba FA68     		ldr	r2, [r7, #12]
 637 00bc 9A42     		cmp	r2, r3
 638 00be 07D1     		bne	.L36
1241:Source/tasks.c **** 			{
1242:Source/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
1243:Source/tasks.c **** 				portYIELD_WITHIN_API();
 639              		.loc 1 1243 0
 640 00c0 0D4B     		ldr	r3, .L37+32
 641 00c2 4FF08052 		mov	r2, #268435456
 642 00c6 1A60     		str	r2, [r3]
 643              		.syntax unified
 644              	@ 1243 "Source\tasks.c" 1
 645 00c8 BFF34F8F 		dsb
 646              	@ 0 "" 2
 647              	@ 1243 "Source\tasks.c" 1
 648 00cc BFF36F8F 		isb
 649              	@ 0 "" 2
 650              		.thumb
 651              		.syntax unified
 652              	.L36:
1244:Source/tasks.c **** 			}
1245:Source/tasks.c **** 			else
1246:Source/tasks.c **** 			{
1247:Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1248:Source/tasks.c **** 			}
1249:Source/tasks.c **** 		}
1250:Source/tasks.c **** 	}
 653              		.loc 1 1250 0
 654 00d0 00BF     		nop
 655 00d2 1037     		adds	r7, r7, #16
 656              		.cfi_def_cfa_offset 8
 657 00d4 BD46     		mov	sp, r7
 658              		.cfi_def_cfa_register 13
 659              		@ sp needed
 660 00d6 80BD     		pop	{r7, pc}
 661              	.L38:
 662              		.align	2
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 35


 663              	.L37:
 664 00d8 00000000 		.word	pxCurrentTCB
 665 00dc 04000000 		.word	pxReadyTasksLists
 666 00e0 E0000000 		.word	uxTopReadyPriority
 667 00e4 F4000000 		.word	uxTaskNumber
 668 00e8 AC000000 		.word	xTasksWaitingTermination
 669 00ec C0000000 		.word	uxDeletedTasksWaitingCleanUp
 670 00f0 D8000000 		.word	uxCurrentNumberOfTasks
 671 00f4 E4000000 		.word	xSchedulerRunning
 672 00f8 04ED00E0 		.word	-536810236
 673              		.cfi_endproc
 674              	.LFE71:
 675              		.size	vTaskDelete, .-vTaskDelete
 676              		.section	.text.vTaskDelayUntil,"ax",%progbits
 677              		.align	2
 678              		.global	vTaskDelayUntil
 679              		.thumb
 680              		.thumb_func
 681              		.type	vTaskDelayUntil, %function
 682              	vTaskDelayUntil:
 683              	.LFB72:
1251:Source/tasks.c **** 
1252:Source/tasks.c **** #endif /* INCLUDE_vTaskDelete */
1253:Source/tasks.c **** /*-----------------------------------------------------------*/
1254:Source/tasks.c **** 
1255:Source/tasks.c **** #if ( INCLUDE_vTaskDelayUntil == 1 )
1256:Source/tasks.c **** 
1257:Source/tasks.c **** 	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
1258:Source/tasks.c **** 	{
 684              		.loc 1 1258 0
 685              		.cfi_startproc
 686              		@ args = 0, pretend = 0, frame = 24
 687              		@ frame_needed = 1, uses_anonymous_args = 0
 688 0000 80B5     		push	{r7, lr}
 689              		.cfi_def_cfa_offset 8
 690              		.cfi_offset 7, -8
 691              		.cfi_offset 14, -4
 692 0002 86B0     		sub	sp, sp, #24
 693              		.cfi_def_cfa_offset 32
 694 0004 00AF     		add	r7, sp, #0
 695              		.cfi_def_cfa_register 7
 696 0006 7860     		str	r0, [r7, #4]
 697 0008 3960     		str	r1, [r7]
1259:Source/tasks.c **** 	TickType_t xTimeToWake;
1260:Source/tasks.c **** 	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 698              		.loc 1 1260 0
 699 000a 0023     		movs	r3, #0
 700 000c 7B61     		str	r3, [r7, #20]
1261:Source/tasks.c **** 
1262:Source/tasks.c **** 		configASSERT( pxPreviousWakeTime );
1263:Source/tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
1264:Source/tasks.c **** 		configASSERT( uxSchedulerSuspended == 0 );
1265:Source/tasks.c **** 
1266:Source/tasks.c **** 		vTaskSuspendAll();
 701              		.loc 1 1266 0
 702 000e FFF7FEFF 		bl	vTaskSuspendAll
 703              	.LBB28:
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 36


1267:Source/tasks.c **** 		{
1268:Source/tasks.c **** 			/* Minor optimisation.  The tick count cannot change in this
1269:Source/tasks.c **** 			block. */
1270:Source/tasks.c **** 			const TickType_t xConstTickCount = xTickCount;
 704              		.loc 1 1270 0
 705 0012 214B     		ldr	r3, .L46
 706 0014 1B68     		ldr	r3, [r3]
 707 0016 3B61     		str	r3, [r7, #16]
1271:Source/tasks.c **** 
1272:Source/tasks.c **** 			/* Generate the tick time at which the task wants to wake. */
1273:Source/tasks.c **** 			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 708              		.loc 1 1273 0
 709 0018 7B68     		ldr	r3, [r7, #4]
 710 001a 1A68     		ldr	r2, [r3]
 711 001c 3B68     		ldr	r3, [r7]
 712 001e 1344     		add	r3, r3, r2
 713 0020 FB60     		str	r3, [r7, #12]
1274:Source/tasks.c **** 
1275:Source/tasks.c **** 			if( xConstTickCount < *pxPreviousWakeTime )
 714              		.loc 1 1275 0
 715 0022 7B68     		ldr	r3, [r7, #4]
 716 0024 1A68     		ldr	r2, [r3]
 717 0026 3B69     		ldr	r3, [r7, #16]
 718 0028 9A42     		cmp	r2, r3
 719 002a 0BD9     		bls	.L40
1276:Source/tasks.c **** 			{
1277:Source/tasks.c **** 				/* The tick count has overflowed since this function was
1278:Source/tasks.c **** 				lasted called.  In this case the only time we should ever
1279:Source/tasks.c **** 				actually delay is if the wake time has also	overflowed,
1280:Source/tasks.c **** 				and the wake time is greater than the tick time.  When this
1281:Source/tasks.c **** 				is the case it is as if neither time had overflowed. */
1282:Source/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 720              		.loc 1 1282 0
 721 002c 7B68     		ldr	r3, [r7, #4]
 722 002e 1A68     		ldr	r2, [r3]
 723 0030 FB68     		ldr	r3, [r7, #12]
 724 0032 9A42     		cmp	r2, r3
 725 0034 11D9     		bls	.L41
 726              		.loc 1 1282 0 is_stmt 0 discriminator 1
 727 0036 FA68     		ldr	r2, [r7, #12]
 728 0038 3B69     		ldr	r3, [r7, #16]
 729 003a 9A42     		cmp	r2, r3
 730 003c 0DD9     		bls	.L41
1283:Source/tasks.c **** 				{
1284:Source/tasks.c **** 					xShouldDelay = pdTRUE;
 731              		.loc 1 1284 0 is_stmt 1
 732 003e 0123     		movs	r3, #1
 733 0040 7B61     		str	r3, [r7, #20]
 734 0042 0AE0     		b	.L41
 735              	.L40:
1285:Source/tasks.c **** 				}
1286:Source/tasks.c **** 				else
1287:Source/tasks.c **** 				{
1288:Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1289:Source/tasks.c **** 				}
1290:Source/tasks.c **** 			}
1291:Source/tasks.c **** 			else
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 37


1292:Source/tasks.c **** 			{
1293:Source/tasks.c **** 				/* The tick time has not overflowed.  In this case we will
1294:Source/tasks.c **** 				delay if either the wake time has overflowed, and/or the
1295:Source/tasks.c **** 				tick time is less than the wake time. */
1296:Source/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 736              		.loc 1 1296 0
 737 0044 7B68     		ldr	r3, [r7, #4]
 738 0046 1A68     		ldr	r2, [r3]
 739 0048 FB68     		ldr	r3, [r7, #12]
 740 004a 9A42     		cmp	r2, r3
 741 004c 03D8     		bhi	.L42
 742              		.loc 1 1296 0 is_stmt 0 discriminator 1
 743 004e FA68     		ldr	r2, [r7, #12]
 744 0050 3B69     		ldr	r3, [r7, #16]
 745 0052 9A42     		cmp	r2, r3
 746 0054 01D9     		bls	.L41
 747              	.L42:
1297:Source/tasks.c **** 				{
1298:Source/tasks.c **** 					xShouldDelay = pdTRUE;
 748              		.loc 1 1298 0 is_stmt 1
 749 0056 0123     		movs	r3, #1
 750 0058 7B61     		str	r3, [r7, #20]
 751              	.L41:
1299:Source/tasks.c **** 				}
1300:Source/tasks.c **** 				else
1301:Source/tasks.c **** 				{
1302:Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1303:Source/tasks.c **** 				}
1304:Source/tasks.c **** 			}
1305:Source/tasks.c **** 
1306:Source/tasks.c **** 			/* Update the wake time ready for the next call. */
1307:Source/tasks.c **** 			*pxPreviousWakeTime = xTimeToWake;
 752              		.loc 1 1307 0
 753 005a 7B68     		ldr	r3, [r7, #4]
 754 005c FA68     		ldr	r2, [r7, #12]
 755 005e 1A60     		str	r2, [r3]
1308:Source/tasks.c **** 
1309:Source/tasks.c **** 			if( xShouldDelay != pdFALSE )
 756              		.loc 1 1309 0
 757 0060 7B69     		ldr	r3, [r7, #20]
 758 0062 002B     		cmp	r3, #0
 759 0064 06D0     		beq	.L43
1310:Source/tasks.c **** 			{
1311:Source/tasks.c **** 				traceTASK_DELAY_UNTIL( xTimeToWake );
1312:Source/tasks.c **** 
1313:Source/tasks.c **** 				/* prvAddCurrentTaskToDelayedList() needs the block time, not
1314:Source/tasks.c **** 				the time to wake, so subtract the current tick count. */
1315:Source/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 760              		.loc 1 1315 0
 761 0066 FA68     		ldr	r2, [r7, #12]
 762 0068 3B69     		ldr	r3, [r7, #16]
 763 006a D31A     		subs	r3, r2, r3
 764 006c 0021     		movs	r1, #0
 765 006e 1846     		mov	r0, r3
 766 0070 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 767              	.L43:
 768              	.LBE28:
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 38


1316:Source/tasks.c **** 			}
1317:Source/tasks.c **** 			else
1318:Source/tasks.c **** 			{
1319:Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1320:Source/tasks.c **** 			}
1321:Source/tasks.c **** 		}
1322:Source/tasks.c **** 		xAlreadyYielded = xTaskResumeAll();
 769              		.loc 1 1322 0
 770 0074 FFF7FEFF 		bl	xTaskResumeAll
 771 0078 B860     		str	r0, [r7, #8]
1323:Source/tasks.c **** 
1324:Source/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1325:Source/tasks.c **** 		have put ourselves to sleep. */
1326:Source/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
 772              		.loc 1 1326 0
 773 007a BB68     		ldr	r3, [r7, #8]
 774 007c 002B     		cmp	r3, #0
 775 007e 07D1     		bne	.L45
1327:Source/tasks.c **** 		{
1328:Source/tasks.c **** 			portYIELD_WITHIN_API();
 776              		.loc 1 1328 0
 777 0080 064B     		ldr	r3, .L46+4
 778 0082 4FF08052 		mov	r2, #268435456
 779 0086 1A60     		str	r2, [r3]
 780              		.syntax unified
 781              	@ 1328 "Source\tasks.c" 1
 782 0088 BFF34F8F 		dsb
 783              	@ 0 "" 2
 784              	@ 1328 "Source\tasks.c" 1
 785 008c BFF36F8F 		isb
 786              	@ 0 "" 2
 787              		.thumb
 788              		.syntax unified
 789              	.L45:
1329:Source/tasks.c **** 		}
1330:Source/tasks.c **** 		else
1331:Source/tasks.c **** 		{
1332:Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1333:Source/tasks.c **** 		}
1334:Source/tasks.c **** 	}
 790              		.loc 1 1334 0
 791 0090 00BF     		nop
 792 0092 1837     		adds	r7, r7, #24
 793              		.cfi_def_cfa_offset 8
 794 0094 BD46     		mov	sp, r7
 795              		.cfi_def_cfa_register 13
 796              		@ sp needed
 797 0096 80BD     		pop	{r7, pc}
 798              	.L47:
 799              		.align	2
 800              	.L46:
 801 0098 DC000000 		.word	xTickCount
 802 009c 04ED00E0 		.word	-536810236
 803              		.cfi_endproc
 804              	.LFE72:
 805              		.size	vTaskDelayUntil, .-vTaskDelayUntil
 806              		.section	.text.vTaskDelay,"ax",%progbits
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 39


 807              		.align	2
 808              		.global	vTaskDelay
 809              		.thumb
 810              		.thumb_func
 811              		.type	vTaskDelay, %function
 812              	vTaskDelay:
 813              	.LFB73:
1335:Source/tasks.c **** 
1336:Source/tasks.c **** #endif /* INCLUDE_vTaskDelayUntil */
1337:Source/tasks.c **** /*-----------------------------------------------------------*/
1338:Source/tasks.c **** 
1339:Source/tasks.c **** #if ( INCLUDE_vTaskDelay == 1 )
1340:Source/tasks.c **** 
1341:Source/tasks.c **** 	void vTaskDelay( const TickType_t xTicksToDelay )
1342:Source/tasks.c **** 	{
 814              		.loc 1 1342 0
 815              		.cfi_startproc
 816              		@ args = 0, pretend = 0, frame = 16
 817              		@ frame_needed = 1, uses_anonymous_args = 0
 818 0000 80B5     		push	{r7, lr}
 819              		.cfi_def_cfa_offset 8
 820              		.cfi_offset 7, -8
 821              		.cfi_offset 14, -4
 822 0002 84B0     		sub	sp, sp, #16
 823              		.cfi_def_cfa_offset 24
 824 0004 00AF     		add	r7, sp, #0
 825              		.cfi_def_cfa_register 7
 826 0006 7860     		str	r0, [r7, #4]
1343:Source/tasks.c **** 	BaseType_t xAlreadyYielded = pdFALSE;
 827              		.loc 1 1343 0
 828 0008 0023     		movs	r3, #0
 829 000a FB60     		str	r3, [r7, #12]
1344:Source/tasks.c **** 
1345:Source/tasks.c **** 		/* A delay time of zero just forces a reschedule. */
1346:Source/tasks.c **** 		if( xTicksToDelay > ( TickType_t ) 0U )
 830              		.loc 1 1346 0
 831 000c 7B68     		ldr	r3, [r7, #4]
 832 000e 002B     		cmp	r3, #0
 833 0010 08D0     		beq	.L49
1347:Source/tasks.c **** 		{
1348:Source/tasks.c **** 			configASSERT( uxSchedulerSuspended == 0 );
1349:Source/tasks.c **** 			vTaskSuspendAll();
 834              		.loc 1 1349 0
 835 0012 FFF7FEFF 		bl	vTaskSuspendAll
1350:Source/tasks.c **** 			{
1351:Source/tasks.c **** 				traceTASK_DELAY();
1352:Source/tasks.c **** 
1353:Source/tasks.c **** 				/* A task that is removed from the event list while the
1354:Source/tasks.c **** 				scheduler is suspended will not get placed in the ready
1355:Source/tasks.c **** 				list or removed from the blocked list until the scheduler
1356:Source/tasks.c **** 				is resumed.
1357:Source/tasks.c **** 
1358:Source/tasks.c **** 				This task cannot be in an event list as it is the currently
1359:Source/tasks.c **** 				executing task. */
1360:Source/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 836              		.loc 1 1360 0
 837 0016 0021     		movs	r1, #0
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 40


 838 0018 7868     		ldr	r0, [r7, #4]
 839 001a FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
1361:Source/tasks.c **** 			}
1362:Source/tasks.c **** 			xAlreadyYielded = xTaskResumeAll();
 840              		.loc 1 1362 0
 841 001e FFF7FEFF 		bl	xTaskResumeAll
 842 0022 F860     		str	r0, [r7, #12]
 843              	.L49:
1363:Source/tasks.c **** 		}
1364:Source/tasks.c **** 		else
1365:Source/tasks.c **** 		{
1366:Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1367:Source/tasks.c **** 		}
1368:Source/tasks.c **** 
1369:Source/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1370:Source/tasks.c **** 		have put ourselves to sleep. */
1371:Source/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
 844              		.loc 1 1371 0
 845 0024 FB68     		ldr	r3, [r7, #12]
 846 0026 002B     		cmp	r3, #0
 847 0028 07D1     		bne	.L51
1372:Source/tasks.c **** 		{
1373:Source/tasks.c **** 			portYIELD_WITHIN_API();
 848              		.loc 1 1373 0
 849 002a 064B     		ldr	r3, .L52
 850 002c 4FF08052 		mov	r2, #268435456
 851 0030 1A60     		str	r2, [r3]
 852              		.syntax unified
 853              	@ 1373 "Source\tasks.c" 1
 854 0032 BFF34F8F 		dsb
 855              	@ 0 "" 2
 856              	@ 1373 "Source\tasks.c" 1
 857 0036 BFF36F8F 		isb
 858              	@ 0 "" 2
 859              		.thumb
 860              		.syntax unified
 861              	.L51:
1374:Source/tasks.c **** 		}
1375:Source/tasks.c **** 		else
1376:Source/tasks.c **** 		{
1377:Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1378:Source/tasks.c **** 		}
1379:Source/tasks.c **** 	}
 862              		.loc 1 1379 0
 863 003a 00BF     		nop
 864 003c 1037     		adds	r7, r7, #16
 865              		.cfi_def_cfa_offset 8
 866 003e BD46     		mov	sp, r7
 867              		.cfi_def_cfa_register 13
 868              		@ sp needed
 869 0040 80BD     		pop	{r7, pc}
 870              	.L53:
 871 0042 00BF     		.align	2
 872              	.L52:
 873 0044 04ED00E0 		.word	-536810236
 874              		.cfi_endproc
 875              	.LFE73:
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 41


 876              		.size	vTaskDelay, .-vTaskDelay
 877              		.section	.text.eTaskGetState,"ax",%progbits
 878              		.align	2
 879              		.global	eTaskGetState
 880              		.thumb
 881              		.thumb_func
 882              		.type	eTaskGetState, %function
 883              	eTaskGetState:
 884              	.LFB74:
1380:Source/tasks.c **** 
1381:Source/tasks.c **** #endif /* INCLUDE_vTaskDelay */
1382:Source/tasks.c **** /*-----------------------------------------------------------*/
1383:Source/tasks.c **** 
1384:Source/tasks.c **** #if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDel
1385:Source/tasks.c **** 
1386:Source/tasks.c **** 	eTaskState eTaskGetState( TaskHandle_t xTask )
1387:Source/tasks.c **** 	{
 885              		.loc 1 1387 0
 886              		.cfi_startproc
 887              		@ args = 0, pretend = 0, frame = 32
 888              		@ frame_needed = 1, uses_anonymous_args = 0
 889 0000 80B5     		push	{r7, lr}
 890              		.cfi_def_cfa_offset 8
 891              		.cfi_offset 7, -8
 892              		.cfi_offset 14, -4
 893 0002 88B0     		sub	sp, sp, #32
 894              		.cfi_def_cfa_offset 40
 895 0004 00AF     		add	r7, sp, #0
 896              		.cfi_def_cfa_register 7
 897 0006 7860     		str	r0, [r7, #4]
1388:Source/tasks.c **** 	eTaskState eReturn;
1389:Source/tasks.c **** 	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
1390:Source/tasks.c **** 	const TCB_t * const pxTCB = xTask;
 898              		.loc 1 1390 0
 899 0008 7B68     		ldr	r3, [r7, #4]
 900 000a BB61     		str	r3, [r7, #24]
1391:Source/tasks.c **** 
1392:Source/tasks.c **** 		configASSERT( pxTCB );
1393:Source/tasks.c **** 
1394:Source/tasks.c **** 		if( pxTCB == pxCurrentTCB )
 901              		.loc 1 1394 0
 902 000c 234B     		ldr	r3, .L67
 903 000e 1B68     		ldr	r3, [r3]
 904 0010 BA69     		ldr	r2, [r7, #24]
 905 0012 9A42     		cmp	r2, r3
 906 0014 02D1     		bne	.L55
1395:Source/tasks.c **** 		{
1396:Source/tasks.c **** 			/* The task calling this function is querying its own state. */
1397:Source/tasks.c **** 			eReturn = eRunning;
 907              		.loc 1 1397 0
 908 0016 0023     		movs	r3, #0
 909 0018 FB77     		strb	r3, [r7, #31]
 910 001a 3AE0     		b	.L56
 911              	.L55:
1398:Source/tasks.c **** 		}
1399:Source/tasks.c **** 		else
1400:Source/tasks.c **** 		{
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 42


1401:Source/tasks.c **** 			taskENTER_CRITICAL();
 912              		.loc 1 1401 0
 913 001c FFF7FEFF 		bl	vPortEnterCritical
1402:Source/tasks.c **** 			{
1403:Source/tasks.c **** 				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 914              		.loc 1 1403 0
 915 0020 BB69     		ldr	r3, [r7, #24]
 916 0022 5B69     		ldr	r3, [r3, #20]
 917 0024 7B61     		str	r3, [r7, #20]
1404:Source/tasks.c **** 				pxDelayedList = pxDelayedTaskList;
 918              		.loc 1 1404 0
 919 0026 1E4B     		ldr	r3, .L67+4
 920 0028 1B68     		ldr	r3, [r3]
 921 002a 3B61     		str	r3, [r7, #16]
1405:Source/tasks.c **** 				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 922              		.loc 1 1405 0
 923 002c 1D4B     		ldr	r3, .L67+8
 924 002e 1B68     		ldr	r3, [r3]
 925 0030 FB60     		str	r3, [r7, #12]
1406:Source/tasks.c **** 			}
1407:Source/tasks.c **** 			taskEXIT_CRITICAL();
 926              		.loc 1 1407 0
 927 0032 FFF7FEFF 		bl	vPortExitCritical
1408:Source/tasks.c **** 
1409:Source/tasks.c **** 			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 928              		.loc 1 1409 0
 929 0036 7A69     		ldr	r2, [r7, #20]
 930 0038 3B69     		ldr	r3, [r7, #16]
 931 003a 9A42     		cmp	r2, r3
 932 003c 03D0     		beq	.L57
 933              		.loc 1 1409 0 is_stmt 0 discriminator 1
 934 003e 7A69     		ldr	r2, [r7, #20]
 935 0040 FB68     		ldr	r3, [r7, #12]
 936 0042 9A42     		cmp	r2, r3
 937 0044 02D1     		bne	.L58
 938              	.L57:
1410:Source/tasks.c **** 			{
1411:Source/tasks.c **** 				/* The task being queried is referenced from one of the Blocked
1412:Source/tasks.c **** 				lists. */
1413:Source/tasks.c **** 				eReturn = eBlocked;
 939              		.loc 1 1413 0 is_stmt 1
 940 0046 0223     		movs	r3, #2
 941 0048 FB77     		strb	r3, [r7, #31]
 942 004a 22E0     		b	.L56
 943              	.L58:
1414:Source/tasks.c **** 			}
1415:Source/tasks.c **** 
1416:Source/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
1417:Source/tasks.c **** 				else if( pxStateList == &xSuspendedTaskList )
 944              		.loc 1 1417 0
 945 004c 7B69     		ldr	r3, [r7, #20]
 946 004e 164A     		ldr	r2, .L67+12
 947 0050 9342     		cmp	r3, r2
 948 0052 12D1     		bne	.L59
1418:Source/tasks.c **** 				{
1419:Source/tasks.c **** 					/* The task being queried is referenced from the suspended
1420:Source/tasks.c **** 					list.  Is it genuinely suspended or is it blocked
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 43


1421:Source/tasks.c **** 					indefinitely? */
1422:Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 949              		.loc 1 1422 0
 950 0054 BB69     		ldr	r3, [r7, #24]
 951 0056 9B6A     		ldr	r3, [r3, #40]
 952 0058 002B     		cmp	r3, #0
 953 005a 0BD1     		bne	.L60
1423:Source/tasks.c **** 					{
1424:Source/tasks.c **** 						#if( configUSE_TASK_NOTIFICATIONS == 1 )
1425:Source/tasks.c **** 						{
1426:Source/tasks.c **** 							/* The task does not appear on the event list item of
1427:Source/tasks.c **** 							and of the RTOS objects, but could still be in the
1428:Source/tasks.c **** 							blocked state if it is waiting on its notification
1429:Source/tasks.c **** 							rather than waiting on an object. */
1430:Source/tasks.c **** 							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 954              		.loc 1 1430 0
 955 005c BB69     		ldr	r3, [r7, #24]
 956 005e 93F84C30 		ldrb	r3, [r3, #76]
 957 0062 DBB2     		uxtb	r3, r3
 958 0064 012B     		cmp	r3, #1
 959 0066 02D1     		bne	.L61
1431:Source/tasks.c **** 							{
1432:Source/tasks.c **** 								eReturn = eBlocked;
 960              		.loc 1 1432 0
 961 0068 0223     		movs	r3, #2
 962 006a FB77     		strb	r3, [r7, #31]
 963 006c 11E0     		b	.L56
 964              	.L61:
1433:Source/tasks.c **** 							}
1434:Source/tasks.c **** 							else
1435:Source/tasks.c **** 							{
1436:Source/tasks.c **** 								eReturn = eSuspended;
 965              		.loc 1 1436 0
 966 006e 0323     		movs	r3, #3
 967 0070 FB77     		strb	r3, [r7, #31]
 968 0072 0EE0     		b	.L56
 969              	.L60:
1437:Source/tasks.c **** 							}
1438:Source/tasks.c **** 						}
1439:Source/tasks.c **** 						#else
1440:Source/tasks.c **** 						{
1441:Source/tasks.c **** 							eReturn = eSuspended;
1442:Source/tasks.c **** 						}
1443:Source/tasks.c **** 						#endif
1444:Source/tasks.c **** 					}
1445:Source/tasks.c **** 					else
1446:Source/tasks.c **** 					{
1447:Source/tasks.c **** 						eReturn = eBlocked;
 970              		.loc 1 1447 0
 971 0074 0223     		movs	r3, #2
 972 0076 FB77     		strb	r3, [r7, #31]
 973 0078 0BE0     		b	.L56
 974              	.L59:
1448:Source/tasks.c **** 					}
1449:Source/tasks.c **** 				}
1450:Source/tasks.c **** 			#endif
1451:Source/tasks.c **** 
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 44


1452:Source/tasks.c **** 			#if ( INCLUDE_vTaskDelete == 1 )
1453:Source/tasks.c **** 				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 975              		.loc 1 1453 0
 976 007a 7B69     		ldr	r3, [r7, #20]
 977 007c 0B4A     		ldr	r2, .L67+16
 978 007e 9342     		cmp	r3, r2
 979 0080 02D0     		beq	.L64
 980              		.loc 1 1453 0 is_stmt 0 discriminator 1
 981 0082 7B69     		ldr	r3, [r7, #20]
 982 0084 002B     		cmp	r3, #0
 983 0086 02D1     		bne	.L65
 984              	.L64:
1454:Source/tasks.c **** 				{
1455:Source/tasks.c **** 					/* The task being queried is referenced from the deleted
1456:Source/tasks.c **** 					tasks list, or it is not referenced from any lists at
1457:Source/tasks.c **** 					all. */
1458:Source/tasks.c **** 					eReturn = eDeleted;
 985              		.loc 1 1458 0 is_stmt 1
 986 0088 0423     		movs	r3, #4
 987 008a FB77     		strb	r3, [r7, #31]
 988 008c 01E0     		b	.L56
 989              	.L65:
1459:Source/tasks.c **** 				}
1460:Source/tasks.c **** 			#endif
1461:Source/tasks.c **** 
1462:Source/tasks.c **** 			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
1463:Source/tasks.c **** 			{
1464:Source/tasks.c **** 				/* If the task is not in any other state, it must be in the
1465:Source/tasks.c **** 				Ready (including pending ready) state. */
1466:Source/tasks.c **** 				eReturn = eReady;
 990              		.loc 1 1466 0
 991 008e 0123     		movs	r3, #1
 992 0090 FB77     		strb	r3, [r7, #31]
 993              	.L56:
1467:Source/tasks.c **** 			}
1468:Source/tasks.c **** 		}
1469:Source/tasks.c **** 
1470:Source/tasks.c **** 		return eReturn;
 994              		.loc 1 1470 0
 995 0092 FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
1471:Source/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 996              		.loc 1 1471 0
 997 0094 1846     		mov	r0, r3
 998 0096 2037     		adds	r7, r7, #32
 999              		.cfi_def_cfa_offset 8
 1000 0098 BD46     		mov	sp, r7
 1001              		.cfi_def_cfa_register 13
 1002              		@ sp needed
 1003 009a 80BD     		pop	{r7, pc}
 1004              	.L68:
 1005              		.align	2
 1006              	.L67:
 1007 009c 00000000 		.word	pxCurrentTCB
 1008 00a0 90000000 		.word	pxDelayedTaskList
 1009 00a4 94000000 		.word	pxOverflowDelayedTaskList
 1010 00a8 C4000000 		.word	xSuspendedTaskList
 1011 00ac AC000000 		.word	xTasksWaitingTermination
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 45


 1012              		.cfi_endproc
 1013              	.LFE74:
 1014              		.size	eTaskGetState, .-eTaskGetState
 1015              		.section	.text.uxTaskPriorityGet,"ax",%progbits
 1016              		.align	2
 1017              		.global	uxTaskPriorityGet
 1018              		.thumb
 1019              		.thumb_func
 1020              		.type	uxTaskPriorityGet, %function
 1021              	uxTaskPriorityGet:
 1022              	.LFB75:
1472:Source/tasks.c **** 
1473:Source/tasks.c **** #endif /* INCLUDE_eTaskGetState */
1474:Source/tasks.c **** /*-----------------------------------------------------------*/
1475:Source/tasks.c **** 
1476:Source/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1477:Source/tasks.c **** 
1478:Source/tasks.c **** 	UBaseType_t uxTaskPriorityGet( const TaskHandle_t xTask )
1479:Source/tasks.c **** 	{
 1023              		.loc 1 1479 0
 1024              		.cfi_startproc
 1025              		@ args = 0, pretend = 0, frame = 16
 1026              		@ frame_needed = 1, uses_anonymous_args = 0
 1027 0000 80B5     		push	{r7, lr}
 1028              		.cfi_def_cfa_offset 8
 1029              		.cfi_offset 7, -8
 1030              		.cfi_offset 14, -4
 1031 0002 84B0     		sub	sp, sp, #16
 1032              		.cfi_def_cfa_offset 24
 1033 0004 00AF     		add	r7, sp, #0
 1034              		.cfi_def_cfa_register 7
 1035 0006 7860     		str	r0, [r7, #4]
1480:Source/tasks.c **** 	TCB_t const *pxTCB;
1481:Source/tasks.c **** 	UBaseType_t uxReturn;
1482:Source/tasks.c **** 
1483:Source/tasks.c **** 		taskENTER_CRITICAL();
 1036              		.loc 1 1483 0
 1037 0008 FFF7FEFF 		bl	vPortEnterCritical
1484:Source/tasks.c **** 		{
1485:Source/tasks.c **** 			/* If null is passed in here then it is the priority of the task
1486:Source/tasks.c **** 			that called uxTaskPriorityGet() that is being queried. */
1487:Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
 1038              		.loc 1 1487 0
 1039 000c 7B68     		ldr	r3, [r7, #4]
 1040 000e 002B     		cmp	r3, #0
 1041 0010 02D1     		bne	.L70
 1042              		.loc 1 1487 0 is_stmt 0 discriminator 1
 1043 0012 074B     		ldr	r3, .L73
 1044 0014 1B68     		ldr	r3, [r3]
 1045 0016 00E0     		b	.L71
 1046              	.L70:
 1047              		.loc 1 1487 0 discriminator 2
 1048 0018 7B68     		ldr	r3, [r7, #4]
 1049              	.L71:
 1050              		.loc 1 1487 0 discriminator 4
 1051 001a FB60     		str	r3, [r7, #12]
1488:Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 46


 1052              		.loc 1 1488 0 is_stmt 1 discriminator 4
 1053 001c FB68     		ldr	r3, [r7, #12]
 1054 001e DB6A     		ldr	r3, [r3, #44]
 1055 0020 BB60     		str	r3, [r7, #8]
1489:Source/tasks.c **** 		}
1490:Source/tasks.c **** 		taskEXIT_CRITICAL();
 1056              		.loc 1 1490 0 discriminator 4
 1057 0022 FFF7FEFF 		bl	vPortExitCritical
1491:Source/tasks.c **** 
1492:Source/tasks.c **** 		return uxReturn;
 1058              		.loc 1 1492 0 discriminator 4
 1059 0026 BB68     		ldr	r3, [r7, #8]
1493:Source/tasks.c **** 	}
 1060              		.loc 1 1493 0 discriminator 4
 1061 0028 1846     		mov	r0, r3
 1062 002a 1037     		adds	r7, r7, #16
 1063              		.cfi_def_cfa_offset 8
 1064 002c BD46     		mov	sp, r7
 1065              		.cfi_def_cfa_register 13
 1066              		@ sp needed
 1067 002e 80BD     		pop	{r7, pc}
 1068              	.L74:
 1069              		.align	2
 1070              	.L73:
 1071 0030 00000000 		.word	pxCurrentTCB
 1072              		.cfi_endproc
 1073              	.LFE75:
 1074              		.size	uxTaskPriorityGet, .-uxTaskPriorityGet
 1075              		.section	.text.uxTaskPriorityGetFromISR,"ax",%progbits
 1076              		.align	2
 1077              		.global	uxTaskPriorityGetFromISR
 1078              		.thumb
 1079              		.thumb_func
 1080              		.type	uxTaskPriorityGetFromISR, %function
 1081              	uxTaskPriorityGetFromISR:
 1082              	.LFB76:
1494:Source/tasks.c **** 
1495:Source/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1496:Source/tasks.c **** /*-----------------------------------------------------------*/
1497:Source/tasks.c **** 
1498:Source/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1499:Source/tasks.c **** 
1500:Source/tasks.c **** 	UBaseType_t uxTaskPriorityGetFromISR( const TaskHandle_t xTask )
1501:Source/tasks.c **** 	{
 1083              		.loc 1 1501 0
 1084              		.cfi_startproc
 1085              		@ args = 0, pretend = 0, frame = 32
 1086              		@ frame_needed = 1, uses_anonymous_args = 0
 1087              		@ link register save eliminated.
 1088 0000 80B4     		push	{r7}
 1089              		.cfi_def_cfa_offset 4
 1090              		.cfi_offset 7, -4
 1091 0002 89B0     		sub	sp, sp, #36
 1092              		.cfi_def_cfa_offset 40
 1093 0004 00AF     		add	r7, sp, #0
 1094              		.cfi_def_cfa_register 7
 1095 0006 7860     		str	r0, [r7, #4]
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 47


 1096              	.LBB29:
 1097              	.LBB30:
 1098              		.file 2 ".\\Source\\portable\\GCC\\ARM_CM3/portmacro.h"
   1:.\Source\portable\GCC\ARM_CM3/portmacro.h **** /*
   2:.\Source\portable\GCC\ARM_CM3/portmacro.h ****  * FreeRTOS Kernel V10.3.1
   3:.\Source\portable\GCC\ARM_CM3/portmacro.h ****  * Copyright (C) 2020 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:.\Source\portable\GCC\ARM_CM3/portmacro.h ****  *
   5:.\Source\portable\GCC\ARM_CM3/portmacro.h ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:.\Source\portable\GCC\ARM_CM3/portmacro.h ****  * this software and associated documentation files (the "Software"), to deal in
   7:.\Source\portable\GCC\ARM_CM3/portmacro.h ****  * the Software without restriction, including without limitation the rights to
   8:.\Source\portable\GCC\ARM_CM3/portmacro.h ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:.\Source\portable\GCC\ARM_CM3/portmacro.h ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:.\Source\portable\GCC\ARM_CM3/portmacro.h ****  * subject to the following conditions:
  11:.\Source\portable\GCC\ARM_CM3/portmacro.h ****  *
  12:.\Source\portable\GCC\ARM_CM3/portmacro.h ****  * The above copyright notice and this permission notice shall be included in all
  13:.\Source\portable\GCC\ARM_CM3/portmacro.h ****  * copies or substantial portions of the Software.
  14:.\Source\portable\GCC\ARM_CM3/portmacro.h ****  *
  15:.\Source\portable\GCC\ARM_CM3/portmacro.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:.\Source\portable\GCC\ARM_CM3/portmacro.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:.\Source\portable\GCC\ARM_CM3/portmacro.h ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:.\Source\portable\GCC\ARM_CM3/portmacro.h ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:.\Source\portable\GCC\ARM_CM3/portmacro.h ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:.\Source\portable\GCC\ARM_CM3/portmacro.h ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:.\Source\portable\GCC\ARM_CM3/portmacro.h ****  *
  22:.\Source\portable\GCC\ARM_CM3/portmacro.h ****  * http://www.FreeRTOS.org
  23:.\Source\portable\GCC\ARM_CM3/portmacro.h ****  * http://aws.amazon.com/freertos
  24:.\Source\portable\GCC\ARM_CM3/portmacro.h ****  *
  25:.\Source\portable\GCC\ARM_CM3/portmacro.h ****  * 1 tab == 4 spaces!
  26:.\Source\portable\GCC\ARM_CM3/portmacro.h ****  */
  27:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 
  28:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 
  29:.\Source\portable\GCC\ARM_CM3/portmacro.h **** #ifndef PORTMACRO_H
  30:.\Source\portable\GCC\ARM_CM3/portmacro.h **** #define PORTMACRO_H
  31:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 
  32:.\Source\portable\GCC\ARM_CM3/portmacro.h **** #ifdef __cplusplus
  33:.\Source\portable\GCC\ARM_CM3/portmacro.h **** extern "C" {
  34:.\Source\portable\GCC\ARM_CM3/portmacro.h **** #endif
  35:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 
  36:.\Source\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------
  37:.\Source\portable\GCC\ARM_CM3/portmacro.h ****  * Port specific definitions.
  38:.\Source\portable\GCC\ARM_CM3/portmacro.h ****  *
  39:.\Source\portable\GCC\ARM_CM3/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  40:.\Source\portable\GCC\ARM_CM3/portmacro.h ****  * given hardware and compiler.
  41:.\Source\portable\GCC\ARM_CM3/portmacro.h ****  *
  42:.\Source\portable\GCC\ARM_CM3/portmacro.h ****  * These settings should not be altered.
  43:.\Source\portable\GCC\ARM_CM3/portmacro.h ****  *-----------------------------------------------------------
  44:.\Source\portable\GCC\ARM_CM3/portmacro.h ****  */
  45:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 
  46:.\Source\portable\GCC\ARM_CM3/portmacro.h **** /* Type definitions. */
  47:.\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portCHAR		char
  48:.\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portFLOAT		float
  49:.\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portDOUBLE		double
  50:.\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portLONG		long
  51:.\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portSHORT		short
  52:.\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portSTACK_TYPE	uint32_t
  53:.\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portBASE_TYPE	long
  54:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 48


  55:.\Source\portable\GCC\ARM_CM3/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  56:.\Source\portable\GCC\ARM_CM3/portmacro.h **** typedef long BaseType_t;
  57:.\Source\portable\GCC\ARM_CM3/portmacro.h **** typedef unsigned long UBaseType_t;
  58:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 
  59:.\Source\portable\GCC\ARM_CM3/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
  60:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	typedef uint16_t TickType_t;
  61:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
  62:.\Source\portable\GCC\ARM_CM3/portmacro.h **** #else
  63:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	typedef uint32_t TickType_t;
  64:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
  65:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 
  66:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
  67:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	not need to be guarded with a critical section. */
  68:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
  69:.\Source\portable\GCC\ARM_CM3/portmacro.h **** #endif
  70:.\Source\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
  71:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 
  72:.\Source\portable\GCC\ARM_CM3/portmacro.h **** /* Architecture specifics. */
  73:.\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portSTACK_GROWTH			( -1 )
  74:.\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
  75:.\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portBYTE_ALIGNMENT			8
  76:.\Source\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
  77:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 
  78:.\Source\portable\GCC\ARM_CM3/portmacro.h **** /* Scheduler utilities. */
  79:.\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portYIELD() 															\
  80:.\Source\portable\GCC\ARM_CM3/portmacro.h **** {																				\
  81:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	/* Set a PendSV to request a context switch. */								\
  82:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\
  83:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 																				\
  84:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	/* Barriers are normally not required but do ensure the code is completely	\
  85:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	within the specified behaviour for the architecture. */						\
  86:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	__asm volatile( "dsb" ::: "memory" );										\
  87:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	__asm volatile( "isb" );													\
  88:.\Source\portable\GCC\ARM_CM3/portmacro.h **** }
  89:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 
  90:.\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
  91:.\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
  92:.\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) if( xSwitchRequired != pdFALSE ) portYIELD()
  93:.\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
  94:.\Source\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
  95:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 
  96:.\Source\portable\GCC\ARM_CM3/portmacro.h **** /* Critical section management. */
  97:.\Source\portable\GCC\ARM_CM3/portmacro.h **** extern void vPortEnterCritical( void );
  98:.\Source\portable\GCC\ARM_CM3/portmacro.h **** extern void vPortExitCritical( void );
  99:.\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortRaiseBASEPRI()
 100:.\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortSetBASEPRI(x)
 101:.\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portDISABLE_INTERRUPTS()				vPortRaiseBASEPRI()
 102:.\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortSetBASEPRI(0)
 103:.\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 104:.\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 105:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 106:.\Source\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 107:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 108:.\Source\portable\GCC\ARM_CM3/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 109:.\Source\portable\GCC\ARM_CM3/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 110:.\Source\portable\GCC\ARM_CM3/portmacro.h **** (which build with all the ports) will build. */
 111:.\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 49


 112:.\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 113:.\Source\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 114:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 115:.\Source\portable\GCC\ARM_CM3/portmacro.h **** /* Tickless idle/low power functionality. */
 116:.\Source\portable\GCC\ARM_CM3/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 117:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 118:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 119:.\Source\portable\GCC\ARM_CM3/portmacro.h **** #endif
 120:.\Source\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 121:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 122:.\Source\portable\GCC\ARM_CM3/portmacro.h **** /* Architecture specific optimisations. */
 123:.\Source\portable\GCC\ARM_CM3/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 124:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 125:.\Source\portable\GCC\ARM_CM3/portmacro.h **** #endif
 126:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 127:.\Source\portable\GCC\ARM_CM3/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 128:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 129:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	/* Generic helper function. */
 130:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 131:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	{
 132:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	uint8_t ucReturn;
 133:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 134:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 135:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 		return ucReturn;
 136:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	}
 137:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 138:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	/* Check the configuration. */
 139:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	#if( configMAX_PRIORITIES > 32 )
 140:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is 
 141:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	#endif
 142:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 143:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	/* Store/clear the ready priorities in a bit map. */
 144:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) |= ( 1UL 
 145:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) &= ~( 1UL 
 146:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 147:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	/*-----------------------------------------------------------*/
 148:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 149:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities ) uxTopPriority = ( 31UL - ( ui
 150:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 151:.\Source\portable\GCC\ARM_CM3/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 152:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 153:.\Source\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 154:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 155:.\Source\portable\GCC\ARM_CM3/portmacro.h **** #ifdef configASSERT
 156:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	void vPortValidateInterruptPriority( void );
 157:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
 158:.\Source\portable\GCC\ARM_CM3/portmacro.h **** #endif
 159:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 160:.\Source\portable\GCC\ARM_CM3/portmacro.h **** /* portNOP() is not required by this port. */
 161:.\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portNOP()
 162:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 163:.\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portINLINE	__inline
 164:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 165:.\Source\portable\GCC\ARM_CM3/portmacro.h **** #ifndef portFORCE_INLINE
 166:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	#define portFORCE_INLINE inline __attribute__(( always_inline))
 167:.\Source\portable\GCC\ARM_CM3/portmacro.h **** #endif
 168:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 50


 169:.\Source\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 170:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 171:.\Source\portable\GCC\ARM_CM3/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 172:.\Source\portable\GCC\ARM_CM3/portmacro.h **** {
 173:.\Source\portable\GCC\ARM_CM3/portmacro.h **** uint32_t ulCurrentInterrupt;
 174:.\Source\portable\GCC\ARM_CM3/portmacro.h **** BaseType_t xReturn;
 175:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 176:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	/* Obtain the number of the currently executing interrupt. */
 177:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 178:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 179:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	if( ulCurrentInterrupt == 0 )
 180:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	{
 181:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 		xReturn = pdFALSE;
 182:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	}
 183:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	else
 184:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	{
 185:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 		xReturn = pdTRUE;
 186:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	}
 187:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 188:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	return xReturn;
 189:.\Source\portable\GCC\ARM_CM3/portmacro.h **** }
 190:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 191:.\Source\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 192:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 193:.\Source\portable\GCC\ARM_CM3/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 194:.\Source\portable\GCC\ARM_CM3/portmacro.h **** {
 195:.\Source\portable\GCC\ARM_CM3/portmacro.h **** uint32_t ulNewBASEPRI;
 196:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 197:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	__asm volatile
 198:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	(
 199:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 		"	mov %0, %1												\n" \
 200:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 		"	msr basepri, %0											\n" \
 201:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 		"	isb														\n" \
 202:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 		"	dsb														\n" \
 203:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
 204:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	);
 205:.\Source\portable\GCC\ARM_CM3/portmacro.h **** }
 206:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 207:.\Source\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 208:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 209:.\Source\portable\GCC\ARM_CM3/portmacro.h **** portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 210:.\Source\portable\GCC\ARM_CM3/portmacro.h **** {
 211:.\Source\portable\GCC\ARM_CM3/portmacro.h **** uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 212:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 213:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	__asm volatile
 1099              		.loc 2 213 0
 1100              		.syntax unified
 1101              	@ 213 ".\Source\portable\GCC\ARM_CM3/portmacro.h" 1
 1102 0008 EFF31182 			mrs r2, basepri											
 1103 000c 4FF0A003 		mov r3, #160												
 1104 0010 83F31188 		msr basepri, r3											
 1105 0014 BFF36F8F 		isb														
 1106 0018 BFF34F8F 		dsb														
 1107              	
 1108              	@ 0 "" 2
 1109              		.thumb
 1110              		.syntax unified
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 51


 1111 001c FA60     		str	r2, [r7, #12]
 1112 001e BB60     		str	r3, [r7, #8]
 214:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	(
 215:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 		"	mrs %0, basepri											\n" \
 216:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 		"	mov %1, %2												\n" \
 217:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 		"	msr basepri, %1											\n" \
 218:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 		"	isb														\n" \
 219:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 		"	dsb														\n" \
 220:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "
 221:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	);
 222:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 223:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	/* This return will not be reached but is necessary to prevent compiler
 224:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	warnings. */
 225:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	return ulOriginalBASEPRI;
 1113              		.loc 2 225 0
 1114 0020 FB68     		ldr	r3, [r7, #12]
 1115              	.LBE30:
 1116              	.LBE29:
1502:Source/tasks.c **** 	TCB_t const *pxTCB;
1503:Source/tasks.c **** 	UBaseType_t uxReturn, uxSavedInterruptState;
1504:Source/tasks.c **** 
1505:Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1506:Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1507:Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1508:Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1509:Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1510:Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
1511:Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1512:Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1513:Source/tasks.c **** 		been assigned a priority above the configured maximum system call
1514:Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1515:Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1516:Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1517:Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1518:Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1519:Source/tasks.c **** 		provided on the following link:
1520:Source/tasks.c **** 		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
1521:Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1522:Source/tasks.c **** 
1523:Source/tasks.c **** 		uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
 1117              		.loc 1 1523 0
 1118 0022 BB61     		str	r3, [r7, #24]
1524:Source/tasks.c **** 		{
1525:Source/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1526:Source/tasks.c **** 			task that is being queried. */
1527:Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
 1119              		.loc 1 1527 0
 1120 0024 7B68     		ldr	r3, [r7, #4]
 1121 0026 002B     		cmp	r3, #0
 1122 0028 02D1     		bne	.L77
 1123              		.loc 1 1527 0 is_stmt 0 discriminator 1
 1124 002a 094B     		ldr	r3, .L80
 1125 002c 1B68     		ldr	r3, [r3]
 1126 002e 00E0     		b	.L78
 1127              	.L77:
 1128              		.loc 1 1527 0 discriminator 2
 1129 0030 7B68     		ldr	r3, [r7, #4]
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 52


 1130              	.L78:
 1131              		.loc 1 1527 0 discriminator 4
 1132 0032 7B61     		str	r3, [r7, #20]
1528:Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1133              		.loc 1 1528 0 is_stmt 1 discriminator 4
 1134 0034 7B69     		ldr	r3, [r7, #20]
 1135 0036 DB6A     		ldr	r3, [r3, #44]
 1136 0038 3B61     		str	r3, [r7, #16]
 1137 003a BB69     		ldr	r3, [r7, #24]
 1138 003c FB61     		str	r3, [r7, #28]
 1139              	.LBB31:
 1140              	.LBB32:
 226:.\Source\portable\GCC\ARM_CM3/portmacro.h **** }
 227:.\Source\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 228:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 229:.\Source\portable\GCC\ARM_CM3/portmacro.h **** portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 230:.\Source\portable\GCC\ARM_CM3/portmacro.h **** {
 231:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	__asm volatile
 1141              		.loc 2 231 0 discriminator 4
 1142 003e FB69     		ldr	r3, [r7, #28]
 1143              		.syntax unified
 1144              	@ 231 ".\Source\portable\GCC\ARM_CM3/portmacro.h" 1
 1145 0040 83F31188 			msr basepri, r3	
 1146              	@ 0 "" 2
 1147              		.thumb
 1148              		.syntax unified
 1149              	.LBE32:
 1150              	.LBE31:
1529:Source/tasks.c **** 		}
1530:Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );
1531:Source/tasks.c **** 
1532:Source/tasks.c **** 		return uxReturn;
 1151              		.loc 1 1532 0 discriminator 4
 1152 0044 3B69     		ldr	r3, [r7, #16]
1533:Source/tasks.c **** 	}
 1153              		.loc 1 1533 0 discriminator 4
 1154 0046 1846     		mov	r0, r3
 1155 0048 2437     		adds	r7, r7, #36
 1156              		.cfi_def_cfa_offset 4
 1157 004a BD46     		mov	sp, r7
 1158              		.cfi_def_cfa_register 13
 1159              		@ sp needed
 1160 004c 80BC     		pop	{r7}
 1161              		.cfi_restore 7
 1162              		.cfi_def_cfa_offset 0
 1163 004e 7047     		bx	lr
 1164              	.L81:
 1165              		.align	2
 1166              	.L80:
 1167 0050 00000000 		.word	pxCurrentTCB
 1168              		.cfi_endproc
 1169              	.LFE76:
 1170              		.size	uxTaskPriorityGetFromISR, .-uxTaskPriorityGetFromISR
 1171              		.section	.text.vTaskPrioritySet,"ax",%progbits
 1172              		.align	2
 1173              		.global	vTaskPrioritySet
 1174              		.thumb
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 53


 1175              		.thumb_func
 1176              		.type	vTaskPrioritySet, %function
 1177              	vTaskPrioritySet:
 1178              	.LFB77:
1534:Source/tasks.c **** 
1535:Source/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1536:Source/tasks.c **** /*-----------------------------------------------------------*/
1537:Source/tasks.c **** 
1538:Source/tasks.c **** #if ( INCLUDE_vTaskPrioritySet == 1 )
1539:Source/tasks.c **** 
1540:Source/tasks.c **** 	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
1541:Source/tasks.c **** 	{
 1179              		.loc 1 1541 0
 1180              		.cfi_startproc
 1181              		@ args = 0, pretend = 0, frame = 24
 1182              		@ frame_needed = 1, uses_anonymous_args = 0
 1183 0000 80B5     		push	{r7, lr}
 1184              		.cfi_def_cfa_offset 8
 1185              		.cfi_offset 7, -8
 1186              		.cfi_offset 14, -4
 1187 0002 86B0     		sub	sp, sp, #24
 1188              		.cfi_def_cfa_offset 32
 1189 0004 00AF     		add	r7, sp, #0
 1190              		.cfi_def_cfa_register 7
 1191 0006 7860     		str	r0, [r7, #4]
 1192 0008 3960     		str	r1, [r7]
1542:Source/tasks.c **** 	TCB_t *pxTCB;
1543:Source/tasks.c **** 	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
1544:Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
 1193              		.loc 1 1544 0
 1194 000a 0023     		movs	r3, #0
 1195 000c 7B61     		str	r3, [r7, #20]
1545:Source/tasks.c **** 
1546:Source/tasks.c **** 		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
1547:Source/tasks.c **** 
1548:Source/tasks.c **** 		/* Ensure the new priority is valid. */
1549:Source/tasks.c **** 		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 1196              		.loc 1 1549 0
 1197 000e 3B68     		ldr	r3, [r7]
 1198 0010 042B     		cmp	r3, #4
 1199 0012 01D9     		bls	.L83
1550:Source/tasks.c **** 		{
1551:Source/tasks.c **** 			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 1200              		.loc 1 1551 0
 1201 0014 0423     		movs	r3, #4
 1202 0016 3B60     		str	r3, [r7]
 1203              	.L83:
1552:Source/tasks.c **** 		}
1553:Source/tasks.c **** 		else
1554:Source/tasks.c **** 		{
1555:Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1556:Source/tasks.c **** 		}
1557:Source/tasks.c **** 
1558:Source/tasks.c **** 		taskENTER_CRITICAL();
 1204              		.loc 1 1558 0
 1205 0018 FFF7FEFF 		bl	vPortEnterCritical
1559:Source/tasks.c **** 		{
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 54


1560:Source/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1561:Source/tasks.c **** 			task that is being changed. */
1562:Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
 1206              		.loc 1 1562 0
 1207 001c 7B68     		ldr	r3, [r7, #4]
 1208 001e 002B     		cmp	r3, #0
 1209 0020 02D1     		bne	.L84
 1210              		.loc 1 1562 0 is_stmt 0 discriminator 1
 1211 0022 414B     		ldr	r3, .L93
 1212 0024 1B68     		ldr	r3, [r3]
 1213 0026 00E0     		b	.L85
 1214              	.L84:
 1215              		.loc 1 1562 0 discriminator 2
 1216 0028 7B68     		ldr	r3, [r7, #4]
 1217              	.L85:
 1218              		.loc 1 1562 0 discriminator 4
 1219 002a 3B61     		str	r3, [r7, #16]
1563:Source/tasks.c **** 
1564:Source/tasks.c **** 			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
1565:Source/tasks.c **** 
1566:Source/tasks.c **** 			#if ( configUSE_MUTEXES == 1 )
1567:Source/tasks.c **** 			{
1568:Source/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxBasePriority;
 1220              		.loc 1 1568 0 is_stmt 1 discriminator 4
 1221 002c 3B69     		ldr	r3, [r7, #16]
 1222 002e 1B6C     		ldr	r3, [r3, #64]
 1223 0030 FB60     		str	r3, [r7, #12]
1569:Source/tasks.c **** 			}
1570:Source/tasks.c **** 			#else
1571:Source/tasks.c **** 			{
1572:Source/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxPriority;
1573:Source/tasks.c **** 			}
1574:Source/tasks.c **** 			#endif
1575:Source/tasks.c **** 
1576:Source/tasks.c **** 			if( uxCurrentBasePriority != uxNewPriority )
 1224              		.loc 1 1576 0 discriminator 4
 1225 0032 FA68     		ldr	r2, [r7, #12]
 1226 0034 3B68     		ldr	r3, [r7]
 1227 0036 9A42     		cmp	r2, r3
 1228 0038 6FD0     		beq	.L86
1577:Source/tasks.c **** 			{
1578:Source/tasks.c **** 				/* The priority change may have readied a task of higher
1579:Source/tasks.c **** 				priority than the calling task. */
1580:Source/tasks.c **** 				if( uxNewPriority > uxCurrentBasePriority )
 1229              		.loc 1 1580 0
 1230 003a 3A68     		ldr	r2, [r7]
 1231 003c FB68     		ldr	r3, [r7, #12]
 1232 003e 9A42     		cmp	r2, r3
 1233 0040 0DD9     		bls	.L87
1581:Source/tasks.c **** 				{
1582:Source/tasks.c **** 					if( pxTCB != pxCurrentTCB )
 1234              		.loc 1 1582 0
 1235 0042 394B     		ldr	r3, .L93
 1236 0044 1B68     		ldr	r3, [r3]
 1237 0046 3A69     		ldr	r2, [r7, #16]
 1238 0048 9A42     		cmp	r2, r3
 1239 004a 0FD0     		beq	.L88
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 55


1583:Source/tasks.c **** 					{
1584:Source/tasks.c **** 						/* The priority of a task other than the currently
1585:Source/tasks.c **** 						running task is being raised.  Is the priority being
1586:Source/tasks.c **** 						raised above that of the running task? */
1587:Source/tasks.c **** 						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 1240              		.loc 1 1587 0
 1241 004c 364B     		ldr	r3, .L93
 1242 004e 1B68     		ldr	r3, [r3]
 1243 0050 DA6A     		ldr	r2, [r3, #44]
 1244 0052 3B68     		ldr	r3, [r7]
 1245 0054 9A42     		cmp	r2, r3
 1246 0056 09D8     		bhi	.L88
1588:Source/tasks.c **** 						{
1589:Source/tasks.c **** 							xYieldRequired = pdTRUE;
 1247              		.loc 1 1589 0
 1248 0058 0123     		movs	r3, #1
 1249 005a 7B61     		str	r3, [r7, #20]
 1250 005c 06E0     		b	.L88
 1251              	.L87:
1590:Source/tasks.c **** 						}
1591:Source/tasks.c **** 						else
1592:Source/tasks.c **** 						{
1593:Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
1594:Source/tasks.c **** 						}
1595:Source/tasks.c **** 					}
1596:Source/tasks.c **** 					else
1597:Source/tasks.c **** 					{
1598:Source/tasks.c **** 						/* The priority of the running task is being raised,
1599:Source/tasks.c **** 						but the running task must already be the highest
1600:Source/tasks.c **** 						priority task able to run so no yield is required. */
1601:Source/tasks.c **** 					}
1602:Source/tasks.c **** 				}
1603:Source/tasks.c **** 				else if( pxTCB == pxCurrentTCB )
 1252              		.loc 1 1603 0
 1253 005e 324B     		ldr	r3, .L93
 1254 0060 1B68     		ldr	r3, [r3]
 1255 0062 3A69     		ldr	r2, [r7, #16]
 1256 0064 9A42     		cmp	r2, r3
 1257 0066 01D1     		bne	.L88
1604:Source/tasks.c **** 				{
1605:Source/tasks.c **** 					/* Setting the priority of the running task down means
1606:Source/tasks.c **** 					there may now be another task of higher priority that
1607:Source/tasks.c **** 					is ready to execute. */
1608:Source/tasks.c **** 					xYieldRequired = pdTRUE;
 1258              		.loc 1 1608 0
 1259 0068 0123     		movs	r3, #1
 1260 006a 7B61     		str	r3, [r7, #20]
 1261              	.L88:
1609:Source/tasks.c **** 				}
1610:Source/tasks.c **** 				else
1611:Source/tasks.c **** 				{
1612:Source/tasks.c **** 					/* Setting the priority of any other task down does not
1613:Source/tasks.c **** 					require a yield as the running task must be above the
1614:Source/tasks.c **** 					new priority of the task being modified. */
1615:Source/tasks.c **** 				}
1616:Source/tasks.c **** 
1617:Source/tasks.c **** 				/* Remember the ready list the task might be referenced from
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 56


1618:Source/tasks.c **** 				before its uxPriority member is changed so the
1619:Source/tasks.c **** 				taskRESET_READY_PRIORITY() macro can function correctly. */
1620:Source/tasks.c **** 				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 1262              		.loc 1 1620 0
 1263 006c 3B69     		ldr	r3, [r7, #16]
 1264 006e DB6A     		ldr	r3, [r3, #44]
 1265 0070 BB60     		str	r3, [r7, #8]
1621:Source/tasks.c **** 
1622:Source/tasks.c **** 				#if ( configUSE_MUTEXES == 1 )
1623:Source/tasks.c **** 				{
1624:Source/tasks.c **** 					/* Only change the priority being used if the task is not
1625:Source/tasks.c **** 					currently using an inherited priority. */
1626:Source/tasks.c **** 					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 1266              		.loc 1 1626 0
 1267 0072 3B69     		ldr	r3, [r7, #16]
 1268 0074 1A6C     		ldr	r2, [r3, #64]
 1269 0076 3B69     		ldr	r3, [r7, #16]
 1270 0078 DB6A     		ldr	r3, [r3, #44]
 1271 007a 9A42     		cmp	r2, r3
 1272 007c 02D1     		bne	.L89
1627:Source/tasks.c **** 					{
1628:Source/tasks.c **** 						pxTCB->uxPriority = uxNewPriority;
 1273              		.loc 1 1628 0
 1274 007e 3B69     		ldr	r3, [r7, #16]
 1275 0080 3A68     		ldr	r2, [r7]
 1276 0082 DA62     		str	r2, [r3, #44]
 1277              	.L89:
1629:Source/tasks.c **** 					}
1630:Source/tasks.c **** 					else
1631:Source/tasks.c **** 					{
1632:Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1633:Source/tasks.c **** 					}
1634:Source/tasks.c **** 
1635:Source/tasks.c **** 					/* The base priority gets set whatever. */
1636:Source/tasks.c **** 					pxTCB->uxBasePriority = uxNewPriority;
 1278              		.loc 1 1636 0
 1279 0084 3B69     		ldr	r3, [r7, #16]
 1280 0086 3A68     		ldr	r2, [r7]
 1281 0088 1A64     		str	r2, [r3, #64]
1637:Source/tasks.c **** 				}
1638:Source/tasks.c **** 				#else
1639:Source/tasks.c **** 				{
1640:Source/tasks.c **** 					pxTCB->uxPriority = uxNewPriority;
1641:Source/tasks.c **** 				}
1642:Source/tasks.c **** 				#endif
1643:Source/tasks.c **** 
1644:Source/tasks.c **** 				/* Only reset the event list item value if the value is not
1645:Source/tasks.c **** 				being used for anything else. */
1646:Source/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE 
 1282              		.loc 1 1646 0
 1283 008a 3B69     		ldr	r3, [r7, #16]
 1284 008c 9B69     		ldr	r3, [r3, #24]
 1285 008e 002B     		cmp	r3, #0
 1286 0090 04DB     		blt	.L90
1647:Source/tasks.c **** 				{
1648:Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - (
 1287              		.loc 1 1648 0
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 57


 1288 0092 3B68     		ldr	r3, [r7]
 1289 0094 C3F10502 		rsb	r2, r3, #5
 1290 0098 3B69     		ldr	r3, [r7, #16]
 1291 009a 9A61     		str	r2, [r3, #24]
 1292              	.L90:
1649:Source/tasks.c **** 				}
1650:Source/tasks.c **** 				else
1651:Source/tasks.c **** 				{
1652:Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1653:Source/tasks.c **** 				}
1654:Source/tasks.c **** 
1655:Source/tasks.c **** 				/* If the task is in the blocked or suspended list we need do
1656:Source/tasks.c **** 				nothing more than change its priority variable. However, if
1657:Source/tasks.c **** 				the task is in a ready list it needs to be removed and placed
1658:Source/tasks.c **** 				in the list appropriate to its new priority. */
1659:Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateL
 1293              		.loc 1 1659 0
 1294 009c 3B69     		ldr	r3, [r7, #16]
 1295 009e 5969     		ldr	r1, [r3, #20]
 1296 00a0 BA68     		ldr	r2, [r7, #8]
 1297 00a2 1346     		mov	r3, r2
 1298 00a4 9B00     		lsls	r3, r3, #2
 1299 00a6 1344     		add	r3, r3, r2
 1300 00a8 9B00     		lsls	r3, r3, #2
 1301 00aa 204A     		ldr	r2, .L93+4
 1302 00ac 1344     		add	r3, r3, r2
 1303 00ae 9942     		cmp	r1, r3
 1304 00b0 28D1     		bne	.L91
1660:Source/tasks.c **** 				{
1661:Source/tasks.c **** 					/* The task is currently in its ready list - remove before
1662:Source/tasks.c **** 					adding it to it's new ready list.  As we are in a critical
1663:Source/tasks.c **** 					section we can do this even if the scheduler is suspended. */
1664:Source/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 1305              		.loc 1 1664 0
 1306 00b2 3B69     		ldr	r3, [r7, #16]
 1307 00b4 0433     		adds	r3, r3, #4
 1308 00b6 1846     		mov	r0, r3
 1309 00b8 FFF7FEFF 		bl	uxListRemove
 1310 00bc 0346     		mov	r3, r0
 1311 00be 002B     		cmp	r3, #0
 1312 00c0 09D1     		bne	.L92
1665:Source/tasks.c **** 					{
1666:Source/tasks.c **** 						/* It is known that the task is in its ready list so
1667:Source/tasks.c **** 						there is no need to check again and the port level
1668:Source/tasks.c **** 						reset macro can be called directly. */
1669:Source/tasks.c **** 						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
 1313              		.loc 1 1669 0
 1314 00c2 0122     		movs	r2, #1
 1315 00c4 BB68     		ldr	r3, [r7, #8]
 1316 00c6 02FA03F3 		lsl	r3, r2, r3
 1317 00ca DA43     		mvns	r2, r3
 1318 00cc 184B     		ldr	r3, .L93+8
 1319 00ce 1B68     		ldr	r3, [r3]
 1320 00d0 1340     		ands	r3, r3, r2
 1321 00d2 174A     		ldr	r2, .L93+8
 1322 00d4 1360     		str	r3, [r2]
 1323              	.L92:
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 58


1670:Source/tasks.c **** 					}
1671:Source/tasks.c **** 					else
1672:Source/tasks.c **** 					{
1673:Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1674:Source/tasks.c **** 					}
1675:Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1324              		.loc 1 1675 0
 1325 00d6 3B69     		ldr	r3, [r7, #16]
 1326 00d8 DB6A     		ldr	r3, [r3, #44]
 1327 00da 0122     		movs	r2, #1
 1328 00dc 9A40     		lsls	r2, r2, r3
 1329 00de 144B     		ldr	r3, .L93+8
 1330 00e0 1B68     		ldr	r3, [r3]
 1331 00e2 1343     		orrs	r3, r3, r2
 1332 00e4 124A     		ldr	r2, .L93+8
 1333 00e6 1360     		str	r3, [r2]
 1334 00e8 3B69     		ldr	r3, [r7, #16]
 1335 00ea DA6A     		ldr	r2, [r3, #44]
 1336 00ec 1346     		mov	r3, r2
 1337 00ee 9B00     		lsls	r3, r3, #2
 1338 00f0 1344     		add	r3, r3, r2
 1339 00f2 9B00     		lsls	r3, r3, #2
 1340 00f4 0D4A     		ldr	r2, .L93+4
 1341 00f6 1A44     		add	r2, r2, r3
 1342 00f8 3B69     		ldr	r3, [r7, #16]
 1343 00fa 0433     		adds	r3, r3, #4
 1344 00fc 1946     		mov	r1, r3
 1345 00fe 1046     		mov	r0, r2
 1346 0100 FFF7FEFF 		bl	vListInsertEnd
 1347              	.L91:
1676:Source/tasks.c **** 				}
1677:Source/tasks.c **** 				else
1678:Source/tasks.c **** 				{
1679:Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1680:Source/tasks.c **** 				}
1681:Source/tasks.c **** 
1682:Source/tasks.c **** 				if( xYieldRequired != pdFALSE )
 1348              		.loc 1 1682 0
 1349 0104 7B69     		ldr	r3, [r7, #20]
 1350 0106 002B     		cmp	r3, #0
 1351 0108 07D0     		beq	.L86
1683:Source/tasks.c **** 				{
1684:Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
 1352              		.loc 1 1684 0
 1353 010a 0A4B     		ldr	r3, .L93+12
 1354 010c 4FF08052 		mov	r2, #268435456
 1355 0110 1A60     		str	r2, [r3]
 1356              		.syntax unified
 1357              	@ 1684 "Source\tasks.c" 1
 1358 0112 BFF34F8F 		dsb
 1359              	@ 0 "" 2
 1360              	@ 1684 "Source\tasks.c" 1
 1361 0116 BFF36F8F 		isb
 1362              	@ 0 "" 2
 1363              		.thumb
 1364              		.syntax unified
 1365              	.L86:
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 59


1685:Source/tasks.c **** 				}
1686:Source/tasks.c **** 				else
1687:Source/tasks.c **** 				{
1688:Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1689:Source/tasks.c **** 				}
1690:Source/tasks.c **** 
1691:Source/tasks.c **** 				/* Remove compiler warning about unused variables when the port
1692:Source/tasks.c **** 				optimised task selection is not being used. */
1693:Source/tasks.c **** 				( void ) uxPriorityUsedOnEntry;
1694:Source/tasks.c **** 			}
1695:Source/tasks.c **** 		}
1696:Source/tasks.c **** 		taskEXIT_CRITICAL();
 1366              		.loc 1 1696 0
 1367 011a FFF7FEFF 		bl	vPortExitCritical
1697:Source/tasks.c **** 	}
 1368              		.loc 1 1697 0
 1369 011e 00BF     		nop
 1370 0120 1837     		adds	r7, r7, #24
 1371              		.cfi_def_cfa_offset 8
 1372 0122 BD46     		mov	sp, r7
 1373              		.cfi_def_cfa_register 13
 1374              		@ sp needed
 1375 0124 80BD     		pop	{r7, pc}
 1376              	.L94:
 1377 0126 00BF     		.align	2
 1378              	.L93:
 1379 0128 00000000 		.word	pxCurrentTCB
 1380 012c 04000000 		.word	pxReadyTasksLists
 1381 0130 E0000000 		.word	uxTopReadyPriority
 1382 0134 04ED00E0 		.word	-536810236
 1383              		.cfi_endproc
 1384              	.LFE77:
 1385              		.size	vTaskPrioritySet, .-vTaskPrioritySet
 1386              		.section	.text.vTaskSuspend,"ax",%progbits
 1387              		.align	2
 1388              		.global	vTaskSuspend
 1389              		.thumb
 1390              		.thumb_func
 1391              		.type	vTaskSuspend, %function
 1392              	vTaskSuspend:
 1393              	.LFB78:
1698:Source/tasks.c **** 
1699:Source/tasks.c **** #endif /* INCLUDE_vTaskPrioritySet */
1700:Source/tasks.c **** /*-----------------------------------------------------------*/
1701:Source/tasks.c **** 
1702:Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1703:Source/tasks.c **** 
1704:Source/tasks.c **** 	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
1705:Source/tasks.c **** 	{
 1394              		.loc 1 1705 0
 1395              		.cfi_startproc
 1396              		@ args = 0, pretend = 0, frame = 16
 1397              		@ frame_needed = 1, uses_anonymous_args = 0
 1398 0000 80B5     		push	{r7, lr}
 1399              		.cfi_def_cfa_offset 8
 1400              		.cfi_offset 7, -8
 1401              		.cfi_offset 14, -4
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 60


 1402 0002 84B0     		sub	sp, sp, #16
 1403              		.cfi_def_cfa_offset 24
 1404 0004 00AF     		add	r7, sp, #0
 1405              		.cfi_def_cfa_register 7
 1406 0006 7860     		str	r0, [r7, #4]
1706:Source/tasks.c **** 	TCB_t *pxTCB;
1707:Source/tasks.c **** 
1708:Source/tasks.c **** 		taskENTER_CRITICAL();
 1407              		.loc 1 1708 0
 1408 0008 FFF7FEFF 		bl	vPortEnterCritical
1709:Source/tasks.c **** 		{
1710:Source/tasks.c **** 			/* If null is passed in here then it is the running task that is
1711:Source/tasks.c **** 			being suspended. */
1712:Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 1409              		.loc 1 1712 0
 1410 000c 7B68     		ldr	r3, [r7, #4]
 1411 000e 002B     		cmp	r3, #0
 1412 0010 02D1     		bne	.L96
 1413              		.loc 1 1712 0 is_stmt 0 discriminator 1
 1414 0012 354B     		ldr	r3, .L108
 1415 0014 1B68     		ldr	r3, [r3]
 1416 0016 00E0     		b	.L97
 1417              	.L96:
 1418              		.loc 1 1712 0 discriminator 2
 1419 0018 7B68     		ldr	r3, [r7, #4]
 1420              	.L97:
 1421              		.loc 1 1712 0 discriminator 4
 1422 001a FB60     		str	r3, [r7, #12]
1713:Source/tasks.c **** 
1714:Source/tasks.c **** 			traceTASK_SUSPEND( pxTCB );
1715:Source/tasks.c **** 
1716:Source/tasks.c **** 			/* Remove task from the ready/delayed list and place in the
1717:Source/tasks.c **** 			suspended list. */
1718:Source/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 1423              		.loc 1 1718 0 is_stmt 1 discriminator 4
 1424 001c FB68     		ldr	r3, [r7, #12]
 1425 001e 0433     		adds	r3, r3, #4
 1426 0020 1846     		mov	r0, r3
 1427 0022 FFF7FEFF 		bl	uxListRemove
 1428 0026 0346     		mov	r3, r0
 1429 0028 002B     		cmp	r3, #0
 1430 002a 15D1     		bne	.L98
1719:Source/tasks.c **** 			{
1720:Source/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 1431              		.loc 1 1720 0
 1432 002c FB68     		ldr	r3, [r7, #12]
 1433 002e DA6A     		ldr	r2, [r3, #44]
 1434 0030 2E49     		ldr	r1, .L108+4
 1435 0032 1346     		mov	r3, r2
 1436 0034 9B00     		lsls	r3, r3, #2
 1437 0036 1344     		add	r3, r3, r2
 1438 0038 9B00     		lsls	r3, r3, #2
 1439 003a 0B44     		add	r3, r3, r1
 1440 003c 1B68     		ldr	r3, [r3]
 1441 003e 002B     		cmp	r3, #0
 1442 0040 0AD1     		bne	.L98
 1443              		.loc 1 1720 0 is_stmt 0 discriminator 1
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 61


 1444 0042 FB68     		ldr	r3, [r7, #12]
 1445 0044 DB6A     		ldr	r3, [r3, #44]
 1446 0046 0122     		movs	r2, #1
 1447 0048 02FA03F3 		lsl	r3, r2, r3
 1448 004c DA43     		mvns	r2, r3
 1449 004e 284B     		ldr	r3, .L108+8
 1450 0050 1B68     		ldr	r3, [r3]
 1451 0052 1340     		ands	r3, r3, r2
 1452 0054 264A     		ldr	r2, .L108+8
 1453 0056 1360     		str	r3, [r2]
 1454              	.L98:
1721:Source/tasks.c **** 			}
1722:Source/tasks.c **** 			else
1723:Source/tasks.c **** 			{
1724:Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1725:Source/tasks.c **** 			}
1726:Source/tasks.c **** 
1727:Source/tasks.c **** 			/* Is the task waiting on an event also? */
1728:Source/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 1455              		.loc 1 1728 0 is_stmt 1
 1456 0058 FB68     		ldr	r3, [r7, #12]
 1457 005a 9B6A     		ldr	r3, [r3, #40]
 1458 005c 002B     		cmp	r3, #0
 1459 005e 04D0     		beq	.L100
1729:Source/tasks.c **** 			{
1730:Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 1460              		.loc 1 1730 0
 1461 0060 FB68     		ldr	r3, [r7, #12]
 1462 0062 1833     		adds	r3, r3, #24
 1463 0064 1846     		mov	r0, r3
 1464 0066 FFF7FEFF 		bl	uxListRemove
 1465              	.L100:
1731:Source/tasks.c **** 			}
1732:Source/tasks.c **** 			else
1733:Source/tasks.c **** 			{
1734:Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1735:Source/tasks.c **** 			}
1736:Source/tasks.c **** 
1737:Source/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 1466              		.loc 1 1737 0
 1467 006a FB68     		ldr	r3, [r7, #12]
 1468 006c 0433     		adds	r3, r3, #4
 1469 006e 1946     		mov	r1, r3
 1470 0070 2048     		ldr	r0, .L108+12
 1471 0072 FFF7FEFF 		bl	vListInsertEnd
1738:Source/tasks.c **** 
1739:Source/tasks.c **** 			#if( configUSE_TASK_NOTIFICATIONS == 1 )
1740:Source/tasks.c **** 			{
1741:Source/tasks.c **** 				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 1472              		.loc 1 1741 0
 1473 0076 FB68     		ldr	r3, [r7, #12]
 1474 0078 93F84C30 		ldrb	r3, [r3, #76]
 1475 007c DBB2     		uxtb	r3, r3
 1476 007e 012B     		cmp	r3, #1
 1477 0080 03D1     		bne	.L101
1742:Source/tasks.c **** 				{
1743:Source/tasks.c **** 					/* The task was blocked to wait for a notification, but is
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 62


1744:Source/tasks.c **** 					now suspended, so no notification was received. */
1745:Source/tasks.c **** 					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 1478              		.loc 1 1745 0
 1479 0082 FB68     		ldr	r3, [r7, #12]
 1480 0084 0022     		movs	r2, #0
 1481 0086 83F84C20 		strb	r2, [r3, #76]
 1482              	.L101:
1746:Source/tasks.c **** 				}
1747:Source/tasks.c **** 			}
1748:Source/tasks.c **** 			#endif
1749:Source/tasks.c **** 		}
1750:Source/tasks.c **** 		taskEXIT_CRITICAL();
 1483              		.loc 1 1750 0
 1484 008a FFF7FEFF 		bl	vPortExitCritical
1751:Source/tasks.c **** 
1752:Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
 1485              		.loc 1 1752 0
 1486 008e 1A4B     		ldr	r3, .L108+16
 1487 0090 1B68     		ldr	r3, [r3]
 1488 0092 002B     		cmp	r3, #0
 1489 0094 05D0     		beq	.L102
1753:Source/tasks.c **** 		{
1754:Source/tasks.c **** 			/* Reset the next expected unblock time in case it referred to the
1755:Source/tasks.c **** 			task that is now in the Suspended state. */
1756:Source/tasks.c **** 			taskENTER_CRITICAL();
 1490              		.loc 1 1756 0
 1491 0096 FFF7FEFF 		bl	vPortEnterCritical
1757:Source/tasks.c **** 			{
1758:Source/tasks.c **** 				prvResetNextTaskUnblockTime();
 1492              		.loc 1 1758 0
 1493 009a FFF7FEFF 		bl	prvResetNextTaskUnblockTime
1759:Source/tasks.c **** 			}
1760:Source/tasks.c **** 			taskEXIT_CRITICAL();
 1494              		.loc 1 1760 0
 1495 009e FFF7FEFF 		bl	vPortExitCritical
 1496              	.L102:
1761:Source/tasks.c **** 		}
1762:Source/tasks.c **** 		else
1763:Source/tasks.c **** 		{
1764:Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1765:Source/tasks.c **** 		}
1766:Source/tasks.c **** 
1767:Source/tasks.c **** 		if( pxTCB == pxCurrentTCB )
 1497              		.loc 1 1767 0
 1498 00a2 114B     		ldr	r3, .L108
 1499 00a4 1B68     		ldr	r3, [r3]
 1500 00a6 FA68     		ldr	r2, [r7, #12]
 1501 00a8 9A42     		cmp	r2, r3
 1502 00aa 18D1     		bne	.L107
1768:Source/tasks.c **** 		{
1769:Source/tasks.c **** 			if( xSchedulerRunning != pdFALSE )
 1503              		.loc 1 1769 0
 1504 00ac 124B     		ldr	r3, .L108+16
 1505 00ae 1B68     		ldr	r3, [r3]
 1506 00b0 002B     		cmp	r3, #0
 1507 00b2 08D0     		beq	.L104
1770:Source/tasks.c **** 			{
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 63


1771:Source/tasks.c **** 				/* The current task has just been suspended. */
1772:Source/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
1773:Source/tasks.c **** 				portYIELD_WITHIN_API();
 1508              		.loc 1 1773 0
 1509 00b4 114B     		ldr	r3, .L108+20
 1510 00b6 4FF08052 		mov	r2, #268435456
 1511 00ba 1A60     		str	r2, [r3]
 1512              		.syntax unified
 1513              	@ 1773 "Source\tasks.c" 1
 1514 00bc BFF34F8F 		dsb
 1515              	@ 0 "" 2
 1516              	@ 1773 "Source\tasks.c" 1
 1517 00c0 BFF36F8F 		isb
 1518              	@ 0 "" 2
1774:Source/tasks.c **** 			}
1775:Source/tasks.c **** 			else
1776:Source/tasks.c **** 			{
1777:Source/tasks.c **** 				/* The scheduler is not running, but the task that was pointed
1778:Source/tasks.c **** 				to by pxCurrentTCB has just been suspended and pxCurrentTCB
1779:Source/tasks.c **** 				must be adjusted to point to a different task. */
1780:Source/tasks.c **** 				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Rig
1781:Source/tasks.c **** 				{
1782:Source/tasks.c **** 					/* No other tasks are ready, so set pxCurrentTCB back to
1783:Source/tasks.c **** 					NULL so when the next task is created pxCurrentTCB will
1784:Source/tasks.c **** 					be set to point to it no matter what its relative priority
1785:Source/tasks.c **** 					is. */
1786:Source/tasks.c **** 					pxCurrentTCB = NULL;
1787:Source/tasks.c **** 				}
1788:Source/tasks.c **** 				else
1789:Source/tasks.c **** 				{
1790:Source/tasks.c **** 					vTaskSwitchContext();
1791:Source/tasks.c **** 				}
1792:Source/tasks.c **** 			}
1793:Source/tasks.c **** 		}
1794:Source/tasks.c **** 		else
1795:Source/tasks.c **** 		{
1796:Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1797:Source/tasks.c **** 		}
1798:Source/tasks.c **** 	}
 1519              		.loc 1 1798 0
 1520              		.thumb
 1521              		.syntax unified
 1522 00c4 0BE0     		b	.L107
 1523              	.L104:
1780:Source/tasks.c **** 				{
 1524              		.loc 1 1780 0
 1525 00c6 0B4B     		ldr	r3, .L108+12
 1526 00c8 1A68     		ldr	r2, [r3]
 1527 00ca 0D4B     		ldr	r3, .L108+24
 1528 00cc 1B68     		ldr	r3, [r3]
 1529 00ce 9A42     		cmp	r2, r3
 1530 00d0 03D1     		bne	.L106
1786:Source/tasks.c **** 				}
 1531              		.loc 1 1786 0
 1532 00d2 054B     		ldr	r3, .L108
 1533 00d4 0022     		movs	r2, #0
 1534 00d6 1A60     		str	r2, [r3]
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 64


 1535              		.loc 1 1798 0
 1536 00d8 01E0     		b	.L107
 1537              	.L106:
1790:Source/tasks.c **** 				}
 1538              		.loc 1 1790 0
 1539 00da FFF7FEFF 		bl	vTaskSwitchContext
 1540              	.L107:
 1541              		.loc 1 1798 0
 1542 00de 00BF     		nop
 1543 00e0 1037     		adds	r7, r7, #16
 1544              		.cfi_def_cfa_offset 8
 1545 00e2 BD46     		mov	sp, r7
 1546              		.cfi_def_cfa_register 13
 1547              		@ sp needed
 1548 00e4 80BD     		pop	{r7, pc}
 1549              	.L109:
 1550 00e6 00BF     		.align	2
 1551              	.L108:
 1552 00e8 00000000 		.word	pxCurrentTCB
 1553 00ec 04000000 		.word	pxReadyTasksLists
 1554 00f0 E0000000 		.word	uxTopReadyPriority
 1555 00f4 C4000000 		.word	xSuspendedTaskList
 1556 00f8 E4000000 		.word	xSchedulerRunning
 1557 00fc 04ED00E0 		.word	-536810236
 1558 0100 D8000000 		.word	uxCurrentNumberOfTasks
 1559              		.cfi_endproc
 1560              	.LFE78:
 1561              		.size	vTaskSuspend, .-vTaskSuspend
 1562              		.section	.text.prvTaskIsTaskSuspended,"ax",%progbits
 1563              		.align	2
 1564              		.thumb
 1565              		.thumb_func
 1566              		.type	prvTaskIsTaskSuspended, %function
 1567              	prvTaskIsTaskSuspended:
 1568              	.LFB79:
1799:Source/tasks.c **** 
1800:Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1801:Source/tasks.c **** /*-----------------------------------------------------------*/
1802:Source/tasks.c **** 
1803:Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1804:Source/tasks.c **** 
1805:Source/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
1806:Source/tasks.c **** 	{
 1569              		.loc 1 1806 0
 1570              		.cfi_startproc
 1571              		@ args = 0, pretend = 0, frame = 16
 1572              		@ frame_needed = 1, uses_anonymous_args = 0
 1573              		@ link register save eliminated.
 1574 0000 80B4     		push	{r7}
 1575              		.cfi_def_cfa_offset 4
 1576              		.cfi_offset 7, -4
 1577 0002 85B0     		sub	sp, sp, #20
 1578              		.cfi_def_cfa_offset 24
 1579 0004 00AF     		add	r7, sp, #0
 1580              		.cfi_def_cfa_register 7
 1581 0006 7860     		str	r0, [r7, #4]
1807:Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 65


 1582              		.loc 1 1807 0
 1583 0008 0023     		movs	r3, #0
 1584 000a FB60     		str	r3, [r7, #12]
1808:Source/tasks.c **** 	const TCB_t * const pxTCB = xTask;
 1585              		.loc 1 1808 0
 1586 000c 7B68     		ldr	r3, [r7, #4]
 1587 000e BB60     		str	r3, [r7, #8]
1809:Source/tasks.c **** 
1810:Source/tasks.c **** 		/* Accesses xPendingReadyList so must be called from a critical
1811:Source/tasks.c **** 		section. */
1812:Source/tasks.c **** 
1813:Source/tasks.c **** 		/* It does not make sense to check if the calling task is suspended. */
1814:Source/tasks.c **** 		configASSERT( xTask );
1815:Source/tasks.c **** 
1816:Source/tasks.c **** 		/* Is the task being resumed actually in the suspended list? */
1817:Source/tasks.c **** 		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 1588              		.loc 1 1817 0
 1589 0010 BB68     		ldr	r3, [r7, #8]
 1590 0012 5B69     		ldr	r3, [r3, #20]
 1591 0014 094A     		ldr	r2, .L113
 1592 0016 9342     		cmp	r3, r2
 1593 0018 0AD1     		bne	.L111
1818:Source/tasks.c **** 		{
1819:Source/tasks.c **** 			/* Has the task already been resumed from within an ISR? */
1820:Source/tasks.c **** 			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 1594              		.loc 1 1820 0
 1595 001a BB68     		ldr	r3, [r7, #8]
 1596 001c 9B6A     		ldr	r3, [r3, #40]
 1597 001e 084A     		ldr	r2, .L113+4
 1598 0020 9342     		cmp	r3, r2
 1599 0022 05D0     		beq	.L111
1821:Source/tasks.c **** 			{
1822:Source/tasks.c **** 				/* Is it in the suspended list because it is in the	Suspended
1823:Source/tasks.c **** 				state, or because is is blocked with no timeout? */
1824:Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The
 1600              		.loc 1 1824 0
 1601 0024 BB68     		ldr	r3, [r7, #8]
 1602 0026 9B6A     		ldr	r3, [r3, #40]
 1603 0028 002B     		cmp	r3, #0
 1604 002a 01D1     		bne	.L111
1825:Source/tasks.c **** 				{
1826:Source/tasks.c **** 					xReturn = pdTRUE;
 1605              		.loc 1 1826 0
 1606 002c 0123     		movs	r3, #1
 1607 002e FB60     		str	r3, [r7, #12]
 1608              	.L111:
1827:Source/tasks.c **** 				}
1828:Source/tasks.c **** 				else
1829:Source/tasks.c **** 				{
1830:Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1831:Source/tasks.c **** 				}
1832:Source/tasks.c **** 			}
1833:Source/tasks.c **** 			else
1834:Source/tasks.c **** 			{
1835:Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1836:Source/tasks.c **** 			}
1837:Source/tasks.c **** 		}
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 66


1838:Source/tasks.c **** 		else
1839:Source/tasks.c **** 		{
1840:Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1841:Source/tasks.c **** 		}
1842:Source/tasks.c **** 
1843:Source/tasks.c **** 		return xReturn;
 1609              		.loc 1 1843 0
 1610 0030 FB68     		ldr	r3, [r7, #12]
1844:Source/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 1611              		.loc 1 1844 0
 1612 0032 1846     		mov	r0, r3
 1613 0034 1437     		adds	r7, r7, #20
 1614              		.cfi_def_cfa_offset 4
 1615 0036 BD46     		mov	sp, r7
 1616              		.cfi_def_cfa_register 13
 1617              		@ sp needed
 1618 0038 80BC     		pop	{r7}
 1619              		.cfi_restore 7
 1620              		.cfi_def_cfa_offset 0
 1621 003a 7047     		bx	lr
 1622              	.L114:
 1623              		.align	2
 1624              	.L113:
 1625 003c C4000000 		.word	xSuspendedTaskList
 1626 0040 98000000 		.word	xPendingReadyList
 1627              		.cfi_endproc
 1628              	.LFE79:
 1629              		.size	prvTaskIsTaskSuspended, .-prvTaskIsTaskSuspended
 1630              		.section	.text.vTaskResume,"ax",%progbits
 1631              		.align	2
 1632              		.global	vTaskResume
 1633              		.thumb
 1634              		.thumb_func
 1635              		.type	vTaskResume, %function
 1636              	vTaskResume:
 1637              	.LFB80:
1845:Source/tasks.c **** 
1846:Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1847:Source/tasks.c **** /*-----------------------------------------------------------*/
1848:Source/tasks.c **** 
1849:Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1850:Source/tasks.c **** 
1851:Source/tasks.c **** 	void vTaskResume( TaskHandle_t xTaskToResume )
1852:Source/tasks.c **** 	{
 1638              		.loc 1 1852 0
 1639              		.cfi_startproc
 1640              		@ args = 0, pretend = 0, frame = 16
 1641              		@ frame_needed = 1, uses_anonymous_args = 0
 1642 0000 80B5     		push	{r7, lr}
 1643              		.cfi_def_cfa_offset 8
 1644              		.cfi_offset 7, -8
 1645              		.cfi_offset 14, -4
 1646 0002 84B0     		sub	sp, sp, #16
 1647              		.cfi_def_cfa_offset 24
 1648 0004 00AF     		add	r7, sp, #0
 1649              		.cfi_def_cfa_register 7
 1650 0006 7860     		str	r0, [r7, #4]
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 67


1853:Source/tasks.c **** 	TCB_t * const pxTCB = xTaskToResume;
 1651              		.loc 1 1853 0
 1652 0008 7B68     		ldr	r3, [r7, #4]
 1653 000a FB60     		str	r3, [r7, #12]
1854:Source/tasks.c **** 
1855:Source/tasks.c **** 		/* It does not make sense to resume the calling task. */
1856:Source/tasks.c **** 		configASSERT( xTaskToResume );
1857:Source/tasks.c **** 
1858:Source/tasks.c **** 		/* The parameter cannot be NULL as it is impossible to resume the
1859:Source/tasks.c **** 		currently executing task. */
1860:Source/tasks.c **** 		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 1654              		.loc 1 1860 0
 1655 000c 204B     		ldr	r3, .L119
 1656 000e 1B68     		ldr	r3, [r3]
 1657 0010 FA68     		ldr	r2, [r7, #12]
 1658 0012 9A42     		cmp	r2, r3
 1659 0014 37D0     		beq	.L118
 1660              		.loc 1 1860 0 is_stmt 0 discriminator 1
 1661 0016 FB68     		ldr	r3, [r7, #12]
 1662 0018 002B     		cmp	r3, #0
 1663 001a 34D0     		beq	.L118
1861:Source/tasks.c **** 		{
1862:Source/tasks.c **** 			taskENTER_CRITICAL();
 1664              		.loc 1 1862 0 is_stmt 1
 1665 001c FFF7FEFF 		bl	vPortEnterCritical
1863:Source/tasks.c **** 			{
1864:Source/tasks.c **** 				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 1666              		.loc 1 1864 0
 1667 0020 F868     		ldr	r0, [r7, #12]
 1668 0022 FFF7FEFF 		bl	prvTaskIsTaskSuspended
 1669 0026 0346     		mov	r3, r0
 1670 0028 002B     		cmp	r3, #0
 1671 002a 2AD0     		beq	.L117
1865:Source/tasks.c **** 				{
1866:Source/tasks.c **** 					traceTASK_RESUME( pxTCB );
1867:Source/tasks.c **** 
1868:Source/tasks.c **** 					/* The ready list can be accessed even if the scheduler is
1869:Source/tasks.c **** 					suspended because this is inside a critical section. */
1870:Source/tasks.c **** 					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 1672              		.loc 1 1870 0
 1673 002c FB68     		ldr	r3, [r7, #12]
 1674 002e 0433     		adds	r3, r3, #4
 1675 0030 1846     		mov	r0, r3
 1676 0032 FFF7FEFF 		bl	uxListRemove
1871:Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1677              		.loc 1 1871 0
 1678 0036 FB68     		ldr	r3, [r7, #12]
 1679 0038 DB6A     		ldr	r3, [r3, #44]
 1680 003a 0122     		movs	r2, #1
 1681 003c 9A40     		lsls	r2, r2, r3
 1682 003e 154B     		ldr	r3, .L119+4
 1683 0040 1B68     		ldr	r3, [r3]
 1684 0042 1343     		orrs	r3, r3, r2
 1685 0044 134A     		ldr	r2, .L119+4
 1686 0046 1360     		str	r3, [r2]
 1687 0048 FB68     		ldr	r3, [r7, #12]
 1688 004a DA6A     		ldr	r2, [r3, #44]
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 68


 1689 004c 1346     		mov	r3, r2
 1690 004e 9B00     		lsls	r3, r3, #2
 1691 0050 1344     		add	r3, r3, r2
 1692 0052 9B00     		lsls	r3, r3, #2
 1693 0054 104A     		ldr	r2, .L119+8
 1694 0056 1A44     		add	r2, r2, r3
 1695 0058 FB68     		ldr	r3, [r7, #12]
 1696 005a 0433     		adds	r3, r3, #4
 1697 005c 1946     		mov	r1, r3
 1698 005e 1046     		mov	r0, r2
 1699 0060 FFF7FEFF 		bl	vListInsertEnd
1872:Source/tasks.c **** 
1873:Source/tasks.c **** 					/* A higher priority task may have just been resumed. */
1874:Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 1700              		.loc 1 1874 0
 1701 0064 FB68     		ldr	r3, [r7, #12]
 1702 0066 DA6A     		ldr	r2, [r3, #44]
 1703 0068 094B     		ldr	r3, .L119
 1704 006a 1B68     		ldr	r3, [r3]
 1705 006c DB6A     		ldr	r3, [r3, #44]
 1706 006e 9A42     		cmp	r2, r3
 1707 0070 07D3     		bcc	.L117
1875:Source/tasks.c **** 					{
1876:Source/tasks.c **** 						/* This yield may not cause the task just resumed to run,
1877:Source/tasks.c **** 						but will leave the lists in the correct state for the
1878:Source/tasks.c **** 						next yield. */
1879:Source/tasks.c **** 						taskYIELD_IF_USING_PREEMPTION();
 1708              		.loc 1 1879 0
 1709 0072 0A4B     		ldr	r3, .L119+12
 1710 0074 4FF08052 		mov	r2, #268435456
 1711 0078 1A60     		str	r2, [r3]
 1712              		.syntax unified
 1713              	@ 1879 "Source\tasks.c" 1
 1714 007a BFF34F8F 		dsb
 1715              	@ 0 "" 2
 1716              	@ 1879 "Source\tasks.c" 1
 1717 007e BFF36F8F 		isb
 1718              	@ 0 "" 2
 1719              		.thumb
 1720              		.syntax unified
 1721              	.L117:
1880:Source/tasks.c **** 					}
1881:Source/tasks.c **** 					else
1882:Source/tasks.c **** 					{
1883:Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1884:Source/tasks.c **** 					}
1885:Source/tasks.c **** 				}
1886:Source/tasks.c **** 				else
1887:Source/tasks.c **** 				{
1888:Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1889:Source/tasks.c **** 				}
1890:Source/tasks.c **** 			}
1891:Source/tasks.c **** 			taskEXIT_CRITICAL();
 1722              		.loc 1 1891 0
 1723 0082 FFF7FEFF 		bl	vPortExitCritical
 1724              	.L118:
1892:Source/tasks.c **** 		}
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 69


1893:Source/tasks.c **** 		else
1894:Source/tasks.c **** 		{
1895:Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1896:Source/tasks.c **** 		}
1897:Source/tasks.c **** 	}
 1725              		.loc 1 1897 0
 1726 0086 00BF     		nop
 1727 0088 1037     		adds	r7, r7, #16
 1728              		.cfi_def_cfa_offset 8
 1729 008a BD46     		mov	sp, r7
 1730              		.cfi_def_cfa_register 13
 1731              		@ sp needed
 1732 008c 80BD     		pop	{r7, pc}
 1733              	.L120:
 1734 008e 00BF     		.align	2
 1735              	.L119:
 1736 0090 00000000 		.word	pxCurrentTCB
 1737 0094 E0000000 		.word	uxTopReadyPriority
 1738 0098 04000000 		.word	pxReadyTasksLists
 1739 009c 04ED00E0 		.word	-536810236
 1740              		.cfi_endproc
 1741              	.LFE80:
 1742              		.size	vTaskResume, .-vTaskResume
 1743              		.section	.text.xTaskResumeFromISR,"ax",%progbits
 1744              		.align	2
 1745              		.global	xTaskResumeFromISR
 1746              		.thumb
 1747              		.thumb_func
 1748              		.type	xTaskResumeFromISR, %function
 1749              	xTaskResumeFromISR:
 1750              	.LFB81:
1898:Source/tasks.c **** 
1899:Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1900:Source/tasks.c **** 
1901:Source/tasks.c **** /*-----------------------------------------------------------*/
1902:Source/tasks.c **** 
1903:Source/tasks.c **** #if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )
1904:Source/tasks.c **** 
1905:Source/tasks.c **** 	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
1906:Source/tasks.c **** 	{
 1751              		.loc 1 1906 0
 1752              		.cfi_startproc
 1753              		@ args = 0, pretend = 0, frame = 32
 1754              		@ frame_needed = 1, uses_anonymous_args = 0
 1755 0000 80B5     		push	{r7, lr}
 1756              		.cfi_def_cfa_offset 8
 1757              		.cfi_offset 7, -8
 1758              		.cfi_offset 14, -4
 1759 0002 88B0     		sub	sp, sp, #32
 1760              		.cfi_def_cfa_offset 40
 1761 0004 00AF     		add	r7, sp, #0
 1762              		.cfi_def_cfa_register 7
 1763 0006 7860     		str	r0, [r7, #4]
1907:Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
 1764              		.loc 1 1907 0
 1765 0008 0023     		movs	r3, #0
 1766 000a FB61     		str	r3, [r7, #28]
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 70


1908:Source/tasks.c **** 	TCB_t * const pxTCB = xTaskToResume;
 1767              		.loc 1 1908 0
 1768 000c 7B68     		ldr	r3, [r7, #4]
 1769 000e BB61     		str	r3, [r7, #24]
 1770              	.LBB33:
 1771              	.LBB34:
 213:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	(
 1772              		.loc 2 213 0
 1773              		.syntax unified
 1774              	@ 213 ".\Source\portable\GCC\ARM_CM3/portmacro.h" 1
 1775 0010 EFF31182 			mrs r2, basepri											
 1776 0014 4FF0A003 		mov r3, #160												
 1777 0018 83F31188 		msr basepri, r3											
 1778 001c BFF36F8F 		isb														
 1779 0020 BFF34F8F 		dsb														
 1780              	
 1781              	@ 0 "" 2
 1782              		.thumb
 1783              		.syntax unified
 1784 0024 FA60     		str	r2, [r7, #12]
 1785 0026 BB60     		str	r3, [r7, #8]
 225:.\Source\portable\GCC\ARM_CM3/portmacro.h **** }
 1786              		.loc 2 225 0
 1787 0028 FB68     		ldr	r3, [r7, #12]
 1788              	.LBE34:
 1789              	.LBE33:
1909:Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
1910:Source/tasks.c **** 
1911:Source/tasks.c **** 		configASSERT( xTaskToResume );
1912:Source/tasks.c **** 
1913:Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1914:Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1915:Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1916:Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1917:Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1918:Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
1919:Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1920:Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1921:Source/tasks.c **** 		been assigned a priority above the configured maximum system call
1922:Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1923:Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1924:Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1925:Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1926:Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1927:Source/tasks.c **** 		provided on the following link:
1928:Source/tasks.c **** 		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
1929:Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1930:Source/tasks.c **** 
1931:Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 1790              		.loc 1 1931 0
 1791 002a 3B61     		str	r3, [r7, #16]
1932:Source/tasks.c **** 		{
1933:Source/tasks.c **** 			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 1792              		.loc 1 1933 0
 1793 002c B869     		ldr	r0, [r7, #24]
 1794 002e FFF7FEFF 		bl	prvTaskIsTaskSuspended
 1795 0032 0346     		mov	r3, r0
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 71


 1796 0034 002B     		cmp	r3, #0
 1797 0036 2FD0     		beq	.L123
1934:Source/tasks.c **** 			{
1935:Source/tasks.c **** 				traceTASK_RESUME_FROM_ISR( pxTCB );
1936:Source/tasks.c **** 
1937:Source/tasks.c **** 				/* Check the ready lists can be accessed. */
1938:Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 1798              		.loc 1 1938 0
 1799 0038 1C4B     		ldr	r3, .L128
 1800 003a 1B68     		ldr	r3, [r3]
 1801 003c 002B     		cmp	r3, #0
 1802 003e 25D1     		bne	.L124
1939:Source/tasks.c **** 				{
1940:Source/tasks.c **** 					/* Ready lists can be accessed so move the task from the
1941:Source/tasks.c **** 					suspended list to the ready list directly. */
1942:Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 1803              		.loc 1 1942 0
 1804 0040 BB69     		ldr	r3, [r7, #24]
 1805 0042 DA6A     		ldr	r2, [r3, #44]
 1806 0044 1A4B     		ldr	r3, .L128+4
 1807 0046 1B68     		ldr	r3, [r3]
 1808 0048 DB6A     		ldr	r3, [r3, #44]
 1809 004a 9A42     		cmp	r2, r3
 1810 004c 01D3     		bcc	.L125
1943:Source/tasks.c **** 					{
1944:Source/tasks.c **** 						xYieldRequired = pdTRUE;
 1811              		.loc 1 1944 0
 1812 004e 0123     		movs	r3, #1
 1813 0050 FB61     		str	r3, [r7, #28]
 1814              	.L125:
1945:Source/tasks.c **** 					}
1946:Source/tasks.c **** 					else
1947:Source/tasks.c **** 					{
1948:Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1949:Source/tasks.c **** 					}
1950:Source/tasks.c **** 
1951:Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 1815              		.loc 1 1951 0
 1816 0052 BB69     		ldr	r3, [r7, #24]
 1817 0054 0433     		adds	r3, r3, #4
 1818 0056 1846     		mov	r0, r3
 1819 0058 FFF7FEFF 		bl	uxListRemove
1952:Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1820              		.loc 1 1952 0
 1821 005c BB69     		ldr	r3, [r7, #24]
 1822 005e DB6A     		ldr	r3, [r3, #44]
 1823 0060 0122     		movs	r2, #1
 1824 0062 9A40     		lsls	r2, r2, r3
 1825 0064 134B     		ldr	r3, .L128+8
 1826 0066 1B68     		ldr	r3, [r3]
 1827 0068 1343     		orrs	r3, r3, r2
 1828 006a 124A     		ldr	r2, .L128+8
 1829 006c 1360     		str	r3, [r2]
 1830 006e BB69     		ldr	r3, [r7, #24]
 1831 0070 DA6A     		ldr	r2, [r3, #44]
 1832 0072 1346     		mov	r3, r2
 1833 0074 9B00     		lsls	r3, r3, #2
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 72


 1834 0076 1344     		add	r3, r3, r2
 1835 0078 9B00     		lsls	r3, r3, #2
 1836 007a 0F4A     		ldr	r2, .L128+12
 1837 007c 1A44     		add	r2, r2, r3
 1838 007e BB69     		ldr	r3, [r7, #24]
 1839 0080 0433     		adds	r3, r3, #4
 1840 0082 1946     		mov	r1, r3
 1841 0084 1046     		mov	r0, r2
 1842 0086 FFF7FEFF 		bl	vListInsertEnd
 1843 008a 05E0     		b	.L123
 1844              	.L124:
1953:Source/tasks.c **** 				}
1954:Source/tasks.c **** 				else
1955:Source/tasks.c **** 				{
1956:Source/tasks.c **** 					/* The delayed or ready lists cannot be accessed so the task
1957:Source/tasks.c **** 					is held in the pending ready list until the scheduler is
1958:Source/tasks.c **** 					unsuspended. */
1959:Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 1845              		.loc 1 1959 0
 1846 008c BB69     		ldr	r3, [r7, #24]
 1847 008e 1833     		adds	r3, r3, #24
 1848 0090 1946     		mov	r1, r3
 1849 0092 0A48     		ldr	r0, .L128+16
 1850 0094 FFF7FEFF 		bl	vListInsertEnd
 1851              	.L123:
 1852 0098 3B69     		ldr	r3, [r7, #16]
 1853 009a 7B61     		str	r3, [r7, #20]
 1854              	.LBB35:
 1855              	.LBB36:
 1856              		.loc 2 231 0
 1857 009c 7B69     		ldr	r3, [r7, #20]
 1858              		.syntax unified
 1859              	@ 231 ".\Source\portable\GCC\ARM_CM3/portmacro.h" 1
 1860 009e 83F31188 			msr basepri, r3	
 1861              	@ 0 "" 2
 1862              		.thumb
 1863              		.syntax unified
 1864              	.LBE36:
 1865              	.LBE35:
1960:Source/tasks.c **** 				}
1961:Source/tasks.c **** 			}
1962:Source/tasks.c **** 			else
1963:Source/tasks.c **** 			{
1964:Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1965:Source/tasks.c **** 			}
1966:Source/tasks.c **** 		}
1967:Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1968:Source/tasks.c **** 
1969:Source/tasks.c **** 		return xYieldRequired;
 1866              		.loc 1 1969 0
 1867 00a2 FB69     		ldr	r3, [r7, #28]
1970:Source/tasks.c **** 	}
 1868              		.loc 1 1970 0
 1869 00a4 1846     		mov	r0, r3
 1870 00a6 2037     		adds	r7, r7, #32
 1871              		.cfi_def_cfa_offset 8
 1872 00a8 BD46     		mov	sp, r7
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 73


 1873              		.cfi_def_cfa_register 13
 1874              		@ sp needed
 1875 00aa 80BD     		pop	{r7, pc}
 1876              	.L129:
 1877              		.align	2
 1878              	.L128:
 1879 00ac 00010000 		.word	uxSchedulerSuspended
 1880 00b0 00000000 		.word	pxCurrentTCB
 1881 00b4 E0000000 		.word	uxTopReadyPriority
 1882 00b8 04000000 		.word	pxReadyTasksLists
 1883 00bc 98000000 		.word	xPendingReadyList
 1884              		.cfi_endproc
 1885              	.LFE81:
 1886              		.size	xTaskResumeFromISR, .-xTaskResumeFromISR
 1887              		.section	.rodata
 1888              		.align	2
 1889              	.LC0:
 1890 0000 49444C45 		.ascii	"IDLE\000"
 1890      00
 1891              		.section	.text.vTaskStartScheduler,"ax",%progbits
 1892              		.align	2
 1893              		.global	vTaskStartScheduler
 1894              		.thumb
 1895              		.thumb_func
 1896              		.type	vTaskStartScheduler, %function
 1897              	vTaskStartScheduler:
 1898              	.LFB82:
1971:Source/tasks.c **** 
1972:Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
1973:Source/tasks.c **** /*-----------------------------------------------------------*/
1974:Source/tasks.c **** 
1975:Source/tasks.c **** void vTaskStartScheduler( void )
1976:Source/tasks.c **** {
 1899              		.loc 1 1976 0
 1900              		.cfi_startproc
 1901              		@ args = 0, pretend = 0, frame = 8
 1902              		@ frame_needed = 1, uses_anonymous_args = 0
 1903 0000 80B5     		push	{r7, lr}
 1904              		.cfi_def_cfa_offset 8
 1905              		.cfi_offset 7, -8
 1906              		.cfi_offset 14, -4
 1907 0002 84B0     		sub	sp, sp, #16
 1908              		.cfi_def_cfa_offset 24
 1909 0004 02AF     		add	r7, sp, #8
 1910              		.cfi_def_cfa 7, 16
1977:Source/tasks.c **** BaseType_t xReturn;
1978:Source/tasks.c **** 
1979:Source/tasks.c **** 	/* Add the idle task at the lowest priority. */
1980:Source/tasks.c **** 	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
1981:Source/tasks.c **** 	{
1982:Source/tasks.c **** 		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
1983:Source/tasks.c **** 		StackType_t *pxIdleTaskStackBuffer = NULL;
1984:Source/tasks.c **** 		uint32_t ulIdleTaskStackSize;
1985:Source/tasks.c **** 
1986:Source/tasks.c **** 		/* The Idle task is created using user provided RAM - obtain the
1987:Source/tasks.c **** 		address of the RAM then create the idle task. */
1988:Source/tasks.c **** 		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 74


1989:Source/tasks.c **** 		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
1990:Source/tasks.c **** 												configIDLE_TASK_NAME,
1991:Source/tasks.c **** 												ulIdleTaskStackSize,
1992:Source/tasks.c **** 												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
1993:Source/tasks.c **** 												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_P
1994:Source/tasks.c **** 												pxIdleTaskStackBuffer,
1995:Source/tasks.c **** 												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant
1996:Source/tasks.c **** 
1997:Source/tasks.c **** 		if( xIdleTaskHandle != NULL )
1998:Source/tasks.c **** 		{
1999:Source/tasks.c **** 			xReturn = pdPASS;
2000:Source/tasks.c **** 		}
2001:Source/tasks.c **** 		else
2002:Source/tasks.c **** 		{
2003:Source/tasks.c **** 			xReturn = pdFAIL;
2004:Source/tasks.c **** 		}
2005:Source/tasks.c **** 	}
2006:Source/tasks.c **** 	#else
2007:Source/tasks.c **** 	{
2008:Source/tasks.c **** 		/* The Idle task is being created using dynamically allocated RAM. */
2009:Source/tasks.c **** 		xReturn = xTaskCreate(	prvIdleTask,
 1911              		.loc 1 2009 0
 1912 0006 134B     		ldr	r3, .L133
 1913 0008 0193     		str	r3, [sp, #4]
 1914 000a 0023     		movs	r3, #0
 1915 000c 0093     		str	r3, [sp]
 1916 000e 0023     		movs	r3, #0
 1917 0010 6422     		movs	r2, #100
 1918 0012 1149     		ldr	r1, .L133+4
 1919 0014 1148     		ldr	r0, .L133+8
 1920 0016 FFF7FEFF 		bl	xTaskCreate
 1921 001a 7860     		str	r0, [r7, #4]
2010:Source/tasks.c **** 								configIDLE_TASK_NAME,
2011:Source/tasks.c **** 								configMINIMAL_STACK_SIZE,
2012:Source/tasks.c **** 								( void * ) NULL,
2013:Source/tasks.c **** 								portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIOR
2014:Source/tasks.c **** 								&xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explic
2015:Source/tasks.c **** 	}
2016:Source/tasks.c **** 	#endif /* configSUPPORT_STATIC_ALLOCATION */
2017:Source/tasks.c **** 
2018:Source/tasks.c **** 	#if ( configUSE_TIMERS == 1 )
2019:Source/tasks.c **** 	{
2020:Source/tasks.c **** 		if( xReturn == pdPASS )
2021:Source/tasks.c **** 		{
2022:Source/tasks.c **** 			xReturn = xTimerCreateTimerTask();
2023:Source/tasks.c **** 		}
2024:Source/tasks.c **** 		else
2025:Source/tasks.c **** 		{
2026:Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2027:Source/tasks.c **** 		}
2028:Source/tasks.c **** 	}
2029:Source/tasks.c **** 	#endif /* configUSE_TIMERS */
2030:Source/tasks.c **** 
2031:Source/tasks.c **** 	if( xReturn == pdPASS )
 1922              		.loc 1 2031 0
 1923 001c 7B68     		ldr	r3, [r7, #4]
 1924 001e 012B     		cmp	r3, #1
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 75


 1925 0020 14D1     		bne	.L132
 1926              	.LBB37:
 1927              	.LBB38:
 197:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	(
 1928              		.loc 2 197 0
 1929              		.syntax unified
 1930              	@ 197 ".\Source\portable\GCC\ARM_CM3/portmacro.h" 1
 1931 0022 4FF0A003 			mov r3, #160												
 1932 0026 83F31188 		msr basepri, r3											
 1933 002a BFF36F8F 		isb														
 1934 002e BFF34F8F 		dsb														
 1935              	
 1936              	@ 0 "" 2
 1937              		.thumb
 1938              		.syntax unified
 1939 0032 3B60     		str	r3, [r7]
 1940              	.LBE38:
 1941              	.LBE37:
2032:Source/tasks.c **** 	{
2033:Source/tasks.c **** 		/* freertos_tasks_c_additions_init() should only be called if the user
2034:Source/tasks.c **** 		definable macro FREERTOS_TASKS_C_ADDITIONS_INIT() is defined, as that is
2035:Source/tasks.c **** 		the only macro called by the function. */
2036:Source/tasks.c **** 		#ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
2037:Source/tasks.c **** 		{
2038:Source/tasks.c **** 			freertos_tasks_c_additions_init();
2039:Source/tasks.c **** 		}
2040:Source/tasks.c **** 		#endif
2041:Source/tasks.c **** 
2042:Source/tasks.c **** 		/* Interrupts are turned off here, to ensure a tick does not occur
2043:Source/tasks.c **** 		before or during the call to xPortStartScheduler().  The stacks of
2044:Source/tasks.c **** 		the created tasks contain a status word with interrupts switched on
2045:Source/tasks.c **** 		so interrupts will automatically get re-enabled when the first task
2046:Source/tasks.c **** 		starts to run. */
2047:Source/tasks.c **** 		portDISABLE_INTERRUPTS();
2048:Source/tasks.c **** 
2049:Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
2050:Source/tasks.c **** 		{
2051:Source/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
2052:Source/tasks.c **** 			structure specific to the task that will run first.
2053:Source/tasks.c **** 			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
2054:Source/tasks.c **** 			for additional information. */
2055:Source/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
2056:Source/tasks.c **** 		}
2057:Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
2058:Source/tasks.c **** 
2059:Source/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
 1942              		.loc 1 2059 0
 1943 0034 0A4B     		ldr	r3, .L133+12
 1944 0036 4FF0FF32 		mov	r2, #-1
 1945 003a 1A60     		str	r2, [r3]
2060:Source/tasks.c **** 		xSchedulerRunning = pdTRUE;
 1946              		.loc 1 2060 0
 1947 003c 094B     		ldr	r3, .L133+16
 1948 003e 0122     		movs	r2, #1
 1949 0040 1A60     		str	r2, [r3]
2061:Source/tasks.c **** 		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 1950              		.loc 1 2061 0
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 76


 1951 0042 094B     		ldr	r3, .L133+20
 1952 0044 0022     		movs	r2, #0
 1953 0046 1A60     		str	r2, [r3]
2062:Source/tasks.c **** 
2063:Source/tasks.c **** 		/* If configGENERATE_RUN_TIME_STATS is defined then the following
2064:Source/tasks.c **** 		macro must be defined to configure the timer/counter used to generate
2065:Source/tasks.c **** 		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
2066:Source/tasks.c **** 		is set to 0 and the following line fails to build then ensure you do not
2067:Source/tasks.c **** 		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
2068:Source/tasks.c **** 		FreeRTOSConfig.h file. */
2069:Source/tasks.c **** 		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
2070:Source/tasks.c **** 
2071:Source/tasks.c **** 		traceTASK_SWITCHED_IN();
2072:Source/tasks.c **** 
2073:Source/tasks.c **** 		/* Setting up the timer tick is hardware specific and thus in the
2074:Source/tasks.c **** 		portable interface. */
2075:Source/tasks.c **** 		if( xPortStartScheduler() != pdFALSE )
 1954              		.loc 1 2075 0
 1955 0048 FFF7FEFF 		bl	xPortStartScheduler
 1956              	.L132:
2076:Source/tasks.c **** 		{
2077:Source/tasks.c **** 			/* Should not reach here as if the scheduler is running the
2078:Source/tasks.c **** 			function will not return. */
2079:Source/tasks.c **** 		}
2080:Source/tasks.c **** 		else
2081:Source/tasks.c **** 		{
2082:Source/tasks.c **** 			/* Should only reach here if a task calls xTaskEndScheduler(). */
2083:Source/tasks.c **** 		}
2084:Source/tasks.c **** 	}
2085:Source/tasks.c **** 	else
2086:Source/tasks.c **** 	{
2087:Source/tasks.c **** 		/* This line will only be reached if the kernel could not be started,
2088:Source/tasks.c **** 		because there was not enough FreeRTOS heap to create the idle task
2089:Source/tasks.c **** 		or the timer task. */
2090:Source/tasks.c **** 		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
2091:Source/tasks.c **** 	}
2092:Source/tasks.c **** 
2093:Source/tasks.c **** 	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
2094:Source/tasks.c **** 	meaning xIdleTaskHandle is not used anywhere else. */
2095:Source/tasks.c **** 	( void ) xIdleTaskHandle;
2096:Source/tasks.c **** }
 1957              		.loc 1 2096 0
 1958 004c 00BF     		nop
 1959 004e 0837     		adds	r7, r7, #8
 1960              		.cfi_def_cfa_offset 8
 1961 0050 BD46     		mov	sp, r7
 1962              		.cfi_def_cfa_register 13
 1963              		@ sp needed
 1964 0052 80BD     		pop	{r7, pc}
 1965              	.L134:
 1966              		.align	2
 1967              	.L133:
 1968 0054 FC000000 		.word	xIdleTaskHandle
 1969 0058 00000000 		.word	.LC0
 1970 005c 00000000 		.word	prvIdleTask
 1971 0060 F8000000 		.word	xNextTaskUnblockTime
 1972 0064 E4000000 		.word	xSchedulerRunning
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 77


 1973 0068 DC000000 		.word	xTickCount
 1974              		.cfi_endproc
 1975              	.LFE82:
 1976              		.size	vTaskStartScheduler, .-vTaskStartScheduler
 1977              		.section	.text.vTaskEndScheduler,"ax",%progbits
 1978              		.align	2
 1979              		.global	vTaskEndScheduler
 1980              		.thumb
 1981              		.thumb_func
 1982              		.type	vTaskEndScheduler, %function
 1983              	vTaskEndScheduler:
 1984              	.LFB83:
2097:Source/tasks.c **** /*-----------------------------------------------------------*/
2098:Source/tasks.c **** 
2099:Source/tasks.c **** void vTaskEndScheduler( void )
2100:Source/tasks.c **** {
 1985              		.loc 1 2100 0
 1986              		.cfi_startproc
 1987              		@ args = 0, pretend = 0, frame = 8
 1988              		@ frame_needed = 1, uses_anonymous_args = 0
 1989 0000 80B5     		push	{r7, lr}
 1990              		.cfi_def_cfa_offset 8
 1991              		.cfi_offset 7, -8
 1992              		.cfi_offset 14, -4
 1993 0002 82B0     		sub	sp, sp, #8
 1994              		.cfi_def_cfa_offset 16
 1995 0004 00AF     		add	r7, sp, #0
 1996              		.cfi_def_cfa_register 7
 1997              	.LBB39:
 1998              	.LBB40:
 197:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	(
 1999              		.loc 2 197 0
 2000              		.syntax unified
 2001              	@ 197 ".\Source\portable\GCC\ARM_CM3/portmacro.h" 1
 2002 0006 4FF0A003 			mov r3, #160												
 2003 000a 83F31188 		msr basepri, r3											
 2004 000e BFF36F8F 		isb														
 2005 0012 BFF34F8F 		dsb														
 2006              	
 2007              	@ 0 "" 2
 2008              		.thumb
 2009              		.syntax unified
 2010 0016 7B60     		str	r3, [r7, #4]
 2011              	.LBE40:
 2012              	.LBE39:
2101:Source/tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
2102:Source/tasks.c **** 	routine so the original ISRs can be restored if necessary.  The port
2103:Source/tasks.c **** 	layer must ensure interrupts enable	bit is left in the correct state. */
2104:Source/tasks.c **** 	portDISABLE_INTERRUPTS();
2105:Source/tasks.c **** 	xSchedulerRunning = pdFALSE;
 2013              		.loc 1 2105 0
 2014 0018 044B     		ldr	r3, .L136
 2015 001a 0022     		movs	r2, #0
 2016 001c 1A60     		str	r2, [r3]
2106:Source/tasks.c **** 	vPortEndScheduler();
 2017              		.loc 1 2106 0
 2018 001e FFF7FEFF 		bl	vPortEndScheduler
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 78


2107:Source/tasks.c **** }
 2019              		.loc 1 2107 0
 2020 0022 00BF     		nop
 2021 0024 0837     		adds	r7, r7, #8
 2022              		.cfi_def_cfa_offset 8
 2023 0026 BD46     		mov	sp, r7
 2024              		.cfi_def_cfa_register 13
 2025              		@ sp needed
 2026 0028 80BD     		pop	{r7, pc}
 2027              	.L137:
 2028 002a 00BF     		.align	2
 2029              	.L136:
 2030 002c E4000000 		.word	xSchedulerRunning
 2031              		.cfi_endproc
 2032              	.LFE83:
 2033              		.size	vTaskEndScheduler, .-vTaskEndScheduler
 2034              		.section	.text.vTaskSuspendAll,"ax",%progbits
 2035              		.align	2
 2036              		.global	vTaskSuspendAll
 2037              		.thumb
 2038              		.thumb_func
 2039              		.type	vTaskSuspendAll, %function
 2040              	vTaskSuspendAll:
 2041              	.LFB84:
2108:Source/tasks.c **** /*----------------------------------------------------------*/
2109:Source/tasks.c **** 
2110:Source/tasks.c **** void vTaskSuspendAll( void )
2111:Source/tasks.c **** {
 2042              		.loc 1 2111 0
 2043              		.cfi_startproc
 2044              		@ args = 0, pretend = 0, frame = 0
 2045              		@ frame_needed = 1, uses_anonymous_args = 0
 2046              		@ link register save eliminated.
 2047 0000 80B4     		push	{r7}
 2048              		.cfi_def_cfa_offset 4
 2049              		.cfi_offset 7, -4
 2050 0002 00AF     		add	r7, sp, #0
 2051              		.cfi_def_cfa_register 7
2112:Source/tasks.c **** 	/* A critical section is not required as the variable is of type
2113:Source/tasks.c **** 	BaseType_t.  Please read Richard Barry's reply in the following link to a
2114:Source/tasks.c **** 	post in the FreeRTOS support forum before reporting this as a bug! -
2115:Source/tasks.c **** 	http://goo.gl/wu4acr */
2116:Source/tasks.c **** 
2117:Source/tasks.c **** 	/* portSOFRWARE_BARRIER() is only implemented for emulated/simulated ports that
2118:Source/tasks.c **** 	do not otherwise exhibit real time behaviour. */
2119:Source/tasks.c **** 	portSOFTWARE_BARRIER();
2120:Source/tasks.c **** 
2121:Source/tasks.c **** 	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
2122:Source/tasks.c **** 	is used to allow calls to vTaskSuspendAll() to nest. */
2123:Source/tasks.c **** 	++uxSchedulerSuspended;
 2052              		.loc 1 2123 0
 2053 0004 044B     		ldr	r3, .L139
 2054 0006 1B68     		ldr	r3, [r3]
 2055 0008 0133     		adds	r3, r3, #1
 2056 000a 034A     		ldr	r2, .L139
 2057 000c 1360     		str	r3, [r2]
2124:Source/tasks.c **** 
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 79


2125:Source/tasks.c **** 	/* Enforces ordering for ports and optimised compilers that may otherwise place
2126:Source/tasks.c **** 	the above increment elsewhere. */
2127:Source/tasks.c **** 	portMEMORY_BARRIER();
 2058              		.loc 1 2127 0
2128:Source/tasks.c **** }
 2059              		.loc 1 2128 0
 2060 000e 00BF     		nop
 2061 0010 BD46     		mov	sp, r7
 2062              		.cfi_def_cfa_register 13
 2063              		@ sp needed
 2064 0012 80BC     		pop	{r7}
 2065              		.cfi_restore 7
 2066              		.cfi_def_cfa_offset 0
 2067 0014 7047     		bx	lr
 2068              	.L140:
 2069 0016 00BF     		.align	2
 2070              	.L139:
 2071 0018 00010000 		.word	uxSchedulerSuspended
 2072              		.cfi_endproc
 2073              	.LFE84:
 2074              		.size	vTaskSuspendAll, .-vTaskSuspendAll
 2075              		.section	.text.xTaskResumeAll,"ax",%progbits
 2076              		.align	2
 2077              		.global	xTaskResumeAll
 2078              		.thumb
 2079              		.thumb_func
 2080              		.type	xTaskResumeAll, %function
 2081              	xTaskResumeAll:
 2082              	.LFB85:
2129:Source/tasks.c **** /*----------------------------------------------------------*/
2130:Source/tasks.c **** 
2131:Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2132:Source/tasks.c **** 
2133:Source/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void )
2134:Source/tasks.c **** 	{
2135:Source/tasks.c **** 	TickType_t xReturn;
2136:Source/tasks.c **** 	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
2137:Source/tasks.c **** 
2138:Source/tasks.c **** 		/* uxHigherPriorityReadyTasks takes care of the case where
2139:Source/tasks.c **** 		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
2140:Source/tasks.c **** 		task that are in the Ready state, even though the idle task is
2141:Source/tasks.c **** 		running. */
2142:Source/tasks.c **** 		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
2143:Source/tasks.c **** 		{
2144:Source/tasks.c **** 			if( uxTopReadyPriority > tskIDLE_PRIORITY )
2145:Source/tasks.c **** 			{
2146:Source/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
2147:Source/tasks.c **** 			}
2148:Source/tasks.c **** 		}
2149:Source/tasks.c **** 		#else
2150:Source/tasks.c **** 		{
2151:Source/tasks.c **** 			const UBaseType_t uxLeastSignificantBit = ( UBaseType_t ) 0x01;
2152:Source/tasks.c **** 
2153:Source/tasks.c **** 			/* When port optimised task selection is used the uxTopReadyPriority
2154:Source/tasks.c **** 			variable is used as a bit map.  If bits other than the least
2155:Source/tasks.c **** 			significant bit are set then there are tasks that have a priority
2156:Source/tasks.c **** 			above the idle priority that are in the Ready state.  This takes
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 80


2157:Source/tasks.c **** 			care of the case where the co-operative scheduler is in use. */
2158:Source/tasks.c **** 			if( uxTopReadyPriority > uxLeastSignificantBit )
2159:Source/tasks.c **** 			{
2160:Source/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
2161:Source/tasks.c **** 			}
2162:Source/tasks.c **** 		}
2163:Source/tasks.c **** 		#endif
2164:Source/tasks.c **** 
2165:Source/tasks.c **** 		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
2166:Source/tasks.c **** 		{
2167:Source/tasks.c **** 			xReturn = 0;
2168:Source/tasks.c **** 		}
2169:Source/tasks.c **** 		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
2170:Source/tasks.c **** 		{
2171:Source/tasks.c **** 			/* There are other idle priority tasks in the ready state.  If
2172:Source/tasks.c **** 			time slicing is used then the very next tick interrupt must be
2173:Source/tasks.c **** 			processed. */
2174:Source/tasks.c **** 			xReturn = 0;
2175:Source/tasks.c **** 		}
2176:Source/tasks.c **** 		else if( uxHigherPriorityReadyTasks != pdFALSE )
2177:Source/tasks.c **** 		{
2178:Source/tasks.c **** 			/* There are tasks in the Ready state that have a priority above the
2179:Source/tasks.c **** 			idle priority.  This path can only be reached if
2180:Source/tasks.c **** 			configUSE_PREEMPTION is 0. */
2181:Source/tasks.c **** 			xReturn = 0;
2182:Source/tasks.c **** 		}
2183:Source/tasks.c **** 		else
2184:Source/tasks.c **** 		{
2185:Source/tasks.c **** 			xReturn = xNextTaskUnblockTime - xTickCount;
2186:Source/tasks.c **** 		}
2187:Source/tasks.c **** 
2188:Source/tasks.c **** 		return xReturn;
2189:Source/tasks.c **** 	}
2190:Source/tasks.c **** 
2191:Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2192:Source/tasks.c **** /*----------------------------------------------------------*/
2193:Source/tasks.c **** 
2194:Source/tasks.c **** BaseType_t xTaskResumeAll( void )
2195:Source/tasks.c **** {
 2083              		.loc 1 2195 0
 2084              		.cfi_startproc
 2085              		@ args = 0, pretend = 0, frame = 16
 2086              		@ frame_needed = 1, uses_anonymous_args = 0
 2087 0000 80B5     		push	{r7, lr}
 2088              		.cfi_def_cfa_offset 8
 2089              		.cfi_offset 7, -8
 2090              		.cfi_offset 14, -4
 2091 0002 84B0     		sub	sp, sp, #16
 2092              		.cfi_def_cfa_offset 24
 2093 0004 00AF     		add	r7, sp, #0
 2094              		.cfi_def_cfa_register 7
2196:Source/tasks.c **** TCB_t *pxTCB = NULL;
 2095              		.loc 1 2196 0
 2096 0006 0023     		movs	r3, #0
 2097 0008 FB60     		str	r3, [r7, #12]
2197:Source/tasks.c **** BaseType_t xAlreadyYielded = pdFALSE;
 2098              		.loc 1 2197 0
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 81


 2099 000a 0023     		movs	r3, #0
 2100 000c BB60     		str	r3, [r7, #8]
2198:Source/tasks.c **** 
2199:Source/tasks.c **** 	/* If uxSchedulerSuspended is zero then this function does not match a
2200:Source/tasks.c **** 	previous call to vTaskSuspendAll(). */
2201:Source/tasks.c **** 	configASSERT( uxSchedulerSuspended );
2202:Source/tasks.c **** 
2203:Source/tasks.c **** 	/* It is possible that an ISR caused a task to be removed from an event
2204:Source/tasks.c **** 	list while the scheduler was suspended.  If this was the case then the
2205:Source/tasks.c **** 	removed task will have been added to the xPendingReadyList.  Once the
2206:Source/tasks.c **** 	scheduler has been resumed it is safe to move all the pending ready
2207:Source/tasks.c **** 	tasks from this list into their appropriate ready list. */
2208:Source/tasks.c **** 	taskENTER_CRITICAL();
 2101              		.loc 1 2208 0
 2102 000e FFF7FEFF 		bl	vPortEnterCritical
2209:Source/tasks.c **** 	{
2210:Source/tasks.c **** 		--uxSchedulerSuspended;
 2103              		.loc 1 2210 0
 2104 0012 394B     		ldr	r3, .L150
 2105 0014 1B68     		ldr	r3, [r3]
 2106 0016 013B     		subs	r3, r3, #1
 2107 0018 374A     		ldr	r2, .L150
 2108 001a 1360     		str	r3, [r2]
2211:Source/tasks.c **** 
2212:Source/tasks.c **** 		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 2109              		.loc 1 2212 0
 2110 001c 364B     		ldr	r3, .L150
 2111 001e 1B68     		ldr	r3, [r3]
 2112 0020 002B     		cmp	r3, #0
 2113 0022 61D1     		bne	.L142
2213:Source/tasks.c **** 		{
2214:Source/tasks.c **** 			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 2114              		.loc 1 2214 0
 2115 0024 354B     		ldr	r3, .L150+4
 2116 0026 1B68     		ldr	r3, [r3]
 2117 0028 002B     		cmp	r3, #0
 2118 002a 5DD0     		beq	.L142
2215:Source/tasks.c **** 			{
2216:Source/tasks.c **** 				/* Move any readied tasks from the pending list into the
2217:Source/tasks.c **** 				appropriate ready list. */
2218:Source/tasks.c **** 				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 2119              		.loc 1 2218 0
 2120 002c 2EE0     		b	.L143
 2121              	.L144:
2219:Source/tasks.c **** 				{
2220:Source/tasks.c **** 					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as
 2122              		.loc 1 2220 0
 2123 002e 344B     		ldr	r3, .L150+8
 2124 0030 DB68     		ldr	r3, [r3, #12]
 2125 0032 DB68     		ldr	r3, [r3, #12]
 2126 0034 FB60     		str	r3, [r7, #12]
2221:Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 2127              		.loc 1 2221 0
 2128 0036 FB68     		ldr	r3, [r7, #12]
 2129 0038 1833     		adds	r3, r3, #24
 2130 003a 1846     		mov	r0, r3
 2131 003c FFF7FEFF 		bl	uxListRemove
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 82


2222:Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 2132              		.loc 1 2222 0
 2133 0040 FB68     		ldr	r3, [r7, #12]
 2134 0042 0433     		adds	r3, r3, #4
 2135 0044 1846     		mov	r0, r3
 2136 0046 FFF7FEFF 		bl	uxListRemove
2223:Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 2137              		.loc 1 2223 0
 2138 004a FB68     		ldr	r3, [r7, #12]
 2139 004c DB6A     		ldr	r3, [r3, #44]
 2140 004e 0122     		movs	r2, #1
 2141 0050 9A40     		lsls	r2, r2, r3
 2142 0052 2C4B     		ldr	r3, .L150+12
 2143 0054 1B68     		ldr	r3, [r3]
 2144 0056 1343     		orrs	r3, r3, r2
 2145 0058 2A4A     		ldr	r2, .L150+12
 2146 005a 1360     		str	r3, [r2]
 2147 005c FB68     		ldr	r3, [r7, #12]
 2148 005e DA6A     		ldr	r2, [r3, #44]
 2149 0060 1346     		mov	r3, r2
 2150 0062 9B00     		lsls	r3, r3, #2
 2151 0064 1344     		add	r3, r3, r2
 2152 0066 9B00     		lsls	r3, r3, #2
 2153 0068 274A     		ldr	r2, .L150+16
 2154 006a 1A44     		add	r2, r2, r3
 2155 006c FB68     		ldr	r3, [r7, #12]
 2156 006e 0433     		adds	r3, r3, #4
 2157 0070 1946     		mov	r1, r3
 2158 0072 1046     		mov	r0, r2
 2159 0074 FFF7FEFF 		bl	vListInsertEnd
2224:Source/tasks.c **** 
2225:Source/tasks.c **** 					/* If the moved task has a priority higher than the current
2226:Source/tasks.c **** 					task then a yield must be performed. */
2227:Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 2160              		.loc 1 2227 0
 2161 0078 FB68     		ldr	r3, [r7, #12]
 2162 007a DA6A     		ldr	r2, [r3, #44]
 2163 007c 234B     		ldr	r3, .L150+20
 2164 007e 1B68     		ldr	r3, [r3]
 2165 0080 DB6A     		ldr	r3, [r3, #44]
 2166 0082 9A42     		cmp	r2, r3
 2167 0084 02D3     		bcc	.L143
2228:Source/tasks.c **** 					{
2229:Source/tasks.c **** 						xYieldPending = pdTRUE;
 2168              		.loc 1 2229 0
 2169 0086 224B     		ldr	r3, .L150+24
 2170 0088 0122     		movs	r2, #1
 2171 008a 1A60     		str	r2, [r3]
 2172              	.L143:
2218:Source/tasks.c **** 				{
 2173              		.loc 1 2218 0
 2174 008c 1C4B     		ldr	r3, .L150+8
 2175 008e 1B68     		ldr	r3, [r3]
 2176 0090 002B     		cmp	r3, #0
 2177 0092 CCD1     		bne	.L144
2230:Source/tasks.c **** 					}
2231:Source/tasks.c **** 					else
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 83


2232:Source/tasks.c **** 					{
2233:Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2234:Source/tasks.c **** 					}
2235:Source/tasks.c **** 				}
2236:Source/tasks.c **** 
2237:Source/tasks.c **** 				if( pxTCB != NULL )
 2178              		.loc 1 2237 0
 2179 0094 FB68     		ldr	r3, [r7, #12]
 2180 0096 002B     		cmp	r3, #0
 2181 0098 01D0     		beq	.L145
2238:Source/tasks.c **** 				{
2239:Source/tasks.c **** 					/* A task was unblocked while the scheduler was suspended,
2240:Source/tasks.c **** 					which may have prevented the next unblock time from being
2241:Source/tasks.c **** 					re-calculated, in which case re-calculate it now.  Mainly
2242:Source/tasks.c **** 					important for low power tickless implementations, where
2243:Source/tasks.c **** 					this can prevent an unnecessary exit from low power
2244:Source/tasks.c **** 					state. */
2245:Source/tasks.c **** 					prvResetNextTaskUnblockTime();
 2182              		.loc 1 2245 0
 2183 009a FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 2184              	.L145:
 2185              	.LBB41:
2246:Source/tasks.c **** 				}
2247:Source/tasks.c **** 
2248:Source/tasks.c **** 				/* If any ticks occurred while the scheduler was suspended then
2249:Source/tasks.c **** 				they should be processed now.  This ensures the tick count does
2250:Source/tasks.c **** 				not	slip, and that any delayed tasks are resumed at the correct
2251:Source/tasks.c **** 				time. */
2252:Source/tasks.c **** 				{
2253:Source/tasks.c **** 					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 2186              		.loc 1 2253 0
 2187 009e 1D4B     		ldr	r3, .L150+28
 2188 00a0 1B68     		ldr	r3, [r3]
 2189 00a2 7B60     		str	r3, [r7, #4]
2254:Source/tasks.c **** 
2255:Source/tasks.c **** 					if( xPendedCounts > ( TickType_t ) 0U )
 2190              		.loc 1 2255 0
 2191 00a4 7B68     		ldr	r3, [r7, #4]
 2192 00a6 002B     		cmp	r3, #0
 2193 00a8 10D0     		beq	.L146
 2194              	.L148:
2256:Source/tasks.c **** 					{
2257:Source/tasks.c **** 						do
2258:Source/tasks.c **** 						{
2259:Source/tasks.c **** 							if( xTaskIncrementTick() != pdFALSE )
 2195              		.loc 1 2259 0
 2196 00aa FFF7FEFF 		bl	xTaskIncrementTick
 2197 00ae 0346     		mov	r3, r0
 2198 00b0 002B     		cmp	r3, #0
 2199 00b2 02D0     		beq	.L147
2260:Source/tasks.c **** 							{
2261:Source/tasks.c **** 								xYieldPending = pdTRUE;
 2200              		.loc 1 2261 0
 2201 00b4 164B     		ldr	r3, .L150+24
 2202 00b6 0122     		movs	r2, #1
 2203 00b8 1A60     		str	r2, [r3]
 2204              	.L147:
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 84


2262:Source/tasks.c **** 							}
2263:Source/tasks.c **** 							else
2264:Source/tasks.c **** 							{
2265:Source/tasks.c **** 								mtCOVERAGE_TEST_MARKER();
2266:Source/tasks.c **** 							}
2267:Source/tasks.c **** 							--xPendedCounts;
 2205              		.loc 1 2267 0
 2206 00ba 7B68     		ldr	r3, [r7, #4]
 2207 00bc 013B     		subs	r3, r3, #1
 2208 00be 7B60     		str	r3, [r7, #4]
2268:Source/tasks.c **** 						} while( xPendedCounts > ( TickType_t ) 0U );
 2209              		.loc 1 2268 0
 2210 00c0 7B68     		ldr	r3, [r7, #4]
 2211 00c2 002B     		cmp	r3, #0
 2212 00c4 F1D1     		bne	.L148
2269:Source/tasks.c **** 
2270:Source/tasks.c **** 						xPendedTicks = 0;
 2213              		.loc 1 2270 0
 2214 00c6 134B     		ldr	r3, .L150+28
 2215 00c8 0022     		movs	r2, #0
 2216 00ca 1A60     		str	r2, [r3]
 2217              	.L146:
 2218              	.LBE41:
2271:Source/tasks.c **** 					}
2272:Source/tasks.c **** 					else
2273:Source/tasks.c **** 					{
2274:Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2275:Source/tasks.c **** 					}
2276:Source/tasks.c **** 				}
2277:Source/tasks.c **** 
2278:Source/tasks.c **** 				if( xYieldPending != pdFALSE )
 2219              		.loc 1 2278 0
 2220 00cc 104B     		ldr	r3, .L150+24
 2221 00ce 1B68     		ldr	r3, [r3]
 2222 00d0 002B     		cmp	r3, #0
 2223 00d2 09D0     		beq	.L142
2279:Source/tasks.c **** 				{
2280:Source/tasks.c **** 					#if( configUSE_PREEMPTION != 0 )
2281:Source/tasks.c **** 					{
2282:Source/tasks.c **** 						xAlreadyYielded = pdTRUE;
 2224              		.loc 1 2282 0
 2225 00d4 0123     		movs	r3, #1
 2226 00d6 BB60     		str	r3, [r7, #8]
2283:Source/tasks.c **** 					}
2284:Source/tasks.c **** 					#endif
2285:Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
 2227              		.loc 1 2285 0
 2228 00d8 0F4B     		ldr	r3, .L150+32
 2229 00da 4FF08052 		mov	r2, #268435456
 2230 00de 1A60     		str	r2, [r3]
 2231              		.syntax unified
 2232              	@ 2285 "Source\tasks.c" 1
 2233 00e0 BFF34F8F 		dsb
 2234              	@ 0 "" 2
 2235              	@ 2285 "Source\tasks.c" 1
 2236 00e4 BFF36F8F 		isb
 2237              	@ 0 "" 2
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 85


 2238              		.thumb
 2239              		.syntax unified
 2240              	.L142:
2286:Source/tasks.c **** 				}
2287:Source/tasks.c **** 				else
2288:Source/tasks.c **** 				{
2289:Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
2290:Source/tasks.c **** 				}
2291:Source/tasks.c **** 			}
2292:Source/tasks.c **** 		}
2293:Source/tasks.c **** 		else
2294:Source/tasks.c **** 		{
2295:Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2296:Source/tasks.c **** 		}
2297:Source/tasks.c **** 	}
2298:Source/tasks.c **** 	taskEXIT_CRITICAL();
 2241              		.loc 1 2298 0
 2242 00e8 FFF7FEFF 		bl	vPortExitCritical
2299:Source/tasks.c **** 
2300:Source/tasks.c **** 	return xAlreadyYielded;
 2243              		.loc 1 2300 0
 2244 00ec BB68     		ldr	r3, [r7, #8]
2301:Source/tasks.c **** }
 2245              		.loc 1 2301 0
 2246 00ee 1846     		mov	r0, r3
 2247 00f0 1037     		adds	r7, r7, #16
 2248              		.cfi_def_cfa_offset 8
 2249 00f2 BD46     		mov	sp, r7
 2250              		.cfi_def_cfa_register 13
 2251              		@ sp needed
 2252 00f4 80BD     		pop	{r7, pc}
 2253              	.L151:
 2254 00f6 00BF     		.align	2
 2255              	.L150:
 2256 00f8 00010000 		.word	uxSchedulerSuspended
 2257 00fc D8000000 		.word	uxCurrentNumberOfTasks
 2258 0100 98000000 		.word	xPendingReadyList
 2259 0104 E0000000 		.word	uxTopReadyPriority
 2260 0108 04000000 		.word	pxReadyTasksLists
 2261 010c 00000000 		.word	pxCurrentTCB
 2262 0110 EC000000 		.word	xYieldPending
 2263 0114 E8000000 		.word	xPendedTicks
 2264 0118 04ED00E0 		.word	-536810236
 2265              		.cfi_endproc
 2266              	.LFE85:
 2267              		.size	xTaskResumeAll, .-xTaskResumeAll
 2268              		.section	.text.xTaskGetTickCount,"ax",%progbits
 2269              		.align	2
 2270              		.global	xTaskGetTickCount
 2271              		.thumb
 2272              		.thumb_func
 2273              		.type	xTaskGetTickCount, %function
 2274              	xTaskGetTickCount:
 2275              	.LFB86:
2302:Source/tasks.c **** /*-----------------------------------------------------------*/
2303:Source/tasks.c **** 
2304:Source/tasks.c **** TickType_t xTaskGetTickCount( void )
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 86


2305:Source/tasks.c **** {
 2276              		.loc 1 2305 0
 2277              		.cfi_startproc
 2278              		@ args = 0, pretend = 0, frame = 8
 2279              		@ frame_needed = 1, uses_anonymous_args = 0
 2280              		@ link register save eliminated.
 2281 0000 80B4     		push	{r7}
 2282              		.cfi_def_cfa_offset 4
 2283              		.cfi_offset 7, -4
 2284 0002 83B0     		sub	sp, sp, #12
 2285              		.cfi_def_cfa_offset 16
 2286 0004 00AF     		add	r7, sp, #0
 2287              		.cfi_def_cfa_register 7
2306:Source/tasks.c **** TickType_t xTicks;
2307:Source/tasks.c **** 
2308:Source/tasks.c **** 	/* Critical section required if running on a 16 bit processor. */
2309:Source/tasks.c **** 	portTICK_TYPE_ENTER_CRITICAL();
2310:Source/tasks.c **** 	{
2311:Source/tasks.c **** 		xTicks = xTickCount;
 2288              		.loc 1 2311 0
 2289 0006 044B     		ldr	r3, .L154
 2290 0008 1B68     		ldr	r3, [r3]
 2291 000a 7B60     		str	r3, [r7, #4]
2312:Source/tasks.c **** 	}
2313:Source/tasks.c **** 	portTICK_TYPE_EXIT_CRITICAL();
2314:Source/tasks.c **** 
2315:Source/tasks.c **** 	return xTicks;
 2292              		.loc 1 2315 0
 2293 000c 7B68     		ldr	r3, [r7, #4]
2316:Source/tasks.c **** }
 2294              		.loc 1 2316 0
 2295 000e 1846     		mov	r0, r3
 2296 0010 0C37     		adds	r7, r7, #12
 2297              		.cfi_def_cfa_offset 4
 2298 0012 BD46     		mov	sp, r7
 2299              		.cfi_def_cfa_register 13
 2300              		@ sp needed
 2301 0014 80BC     		pop	{r7}
 2302              		.cfi_restore 7
 2303              		.cfi_def_cfa_offset 0
 2304 0016 7047     		bx	lr
 2305              	.L155:
 2306              		.align	2
 2307              	.L154:
 2308 0018 DC000000 		.word	xTickCount
 2309              		.cfi_endproc
 2310              	.LFE86:
 2311              		.size	xTaskGetTickCount, .-xTaskGetTickCount
 2312              		.section	.text.xTaskGetTickCountFromISR,"ax",%progbits
 2313              		.align	2
 2314              		.global	xTaskGetTickCountFromISR
 2315              		.thumb
 2316              		.thumb_func
 2317              		.type	xTaskGetTickCountFromISR, %function
 2318              	xTaskGetTickCountFromISR:
 2319              	.LFB87:
2317:Source/tasks.c **** /*-----------------------------------------------------------*/
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 87


2318:Source/tasks.c **** 
2319:Source/tasks.c **** TickType_t xTaskGetTickCountFromISR( void )
2320:Source/tasks.c **** {
 2320              		.loc 1 2320 0
 2321              		.cfi_startproc
 2322              		@ args = 0, pretend = 0, frame = 8
 2323              		@ frame_needed = 1, uses_anonymous_args = 0
 2324              		@ link register save eliminated.
 2325 0000 80B4     		push	{r7}
 2326              		.cfi_def_cfa_offset 4
 2327              		.cfi_offset 7, -4
 2328 0002 83B0     		sub	sp, sp, #12
 2329              		.cfi_def_cfa_offset 16
 2330 0004 00AF     		add	r7, sp, #0
 2331              		.cfi_def_cfa_register 7
2321:Source/tasks.c **** TickType_t xReturn;
2322:Source/tasks.c **** UBaseType_t uxSavedInterruptStatus;
2323:Source/tasks.c **** 
2324:Source/tasks.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
2325:Source/tasks.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
2326:Source/tasks.c **** 	above the maximum system call priority are kept permanently enabled, even
2327:Source/tasks.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
2328:Source/tasks.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
2329:Source/tasks.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
2330:Source/tasks.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
2331:Source/tasks.c **** 	assigned a priority above the configured maximum system call priority.
2332:Source/tasks.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
2333:Source/tasks.c **** 	that have been assigned a priority at or (logically) below the maximum
2334:Source/tasks.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
2335:Source/tasks.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
2336:Source/tasks.c **** 	More information (albeit Cortex-M specific) is provided on the following
2337:Source/tasks.c **** 	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
2338:Source/tasks.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
2339:Source/tasks.c **** 
2340:Source/tasks.c **** 	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 2332              		.loc 1 2340 0
 2333 0006 0023     		movs	r3, #0
 2334 0008 7B60     		str	r3, [r7, #4]
2341:Source/tasks.c **** 	{
2342:Source/tasks.c **** 		xReturn = xTickCount;
 2335              		.loc 1 2342 0
 2336 000a 044B     		ldr	r3, .L158
 2337 000c 1B68     		ldr	r3, [r3]
 2338 000e 3B60     		str	r3, [r7]
2343:Source/tasks.c **** 	}
2344:Source/tasks.c **** 	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
2345:Source/tasks.c **** 
2346:Source/tasks.c **** 	return xReturn;
 2339              		.loc 1 2346 0
 2340 0010 3B68     		ldr	r3, [r7]
2347:Source/tasks.c **** }
 2341              		.loc 1 2347 0
 2342 0012 1846     		mov	r0, r3
 2343 0014 0C37     		adds	r7, r7, #12
 2344              		.cfi_def_cfa_offset 4
 2345 0016 BD46     		mov	sp, r7
 2346              		.cfi_def_cfa_register 13
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 88


 2347              		@ sp needed
 2348 0018 80BC     		pop	{r7}
 2349              		.cfi_restore 7
 2350              		.cfi_def_cfa_offset 0
 2351 001a 7047     		bx	lr
 2352              	.L159:
 2353              		.align	2
 2354              	.L158:
 2355 001c DC000000 		.word	xTickCount
 2356              		.cfi_endproc
 2357              	.LFE87:
 2358              		.size	xTaskGetTickCountFromISR, .-xTaskGetTickCountFromISR
 2359              		.section	.text.uxTaskGetNumberOfTasks,"ax",%progbits
 2360              		.align	2
 2361              		.global	uxTaskGetNumberOfTasks
 2362              		.thumb
 2363              		.thumb_func
 2364              		.type	uxTaskGetNumberOfTasks, %function
 2365              	uxTaskGetNumberOfTasks:
 2366              	.LFB88:
2348:Source/tasks.c **** /*-----------------------------------------------------------*/
2349:Source/tasks.c **** 
2350:Source/tasks.c **** UBaseType_t uxTaskGetNumberOfTasks( void )
2351:Source/tasks.c **** {
 2367              		.loc 1 2351 0
 2368              		.cfi_startproc
 2369              		@ args = 0, pretend = 0, frame = 0
 2370              		@ frame_needed = 1, uses_anonymous_args = 0
 2371              		@ link register save eliminated.
 2372 0000 80B4     		push	{r7}
 2373              		.cfi_def_cfa_offset 4
 2374              		.cfi_offset 7, -4
 2375 0002 00AF     		add	r7, sp, #0
 2376              		.cfi_def_cfa_register 7
2352:Source/tasks.c **** 	/* A critical section is not required because the variables are of type
2353:Source/tasks.c **** 	BaseType_t. */
2354:Source/tasks.c **** 	return uxCurrentNumberOfTasks;
 2377              		.loc 1 2354 0
 2378 0004 024B     		ldr	r3, .L162
 2379 0006 1B68     		ldr	r3, [r3]
2355:Source/tasks.c **** }
 2380              		.loc 1 2355 0
 2381 0008 1846     		mov	r0, r3
 2382 000a BD46     		mov	sp, r7
 2383              		.cfi_def_cfa_register 13
 2384              		@ sp needed
 2385 000c 80BC     		pop	{r7}
 2386              		.cfi_restore 7
 2387              		.cfi_def_cfa_offset 0
 2388 000e 7047     		bx	lr
 2389              	.L163:
 2390              		.align	2
 2391              	.L162:
 2392 0010 D8000000 		.word	uxCurrentNumberOfTasks
 2393              		.cfi_endproc
 2394              	.LFE88:
 2395              		.size	uxTaskGetNumberOfTasks, .-uxTaskGetNumberOfTasks
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 89


 2396              		.section	.text.pcTaskGetName,"ax",%progbits
 2397              		.align	2
 2398              		.global	pcTaskGetName
 2399              		.thumb
 2400              		.thumb_func
 2401              		.type	pcTaskGetName, %function
 2402              	pcTaskGetName:
 2403              	.LFB89:
2356:Source/tasks.c **** /*-----------------------------------------------------------*/
2357:Source/tasks.c **** 
2358:Source/tasks.c **** char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed fo
2359:Source/tasks.c **** {
 2404              		.loc 1 2359 0
 2405              		.cfi_startproc
 2406              		@ args = 0, pretend = 0, frame = 16
 2407              		@ frame_needed = 1, uses_anonymous_args = 0
 2408              		@ link register save eliminated.
 2409 0000 80B4     		push	{r7}
 2410              		.cfi_def_cfa_offset 4
 2411              		.cfi_offset 7, -4
 2412 0002 85B0     		sub	sp, sp, #20
 2413              		.cfi_def_cfa_offset 24
 2414 0004 00AF     		add	r7, sp, #0
 2415              		.cfi_def_cfa_register 7
 2416 0006 7860     		str	r0, [r7, #4]
2360:Source/tasks.c **** TCB_t *pxTCB;
2361:Source/tasks.c **** 
2362:Source/tasks.c **** 	/* If null is passed in here then the name of the calling task is being
2363:Source/tasks.c **** 	queried. */
2364:Source/tasks.c **** 	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 2417              		.loc 1 2364 0
 2418 0008 7B68     		ldr	r3, [r7, #4]
 2419 000a 002B     		cmp	r3, #0
 2420 000c 02D1     		bne	.L165
 2421              		.loc 1 2364 0 is_stmt 0 discriminator 1
 2422 000e 064B     		ldr	r3, .L168
 2423 0010 1B68     		ldr	r3, [r3]
 2424 0012 00E0     		b	.L166
 2425              	.L165:
 2426              		.loc 1 2364 0 discriminator 2
 2427 0014 7B68     		ldr	r3, [r7, #4]
 2428              	.L166:
 2429              		.loc 1 2364 0 discriminator 4
 2430 0016 FB60     		str	r3, [r7, #12]
2365:Source/tasks.c **** 	configASSERT( pxTCB );
2366:Source/tasks.c **** 	return &( pxTCB->pcTaskName[ 0 ] );
 2431              		.loc 1 2366 0 is_stmt 1 discriminator 4
 2432 0018 FB68     		ldr	r3, [r7, #12]
 2433 001a 3433     		adds	r3, r3, #52
2367:Source/tasks.c **** }
 2434              		.loc 1 2367 0 discriminator 4
 2435 001c 1846     		mov	r0, r3
 2436 001e 1437     		adds	r7, r7, #20
 2437              		.cfi_def_cfa_offset 4
 2438 0020 BD46     		mov	sp, r7
 2439              		.cfi_def_cfa_register 13
 2440              		@ sp needed
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 90


 2441 0022 80BC     		pop	{r7}
 2442              		.cfi_restore 7
 2443              		.cfi_def_cfa_offset 0
 2444 0024 7047     		bx	lr
 2445              	.L169:
 2446 0026 00BF     		.align	2
 2447              	.L168:
 2448 0028 00000000 		.word	pxCurrentTCB
 2449              		.cfi_endproc
 2450              	.LFE89:
 2451              		.size	pcTaskGetName, .-pcTaskGetName
 2452              		.section	.text.xTaskCatchUpTicks,"ax",%progbits
 2453              		.align	2
 2454              		.global	xTaskCatchUpTicks
 2455              		.thumb
 2456              		.thumb_func
 2457              		.type	xTaskCatchUpTicks, %function
 2458              	xTaskCatchUpTicks:
 2459              	.LFB90:
2368:Source/tasks.c **** /*-----------------------------------------------------------*/
2369:Source/tasks.c **** 
2370:Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2371:Source/tasks.c **** 
2372:Source/tasks.c **** 	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] )
2373:Source/tasks.c **** 	{
2374:Source/tasks.c **** 	TCB_t *pxNextTCB, *pxFirstTCB, *pxReturn = NULL;
2375:Source/tasks.c **** 	UBaseType_t x;
2376:Source/tasks.c **** 	char cNextChar;
2377:Source/tasks.c **** 	BaseType_t xBreakLoop;
2378:Source/tasks.c **** 
2379:Source/tasks.c **** 		/* This function is called with the scheduler suspended. */
2380:Source/tasks.c **** 
2381:Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
2382:Source/tasks.c **** 		{
2383:Source/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );  /*lint !e9079 void * is used as this macro i
2384:Source/tasks.c **** 
2385:Source/tasks.c **** 			do
2386:Source/tasks.c **** 			{
2387:Source/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is
2388:Source/tasks.c **** 
2389:Source/tasks.c **** 				/* Check each character in the name looking for a match or
2390:Source/tasks.c **** 				mismatch. */
2391:Source/tasks.c **** 				xBreakLoop = pdFALSE;
2392:Source/tasks.c **** 				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
2393:Source/tasks.c **** 				{
2394:Source/tasks.c **** 					cNextChar = pxNextTCB->pcTaskName[ x ];
2395:Source/tasks.c **** 
2396:Source/tasks.c **** 					if( cNextChar != pcNameToQuery[ x ] )
2397:Source/tasks.c **** 					{
2398:Source/tasks.c **** 						/* Characters didn't match. */
2399:Source/tasks.c **** 						xBreakLoop = pdTRUE;
2400:Source/tasks.c **** 					}
2401:Source/tasks.c **** 					else if( cNextChar == ( char ) 0x00 )
2402:Source/tasks.c **** 					{
2403:Source/tasks.c **** 						/* Both strings terminated, a match must have been
2404:Source/tasks.c **** 						found. */
2405:Source/tasks.c **** 						pxReturn = pxNextTCB;
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 91


2406:Source/tasks.c **** 						xBreakLoop = pdTRUE;
2407:Source/tasks.c **** 					}
2408:Source/tasks.c **** 					else
2409:Source/tasks.c **** 					{
2410:Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2411:Source/tasks.c **** 					}
2412:Source/tasks.c **** 
2413:Source/tasks.c **** 					if( xBreakLoop != pdFALSE )
2414:Source/tasks.c **** 					{
2415:Source/tasks.c **** 						break;
2416:Source/tasks.c **** 					}
2417:Source/tasks.c **** 				}
2418:Source/tasks.c **** 
2419:Source/tasks.c **** 				if( pxReturn != NULL )
2420:Source/tasks.c **** 				{
2421:Source/tasks.c **** 					/* The handle has been found. */
2422:Source/tasks.c **** 					break;
2423:Source/tasks.c **** 				}
2424:Source/tasks.c **** 
2425:Source/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
2426:Source/tasks.c **** 		}
2427:Source/tasks.c **** 		else
2428:Source/tasks.c **** 		{
2429:Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2430:Source/tasks.c **** 		}
2431:Source/tasks.c **** 
2432:Source/tasks.c **** 		return pxReturn;
2433:Source/tasks.c **** 	}
2434:Source/tasks.c **** 
2435:Source/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2436:Source/tasks.c **** /*-----------------------------------------------------------*/
2437:Source/tasks.c **** 
2438:Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2439:Source/tasks.c **** 
2440:Source/tasks.c **** 	TaskHandle_t xTaskGetHandle( const char *pcNameToQuery ) /*lint !e971 Unqualified char types are a
2441:Source/tasks.c **** 	{
2442:Source/tasks.c **** 	UBaseType_t uxQueue = configMAX_PRIORITIES;
2443:Source/tasks.c **** 	TCB_t* pxTCB;
2444:Source/tasks.c **** 
2445:Source/tasks.c **** 		/* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
2446:Source/tasks.c **** 		configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
2447:Source/tasks.c **** 
2448:Source/tasks.c **** 		vTaskSuspendAll();
2449:Source/tasks.c **** 		{
2450:Source/tasks.c **** 			/* Search the ready lists. */
2451:Source/tasks.c **** 			do
2452:Source/tasks.c **** 			{
2453:Source/tasks.c **** 				uxQueue--;
2454:Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueue ] ), pcNam
2455:Source/tasks.c **** 
2456:Source/tasks.c **** 				if( pxTCB != NULL )
2457:Source/tasks.c **** 				{
2458:Source/tasks.c **** 					/* Found the handle. */
2459:Source/tasks.c **** 					break;
2460:Source/tasks.c **** 				}
2461:Source/tasks.c **** 
2462:Source/tasks.c **** 			} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 92


2463:Source/tasks.c **** 
2464:Source/tasks.c **** 			/* Search the delayed lists. */
2465:Source/tasks.c **** 			if( pxTCB == NULL )
2466:Source/tasks.c **** 			{
2467:Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQuery );
2468:Source/tasks.c **** 			}
2469:Source/tasks.c **** 
2470:Source/tasks.c **** 			if( pxTCB == NULL )
2471:Source/tasks.c **** 			{
2472:Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, pcNameToQuery
2473:Source/tasks.c **** 			}
2474:Source/tasks.c **** 
2475:Source/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
2476:Source/tasks.c **** 			{
2477:Source/tasks.c **** 				if( pxTCB == NULL )
2478:Source/tasks.c **** 				{
2479:Source/tasks.c **** 					/* Search the suspended list. */
2480:Source/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuery );
2481:Source/tasks.c **** 				}
2482:Source/tasks.c **** 			}
2483:Source/tasks.c **** 			#endif
2484:Source/tasks.c **** 
2485:Source/tasks.c **** 			#if( INCLUDE_vTaskDelete == 1 )
2486:Source/tasks.c **** 			{
2487:Source/tasks.c **** 				if( pxTCB == NULL )
2488:Source/tasks.c **** 				{
2489:Source/tasks.c **** 					/* Search the deleted list. */
2490:Source/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcNameToQuery );
2491:Source/tasks.c **** 				}
2492:Source/tasks.c **** 			}
2493:Source/tasks.c **** 			#endif
2494:Source/tasks.c **** 		}
2495:Source/tasks.c **** 		( void ) xTaskResumeAll();
2496:Source/tasks.c **** 
2497:Source/tasks.c **** 		return pxTCB;
2498:Source/tasks.c **** 	}
2499:Source/tasks.c **** 
2500:Source/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2501:Source/tasks.c **** /*-----------------------------------------------------------*/
2502:Source/tasks.c **** 
2503:Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2504:Source/tasks.c **** 
2505:Source/tasks.c **** 	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArra
2506:Source/tasks.c **** 	{
2507:Source/tasks.c **** 	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
2508:Source/tasks.c **** 
2509:Source/tasks.c **** 		vTaskSuspendAll();
2510:Source/tasks.c **** 		{
2511:Source/tasks.c **** 			/* Is there a space in the array for each task in the system? */
2512:Source/tasks.c **** 			if( uxArraySize >= uxCurrentNumberOfTasks )
2513:Source/tasks.c **** 			{
2514:Source/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
2515:Source/tasks.c **** 				task in the Ready state. */
2516:Source/tasks.c **** 				do
2517:Source/tasks.c **** 				{
2518:Source/tasks.c **** 					uxQueue--;
2519:Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 93


2520:Source/tasks.c **** 
2521:Source/tasks.c **** 				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the cast
2522:Source/tasks.c **** 
2523:Source/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
2524:Source/tasks.c **** 				task in the Blocked state. */
2525:Source/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelaye
2526:Source/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverfl
2527:Source/tasks.c **** 
2528:Source/tasks.c **** 				#if( INCLUDE_vTaskDelete == 1 )
2529:Source/tasks.c **** 				{
2530:Source/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2531:Source/tasks.c **** 					each task that has been deleted but not yet cleaned up. */
2532:Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermin
2533:Source/tasks.c **** 				}
2534:Source/tasks.c **** 				#endif
2535:Source/tasks.c **** 
2536:Source/tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
2537:Source/tasks.c **** 				{
2538:Source/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2539:Source/tasks.c **** 					each task in the Suspended state. */
2540:Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList,
2541:Source/tasks.c **** 				}
2542:Source/tasks.c **** 				#endif
2543:Source/tasks.c **** 
2544:Source/tasks.c **** 				#if ( configGENERATE_RUN_TIME_STATS == 1)
2545:Source/tasks.c **** 				{
2546:Source/tasks.c **** 					if( pulTotalRunTime != NULL )
2547:Source/tasks.c **** 					{
2548:Source/tasks.c **** 						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2549:Source/tasks.c **** 							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
2550:Source/tasks.c **** 						#else
2551:Source/tasks.c **** 							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2552:Source/tasks.c **** 						#endif
2553:Source/tasks.c **** 					}
2554:Source/tasks.c **** 				}
2555:Source/tasks.c **** 				#else
2556:Source/tasks.c **** 				{
2557:Source/tasks.c **** 					if( pulTotalRunTime != NULL )
2558:Source/tasks.c **** 					{
2559:Source/tasks.c **** 						*pulTotalRunTime = 0;
2560:Source/tasks.c **** 					}
2561:Source/tasks.c **** 				}
2562:Source/tasks.c **** 				#endif
2563:Source/tasks.c **** 			}
2564:Source/tasks.c **** 			else
2565:Source/tasks.c **** 			{
2566:Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2567:Source/tasks.c **** 			}
2568:Source/tasks.c **** 		}
2569:Source/tasks.c **** 		( void ) xTaskResumeAll();
2570:Source/tasks.c **** 
2571:Source/tasks.c **** 		return uxTask;
2572:Source/tasks.c **** 	}
2573:Source/tasks.c **** 
2574:Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
2575:Source/tasks.c **** /*----------------------------------------------------------*/
2576:Source/tasks.c **** 
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 94


2577:Source/tasks.c **** #if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
2578:Source/tasks.c **** 
2579:Source/tasks.c **** 	TaskHandle_t xTaskGetIdleTaskHandle( void )
2580:Source/tasks.c **** 	{
2581:Source/tasks.c **** 		/* If xTaskGetIdleTaskHandle() is called before the scheduler has been
2582:Source/tasks.c **** 		started, then xIdleTaskHandle will be NULL. */
2583:Source/tasks.c **** 		configASSERT( ( xIdleTaskHandle != NULL ) );
2584:Source/tasks.c **** 		return xIdleTaskHandle;
2585:Source/tasks.c **** 	}
2586:Source/tasks.c **** 
2587:Source/tasks.c **** #endif /* INCLUDE_xTaskGetIdleTaskHandle */
2588:Source/tasks.c **** /*----------------------------------------------------------*/
2589:Source/tasks.c **** 
2590:Source/tasks.c **** /* This conditional compilation should use inequality to 0, not equality to 1.
2591:Source/tasks.c **** This is to ensure vTaskStepTick() is available when user defined low power mode
2592:Source/tasks.c **** implementations require configUSE_TICKLESS_IDLE to be set to a value other than
2593:Source/tasks.c **** 1. */
2594:Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2595:Source/tasks.c **** 
2596:Source/tasks.c **** 	void vTaskStepTick( const TickType_t xTicksToJump )
2597:Source/tasks.c **** 	{
2598:Source/tasks.c **** 		/* Correct the tick count value after a period during which the tick
2599:Source/tasks.c **** 		was suppressed.  Note this does *not* call the tick hook function for
2600:Source/tasks.c **** 		each stepped tick. */
2601:Source/tasks.c **** 		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
2602:Source/tasks.c **** 		xTickCount += xTicksToJump;
2603:Source/tasks.c **** 		traceINCREASE_TICK_COUNT( xTicksToJump );
2604:Source/tasks.c **** 	}
2605:Source/tasks.c **** 
2606:Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2607:Source/tasks.c **** /*----------------------------------------------------------*/
2608:Source/tasks.c **** 
2609:Source/tasks.c **** BaseType_t xTaskCatchUpTicks( TickType_t xTicksToCatchUp )
2610:Source/tasks.c **** {
 2460              		.loc 1 2610 0
 2461              		.cfi_startproc
 2462              		@ args = 0, pretend = 0, frame = 16
 2463              		@ frame_needed = 1, uses_anonymous_args = 0
 2464 0000 80B5     		push	{r7, lr}
 2465              		.cfi_def_cfa_offset 8
 2466              		.cfi_offset 7, -8
 2467              		.cfi_offset 14, -4
 2468 0002 84B0     		sub	sp, sp, #16
 2469              		.cfi_def_cfa_offset 24
 2470 0004 00AF     		add	r7, sp, #0
 2471              		.cfi_def_cfa_register 7
 2472 0006 7860     		str	r0, [r7, #4]
2611:Source/tasks.c **** BaseType_t xYieldRequired = pdFALSE;
 2473              		.loc 1 2611 0
 2474 0008 0023     		movs	r3, #0
 2475 000a FB60     		str	r3, [r7, #12]
2612:Source/tasks.c **** 
2613:Source/tasks.c **** 	/* Must not be called with the scheduler suspended as the implementation
2614:Source/tasks.c **** 	relies on xPendedTicks being wound down to 0 in xTaskResumeAll(). */
2615:Source/tasks.c **** 	configASSERT( uxSchedulerSuspended == 0 );
2616:Source/tasks.c **** 
2617:Source/tasks.c **** 	/* Use xPendedTicks to mimic xTicksToCatchUp number of ticks occurring when
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 95


2618:Source/tasks.c **** 	the scheduler is suspended so the ticks are executed in xTaskResumeAll(). */
2619:Source/tasks.c **** 	vTaskSuspendAll();
 2476              		.loc 1 2619 0
 2477 000c FFF7FEFF 		bl	vTaskSuspendAll
2620:Source/tasks.c **** 	xPendedTicks += xTicksToCatchUp;
 2478              		.loc 1 2620 0
 2479 0010 064B     		ldr	r3, .L172
 2480 0012 1A68     		ldr	r2, [r3]
 2481 0014 7B68     		ldr	r3, [r7, #4]
 2482 0016 1344     		add	r3, r3, r2
 2483 0018 044A     		ldr	r2, .L172
 2484 001a 1360     		str	r3, [r2]
2621:Source/tasks.c **** 	xYieldRequired = xTaskResumeAll();
 2485              		.loc 1 2621 0
 2486 001c FFF7FEFF 		bl	xTaskResumeAll
 2487 0020 F860     		str	r0, [r7, #12]
2622:Source/tasks.c **** 
2623:Source/tasks.c **** 	return xYieldRequired;
 2488              		.loc 1 2623 0
 2489 0022 FB68     		ldr	r3, [r7, #12]
2624:Source/tasks.c **** }
 2490              		.loc 1 2624 0
 2491 0024 1846     		mov	r0, r3
 2492 0026 1037     		adds	r7, r7, #16
 2493              		.cfi_def_cfa_offset 8
 2494 0028 BD46     		mov	sp, r7
 2495              		.cfi_def_cfa_register 13
 2496              		@ sp needed
 2497 002a 80BD     		pop	{r7, pc}
 2498              	.L173:
 2499              		.align	2
 2500              	.L172:
 2501 002c E8000000 		.word	xPendedTicks
 2502              		.cfi_endproc
 2503              	.LFE90:
 2504              		.size	xTaskCatchUpTicks, .-xTaskCatchUpTicks
 2505              		.section	.text.xTaskIncrementTick,"ax",%progbits
 2506              		.align	2
 2507              		.global	xTaskIncrementTick
 2508              		.thumb
 2509              		.thumb_func
 2510              		.type	xTaskIncrementTick, %function
 2511              	xTaskIncrementTick:
 2512              	.LFB91:
2625:Source/tasks.c **** /*----------------------------------------------------------*/
2626:Source/tasks.c **** 
2627:Source/tasks.c **** #if ( INCLUDE_xTaskAbortDelay == 1 )
2628:Source/tasks.c **** 
2629:Source/tasks.c **** 	BaseType_t xTaskAbortDelay( TaskHandle_t xTask )
2630:Source/tasks.c **** 	{
2631:Source/tasks.c **** 	TCB_t *pxTCB = xTask;
2632:Source/tasks.c **** 	BaseType_t xReturn;
2633:Source/tasks.c **** 
2634:Source/tasks.c **** 		configASSERT( pxTCB );
2635:Source/tasks.c **** 
2636:Source/tasks.c **** 		vTaskSuspendAll();
2637:Source/tasks.c **** 		{
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 96


2638:Source/tasks.c **** 			/* A task can only be prematurely removed from the Blocked state if
2639:Source/tasks.c **** 			it is actually in the Blocked state. */
2640:Source/tasks.c **** 			if( eTaskGetState( xTask ) == eBlocked )
2641:Source/tasks.c **** 			{
2642:Source/tasks.c **** 				xReturn = pdPASS;
2643:Source/tasks.c **** 
2644:Source/tasks.c **** 				/* Remove the reference to the task from the blocked list.  An
2645:Source/tasks.c **** 				interrupt won't touch the xStateListItem because the
2646:Source/tasks.c **** 				scheduler is suspended. */
2647:Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2648:Source/tasks.c **** 
2649:Source/tasks.c **** 				/* Is the task waiting on an event also?  If so remove it from
2650:Source/tasks.c **** 				the event list too.  Interrupts can touch the event list item,
2651:Source/tasks.c **** 				even though the scheduler is suspended, so a critical section
2652:Source/tasks.c **** 				is used. */
2653:Source/tasks.c **** 				taskENTER_CRITICAL();
2654:Source/tasks.c **** 				{
2655:Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
2656:Source/tasks.c **** 					{
2657:Source/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2658:Source/tasks.c **** 
2659:Source/tasks.c **** 						/* This lets the task know it was forcibly removed from the
2660:Source/tasks.c **** 						blocked state so it should not re-evaluate its block time and
2661:Source/tasks.c **** 						then block again. */
2662:Source/tasks.c **** 						pxTCB->ucDelayAborted = pdTRUE;
2663:Source/tasks.c **** 					}
2664:Source/tasks.c **** 					else
2665:Source/tasks.c **** 					{
2666:Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2667:Source/tasks.c **** 					}
2668:Source/tasks.c **** 				}
2669:Source/tasks.c **** 				taskEXIT_CRITICAL();
2670:Source/tasks.c **** 
2671:Source/tasks.c **** 				/* Place the unblocked task into the appropriate ready list. */
2672:Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
2673:Source/tasks.c **** 
2674:Source/tasks.c **** 				/* A task being unblocked cannot cause an immediate context
2675:Source/tasks.c **** 				switch if preemption is turned off. */
2676:Source/tasks.c **** 				#if (  configUSE_PREEMPTION == 1 )
2677:Source/tasks.c **** 				{
2678:Source/tasks.c **** 					/* Preemption is on, but a context switch should only be
2679:Source/tasks.c **** 					performed if the unblocked task has a priority that is
2680:Source/tasks.c **** 					equal to or higher than the currently executing task. */
2681:Source/tasks.c **** 					if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
2682:Source/tasks.c **** 					{
2683:Source/tasks.c **** 						/* Pend the yield to be performed when the scheduler
2684:Source/tasks.c **** 						is unsuspended. */
2685:Source/tasks.c **** 						xYieldPending = pdTRUE;
2686:Source/tasks.c **** 					}
2687:Source/tasks.c **** 					else
2688:Source/tasks.c **** 					{
2689:Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2690:Source/tasks.c **** 					}
2691:Source/tasks.c **** 				}
2692:Source/tasks.c **** 				#endif /* configUSE_PREEMPTION */
2693:Source/tasks.c **** 			}
2694:Source/tasks.c **** 			else
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 97


2695:Source/tasks.c **** 			{
2696:Source/tasks.c **** 				xReturn = pdFAIL;
2697:Source/tasks.c **** 			}
2698:Source/tasks.c **** 		}
2699:Source/tasks.c **** 		( void ) xTaskResumeAll();
2700:Source/tasks.c **** 
2701:Source/tasks.c **** 		return xReturn;
2702:Source/tasks.c **** 	}
2703:Source/tasks.c **** 
2704:Source/tasks.c **** #endif /* INCLUDE_xTaskAbortDelay */
2705:Source/tasks.c **** /*----------------------------------------------------------*/
2706:Source/tasks.c **** 
2707:Source/tasks.c **** BaseType_t xTaskIncrementTick( void )
2708:Source/tasks.c **** {
 2513              		.loc 1 2708 0
 2514              		.cfi_startproc
 2515              		@ args = 0, pretend = 0, frame = 24
 2516              		@ frame_needed = 1, uses_anonymous_args = 0
 2517 0000 80B5     		push	{r7, lr}
 2518              		.cfi_def_cfa_offset 8
 2519              		.cfi_offset 7, -8
 2520              		.cfi_offset 14, -4
 2521 0002 86B0     		sub	sp, sp, #24
 2522              		.cfi_def_cfa_offset 32
 2523 0004 00AF     		add	r7, sp, #0
 2524              		.cfi_def_cfa_register 7
2709:Source/tasks.c **** TCB_t * pxTCB;
2710:Source/tasks.c **** TickType_t xItemValue;
2711:Source/tasks.c **** BaseType_t xSwitchRequired = pdFALSE;
 2525              		.loc 1 2711 0
 2526 0006 0023     		movs	r3, #0
 2527 0008 7B61     		str	r3, [r7, #20]
2712:Source/tasks.c **** 
2713:Source/tasks.c **** 	/* Called by the portable layer each time a tick interrupt occurs.
2714:Source/tasks.c **** 	Increments the tick then checks to see if the new tick value will cause any
2715:Source/tasks.c **** 	tasks to be unblocked. */
2716:Source/tasks.c **** 	traceTASK_INCREMENT_TICK( xTickCount );
2717:Source/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 2528              		.loc 1 2717 0
 2529 000a 464B     		ldr	r3, .L187
 2530 000c 1B68     		ldr	r3, [r3]
 2531 000e 002B     		cmp	r3, #0
 2532 0010 7DD1     		bne	.L175
 2533              	.LBB42:
2718:Source/tasks.c **** 	{
2719:Source/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this
2720:Source/tasks.c **** 		block. */
2721:Source/tasks.c **** 		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 2534              		.loc 1 2721 0
 2535 0012 454B     		ldr	r3, .L187+4
 2536 0014 1B68     		ldr	r3, [r3]
 2537 0016 0133     		adds	r3, r3, #1
 2538 0018 3B61     		str	r3, [r7, #16]
2722:Source/tasks.c **** 
2723:Source/tasks.c **** 		/* Increment the RTOS tick, switching the delayed and overflowed
2724:Source/tasks.c **** 		delayed lists if it wraps to 0. */
2725:Source/tasks.c **** 		xTickCount = xConstTickCount;
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 98


 2539              		.loc 1 2725 0
 2540 001a 434A     		ldr	r2, .L187+4
 2541 001c 3B69     		ldr	r3, [r7, #16]
 2542 001e 1360     		str	r3, [r2]
2726:Source/tasks.c **** 
2727:Source/tasks.c **** 		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as
 2543              		.loc 1 2727 0
 2544 0020 3B69     		ldr	r3, [r7, #16]
 2545 0022 002B     		cmp	r3, #0
 2546 0024 10D1     		bne	.L176
 2547              	.LBB43:
2728:Source/tasks.c **** 		{
2729:Source/tasks.c **** 			taskSWITCH_DELAYED_LISTS();
 2548              		.loc 1 2729 0
 2549 0026 414B     		ldr	r3, .L187+8
 2550 0028 1B68     		ldr	r3, [r3]
 2551 002a FB60     		str	r3, [r7, #12]
 2552 002c 404B     		ldr	r3, .L187+12
 2553 002e 1B68     		ldr	r3, [r3]
 2554 0030 3E4A     		ldr	r2, .L187+8
 2555 0032 1360     		str	r3, [r2]
 2556 0034 3E4A     		ldr	r2, .L187+12
 2557 0036 FB68     		ldr	r3, [r7, #12]
 2558 0038 1360     		str	r3, [r2]
 2559 003a 3E4B     		ldr	r3, .L187+16
 2560 003c 1B68     		ldr	r3, [r3]
 2561 003e 0133     		adds	r3, r3, #1
 2562 0040 3C4A     		ldr	r2, .L187+16
 2563 0042 1360     		str	r3, [r2]
 2564 0044 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 2565              	.L176:
 2566              	.LBE43:
2730:Source/tasks.c **** 		}
2731:Source/tasks.c **** 		else
2732:Source/tasks.c **** 		{
2733:Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2734:Source/tasks.c **** 		}
2735:Source/tasks.c **** 
2736:Source/tasks.c **** 		/* See if this tick has made a timeout expire.  Tasks are stored in
2737:Source/tasks.c **** 		the	queue in the order of their wake time - meaning once one task
2738:Source/tasks.c **** 		has been found whose block time has not expired there is no need to
2739:Source/tasks.c **** 		look any further down the list. */
2740:Source/tasks.c **** 		if( xConstTickCount >= xNextTaskUnblockTime )
 2567              		.loc 1 2740 0
 2568 0048 3B4B     		ldr	r3, .L187+20
 2569 004a 1B68     		ldr	r3, [r3]
 2570 004c 3A69     		ldr	r2, [r7, #16]
 2571 004e 9A42     		cmp	r2, r3
 2572 0050 48D3     		bcc	.L177
 2573              	.L182:
2741:Source/tasks.c **** 		{
2742:Source/tasks.c **** 			for( ;; )
2743:Source/tasks.c **** 			{
2744:Source/tasks.c **** 				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 2574              		.loc 1 2744 0
 2575 0052 364B     		ldr	r3, .L187+8
 2576 0054 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 99


 2577 0056 1B68     		ldr	r3, [r3]
 2578 0058 002B     		cmp	r3, #0
 2579 005a 04D1     		bne	.L178
2745:Source/tasks.c **** 				{
2746:Source/tasks.c **** 					/* The delayed list is empty.  Set xNextTaskUnblockTime
2747:Source/tasks.c **** 					to the maximum possible value so it is extremely
2748:Source/tasks.c **** 					unlikely that the
2749:Source/tasks.c **** 					if( xTickCount >= xNextTaskUnblockTime ) test will pass
2750:Source/tasks.c **** 					next time through. */
2751:Source/tasks.c **** 					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redun
 2580              		.loc 1 2751 0
 2581 005c 364B     		ldr	r3, .L187+20
 2582 005e 4FF0FF32 		mov	r2, #-1
 2583 0062 1A60     		str	r2, [r3]
2752:Source/tasks.c **** 					break;
 2584              		.loc 1 2752 0
 2585 0064 3EE0     		b	.L177
 2586              	.L178:
2753:Source/tasks.c **** 				}
2754:Source/tasks.c **** 				else
2755:Source/tasks.c **** 				{
2756:Source/tasks.c **** 					/* The delayed list is not empty, get the value of the
2757:Source/tasks.c **** 					item at the head of the delayed list.  This is the time
2758:Source/tasks.c **** 					at which the task at the head of the delayed list must
2759:Source/tasks.c **** 					be removed from the Blocked state. */
2760:Source/tasks.c **** 					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this
 2587              		.loc 1 2760 0
 2588 0066 314B     		ldr	r3, .L187+8
 2589 0068 1B68     		ldr	r3, [r3]
 2590 006a DB68     		ldr	r3, [r3, #12]
 2591 006c DB68     		ldr	r3, [r3, #12]
 2592 006e BB60     		str	r3, [r7, #8]
2761:Source/tasks.c **** 					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 2593              		.loc 1 2761 0
 2594 0070 BB68     		ldr	r3, [r7, #8]
 2595 0072 5B68     		ldr	r3, [r3, #4]
 2596 0074 7B60     		str	r3, [r7, #4]
2762:Source/tasks.c **** 
2763:Source/tasks.c **** 					if( xConstTickCount < xItemValue )
 2597              		.loc 1 2763 0
 2598 0076 3A69     		ldr	r2, [r7, #16]
 2599 0078 7B68     		ldr	r3, [r7, #4]
 2600 007a 9A42     		cmp	r2, r3
 2601 007c 03D2     		bcs	.L179
2764:Source/tasks.c **** 					{
2765:Source/tasks.c **** 						/* It is not time to unblock this item yet, but the
2766:Source/tasks.c **** 						item value is the time at which the task at the head
2767:Source/tasks.c **** 						of the blocked list must be removed from the Blocked
2768:Source/tasks.c **** 						state -	so record the item value in
2769:Source/tasks.c **** 						xNextTaskUnblockTime. */
2770:Source/tasks.c **** 						xNextTaskUnblockTime = xItemValue;
 2602              		.loc 1 2770 0
 2603 007e 2E4A     		ldr	r2, .L187+20
 2604 0080 7B68     		ldr	r3, [r7, #4]
 2605 0082 1360     		str	r3, [r2]
2771:Source/tasks.c **** 						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks
 2606              		.loc 1 2771 0
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 100


 2607 0084 2EE0     		b	.L177
 2608              	.L179:
2772:Source/tasks.c **** 					}
2773:Source/tasks.c **** 					else
2774:Source/tasks.c **** 					{
2775:Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2776:Source/tasks.c **** 					}
2777:Source/tasks.c **** 
2778:Source/tasks.c **** 					/* It is time to remove the item from the Blocked state. */
2779:Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 2609              		.loc 1 2779 0
 2610 0086 BB68     		ldr	r3, [r7, #8]
 2611 0088 0433     		adds	r3, r3, #4
 2612 008a 1846     		mov	r0, r3
 2613 008c FFF7FEFF 		bl	uxListRemove
2780:Source/tasks.c **** 
2781:Source/tasks.c **** 					/* Is the task waiting on an event also?  If so remove
2782:Source/tasks.c **** 					it from the event list. */
2783:Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 2614              		.loc 1 2783 0
 2615 0090 BB68     		ldr	r3, [r7, #8]
 2616 0092 9B6A     		ldr	r3, [r3, #40]
 2617 0094 002B     		cmp	r3, #0
 2618 0096 04D0     		beq	.L180
2784:Source/tasks.c **** 					{
2785:Source/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 2619              		.loc 1 2785 0
 2620 0098 BB68     		ldr	r3, [r7, #8]
 2621 009a 1833     		adds	r3, r3, #24
 2622 009c 1846     		mov	r0, r3
 2623 009e FFF7FEFF 		bl	uxListRemove
 2624              	.L180:
2786:Source/tasks.c **** 					}
2787:Source/tasks.c **** 					else
2788:Source/tasks.c **** 					{
2789:Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2790:Source/tasks.c **** 					}
2791:Source/tasks.c **** 
2792:Source/tasks.c **** 					/* Place the unblocked task into the appropriate ready
2793:Source/tasks.c **** 					list. */
2794:Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 2625              		.loc 1 2794 0
 2626 00a2 BB68     		ldr	r3, [r7, #8]
 2627 00a4 DB6A     		ldr	r3, [r3, #44]
 2628 00a6 0122     		movs	r2, #1
 2629 00a8 9A40     		lsls	r2, r2, r3
 2630 00aa 244B     		ldr	r3, .L187+24
 2631 00ac 1B68     		ldr	r3, [r3]
 2632 00ae 1343     		orrs	r3, r3, r2
 2633 00b0 224A     		ldr	r2, .L187+24
 2634 00b2 1360     		str	r3, [r2]
 2635 00b4 BB68     		ldr	r3, [r7, #8]
 2636 00b6 DA6A     		ldr	r2, [r3, #44]
 2637 00b8 1346     		mov	r3, r2
 2638 00ba 9B00     		lsls	r3, r3, #2
 2639 00bc 1344     		add	r3, r3, r2
 2640 00be 9B00     		lsls	r3, r3, #2
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 101


 2641 00c0 1F4A     		ldr	r2, .L187+28
 2642 00c2 1A44     		add	r2, r2, r3
 2643 00c4 BB68     		ldr	r3, [r7, #8]
 2644 00c6 0433     		adds	r3, r3, #4
 2645 00c8 1946     		mov	r1, r3
 2646 00ca 1046     		mov	r0, r2
 2647 00cc FFF7FEFF 		bl	vListInsertEnd
2795:Source/tasks.c **** 
2796:Source/tasks.c **** 					/* A task being unblocked cannot cause an immediate
2797:Source/tasks.c **** 					context switch if preemption is turned off. */
2798:Source/tasks.c **** 					#if (  configUSE_PREEMPTION == 1 )
2799:Source/tasks.c **** 					{
2800:Source/tasks.c **** 						/* Preemption is on, but a context switch should
2801:Source/tasks.c **** 						only be performed if the unblocked task has a
2802:Source/tasks.c **** 						priority that is equal to or higher than the
2803:Source/tasks.c **** 						currently executing task. */
2804:Source/tasks.c **** 						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 2648              		.loc 1 2804 0
 2649 00d0 BB68     		ldr	r3, [r7, #8]
 2650 00d2 DA6A     		ldr	r2, [r3, #44]
 2651 00d4 1B4B     		ldr	r3, .L187+32
 2652 00d6 1B68     		ldr	r3, [r3]
 2653 00d8 DB6A     		ldr	r3, [r3, #44]
 2654 00da 9A42     		cmp	r2, r3
 2655 00dc B9D3     		bcc	.L182
2805:Source/tasks.c **** 						{
2806:Source/tasks.c **** 							xSwitchRequired = pdTRUE;
 2656              		.loc 1 2806 0
 2657 00de 0123     		movs	r3, #1
 2658 00e0 7B61     		str	r3, [r7, #20]
2807:Source/tasks.c **** 						}
2808:Source/tasks.c **** 						else
2809:Source/tasks.c **** 						{
2810:Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
2811:Source/tasks.c **** 						}
2812:Source/tasks.c **** 					}
2813:Source/tasks.c **** 					#endif /* configUSE_PREEMPTION */
2814:Source/tasks.c **** 				}
2815:Source/tasks.c **** 			}
 2659              		.loc 1 2815 0
 2660 00e2 B6E7     		b	.L182
 2661              	.L177:
2816:Source/tasks.c **** 		}
2817:Source/tasks.c **** 
2818:Source/tasks.c **** 		/* Tasks of equal priority to the currently running task will share
2819:Source/tasks.c **** 		processing time (time slice) if preemption is on, and the application
2820:Source/tasks.c **** 		writer has not explicitly turned time slicing off. */
2821:Source/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
2822:Source/tasks.c **** 		{
2823:Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_
 2662              		.loc 1 2823 0
 2663 00e4 174B     		ldr	r3, .L187+32
 2664 00e6 1B68     		ldr	r3, [r3]
 2665 00e8 DA6A     		ldr	r2, [r3, #44]
 2666 00ea 1549     		ldr	r1, .L187+28
 2667 00ec 1346     		mov	r3, r2
 2668 00ee 9B00     		lsls	r3, r3, #2
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 102


 2669 00f0 1344     		add	r3, r3, r2
 2670 00f2 9B00     		lsls	r3, r3, #2
 2671 00f4 0B44     		add	r3, r3, r1
 2672 00f6 1B68     		ldr	r3, [r3]
 2673 00f8 012B     		cmp	r3, #1
 2674 00fa 01D9     		bls	.L183
2824:Source/tasks.c **** 			{
2825:Source/tasks.c **** 				xSwitchRequired = pdTRUE;
 2675              		.loc 1 2825 0
 2676 00fc 0123     		movs	r3, #1
 2677 00fe 7B61     		str	r3, [r7, #20]
 2678              	.L183:
2826:Source/tasks.c **** 			}
2827:Source/tasks.c **** 			else
2828:Source/tasks.c **** 			{
2829:Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2830:Source/tasks.c **** 			}
2831:Source/tasks.c **** 		}
2832:Source/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) ) */
2833:Source/tasks.c **** 
2834:Source/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2835:Source/tasks.c **** 		{
2836:Source/tasks.c **** 			/* Guard against the tick hook being called when the pended tick
2837:Source/tasks.c **** 			count is being unwound (when the scheduler is being unlocked). */
2838:Source/tasks.c **** 			if( xPendedTicks == ( TickType_t ) 0 )
2839:Source/tasks.c **** 			{
2840:Source/tasks.c **** 				vApplicationTickHook();
2841:Source/tasks.c **** 			}
2842:Source/tasks.c **** 			else
2843:Source/tasks.c **** 			{
2844:Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2845:Source/tasks.c **** 			}
2846:Source/tasks.c **** 		}
2847:Source/tasks.c **** 		#endif /* configUSE_TICK_HOOK */
2848:Source/tasks.c **** 
2849:Source/tasks.c **** 		#if ( configUSE_PREEMPTION == 1 )
2850:Source/tasks.c **** 		{
2851:Source/tasks.c **** 			if( xYieldPending != pdFALSE )
 2679              		.loc 1 2851 0
 2680 0100 114B     		ldr	r3, .L187+36
 2681 0102 1B68     		ldr	r3, [r3]
 2682 0104 002B     		cmp	r3, #0
 2683 0106 07D0     		beq	.L185
2852:Source/tasks.c **** 			{
2853:Source/tasks.c **** 				xSwitchRequired = pdTRUE;
 2684              		.loc 1 2853 0
 2685 0108 0123     		movs	r3, #1
 2686 010a 7B61     		str	r3, [r7, #20]
 2687 010c 04E0     		b	.L185
 2688              	.L175:
 2689              	.LBE42:
2854:Source/tasks.c **** 			}
2855:Source/tasks.c **** 			else
2856:Source/tasks.c **** 			{
2857:Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2858:Source/tasks.c **** 			}
2859:Source/tasks.c **** 		}
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 103


2860:Source/tasks.c **** 		#endif /* configUSE_PREEMPTION */
2861:Source/tasks.c **** 	}
2862:Source/tasks.c **** 	else
2863:Source/tasks.c **** 	{
2864:Source/tasks.c **** 		++xPendedTicks;
 2690              		.loc 1 2864 0
 2691 010e 0F4B     		ldr	r3, .L187+40
 2692 0110 1B68     		ldr	r3, [r3]
 2693 0112 0133     		adds	r3, r3, #1
 2694 0114 0D4A     		ldr	r2, .L187+40
 2695 0116 1360     		str	r3, [r2]
 2696              	.L185:
2865:Source/tasks.c **** 
2866:Source/tasks.c **** 		/* The tick hook gets called at regular intervals, even if the
2867:Source/tasks.c **** 		scheduler is locked. */
2868:Source/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2869:Source/tasks.c **** 		{
2870:Source/tasks.c **** 			vApplicationTickHook();
2871:Source/tasks.c **** 		}
2872:Source/tasks.c **** 		#endif
2873:Source/tasks.c **** 	}
2874:Source/tasks.c **** 
2875:Source/tasks.c **** 	return xSwitchRequired;
 2697              		.loc 1 2875 0
 2698 0118 7B69     		ldr	r3, [r7, #20]
2876:Source/tasks.c **** }
 2699              		.loc 1 2876 0
 2700 011a 1846     		mov	r0, r3
 2701 011c 1837     		adds	r7, r7, #24
 2702              		.cfi_def_cfa_offset 8
 2703 011e BD46     		mov	sp, r7
 2704              		.cfi_def_cfa_register 13
 2705              		@ sp needed
 2706 0120 80BD     		pop	{r7, pc}
 2707              	.L188:
 2708 0122 00BF     		.align	2
 2709              	.L187:
 2710 0124 00010000 		.word	uxSchedulerSuspended
 2711 0128 DC000000 		.word	xTickCount
 2712 012c 90000000 		.word	pxDelayedTaskList
 2713 0130 94000000 		.word	pxOverflowDelayedTaskList
 2714 0134 F0000000 		.word	xNumOfOverflows
 2715 0138 F8000000 		.word	xNextTaskUnblockTime
 2716 013c E0000000 		.word	uxTopReadyPriority
 2717 0140 04000000 		.word	pxReadyTasksLists
 2718 0144 00000000 		.word	pxCurrentTCB
 2719 0148 EC000000 		.word	xYieldPending
 2720 014c E8000000 		.word	xPendedTicks
 2721              		.cfi_endproc
 2722              	.LFE91:
 2723              		.size	xTaskIncrementTick, .-xTaskIncrementTick
 2724              		.section	.text.vTaskSwitchContext,"ax",%progbits
 2725              		.align	2
 2726              		.global	vTaskSwitchContext
 2727              		.thumb
 2728              		.thumb_func
 2729              		.type	vTaskSwitchContext, %function
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 104


 2730              	vTaskSwitchContext:
 2731              	.LFB92:
2877:Source/tasks.c **** /*-----------------------------------------------------------*/
2878:Source/tasks.c **** 
2879:Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2880:Source/tasks.c **** 
2881:Source/tasks.c **** 	void vTaskSetApplicationTaskTag( TaskHandle_t xTask, TaskHookFunction_t pxHookFunction )
2882:Source/tasks.c **** 	{
2883:Source/tasks.c **** 	TCB_t *xTCB;
2884:Source/tasks.c **** 
2885:Source/tasks.c **** 		/* If xTask is NULL then it is the task hook of the calling task that is
2886:Source/tasks.c **** 		getting set. */
2887:Source/tasks.c **** 		if( xTask == NULL )
2888:Source/tasks.c **** 		{
2889:Source/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2890:Source/tasks.c **** 		}
2891:Source/tasks.c **** 		else
2892:Source/tasks.c **** 		{
2893:Source/tasks.c **** 			xTCB = xTask;
2894:Source/tasks.c **** 		}
2895:Source/tasks.c **** 
2896:Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2897:Source/tasks.c **** 		the value can be accessed from an interrupt. */
2898:Source/tasks.c **** 		taskENTER_CRITICAL();
2899:Source/tasks.c **** 		{
2900:Source/tasks.c **** 			xTCB->pxTaskTag = pxHookFunction;
2901:Source/tasks.c **** 		}
2902:Source/tasks.c **** 		taskEXIT_CRITICAL();
2903:Source/tasks.c **** 	}
2904:Source/tasks.c **** 
2905:Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2906:Source/tasks.c **** /*-----------------------------------------------------------*/
2907:Source/tasks.c **** 
2908:Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2909:Source/tasks.c **** 
2910:Source/tasks.c **** 	TaskHookFunction_t xTaskGetApplicationTaskTag( TaskHandle_t xTask )
2911:Source/tasks.c **** 	{
2912:Source/tasks.c **** 	TCB_t *pxTCB;
2913:Source/tasks.c **** 	TaskHookFunction_t xReturn;
2914:Source/tasks.c **** 
2915:Source/tasks.c **** 		/* If xTask is NULL then set the calling task's hook. */
2916:Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
2917:Source/tasks.c **** 
2918:Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2919:Source/tasks.c **** 		the value can be accessed from an interrupt. */
2920:Source/tasks.c **** 		taskENTER_CRITICAL();
2921:Source/tasks.c **** 		{
2922:Source/tasks.c **** 			xReturn = pxTCB->pxTaskTag;
2923:Source/tasks.c **** 		}
2924:Source/tasks.c **** 		taskEXIT_CRITICAL();
2925:Source/tasks.c **** 
2926:Source/tasks.c **** 		return xReturn;
2927:Source/tasks.c **** 	}
2928:Source/tasks.c **** 
2929:Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2930:Source/tasks.c **** /*-----------------------------------------------------------*/
2931:Source/tasks.c **** 
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 105


2932:Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2933:Source/tasks.c **** 
2934:Source/tasks.c **** 	TaskHookFunction_t xTaskGetApplicationTaskTagFromISR( TaskHandle_t xTask )
2935:Source/tasks.c **** 	{
2936:Source/tasks.c **** 	TCB_t *pxTCB;
2937:Source/tasks.c **** 	TaskHookFunction_t xReturn;
2938:Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
2939:Source/tasks.c **** 
2940:Source/tasks.c **** 		/* If xTask is NULL then set the calling task's hook. */
2941:Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
2942:Source/tasks.c **** 
2943:Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2944:Source/tasks.c **** 		the value can be accessed from an interrupt. */
2945:Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
2946:Source/tasks.c **** 		{
2947:Source/tasks.c **** 			xReturn = pxTCB->pxTaskTag;
2948:Source/tasks.c **** 		}
2949:Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
2950:Source/tasks.c **** 
2951:Source/tasks.c **** 		return xReturn;
2952:Source/tasks.c **** 	}
2953:Source/tasks.c **** 
2954:Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2955:Source/tasks.c **** /*-----------------------------------------------------------*/
2956:Source/tasks.c **** 
2957:Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2958:Source/tasks.c **** 
2959:Source/tasks.c **** 	BaseType_t xTaskCallApplicationTaskHook( TaskHandle_t xTask, void *pvParameter )
2960:Source/tasks.c **** 	{
2961:Source/tasks.c **** 	TCB_t *xTCB;
2962:Source/tasks.c **** 	BaseType_t xReturn;
2963:Source/tasks.c **** 
2964:Source/tasks.c **** 		/* If xTask is NULL then we are calling our own task hook. */
2965:Source/tasks.c **** 		if( xTask == NULL )
2966:Source/tasks.c **** 		{
2967:Source/tasks.c **** 			xTCB = pxCurrentTCB;
2968:Source/tasks.c **** 		}
2969:Source/tasks.c **** 		else
2970:Source/tasks.c **** 		{
2971:Source/tasks.c **** 			xTCB = xTask;
2972:Source/tasks.c **** 		}
2973:Source/tasks.c **** 
2974:Source/tasks.c **** 		if( xTCB->pxTaskTag != NULL )
2975:Source/tasks.c **** 		{
2976:Source/tasks.c **** 			xReturn = xTCB->pxTaskTag( pvParameter );
2977:Source/tasks.c **** 		}
2978:Source/tasks.c **** 		else
2979:Source/tasks.c **** 		{
2980:Source/tasks.c **** 			xReturn = pdFAIL;
2981:Source/tasks.c **** 		}
2982:Source/tasks.c **** 
2983:Source/tasks.c **** 		return xReturn;
2984:Source/tasks.c **** 	}
2985:Source/tasks.c **** 
2986:Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2987:Source/tasks.c **** /*-----------------------------------------------------------*/
2988:Source/tasks.c **** 
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 106


2989:Source/tasks.c **** void vTaskSwitchContext( void )
2990:Source/tasks.c **** {
 2732              		.loc 1 2990 0
 2733              		.cfi_startproc
 2734              		@ args = 0, pretend = 0, frame = 24
 2735              		@ frame_needed = 1, uses_anonymous_args = 0
 2736 0000 80B5     		push	{r7, lr}
 2737              		.cfi_def_cfa_offset 8
 2738              		.cfi_offset 7, -8
 2739              		.cfi_offset 14, -4
 2740 0002 86B0     		sub	sp, sp, #24
 2741              		.cfi_def_cfa_offset 32
 2742 0004 00AF     		add	r7, sp, #0
 2743              		.cfi_def_cfa_register 7
2991:Source/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 2744              		.loc 1 2991 0
 2745 0006 2F4B     		ldr	r3, .L197
 2746 0008 1B68     		ldr	r3, [r3]
 2747 000a 002B     		cmp	r3, #0
 2748 000c 03D0     		beq	.L190
2992:Source/tasks.c **** 	{
2993:Source/tasks.c **** 		/* The scheduler is currently suspended - do not allow a context
2994:Source/tasks.c **** 		switch. */
2995:Source/tasks.c **** 		xYieldPending = pdTRUE;
 2749              		.loc 1 2995 0
 2750 000e 2E4B     		ldr	r3, .L197+4
 2751 0010 0122     		movs	r2, #1
 2752 0012 1A60     		str	r2, [r3]
2996:Source/tasks.c **** 	}
2997:Source/tasks.c **** 	else
2998:Source/tasks.c **** 	{
2999:Source/tasks.c **** 		xYieldPending = pdFALSE;
3000:Source/tasks.c **** 		traceTASK_SWITCHED_OUT();
3001:Source/tasks.c **** 
3002:Source/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
3003:Source/tasks.c **** 		{
3004:Source/tasks.c **** 			#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
3005:Source/tasks.c **** 				portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime );
3006:Source/tasks.c **** 			#else
3007:Source/tasks.c **** 				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
3008:Source/tasks.c **** 			#endif
3009:Source/tasks.c **** 
3010:Source/tasks.c **** 			/* Add the amount of time the task has been running to the
3011:Source/tasks.c **** 			accumulated time so far.  The time the task started running was
3012:Source/tasks.c **** 			stored in ulTaskSwitchedInTime.  Note that there is no overflow
3013:Source/tasks.c **** 			protection here so count values are only valid until the timer
3014:Source/tasks.c **** 			overflows.  The guard against negative values is to protect
3015:Source/tasks.c **** 			against suspect run time stat counter implementations - which
3016:Source/tasks.c **** 			are provided by the application, not the kernel. */
3017:Source/tasks.c **** 			if( ulTotalRunTime > ulTaskSwitchedInTime )
3018:Source/tasks.c **** 			{
3019:Source/tasks.c **** 				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
3020:Source/tasks.c **** 			}
3021:Source/tasks.c **** 			else
3022:Source/tasks.c **** 			{
3023:Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3024:Source/tasks.c **** 			}
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 107


3025:Source/tasks.c **** 			ulTaskSwitchedInTime = ulTotalRunTime;
3026:Source/tasks.c **** 		}
3027:Source/tasks.c **** 		#endif /* configGENERATE_RUN_TIME_STATS */
3028:Source/tasks.c **** 
3029:Source/tasks.c **** 		/* Check for stack overflow, if configured. */
3030:Source/tasks.c **** 		taskCHECK_FOR_STACK_OVERFLOW();
3031:Source/tasks.c **** 
3032:Source/tasks.c **** 		/* Before the currently running task is switched out, save its errno. */
3033:Source/tasks.c **** 		#if( configUSE_POSIX_ERRNO == 1 )
3034:Source/tasks.c **** 		{
3035:Source/tasks.c **** 			pxCurrentTCB->iTaskErrno = FreeRTOS_errno;
3036:Source/tasks.c **** 		}
3037:Source/tasks.c **** 		#endif
3038:Source/tasks.c **** 
3039:Source/tasks.c **** 		/* Select a new task to run using either the generic C or port
3040:Source/tasks.c **** 		optimised asm code. */
3041:Source/tasks.c **** 		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timer
3042:Source/tasks.c **** 		traceTASK_SWITCHED_IN();
3043:Source/tasks.c **** 
3044:Source/tasks.c **** 		/* After the new task is switched in, update the global errno. */
3045:Source/tasks.c **** 		#if( configUSE_POSIX_ERRNO == 1 )
3046:Source/tasks.c **** 		{
3047:Source/tasks.c **** 			FreeRTOS_errno = pxCurrentTCB->iTaskErrno;
3048:Source/tasks.c **** 		}
3049:Source/tasks.c **** 		#endif
3050:Source/tasks.c **** 
3051:Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
3052:Source/tasks.c **** 		{
3053:Source/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
3054:Source/tasks.c **** 			structure specific to this task.
3055:Source/tasks.c **** 			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
3056:Source/tasks.c **** 			for additional information. */
3057:Source/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
3058:Source/tasks.c **** 		}
3059:Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
3060:Source/tasks.c **** 	}
3061:Source/tasks.c **** }
 2753              		.loc 1 3061 0
 2754 0014 51E0     		b	.L196
 2755              	.L190:
2999:Source/tasks.c **** 		traceTASK_SWITCHED_OUT();
 2756              		.loc 1 2999 0
 2757 0016 2C4B     		ldr	r3, .L197+4
 2758 0018 0022     		movs	r2, #0
 2759 001a 1A60     		str	r2, [r3]
 2760              	.LBB44:
3030:Source/tasks.c **** 
 2761              		.loc 1 3030 0
 2762 001c 2B4B     		ldr	r3, .L197+8
 2763 001e 1B68     		ldr	r3, [r3]
 2764 0020 1B6B     		ldr	r3, [r3, #48]
 2765 0022 7B61     		str	r3, [r7, #20]
 2766 0024 4FF0A533 		mov	r3, #-1515870811
 2767 0028 3B61     		str	r3, [r7, #16]
 2768 002a 7B69     		ldr	r3, [r7, #20]
 2769 002c 1A68     		ldr	r2, [r3]
 2770 002e 3B69     		ldr	r3, [r7, #16]
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 108


 2771 0030 9A42     		cmp	r2, r3
 2772 0032 11D1     		bne	.L192
3030:Source/tasks.c **** 
 2773              		.loc 1 3030 0 is_stmt 0 discriminator 2
 2774 0034 7B69     		ldr	r3, [r7, #20]
 2775 0036 0433     		adds	r3, r3, #4
 2776 0038 1A68     		ldr	r2, [r3]
 2777 003a 3B69     		ldr	r3, [r7, #16]
 2778 003c 9A42     		cmp	r2, r3
 2779 003e 0BD1     		bne	.L192
3030:Source/tasks.c **** 
 2780              		.loc 1 3030 0 discriminator 4
 2781 0040 7B69     		ldr	r3, [r7, #20]
 2782 0042 0833     		adds	r3, r3, #8
 2783 0044 1A68     		ldr	r2, [r3]
 2784 0046 3B69     		ldr	r3, [r7, #16]
 2785 0048 9A42     		cmp	r2, r3
 2786 004a 05D1     		bne	.L192
3030:Source/tasks.c **** 
 2787              		.loc 1 3030 0 discriminator 6
 2788 004c 7B69     		ldr	r3, [r7, #20]
 2789 004e 0C33     		adds	r3, r3, #12
 2790 0050 1A68     		ldr	r2, [r3]
 2791 0052 3B69     		ldr	r3, [r7, #16]
 2792 0054 9A42     		cmp	r2, r3
 2793 0056 08D0     		beq	.L193
 2794              	.L192:
3030:Source/tasks.c **** 
 2795              		.loc 1 3030 0 discriminator 7
 2796 0058 1C4B     		ldr	r3, .L197+8
 2797 005a 1A68     		ldr	r2, [r3]
 2798 005c 1B4B     		ldr	r3, .L197+8
 2799 005e 1B68     		ldr	r3, [r3]
 2800 0060 3433     		adds	r3, r3, #52
 2801 0062 1946     		mov	r1, r3
 2802 0064 1046     		mov	r0, r2
 2803 0066 FFF7FEFF 		bl	vApplicationStackOverflowHook
 2804              	.L193:
 2805              	.LBE44:
 2806              	.LBB45:
3041:Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 2807              		.loc 1 3041 0 is_stmt 1
 2808 006a 194B     		ldr	r3, .L197+12
 2809 006c 1B68     		ldr	r3, [r3]
 2810 006e 7B60     		str	r3, [r7, #4]
 2811              	.LBB46:
 2812              	.LBB47:
 134:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 		return ucReturn;
 2813              		.loc 2 134 0
 2814 0070 7B68     		ldr	r3, [r7, #4]
 2815              		.syntax unified
 2816              	@ 134 ".\Source\portable\GCC\ARM_CM3/portmacro.h" 1
 2817 0072 B3FA83F3 		clz r3, r3
 2818              	@ 0 "" 2
 2819              		.thumb
 2820              		.syntax unified
 2821 0076 FB70     		strb	r3, [r7, #3]
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 109


 135:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	}
 2822              		.loc 2 135 0
 2823 0078 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2824              	.LBE47:
 2825              	.LBE46:
3041:Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 2826              		.loc 1 3041 0
 2827 007a C3F11F03 		rsb	r3, r3, #31
 2828 007e FB60     		str	r3, [r7, #12]
 2829              	.LBB48:
 2830 0080 FA68     		ldr	r2, [r7, #12]
 2831 0082 1346     		mov	r3, r2
 2832 0084 9B00     		lsls	r3, r3, #2
 2833 0086 1344     		add	r3, r3, r2
 2834 0088 9B00     		lsls	r3, r3, #2
 2835 008a 124A     		ldr	r2, .L197+16
 2836 008c 1344     		add	r3, r3, r2
 2837 008e BB60     		str	r3, [r7, #8]
 2838 0090 BB68     		ldr	r3, [r7, #8]
 2839 0092 5B68     		ldr	r3, [r3, #4]
 2840 0094 5A68     		ldr	r2, [r3, #4]
 2841 0096 BB68     		ldr	r3, [r7, #8]
 2842 0098 5A60     		str	r2, [r3, #4]
 2843 009a BB68     		ldr	r3, [r7, #8]
 2844 009c 5A68     		ldr	r2, [r3, #4]
 2845 009e BB68     		ldr	r3, [r7, #8]
 2846 00a0 0833     		adds	r3, r3, #8
 2847 00a2 9A42     		cmp	r2, r3
 2848 00a4 04D1     		bne	.L195
3041:Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 2849              		.loc 1 3041 0 is_stmt 0 discriminator 1
 2850 00a6 BB68     		ldr	r3, [r7, #8]
 2851 00a8 5B68     		ldr	r3, [r3, #4]
 2852 00aa 5A68     		ldr	r2, [r3, #4]
 2853 00ac BB68     		ldr	r3, [r7, #8]
 2854 00ae 5A60     		str	r2, [r3, #4]
 2855              	.L195:
3041:Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 2856              		.loc 1 3041 0 discriminator 3
 2857 00b0 BB68     		ldr	r3, [r7, #8]
 2858 00b2 5B68     		ldr	r3, [r3, #4]
 2859 00b4 DB68     		ldr	r3, [r3, #12]
 2860 00b6 054A     		ldr	r2, .L197+8
 2861 00b8 1360     		str	r3, [r2]
 2862              	.L196:
 2863              	.LBE48:
 2864              	.LBE45:
 2865              		.loc 1 3061 0 is_stmt 1
 2866 00ba 00BF     		nop
 2867 00bc 1837     		adds	r7, r7, #24
 2868              		.cfi_def_cfa_offset 8
 2869 00be BD46     		mov	sp, r7
 2870              		.cfi_def_cfa_register 13
 2871              		@ sp needed
 2872 00c0 80BD     		pop	{r7, pc}
 2873              	.L198:
 2874 00c2 00BF     		.align	2
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 110


 2875              	.L197:
 2876 00c4 00010000 		.word	uxSchedulerSuspended
 2877 00c8 EC000000 		.word	xYieldPending
 2878 00cc 00000000 		.word	pxCurrentTCB
 2879 00d0 E0000000 		.word	uxTopReadyPriority
 2880 00d4 04000000 		.word	pxReadyTasksLists
 2881              		.cfi_endproc
 2882              	.LFE92:
 2883              		.size	vTaskSwitchContext, .-vTaskSwitchContext
 2884              		.section	.text.vTaskPlaceOnEventList,"ax",%progbits
 2885              		.align	2
 2886              		.global	vTaskPlaceOnEventList
 2887              		.thumb
 2888              		.thumb_func
 2889              		.type	vTaskPlaceOnEventList, %function
 2890              	vTaskPlaceOnEventList:
 2891              	.LFB93:
3062:Source/tasks.c **** /*-----------------------------------------------------------*/
3063:Source/tasks.c **** 
3064:Source/tasks.c **** void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
3065:Source/tasks.c **** {
 2892              		.loc 1 3065 0
 2893              		.cfi_startproc
 2894              		@ args = 0, pretend = 0, frame = 8
 2895              		@ frame_needed = 1, uses_anonymous_args = 0
 2896 0000 80B5     		push	{r7, lr}
 2897              		.cfi_def_cfa_offset 8
 2898              		.cfi_offset 7, -8
 2899              		.cfi_offset 14, -4
 2900 0002 82B0     		sub	sp, sp, #8
 2901              		.cfi_def_cfa_offset 16
 2902 0004 00AF     		add	r7, sp, #0
 2903              		.cfi_def_cfa_register 7
 2904 0006 7860     		str	r0, [r7, #4]
 2905 0008 3960     		str	r1, [r7]
3066:Source/tasks.c **** 	configASSERT( pxEventList );
3067:Source/tasks.c **** 
3068:Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH EITHER INTERRUPTS DISABLED OR THE
3069:Source/tasks.c **** 	SCHEDULER SUSPENDED AND THE QUEUE BEING ACCESSED LOCKED. */
3070:Source/tasks.c **** 
3071:Source/tasks.c **** 	/* Place the event list item of the TCB in the appropriate event list.
3072:Source/tasks.c **** 	This is placed in the list in priority order so the highest priority task
3073:Source/tasks.c **** 	is the first to be woken by the event.  The queue that contains the event
3074:Source/tasks.c **** 	list is locked, preventing simultaneous access from interrupts. */
3075:Source/tasks.c **** 	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 2906              		.loc 1 3075 0
 2907 000a 074B     		ldr	r3, .L200
 2908 000c 1B68     		ldr	r3, [r3]
 2909 000e 1833     		adds	r3, r3, #24
 2910 0010 1946     		mov	r1, r3
 2911 0012 7868     		ldr	r0, [r7, #4]
 2912 0014 FFF7FEFF 		bl	vListInsert
3076:Source/tasks.c **** 
3077:Source/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 2913              		.loc 1 3077 0
 2914 0018 0121     		movs	r1, #1
 2915 001a 3868     		ldr	r0, [r7]
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 111


 2916 001c FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
3078:Source/tasks.c **** }
 2917              		.loc 1 3078 0
 2918 0020 00BF     		nop
 2919 0022 0837     		adds	r7, r7, #8
 2920              		.cfi_def_cfa_offset 8
 2921 0024 BD46     		mov	sp, r7
 2922              		.cfi_def_cfa_register 13
 2923              		@ sp needed
 2924 0026 80BD     		pop	{r7, pc}
 2925              	.L201:
 2926              		.align	2
 2927              	.L200:
 2928 0028 00000000 		.word	pxCurrentTCB
 2929              		.cfi_endproc
 2930              	.LFE93:
 2931              		.size	vTaskPlaceOnEventList, .-vTaskPlaceOnEventList
 2932              		.section	.text.vTaskPlaceOnUnorderedEventList,"ax",%progbits
 2933              		.align	2
 2934              		.global	vTaskPlaceOnUnorderedEventList
 2935              		.thumb
 2936              		.thumb_func
 2937              		.type	vTaskPlaceOnUnorderedEventList, %function
 2938              	vTaskPlaceOnUnorderedEventList:
 2939              	.LFB94:
3079:Source/tasks.c **** /*-----------------------------------------------------------*/
3080:Source/tasks.c **** 
3081:Source/tasks.c **** void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickT
3082:Source/tasks.c **** {
 2940              		.loc 1 3082 0
 2941              		.cfi_startproc
 2942              		@ args = 0, pretend = 0, frame = 16
 2943              		@ frame_needed = 1, uses_anonymous_args = 0
 2944 0000 80B5     		push	{r7, lr}
 2945              		.cfi_def_cfa_offset 8
 2946              		.cfi_offset 7, -8
 2947              		.cfi_offset 14, -4
 2948 0002 84B0     		sub	sp, sp, #16
 2949              		.cfi_def_cfa_offset 24
 2950 0004 00AF     		add	r7, sp, #0
 2951              		.cfi_def_cfa_register 7
 2952 0006 F860     		str	r0, [r7, #12]
 2953 0008 B960     		str	r1, [r7, #8]
 2954 000a 7A60     		str	r2, [r7, #4]
3083:Source/tasks.c **** 	configASSERT( pxEventList );
3084:Source/tasks.c **** 
3085:Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
3086:Source/tasks.c **** 	the event groups implementation. */
3087:Source/tasks.c **** 	configASSERT( uxSchedulerSuspended != 0 );
3088:Source/tasks.c **** 
3089:Source/tasks.c **** 	/* Store the item value in the event list item.  It is safe to access the
3090:Source/tasks.c **** 	event list item here as interrupts won't access the event list item of a
3091:Source/tasks.c **** 	task that is not in the Blocked state. */
3092:Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE
 2955              		.loc 1 3092 0
 2956 000c 0A4B     		ldr	r3, .L203
 2957 000e 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 112


 2958 0010 BA68     		ldr	r2, [r7, #8]
 2959 0012 42F00042 		orr	r2, r2, #-2147483648
 2960 0016 9A61     		str	r2, [r3, #24]
3093:Source/tasks.c **** 
3094:Source/tasks.c **** 	/* Place the event list item of the TCB at the end of the appropriate event
3095:Source/tasks.c **** 	list.  It is safe to access the event list here because it is part of an
3096:Source/tasks.c **** 	event group implementation - and interrupts don't access event groups
3097:Source/tasks.c **** 	directly (instead they access them indirectly by pending function calls to
3098:Source/tasks.c **** 	the task level). */
3099:Source/tasks.c **** 	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 2961              		.loc 1 3099 0
 2962 0018 074B     		ldr	r3, .L203
 2963 001a 1B68     		ldr	r3, [r3]
 2964 001c 1833     		adds	r3, r3, #24
 2965 001e 1946     		mov	r1, r3
 2966 0020 F868     		ldr	r0, [r7, #12]
 2967 0022 FFF7FEFF 		bl	vListInsertEnd
3100:Source/tasks.c **** 
3101:Source/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 2968              		.loc 1 3101 0
 2969 0026 0121     		movs	r1, #1
 2970 0028 7868     		ldr	r0, [r7, #4]
 2971 002a FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
3102:Source/tasks.c **** }
 2972              		.loc 1 3102 0
 2973 002e 00BF     		nop
 2974 0030 1037     		adds	r7, r7, #16
 2975              		.cfi_def_cfa_offset 8
 2976 0032 BD46     		mov	sp, r7
 2977              		.cfi_def_cfa_register 13
 2978              		@ sp needed
 2979 0034 80BD     		pop	{r7, pc}
 2980              	.L204:
 2981 0036 00BF     		.align	2
 2982              	.L203:
 2983 0038 00000000 		.word	pxCurrentTCB
 2984              		.cfi_endproc
 2985              	.LFE94:
 2986              		.size	vTaskPlaceOnUnorderedEventList, .-vTaskPlaceOnUnorderedEventList
 2987              		.section	.text.xTaskRemoveFromEventList,"ax",%progbits
 2988              		.align	2
 2989              		.global	xTaskRemoveFromEventList
 2990              		.thumb
 2991              		.thumb_func
 2992              		.type	xTaskRemoveFromEventList, %function
 2993              	xTaskRemoveFromEventList:
 2994              	.LFB95:
3103:Source/tasks.c **** /*-----------------------------------------------------------*/
3104:Source/tasks.c **** 
3105:Source/tasks.c **** #if( configUSE_TIMERS == 1 )
3106:Source/tasks.c **** 
3107:Source/tasks.c **** 	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const B
3108:Source/tasks.c **** 	{
3109:Source/tasks.c **** 		configASSERT( pxEventList );
3110:Source/tasks.c **** 
3111:Source/tasks.c **** 		/* This function should not be called by application code hence the
3112:Source/tasks.c **** 		'Restricted' in its name.  It is not part of the public API.  It is
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 113


3113:Source/tasks.c **** 		designed for use by kernel code, and has special calling requirements -
3114:Source/tasks.c **** 		it should be called with the scheduler suspended. */
3115:Source/tasks.c **** 
3116:Source/tasks.c **** 
3117:Source/tasks.c **** 		/* Place the event list item of the TCB in the appropriate event list.
3118:Source/tasks.c **** 		In this case it is assume that this is the only task that is going to
3119:Source/tasks.c **** 		be waiting on this event list, so the faster vListInsertEnd() function
3120:Source/tasks.c **** 		can be used in place of vListInsert. */
3121:Source/tasks.c **** 		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
3122:Source/tasks.c **** 
3123:Source/tasks.c **** 		/* If the task should block indefinitely then set the block time to a
3124:Source/tasks.c **** 		value that will be recognised as an indefinite delay inside the
3125:Source/tasks.c **** 		prvAddCurrentTaskToDelayedList() function. */
3126:Source/tasks.c **** 		if( xWaitIndefinitely != pdFALSE )
3127:Source/tasks.c **** 		{
3128:Source/tasks.c **** 			xTicksToWait = portMAX_DELAY;
3129:Source/tasks.c **** 		}
3130:Source/tasks.c **** 
3131:Source/tasks.c **** 		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
3132:Source/tasks.c **** 		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
3133:Source/tasks.c **** 	}
3134:Source/tasks.c **** 
3135:Source/tasks.c **** #endif /* configUSE_TIMERS */
3136:Source/tasks.c **** /*-----------------------------------------------------------*/
3137:Source/tasks.c **** 
3138:Source/tasks.c **** BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
3139:Source/tasks.c **** {
 2995              		.loc 1 3139 0
 2996              		.cfi_startproc
 2997              		@ args = 0, pretend = 0, frame = 16
 2998              		@ frame_needed = 1, uses_anonymous_args = 0
 2999 0000 80B5     		push	{r7, lr}
 3000              		.cfi_def_cfa_offset 8
 3001              		.cfi_offset 7, -8
 3002              		.cfi_offset 14, -4
 3003 0002 84B0     		sub	sp, sp, #16
 3004              		.cfi_def_cfa_offset 24
 3005 0004 00AF     		add	r7, sp, #0
 3006              		.cfi_def_cfa_register 7
 3007 0006 7860     		str	r0, [r7, #4]
3140:Source/tasks.c **** TCB_t *pxUnblockedTCB;
3141:Source/tasks.c **** BaseType_t xReturn;
3142:Source/tasks.c **** 
3143:Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED FROM A CRITICAL SECTION.  It can also be
3144:Source/tasks.c **** 	called from a critical section within an ISR. */
3145:Source/tasks.c **** 
3146:Source/tasks.c **** 	/* The event list is sorted in priority order, so the first in the list can
3147:Source/tasks.c **** 	be removed as it is known to be the highest priority.  Remove the TCB from
3148:Source/tasks.c **** 	the delayed list, and add it to the ready list.
3149:Source/tasks.c **** 
3150:Source/tasks.c **** 	If an event is for a queue that is locked then this function will never
3151:Source/tasks.c **** 	get called - the lock count on the queue will get modified instead.  This
3152:Source/tasks.c **** 	means exclusive access to the event list is guaranteed here.
3153:Source/tasks.c **** 
3154:Source/tasks.c **** 	This function assumes that a check has already been made to ensure that
3155:Source/tasks.c **** 	pxEventList is not empty. */
3156:Source/tasks.c **** 	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this 
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 114


 3008              		.loc 1 3156 0
 3009 0008 7B68     		ldr	r3, [r7, #4]
 3010 000a DB68     		ldr	r3, [r3, #12]
 3011 000c DB68     		ldr	r3, [r3, #12]
 3012 000e BB60     		str	r3, [r7, #8]
3157:Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
3158:Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 3013              		.loc 1 3158 0
 3014 0010 BB68     		ldr	r3, [r7, #8]
 3015 0012 1833     		adds	r3, r3, #24
 3016 0014 1846     		mov	r0, r3
 3017 0016 FFF7FEFF 		bl	uxListRemove
3159:Source/tasks.c **** 
3160:Source/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 3018              		.loc 1 3160 0
 3019 001a 1D4B     		ldr	r3, .L211
 3020 001c 1B68     		ldr	r3, [r3]
 3021 001e 002B     		cmp	r3, #0
 3022 0020 1CD1     		bne	.L206
3161:Source/tasks.c **** 	{
3162:Source/tasks.c **** 		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 3023              		.loc 1 3162 0
 3024 0022 BB68     		ldr	r3, [r7, #8]
 3025 0024 0433     		adds	r3, r3, #4
 3026 0026 1846     		mov	r0, r3
 3027 0028 FFF7FEFF 		bl	uxListRemove
3163:Source/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
 3028              		.loc 1 3163 0
 3029 002c BB68     		ldr	r3, [r7, #8]
 3030 002e DB6A     		ldr	r3, [r3, #44]
 3031 0030 0122     		movs	r2, #1
 3032 0032 9A40     		lsls	r2, r2, r3
 3033 0034 174B     		ldr	r3, .L211+4
 3034 0036 1B68     		ldr	r3, [r3]
 3035 0038 1343     		orrs	r3, r3, r2
 3036 003a 164A     		ldr	r2, .L211+4
 3037 003c 1360     		str	r3, [r2]
 3038 003e BB68     		ldr	r3, [r7, #8]
 3039 0040 DA6A     		ldr	r2, [r3, #44]
 3040 0042 1346     		mov	r3, r2
 3041 0044 9B00     		lsls	r3, r3, #2
 3042 0046 1344     		add	r3, r3, r2
 3043 0048 9B00     		lsls	r3, r3, #2
 3044 004a 134A     		ldr	r2, .L211+8
 3045 004c 1A44     		add	r2, r2, r3
 3046 004e BB68     		ldr	r3, [r7, #8]
 3047 0050 0433     		adds	r3, r3, #4
 3048 0052 1946     		mov	r1, r3
 3049 0054 1046     		mov	r0, r2
 3050 0056 FFF7FEFF 		bl	vListInsertEnd
 3051 005a 05E0     		b	.L207
 3052              	.L206:
3164:Source/tasks.c **** 
3165:Source/tasks.c **** 		#if( configUSE_TICKLESS_IDLE != 0 )
3166:Source/tasks.c **** 		{
3167:Source/tasks.c **** 			/* If a task is blocked on a kernel object then xNextTaskUnblockTime
3168:Source/tasks.c **** 			might be set to the blocked task's time out time.  If the task is
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 115


3169:Source/tasks.c **** 			unblocked for a reason other than a timeout xNextTaskUnblockTime is
3170:Source/tasks.c **** 			normally left unchanged, because it is automatically reset to a new
3171:Source/tasks.c **** 			value when the tick count equals xNextTaskUnblockTime.  However if
3172:Source/tasks.c **** 			tickless idling is used it might be more important to enter sleep mode
3173:Source/tasks.c **** 			at the earliest possible time - so reset xNextTaskUnblockTime here to
3174:Source/tasks.c **** 			ensure it is updated at the earliest possible time. */
3175:Source/tasks.c **** 			prvResetNextTaskUnblockTime();
3176:Source/tasks.c **** 		}
3177:Source/tasks.c **** 		#endif
3178:Source/tasks.c **** 	}
3179:Source/tasks.c **** 	else
3180:Source/tasks.c **** 	{
3181:Source/tasks.c **** 		/* The delayed and ready lists cannot be accessed, so hold this task
3182:Source/tasks.c **** 		pending until the scheduler is resumed. */
3183:Source/tasks.c **** 		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 3053              		.loc 1 3183 0
 3054 005c BB68     		ldr	r3, [r7, #8]
 3055 005e 1833     		adds	r3, r3, #24
 3056 0060 1946     		mov	r1, r3
 3057 0062 0E48     		ldr	r0, .L211+12
 3058 0064 FFF7FEFF 		bl	vListInsertEnd
 3059              	.L207:
3184:Source/tasks.c **** 	}
3185:Source/tasks.c **** 
3186:Source/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 3060              		.loc 1 3186 0
 3061 0068 BB68     		ldr	r3, [r7, #8]
 3062 006a DA6A     		ldr	r2, [r3, #44]
 3063 006c 0C4B     		ldr	r3, .L211+16
 3064 006e 1B68     		ldr	r3, [r3]
 3065 0070 DB6A     		ldr	r3, [r3, #44]
 3066 0072 9A42     		cmp	r2, r3
 3067 0074 05D9     		bls	.L208
3187:Source/tasks.c **** 	{
3188:Source/tasks.c **** 		/* Return true if the task removed from the event list has a higher
3189:Source/tasks.c **** 		priority than the calling task.  This allows the calling task to know if
3190:Source/tasks.c **** 		it should force a context switch now. */
3191:Source/tasks.c **** 		xReturn = pdTRUE;
 3068              		.loc 1 3191 0
 3069 0076 0123     		movs	r3, #1
 3070 0078 FB60     		str	r3, [r7, #12]
3192:Source/tasks.c **** 
3193:Source/tasks.c **** 		/* Mark that a yield is pending in case the user is not using the
3194:Source/tasks.c **** 		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
3195:Source/tasks.c **** 		xYieldPending = pdTRUE;
 3071              		.loc 1 3195 0
 3072 007a 0A4B     		ldr	r3, .L211+20
 3073 007c 0122     		movs	r2, #1
 3074 007e 1A60     		str	r2, [r3]
 3075 0080 01E0     		b	.L209
 3076              	.L208:
3196:Source/tasks.c **** 	}
3197:Source/tasks.c **** 	else
3198:Source/tasks.c **** 	{
3199:Source/tasks.c **** 		xReturn = pdFALSE;
 3077              		.loc 1 3199 0
 3078 0082 0023     		movs	r3, #0
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 116


 3079 0084 FB60     		str	r3, [r7, #12]
 3080              	.L209:
3200:Source/tasks.c **** 	}
3201:Source/tasks.c **** 
3202:Source/tasks.c **** 	return xReturn;
 3081              		.loc 1 3202 0
 3082 0086 FB68     		ldr	r3, [r7, #12]
3203:Source/tasks.c **** }
 3083              		.loc 1 3203 0
 3084 0088 1846     		mov	r0, r3
 3085 008a 1037     		adds	r7, r7, #16
 3086              		.cfi_def_cfa_offset 8
 3087 008c BD46     		mov	sp, r7
 3088              		.cfi_def_cfa_register 13
 3089              		@ sp needed
 3090 008e 80BD     		pop	{r7, pc}
 3091              	.L212:
 3092              		.align	2
 3093              	.L211:
 3094 0090 00010000 		.word	uxSchedulerSuspended
 3095 0094 E0000000 		.word	uxTopReadyPriority
 3096 0098 04000000 		.word	pxReadyTasksLists
 3097 009c 98000000 		.word	xPendingReadyList
 3098 00a0 00000000 		.word	pxCurrentTCB
 3099 00a4 EC000000 		.word	xYieldPending
 3100              		.cfi_endproc
 3101              	.LFE95:
 3102              		.size	xTaskRemoveFromEventList, .-xTaskRemoveFromEventList
 3103              		.section	.text.vTaskRemoveFromUnorderedEventList,"ax",%progbits
 3104              		.align	2
 3105              		.global	vTaskRemoveFromUnorderedEventList
 3106              		.thumb
 3107              		.thumb_func
 3108              		.type	vTaskRemoveFromUnorderedEventList, %function
 3109              	vTaskRemoveFromUnorderedEventList:
 3110              	.LFB96:
3204:Source/tasks.c **** /*-----------------------------------------------------------*/
3205:Source/tasks.c **** 
3206:Source/tasks.c **** void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
3207:Source/tasks.c **** {
 3111              		.loc 1 3207 0
 3112              		.cfi_startproc
 3113              		@ args = 0, pretend = 0, frame = 16
 3114              		@ frame_needed = 1, uses_anonymous_args = 0
 3115 0000 80B5     		push	{r7, lr}
 3116              		.cfi_def_cfa_offset 8
 3117              		.cfi_offset 7, -8
 3118              		.cfi_offset 14, -4
 3119 0002 84B0     		sub	sp, sp, #16
 3120              		.cfi_def_cfa_offset 24
 3121 0004 00AF     		add	r7, sp, #0
 3122              		.cfi_def_cfa_register 7
 3123 0006 7860     		str	r0, [r7, #4]
 3124 0008 3960     		str	r1, [r7]
3208:Source/tasks.c **** TCB_t *pxUnblockedTCB;
3209:Source/tasks.c **** 
3210:Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 117


3211:Source/tasks.c **** 	the event flags implementation. */
3212:Source/tasks.c **** 	configASSERT( uxSchedulerSuspended != pdFALSE );
3213:Source/tasks.c **** 
3214:Source/tasks.c **** 	/* Store the new item value in the event list. */
3215:Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 3125              		.loc 1 3215 0
 3126 000a 3B68     		ldr	r3, [r7]
 3127 000c 43F00042 		orr	r2, r3, #-2147483648
 3128 0010 7B68     		ldr	r3, [r7, #4]
 3129 0012 1A60     		str	r2, [r3]
3216:Source/tasks.c **** 
3217:Source/tasks.c **** 	/* Remove the event list form the event flag.  Interrupts do not access
3218:Source/tasks.c **** 	event flags. */
3219:Source/tasks.c **** 	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this 
 3130              		.loc 1 3219 0
 3131 0014 7B68     		ldr	r3, [r7, #4]
 3132 0016 DB68     		ldr	r3, [r3, #12]
 3133 0018 FB60     		str	r3, [r7, #12]
3220:Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
3221:Source/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
 3134              		.loc 1 3221 0
 3135 001a 7868     		ldr	r0, [r7, #4]
 3136 001c FFF7FEFF 		bl	uxListRemove
3222:Source/tasks.c **** 
3223:Source/tasks.c **** 	#if( configUSE_TICKLESS_IDLE != 0 )
3224:Source/tasks.c **** 	{
3225:Source/tasks.c **** 		/* If a task is blocked on a kernel object then xNextTaskUnblockTime
3226:Source/tasks.c **** 		might be set to the blocked task's time out time.  If the task is
3227:Source/tasks.c **** 		unblocked for a reason other than a timeout xNextTaskUnblockTime is
3228:Source/tasks.c **** 		normally left unchanged, because it is automatically reset to a new
3229:Source/tasks.c **** 		value when the tick count equals xNextTaskUnblockTime.  However if
3230:Source/tasks.c **** 		tickless idling is used it might be more important to enter sleep mode
3231:Source/tasks.c **** 		at the earliest possible time - so reset xNextTaskUnblockTime here to
3232:Source/tasks.c **** 		ensure it is updated at the earliest possible time. */
3233:Source/tasks.c **** 		prvResetNextTaskUnblockTime();
3234:Source/tasks.c **** 	}
3235:Source/tasks.c **** 	#endif
3236:Source/tasks.c **** 
3237:Source/tasks.c **** 	/* Remove the task from the delayed list and add it to the ready list.  The
3238:Source/tasks.c **** 	scheduler is suspended so interrupts will not be accessing the ready
3239:Source/tasks.c **** 	lists. */
3240:Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 3137              		.loc 1 3240 0
 3138 0020 FB68     		ldr	r3, [r7, #12]
 3139 0022 0433     		adds	r3, r3, #4
 3140 0024 1846     		mov	r0, r3
 3141 0026 FFF7FEFF 		bl	uxListRemove
3241:Source/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
 3142              		.loc 1 3241 0
 3143 002a FB68     		ldr	r3, [r7, #12]
 3144 002c DB6A     		ldr	r3, [r3, #44]
 3145 002e 0122     		movs	r2, #1
 3146 0030 9A40     		lsls	r2, r2, r3
 3147 0032 104B     		ldr	r3, .L216
 3148 0034 1B68     		ldr	r3, [r3]
 3149 0036 1343     		orrs	r3, r3, r2
 3150 0038 0E4A     		ldr	r2, .L216
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 118


 3151 003a 1360     		str	r3, [r2]
 3152 003c FB68     		ldr	r3, [r7, #12]
 3153 003e DA6A     		ldr	r2, [r3, #44]
 3154 0040 1346     		mov	r3, r2
 3155 0042 9B00     		lsls	r3, r3, #2
 3156 0044 1344     		add	r3, r3, r2
 3157 0046 9B00     		lsls	r3, r3, #2
 3158 0048 0B4A     		ldr	r2, .L216+4
 3159 004a 1A44     		add	r2, r2, r3
 3160 004c FB68     		ldr	r3, [r7, #12]
 3161 004e 0433     		adds	r3, r3, #4
 3162 0050 1946     		mov	r1, r3
 3163 0052 1046     		mov	r0, r2
 3164 0054 FFF7FEFF 		bl	vListInsertEnd
3242:Source/tasks.c **** 
3243:Source/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 3165              		.loc 1 3243 0
 3166 0058 FB68     		ldr	r3, [r7, #12]
 3167 005a DA6A     		ldr	r2, [r3, #44]
 3168 005c 074B     		ldr	r3, .L216+8
 3169 005e 1B68     		ldr	r3, [r3]
 3170 0060 DB6A     		ldr	r3, [r3, #44]
 3171 0062 9A42     		cmp	r2, r3
 3172 0064 02D9     		bls	.L215
3244:Source/tasks.c **** 	{
3245:Source/tasks.c **** 		/* The unblocked task has a priority above that of the calling task, so
3246:Source/tasks.c **** 		a context switch is required.  This function is called with the
3247:Source/tasks.c **** 		scheduler suspended so xYieldPending is set so the context switch
3248:Source/tasks.c **** 		occurs immediately that the scheduler is resumed (unsuspended). */
3249:Source/tasks.c **** 		xYieldPending = pdTRUE;
 3173              		.loc 1 3249 0
 3174 0066 064B     		ldr	r3, .L216+12
 3175 0068 0122     		movs	r2, #1
 3176 006a 1A60     		str	r2, [r3]
 3177              	.L215:
3250:Source/tasks.c **** 	}
3251:Source/tasks.c **** }
 3178              		.loc 1 3251 0
 3179 006c 00BF     		nop
 3180 006e 1037     		adds	r7, r7, #16
 3181              		.cfi_def_cfa_offset 8
 3182 0070 BD46     		mov	sp, r7
 3183              		.cfi_def_cfa_register 13
 3184              		@ sp needed
 3185 0072 80BD     		pop	{r7, pc}
 3186              	.L217:
 3187              		.align	2
 3188              	.L216:
 3189 0074 E0000000 		.word	uxTopReadyPriority
 3190 0078 04000000 		.word	pxReadyTasksLists
 3191 007c 00000000 		.word	pxCurrentTCB
 3192 0080 EC000000 		.word	xYieldPending
 3193              		.cfi_endproc
 3194              	.LFE96:
 3195              		.size	vTaskRemoveFromUnorderedEventList, .-vTaskRemoveFromUnorderedEventList
 3196              		.section	.text.vTaskSetTimeOutState,"ax",%progbits
 3197              		.align	2
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 119


 3198              		.global	vTaskSetTimeOutState
 3199              		.thumb
 3200              		.thumb_func
 3201              		.type	vTaskSetTimeOutState, %function
 3202              	vTaskSetTimeOutState:
 3203              	.LFB97:
3252:Source/tasks.c **** /*-----------------------------------------------------------*/
3253:Source/tasks.c **** 
3254:Source/tasks.c **** void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
3255:Source/tasks.c **** {
 3204              		.loc 1 3255 0
 3205              		.cfi_startproc
 3206              		@ args = 0, pretend = 0, frame = 8
 3207              		@ frame_needed = 1, uses_anonymous_args = 0
 3208 0000 80B5     		push	{r7, lr}
 3209              		.cfi_def_cfa_offset 8
 3210              		.cfi_offset 7, -8
 3211              		.cfi_offset 14, -4
 3212 0002 82B0     		sub	sp, sp, #8
 3213              		.cfi_def_cfa_offset 16
 3214 0004 00AF     		add	r7, sp, #0
 3215              		.cfi_def_cfa_register 7
 3216 0006 7860     		str	r0, [r7, #4]
3256:Source/tasks.c **** 	configASSERT( pxTimeOut );
3257:Source/tasks.c **** 	taskENTER_CRITICAL();
 3217              		.loc 1 3257 0
 3218 0008 FFF7FEFF 		bl	vPortEnterCritical
3258:Source/tasks.c **** 	{
3259:Source/tasks.c **** 		pxTimeOut->xOverflowCount = xNumOfOverflows;
 3219              		.loc 1 3259 0
 3220 000c 064B     		ldr	r3, .L219
 3221 000e 1A68     		ldr	r2, [r3]
 3222 0010 7B68     		ldr	r3, [r7, #4]
 3223 0012 1A60     		str	r2, [r3]
3260:Source/tasks.c **** 		pxTimeOut->xTimeOnEntering = xTickCount;
 3224              		.loc 1 3260 0
 3225 0014 054B     		ldr	r3, .L219+4
 3226 0016 1A68     		ldr	r2, [r3]
 3227 0018 7B68     		ldr	r3, [r7, #4]
 3228 001a 5A60     		str	r2, [r3, #4]
3261:Source/tasks.c **** 	}
3262:Source/tasks.c **** 	taskEXIT_CRITICAL();
 3229              		.loc 1 3262 0
 3230 001c FFF7FEFF 		bl	vPortExitCritical
3263:Source/tasks.c **** }
 3231              		.loc 1 3263 0
 3232 0020 00BF     		nop
 3233 0022 0837     		adds	r7, r7, #8
 3234              		.cfi_def_cfa_offset 8
 3235 0024 BD46     		mov	sp, r7
 3236              		.cfi_def_cfa_register 13
 3237              		@ sp needed
 3238 0026 80BD     		pop	{r7, pc}
 3239              	.L220:
 3240              		.align	2
 3241              	.L219:
 3242 0028 F0000000 		.word	xNumOfOverflows
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 120


 3243 002c DC000000 		.word	xTickCount
 3244              		.cfi_endproc
 3245              	.LFE97:
 3246              		.size	vTaskSetTimeOutState, .-vTaskSetTimeOutState
 3247              		.section	.text.vTaskInternalSetTimeOutState,"ax",%progbits
 3248              		.align	2
 3249              		.global	vTaskInternalSetTimeOutState
 3250              		.thumb
 3251              		.thumb_func
 3252              		.type	vTaskInternalSetTimeOutState, %function
 3253              	vTaskInternalSetTimeOutState:
 3254              	.LFB98:
3264:Source/tasks.c **** /*-----------------------------------------------------------*/
3265:Source/tasks.c **** 
3266:Source/tasks.c **** void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
3267:Source/tasks.c **** {
 3255              		.loc 1 3267 0
 3256              		.cfi_startproc
 3257              		@ args = 0, pretend = 0, frame = 8
 3258              		@ frame_needed = 1, uses_anonymous_args = 0
 3259              		@ link register save eliminated.
 3260 0000 80B4     		push	{r7}
 3261              		.cfi_def_cfa_offset 4
 3262              		.cfi_offset 7, -4
 3263 0002 83B0     		sub	sp, sp, #12
 3264              		.cfi_def_cfa_offset 16
 3265 0004 00AF     		add	r7, sp, #0
 3266              		.cfi_def_cfa_register 7
 3267 0006 7860     		str	r0, [r7, #4]
3268:Source/tasks.c **** 	/* For internal use only as it does not use a critical section. */
3269:Source/tasks.c **** 	pxTimeOut->xOverflowCount = xNumOfOverflows;
 3268              		.loc 1 3269 0
 3269 0008 064B     		ldr	r3, .L222
 3270 000a 1A68     		ldr	r2, [r3]
 3271 000c 7B68     		ldr	r3, [r7, #4]
 3272 000e 1A60     		str	r2, [r3]
3270:Source/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
 3273              		.loc 1 3270 0
 3274 0010 054B     		ldr	r3, .L222+4
 3275 0012 1A68     		ldr	r2, [r3]
 3276 0014 7B68     		ldr	r3, [r7, #4]
 3277 0016 5A60     		str	r2, [r3, #4]
3271:Source/tasks.c **** }
 3278              		.loc 1 3271 0
 3279 0018 00BF     		nop
 3280 001a 0C37     		adds	r7, r7, #12
 3281              		.cfi_def_cfa_offset 4
 3282 001c BD46     		mov	sp, r7
 3283              		.cfi_def_cfa_register 13
 3284              		@ sp needed
 3285 001e 80BC     		pop	{r7}
 3286              		.cfi_restore 7
 3287              		.cfi_def_cfa_offset 0
 3288 0020 7047     		bx	lr
 3289              	.L223:
 3290 0022 00BF     		.align	2
 3291              	.L222:
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 121


 3292 0024 F0000000 		.word	xNumOfOverflows
 3293 0028 DC000000 		.word	xTickCount
 3294              		.cfi_endproc
 3295              	.LFE98:
 3296              		.size	vTaskInternalSetTimeOutState, .-vTaskInternalSetTimeOutState
 3297              		.section	.text.xTaskCheckForTimeOut,"ax",%progbits
 3298              		.align	2
 3299              		.global	xTaskCheckForTimeOut
 3300              		.thumb
 3301              		.thumb_func
 3302              		.type	xTaskCheckForTimeOut, %function
 3303              	xTaskCheckForTimeOut:
 3304              	.LFB99:
3272:Source/tasks.c **** /*-----------------------------------------------------------*/
3273:Source/tasks.c **** 
3274:Source/tasks.c **** BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
3275:Source/tasks.c **** {
 3305              		.loc 1 3275 0
 3306              		.cfi_startproc
 3307              		@ args = 0, pretend = 0, frame = 24
 3308              		@ frame_needed = 1, uses_anonymous_args = 0
 3309 0000 80B5     		push	{r7, lr}
 3310              		.cfi_def_cfa_offset 8
 3311              		.cfi_offset 7, -8
 3312              		.cfi_offset 14, -4
 3313 0002 86B0     		sub	sp, sp, #24
 3314              		.cfi_def_cfa_offset 32
 3315 0004 00AF     		add	r7, sp, #0
 3316              		.cfi_def_cfa_register 7
 3317 0006 7860     		str	r0, [r7, #4]
 3318 0008 3960     		str	r1, [r7]
3276:Source/tasks.c **** BaseType_t xReturn;
3277:Source/tasks.c **** 
3278:Source/tasks.c **** 	configASSERT( pxTimeOut );
3279:Source/tasks.c **** 	configASSERT( pxTicksToWait );
3280:Source/tasks.c **** 
3281:Source/tasks.c **** 	taskENTER_CRITICAL();
 3319              		.loc 1 3281 0
 3320 000a FFF7FEFF 		bl	vPortEnterCritical
 3321              	.LBB49:
3282:Source/tasks.c **** 	{
3283:Source/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this block. */
3284:Source/tasks.c **** 		const TickType_t xConstTickCount = xTickCount;
 3322              		.loc 1 3284 0
 3323 000e 1D4B     		ldr	r3, .L230
 3324 0010 1B68     		ldr	r3, [r3]
 3325 0012 3B61     		str	r3, [r7, #16]
3285:Source/tasks.c **** 		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 3326              		.loc 1 3285 0
 3327 0014 7B68     		ldr	r3, [r7, #4]
 3328 0016 5B68     		ldr	r3, [r3, #4]
 3329 0018 3A69     		ldr	r2, [r7, #16]
 3330 001a D31A     		subs	r3, r2, r3
 3331 001c FB60     		str	r3, [r7, #12]
3286:Source/tasks.c **** 
3287:Source/tasks.c **** 		#if( INCLUDE_xTaskAbortDelay == 1 )
3288:Source/tasks.c **** 			if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 122


3289:Source/tasks.c **** 			{
3290:Source/tasks.c **** 				/* The delay was aborted, which is not the same as a time out,
3291:Source/tasks.c **** 				but has the same result. */
3292:Source/tasks.c **** 				pxCurrentTCB->ucDelayAborted = pdFALSE;
3293:Source/tasks.c **** 				xReturn = pdTRUE;
3294:Source/tasks.c **** 			}
3295:Source/tasks.c **** 			else
3296:Source/tasks.c **** 		#endif
3297:Source/tasks.c **** 
3298:Source/tasks.c **** 		#if ( INCLUDE_vTaskSuspend == 1 )
3299:Source/tasks.c **** 			if( *pxTicksToWait == portMAX_DELAY )
 3332              		.loc 1 3299 0
 3333 001e 3B68     		ldr	r3, [r7]
 3334 0020 1B68     		ldr	r3, [r3]
 3335 0022 B3F1FF3F 		cmp	r3, #-1
 3336 0026 02D1     		bne	.L225
3300:Source/tasks.c **** 			{
3301:Source/tasks.c **** 				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
3302:Source/tasks.c **** 				specified is the maximum block time then the task should block
3303:Source/tasks.c **** 				indefinitely, and therefore never time out. */
3304:Source/tasks.c **** 				xReturn = pdFALSE;
 3337              		.loc 1 3304 0
 3338 0028 0023     		movs	r3, #0
 3339 002a 7B61     		str	r3, [r7, #20]
 3340 002c 23E0     		b	.L226
 3341              	.L225:
3305:Source/tasks.c **** 			}
3306:Source/tasks.c **** 			else
3307:Source/tasks.c **** 		#endif
3308:Source/tasks.c **** 
3309:Source/tasks.c **** 		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEn
 3342              		.loc 1 3309 0
 3343 002e 7B68     		ldr	r3, [r7, #4]
 3344 0030 1A68     		ldr	r2, [r3]
 3345 0032 154B     		ldr	r3, .L230+4
 3346 0034 1B68     		ldr	r3, [r3]
 3347 0036 9A42     		cmp	r2, r3
 3348 0038 07D0     		beq	.L227
 3349              		.loc 1 3309 0 is_stmt 0 discriminator 1
 3350 003a 7B68     		ldr	r3, [r7, #4]
 3351 003c 5A68     		ldr	r2, [r3, #4]
 3352 003e 3B69     		ldr	r3, [r7, #16]
 3353 0040 9A42     		cmp	r2, r3
 3354 0042 02D8     		bhi	.L227
3310:Source/tasks.c **** 		{
3311:Source/tasks.c **** 			/* The tick count is greater than the time at which
3312:Source/tasks.c **** 			vTaskSetTimeout() was called, but has also overflowed since
3313:Source/tasks.c **** 			vTaskSetTimeOut() was called.  It must have wrapped all the way
3314:Source/tasks.c **** 			around and gone past again. This passed since vTaskSetTimeout()
3315:Source/tasks.c **** 			was called. */
3316:Source/tasks.c **** 			xReturn = pdTRUE;
 3355              		.loc 1 3316 0 is_stmt 1
 3356 0044 0123     		movs	r3, #1
 3357 0046 7B61     		str	r3, [r7, #20]
 3358 0048 15E0     		b	.L226
 3359              	.L227:
3317:Source/tasks.c **** 		}
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 123


3318:Source/tasks.c **** 		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with som
 3360              		.loc 1 3318 0
 3361 004a 3B68     		ldr	r3, [r7]
 3362 004c 1A68     		ldr	r2, [r3]
 3363 004e FB68     		ldr	r3, [r7, #12]
 3364 0050 9A42     		cmp	r2, r3
 3365 0052 0BD9     		bls	.L228
3319:Source/tasks.c **** 		{
3320:Source/tasks.c **** 			/* Not a genuine timeout. Adjust parameters for time remaining. */
3321:Source/tasks.c **** 			*pxTicksToWait -= xElapsedTime;
 3366              		.loc 1 3321 0
 3367 0054 3B68     		ldr	r3, [r7]
 3368 0056 1A68     		ldr	r2, [r3]
 3369 0058 FB68     		ldr	r3, [r7, #12]
 3370 005a D21A     		subs	r2, r2, r3
 3371 005c 3B68     		ldr	r3, [r7]
 3372 005e 1A60     		str	r2, [r3]
3322:Source/tasks.c **** 			vTaskInternalSetTimeOutState( pxTimeOut );
 3373              		.loc 1 3322 0
 3374 0060 7868     		ldr	r0, [r7, #4]
 3375 0062 FFF7FEFF 		bl	vTaskInternalSetTimeOutState
3323:Source/tasks.c **** 			xReturn = pdFALSE;
 3376              		.loc 1 3323 0
 3377 0066 0023     		movs	r3, #0
 3378 0068 7B61     		str	r3, [r7, #20]
 3379 006a 04E0     		b	.L226
 3380              	.L228:
3324:Source/tasks.c **** 		}
3325:Source/tasks.c **** 		else
3326:Source/tasks.c **** 		{
3327:Source/tasks.c **** 			*pxTicksToWait = 0;
 3381              		.loc 1 3327 0
 3382 006c 3B68     		ldr	r3, [r7]
 3383 006e 0022     		movs	r2, #0
 3384 0070 1A60     		str	r2, [r3]
3328:Source/tasks.c **** 			xReturn = pdTRUE;
 3385              		.loc 1 3328 0
 3386 0072 0123     		movs	r3, #1
 3387 0074 7B61     		str	r3, [r7, #20]
 3388              	.L226:
 3389              	.LBE49:
3329:Source/tasks.c **** 		}
3330:Source/tasks.c **** 	}
3331:Source/tasks.c **** 	taskEXIT_CRITICAL();
 3390              		.loc 1 3331 0
 3391 0076 FFF7FEFF 		bl	vPortExitCritical
3332:Source/tasks.c **** 
3333:Source/tasks.c **** 	return xReturn;
 3392              		.loc 1 3333 0
 3393 007a 7B69     		ldr	r3, [r7, #20]
3334:Source/tasks.c **** }
 3394              		.loc 1 3334 0
 3395 007c 1846     		mov	r0, r3
 3396 007e 1837     		adds	r7, r7, #24
 3397              		.cfi_def_cfa_offset 8
 3398 0080 BD46     		mov	sp, r7
 3399              		.cfi_def_cfa_register 13
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 124


 3400              		@ sp needed
 3401 0082 80BD     		pop	{r7, pc}
 3402              	.L231:
 3403              		.align	2
 3404              	.L230:
 3405 0084 DC000000 		.word	xTickCount
 3406 0088 F0000000 		.word	xNumOfOverflows
 3407              		.cfi_endproc
 3408              	.LFE99:
 3409              		.size	xTaskCheckForTimeOut, .-xTaskCheckForTimeOut
 3410              		.section	.text.vTaskMissedYield,"ax",%progbits
 3411              		.align	2
 3412              		.global	vTaskMissedYield
 3413              		.thumb
 3414              		.thumb_func
 3415              		.type	vTaskMissedYield, %function
 3416              	vTaskMissedYield:
 3417              	.LFB100:
3335:Source/tasks.c **** /*-----------------------------------------------------------*/
3336:Source/tasks.c **** 
3337:Source/tasks.c **** void vTaskMissedYield( void )
3338:Source/tasks.c **** {
 3418              		.loc 1 3338 0
 3419              		.cfi_startproc
 3420              		@ args = 0, pretend = 0, frame = 0
 3421              		@ frame_needed = 1, uses_anonymous_args = 0
 3422              		@ link register save eliminated.
 3423 0000 80B4     		push	{r7}
 3424              		.cfi_def_cfa_offset 4
 3425              		.cfi_offset 7, -4
 3426 0002 00AF     		add	r7, sp, #0
 3427              		.cfi_def_cfa_register 7
3339:Source/tasks.c **** 	xYieldPending = pdTRUE;
 3428              		.loc 1 3339 0
 3429 0004 034B     		ldr	r3, .L233
 3430 0006 0122     		movs	r2, #1
 3431 0008 1A60     		str	r2, [r3]
3340:Source/tasks.c **** }
 3432              		.loc 1 3340 0
 3433 000a 00BF     		nop
 3434 000c BD46     		mov	sp, r7
 3435              		.cfi_def_cfa_register 13
 3436              		@ sp needed
 3437 000e 80BC     		pop	{r7}
 3438              		.cfi_restore 7
 3439              		.cfi_def_cfa_offset 0
 3440 0010 7047     		bx	lr
 3441              	.L234:
 3442 0012 00BF     		.align	2
 3443              	.L233:
 3444 0014 EC000000 		.word	xYieldPending
 3445              		.cfi_endproc
 3446              	.LFE100:
 3447              		.size	vTaskMissedYield, .-vTaskMissedYield
 3448              		.section	.text.prvIdleTask,"ax",%progbits
 3449              		.align	2
 3450              		.thumb
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 125


 3451              		.thumb_func
 3452              		.type	prvIdleTask, %function
 3453              	prvIdleTask:
 3454              	.LFB101:
3341:Source/tasks.c **** /*-----------------------------------------------------------*/
3342:Source/tasks.c **** 
3343:Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3344:Source/tasks.c **** 
3345:Source/tasks.c **** 	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
3346:Source/tasks.c **** 	{
3347:Source/tasks.c **** 	UBaseType_t uxReturn;
3348:Source/tasks.c **** 	TCB_t const *pxTCB;
3349:Source/tasks.c **** 
3350:Source/tasks.c **** 		if( xTask != NULL )
3351:Source/tasks.c **** 		{
3352:Source/tasks.c **** 			pxTCB = xTask;
3353:Source/tasks.c **** 			uxReturn = pxTCB->uxTaskNumber;
3354:Source/tasks.c **** 		}
3355:Source/tasks.c **** 		else
3356:Source/tasks.c **** 		{
3357:Source/tasks.c **** 			uxReturn = 0U;
3358:Source/tasks.c **** 		}
3359:Source/tasks.c **** 
3360:Source/tasks.c **** 		return uxReturn;
3361:Source/tasks.c **** 	}
3362:Source/tasks.c **** 
3363:Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3364:Source/tasks.c **** /*-----------------------------------------------------------*/
3365:Source/tasks.c **** 
3366:Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3367:Source/tasks.c **** 
3368:Source/tasks.c **** 	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
3369:Source/tasks.c **** 	{
3370:Source/tasks.c **** 	TCB_t * pxTCB;
3371:Source/tasks.c **** 
3372:Source/tasks.c **** 		if( xTask != NULL )
3373:Source/tasks.c **** 		{
3374:Source/tasks.c **** 			pxTCB = xTask;
3375:Source/tasks.c **** 			pxTCB->uxTaskNumber = uxHandle;
3376:Source/tasks.c **** 		}
3377:Source/tasks.c **** 	}
3378:Source/tasks.c **** 
3379:Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3380:Source/tasks.c **** 
3381:Source/tasks.c **** /*
3382:Source/tasks.c ****  * -----------------------------------------------------------
3383:Source/tasks.c ****  * The Idle task.
3384:Source/tasks.c ****  * ----------------------------------------------------------
3385:Source/tasks.c ****  *
3386:Source/tasks.c ****  * The portTASK_FUNCTION() macro is used to allow port/compiler specific
3387:Source/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
3388:Source/tasks.c ****  *
3389:Source/tasks.c ****  * void prvIdleTask( void *pvParameters );
3390:Source/tasks.c ****  *
3391:Source/tasks.c ****  */
3392:Source/tasks.c **** static portTASK_FUNCTION( prvIdleTask, pvParameters )
3393:Source/tasks.c **** {
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 126


 3455              		.loc 1 3393 0
 3456              		.cfi_startproc
 3457              		@ args = 0, pretend = 0, frame = 8
 3458              		@ frame_needed = 1, uses_anonymous_args = 0
 3459 0000 80B5     		push	{r7, lr}
 3460              		.cfi_def_cfa_offset 8
 3461              		.cfi_offset 7, -8
 3462              		.cfi_offset 14, -4
 3463 0002 82B0     		sub	sp, sp, #8
 3464              		.cfi_def_cfa_offset 16
 3465 0004 00AF     		add	r7, sp, #0
 3466              		.cfi_def_cfa_register 7
 3467 0006 7860     		str	r0, [r7, #4]
 3468              	.L236:
3394:Source/tasks.c **** 	/* Stop warnings. */
3395:Source/tasks.c **** 	( void ) pvParameters;
3396:Source/tasks.c **** 
3397:Source/tasks.c **** 	/** THIS IS THE RTOS IDLE TASK - WHICH IS CREATED AUTOMATICALLY WHEN THE
3398:Source/tasks.c **** 	SCHEDULER IS STARTED. **/
3399:Source/tasks.c **** 
3400:Source/tasks.c **** 	/* In case a task that has a secure context deletes itself, in which case
3401:Source/tasks.c **** 	the idle task is responsible for deleting the task's secure context, if
3402:Source/tasks.c **** 	any. */
3403:Source/tasks.c **** 	portALLOCATE_SECURE_CONTEXT( configMINIMAL_SECURE_STACK_SIZE );
3404:Source/tasks.c **** 
3405:Source/tasks.c **** 	for( ;; )
3406:Source/tasks.c **** 	{
3407:Source/tasks.c **** 		/* See if any tasks have deleted themselves - if so then the idle task
3408:Source/tasks.c **** 		is responsible for freeing the deleted task's TCB and stack. */
3409:Source/tasks.c **** 		prvCheckTasksWaitingTermination();
 3469              		.loc 1 3409 0 discriminator 1
 3470 0008 FFF7FEFF 		bl	prvCheckTasksWaitingTermination
3410:Source/tasks.c **** 
3411:Source/tasks.c **** 		#if ( configUSE_PREEMPTION == 0 )
3412:Source/tasks.c **** 		{
3413:Source/tasks.c **** 			/* If we are not using preemption we keep forcing a task switch to
3414:Source/tasks.c **** 			see if any other task has become available.  If we are using
3415:Source/tasks.c **** 			preemption we don't need to do this as any task becoming available
3416:Source/tasks.c **** 			will automatically get the processor anyway. */
3417:Source/tasks.c **** 			taskYIELD();
3418:Source/tasks.c **** 		}
3419:Source/tasks.c **** 		#endif /* configUSE_PREEMPTION */
3420:Source/tasks.c **** 
3421:Source/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) )
3422:Source/tasks.c **** 		{
3423:Source/tasks.c **** 			/* When using preemption tasks of equal priority will be
3424:Source/tasks.c **** 			timesliced.  If a task that is sharing the idle priority is ready
3425:Source/tasks.c **** 			to run then the idle task should yield before the end of the
3426:Source/tasks.c **** 			timeslice.
3427:Source/tasks.c **** 
3428:Source/tasks.c **** 			A critical region is not required here as we are just reading from
3429:Source/tasks.c **** 			the list, and an occasional incorrect value will not matter.  If
3430:Source/tasks.c **** 			the ready list at the idle priority contains more than one task
3431:Source/tasks.c **** 			then a task other than the idle task is ready to execute. */
3432:Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
3433:Source/tasks.c **** 			{
3434:Source/tasks.c **** 				taskYIELD();
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 127


3435:Source/tasks.c **** 			}
3436:Source/tasks.c **** 			else
3437:Source/tasks.c **** 			{
3438:Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3439:Source/tasks.c **** 			}
3440:Source/tasks.c **** 		}
3441:Source/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) ) */
3442:Source/tasks.c **** 
3443:Source/tasks.c **** 		#if ( configUSE_IDLE_HOOK == 1 )
3444:Source/tasks.c **** 		{
3445:Source/tasks.c **** 			extern void vApplicationIdleHook( void );
3446:Source/tasks.c **** 
3447:Source/tasks.c **** 			/* Call the user defined function from within the idle task.  This
3448:Source/tasks.c **** 			allows the application designer to add background functionality
3449:Source/tasks.c **** 			without the overhead of a separate task.
3450:Source/tasks.c **** 			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
3451:Source/tasks.c **** 			CALL A FUNCTION THAT MIGHT BLOCK. */
3452:Source/tasks.c **** 			vApplicationIdleHook();
3453:Source/tasks.c **** 		}
3454:Source/tasks.c **** 		#endif /* configUSE_IDLE_HOOK */
3455:Source/tasks.c **** 
3456:Source/tasks.c **** 		/* This conditional compilation should use inequality to 0, not equality
3457:Source/tasks.c **** 		to 1.  This is to ensure portSUPPRESS_TICKS_AND_SLEEP() is called when
3458:Source/tasks.c **** 		user defined low power mode	implementations require
3459:Source/tasks.c **** 		configUSE_TICKLESS_IDLE to be set to a value other than 1. */
3460:Source/tasks.c **** 		#if ( configUSE_TICKLESS_IDLE != 0 )
3461:Source/tasks.c **** 		{
3462:Source/tasks.c **** 		TickType_t xExpectedIdleTime;
3463:Source/tasks.c **** 
3464:Source/tasks.c **** 			/* It is not desirable to suspend then resume the scheduler on
3465:Source/tasks.c **** 			each iteration of the idle task.  Therefore, a preliminary
3466:Source/tasks.c **** 			test of the expected idle time is performed without the
3467:Source/tasks.c **** 			scheduler suspended.  The result here is not necessarily
3468:Source/tasks.c **** 			valid. */
3469:Source/tasks.c **** 			xExpectedIdleTime = prvGetExpectedIdleTime();
3470:Source/tasks.c **** 
3471:Source/tasks.c **** 			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3472:Source/tasks.c **** 			{
3473:Source/tasks.c **** 				vTaskSuspendAll();
3474:Source/tasks.c **** 				{
3475:Source/tasks.c **** 					/* Now the scheduler is suspended, the expected idle
3476:Source/tasks.c **** 					time can be sampled again, and this time its value can
3477:Source/tasks.c **** 					be used. */
3478:Source/tasks.c **** 					configASSERT( xNextTaskUnblockTime >= xTickCount );
3479:Source/tasks.c **** 					xExpectedIdleTime = prvGetExpectedIdleTime();
3480:Source/tasks.c **** 
3481:Source/tasks.c **** 					/* Define the following macro to set xExpectedIdleTime to 0
3482:Source/tasks.c **** 					if the application does not want
3483:Source/tasks.c **** 					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
3484:Source/tasks.c **** 					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );
3485:Source/tasks.c **** 
3486:Source/tasks.c **** 					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3487:Source/tasks.c **** 					{
3488:Source/tasks.c **** 						traceLOW_POWER_IDLE_BEGIN();
3489:Source/tasks.c **** 						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
3490:Source/tasks.c **** 						traceLOW_POWER_IDLE_END();
3491:Source/tasks.c **** 					}
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 128


3492:Source/tasks.c **** 					else
3493:Source/tasks.c **** 					{
3494:Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3495:Source/tasks.c **** 					}
3496:Source/tasks.c **** 				}
3497:Source/tasks.c **** 				( void ) xTaskResumeAll();
3498:Source/tasks.c **** 			}
3499:Source/tasks.c **** 			else
3500:Source/tasks.c **** 			{
3501:Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3502:Source/tasks.c **** 			}
3503:Source/tasks.c **** 		}
3504:Source/tasks.c **** 		#endif /* configUSE_TICKLESS_IDLE */
3505:Source/tasks.c **** 	}
 3471              		.loc 1 3505 0 discriminator 1
 3472 000c FCE7     		b	.L236
 3473              		.cfi_endproc
 3474              	.LFE101:
 3475              		.size	prvIdleTask, .-prvIdleTask
 3476 000e 00BF     		.section	.text.prvInitialiseTaskLists,"ax",%progbits
 3477              		.align	2
 3478              		.thumb
 3479              		.thumb_func
 3480              		.type	prvInitialiseTaskLists, %function
 3481              	prvInitialiseTaskLists:
 3482              	.LFB102:
3506:Source/tasks.c **** }
3507:Source/tasks.c **** /*-----------------------------------------------------------*/
3508:Source/tasks.c **** 
3509:Source/tasks.c **** #if( configUSE_TICKLESS_IDLE != 0 )
3510:Source/tasks.c **** 
3511:Source/tasks.c **** 	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
3512:Source/tasks.c **** 	{
3513:Source/tasks.c **** 	/* The idle task exists in addition to the application tasks. */
3514:Source/tasks.c **** 	const UBaseType_t uxNonApplicationTasks = 1;
3515:Source/tasks.c **** 	eSleepModeStatus eReturn = eStandardSleep;
3516:Source/tasks.c **** 
3517:Source/tasks.c **** 		/* This function must be called from a critical section. */
3518:Source/tasks.c **** 
3519:Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
3520:Source/tasks.c **** 		{
3521:Source/tasks.c **** 			/* A task was made ready while the scheduler was suspended. */
3522:Source/tasks.c **** 			eReturn = eAbortSleep;
3523:Source/tasks.c **** 		}
3524:Source/tasks.c **** 		else if( xYieldPending != pdFALSE )
3525:Source/tasks.c **** 		{
3526:Source/tasks.c **** 			/* A yield was pended while the scheduler was suspended. */
3527:Source/tasks.c **** 			eReturn = eAbortSleep;
3528:Source/tasks.c **** 		}
3529:Source/tasks.c **** 		else
3530:Source/tasks.c **** 		{
3531:Source/tasks.c **** 			/* If all the tasks are in the suspended list (which might mean they
3532:Source/tasks.c **** 			have an infinite block time rather than actually being suspended)
3533:Source/tasks.c **** 			then it is safe to turn all clocks off and just wait for external
3534:Source/tasks.c **** 			interrupts. */
3535:Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicatio
3536:Source/tasks.c **** 			{
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 129


3537:Source/tasks.c **** 				eReturn = eNoTasksWaitingTimeout;
3538:Source/tasks.c **** 			}
3539:Source/tasks.c **** 			else
3540:Source/tasks.c **** 			{
3541:Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3542:Source/tasks.c **** 			}
3543:Source/tasks.c **** 		}
3544:Source/tasks.c **** 
3545:Source/tasks.c **** 		return eReturn;
3546:Source/tasks.c **** 	}
3547:Source/tasks.c **** 
3548:Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
3549:Source/tasks.c **** /*-----------------------------------------------------------*/
3550:Source/tasks.c **** 
3551:Source/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3552:Source/tasks.c **** 
3553:Source/tasks.c **** 	void vTaskSetThreadLocalStoragePointer( TaskHandle_t xTaskToSet, BaseType_t xIndex, void *pvValue 
3554:Source/tasks.c **** 	{
3555:Source/tasks.c **** 	TCB_t *pxTCB;
3556:Source/tasks.c **** 
3557:Source/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3558:Source/tasks.c **** 		{
3559:Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSet );
3560:Source/tasks.c **** 			configASSERT( pxTCB != NULL );
3561:Source/tasks.c **** 			pxTCB->pvThreadLocalStoragePointers[ xIndex ] = pvValue;
3562:Source/tasks.c **** 		}
3563:Source/tasks.c **** 	}
3564:Source/tasks.c **** 
3565:Source/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3566:Source/tasks.c **** /*-----------------------------------------------------------*/
3567:Source/tasks.c **** 
3568:Source/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3569:Source/tasks.c **** 
3570:Source/tasks.c **** 	void *pvTaskGetThreadLocalStoragePointer( TaskHandle_t xTaskToQuery, BaseType_t xIndex )
3571:Source/tasks.c **** 	{
3572:Source/tasks.c **** 	void *pvReturn = NULL;
3573:Source/tasks.c **** 	TCB_t *pxTCB;
3574:Source/tasks.c **** 
3575:Source/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3576:Source/tasks.c **** 		{
3577:Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToQuery );
3578:Source/tasks.c **** 			pvReturn = pxTCB->pvThreadLocalStoragePointers[ xIndex ];
3579:Source/tasks.c **** 		}
3580:Source/tasks.c **** 		else
3581:Source/tasks.c **** 		{
3582:Source/tasks.c **** 			pvReturn = NULL;
3583:Source/tasks.c **** 		}
3584:Source/tasks.c **** 
3585:Source/tasks.c **** 		return pvReturn;
3586:Source/tasks.c **** 	}
3587:Source/tasks.c **** 
3588:Source/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3589:Source/tasks.c **** /*-----------------------------------------------------------*/
3590:Source/tasks.c **** 
3591:Source/tasks.c **** #if ( portUSING_MPU_WRAPPERS == 1 )
3592:Source/tasks.c **** 
3593:Source/tasks.c **** 	void vTaskAllocateMPURegions( TaskHandle_t xTaskToModify, const MemoryRegion_t * const xRegions )
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 130


3594:Source/tasks.c **** 	{
3595:Source/tasks.c **** 	TCB_t *pxTCB;
3596:Source/tasks.c **** 
3597:Source/tasks.c **** 		/* If null is passed in here then we are modifying the MPU settings of
3598:Source/tasks.c **** 		the calling task. */
3599:Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTaskToModify );
3600:Source/tasks.c **** 
3601:Source/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), xRegions, NULL, 0 );
3602:Source/tasks.c **** 	}
3603:Source/tasks.c **** 
3604:Source/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
3605:Source/tasks.c **** /*-----------------------------------------------------------*/
3606:Source/tasks.c **** 
3607:Source/tasks.c **** static void prvInitialiseTaskLists( void )
3608:Source/tasks.c **** {
 3483              		.loc 1 3608 0
 3484              		.cfi_startproc
 3485              		@ args = 0, pretend = 0, frame = 8
 3486              		@ frame_needed = 1, uses_anonymous_args = 0
 3487 0000 80B5     		push	{r7, lr}
 3488              		.cfi_def_cfa_offset 8
 3489              		.cfi_offset 7, -8
 3490              		.cfi_offset 14, -4
 3491 0002 82B0     		sub	sp, sp, #8
 3492              		.cfi_def_cfa_offset 16
 3493 0004 00AF     		add	r7, sp, #0
 3494              		.cfi_def_cfa_register 7
3609:Source/tasks.c **** UBaseType_t uxPriority;
3610:Source/tasks.c **** 
3611:Source/tasks.c **** 	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriorit
 3495              		.loc 1 3611 0
 3496 0006 0023     		movs	r3, #0
 3497 0008 7B60     		str	r3, [r7, #4]
 3498 000a 0CE0     		b	.L238
 3499              	.L239:
3612:Source/tasks.c **** 	{
3613:Source/tasks.c **** 		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 3500              		.loc 1 3613 0 discriminator 3
 3501 000c 7A68     		ldr	r2, [r7, #4]
 3502 000e 1346     		mov	r3, r2
 3503 0010 9B00     		lsls	r3, r3, #2
 3504 0012 1344     		add	r3, r3, r2
 3505 0014 9B00     		lsls	r3, r3, #2
 3506 0016 124A     		ldr	r2, .L240
 3507 0018 1344     		add	r3, r3, r2
 3508 001a 1846     		mov	r0, r3
 3509 001c FFF7FEFF 		bl	vListInitialise
3611:Source/tasks.c **** 	{
 3510              		.loc 1 3611 0 discriminator 3
 3511 0020 7B68     		ldr	r3, [r7, #4]
 3512 0022 0133     		adds	r3, r3, #1
 3513 0024 7B60     		str	r3, [r7, #4]
 3514              	.L238:
3611:Source/tasks.c **** 	{
 3515              		.loc 1 3611 0 is_stmt 0 discriminator 1
 3516 0026 7B68     		ldr	r3, [r7, #4]
 3517 0028 042B     		cmp	r3, #4
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 131


 3518 002a EFD9     		bls	.L239
3614:Source/tasks.c **** 	}
3615:Source/tasks.c **** 
3616:Source/tasks.c **** 	vListInitialise( &xDelayedTaskList1 );
 3519              		.loc 1 3616 0 is_stmt 1
 3520 002c 0D48     		ldr	r0, .L240+4
 3521 002e FFF7FEFF 		bl	vListInitialise
3617:Source/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
 3522              		.loc 1 3617 0
 3523 0032 0D48     		ldr	r0, .L240+8
 3524 0034 FFF7FEFF 		bl	vListInitialise
3618:Source/tasks.c **** 	vListInitialise( &xPendingReadyList );
 3525              		.loc 1 3618 0
 3526 0038 0C48     		ldr	r0, .L240+12
 3527 003a FFF7FEFF 		bl	vListInitialise
3619:Source/tasks.c **** 
3620:Source/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3621:Source/tasks.c **** 	{
3622:Source/tasks.c **** 		vListInitialise( &xTasksWaitingTermination );
 3528              		.loc 1 3622 0
 3529 003e 0C48     		ldr	r0, .L240+16
 3530 0040 FFF7FEFF 		bl	vListInitialise
3623:Source/tasks.c **** 	}
3624:Source/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3625:Source/tasks.c **** 
3626:Source/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
3627:Source/tasks.c **** 	{
3628:Source/tasks.c **** 		vListInitialise( &xSuspendedTaskList );
 3531              		.loc 1 3628 0
 3532 0044 0B48     		ldr	r0, .L240+20
 3533 0046 FFF7FEFF 		bl	vListInitialise
3629:Source/tasks.c **** 	}
3630:Source/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
3631:Source/tasks.c **** 
3632:Source/tasks.c **** 	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
3633:Source/tasks.c **** 	using list2. */
3634:Source/tasks.c **** 	pxDelayedTaskList = &xDelayedTaskList1;
 3534              		.loc 1 3634 0
 3535 004a 0B4B     		ldr	r3, .L240+24
 3536 004c 054A     		ldr	r2, .L240+4
 3537 004e 1A60     		str	r2, [r3]
3635:Source/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 3538              		.loc 1 3635 0
 3539 0050 0A4B     		ldr	r3, .L240+28
 3540 0052 054A     		ldr	r2, .L240+8
 3541 0054 1A60     		str	r2, [r3]
3636:Source/tasks.c **** }
 3542              		.loc 1 3636 0
 3543 0056 00BF     		nop
 3544 0058 0837     		adds	r7, r7, #8
 3545              		.cfi_def_cfa_offset 8
 3546 005a BD46     		mov	sp, r7
 3547              		.cfi_def_cfa_register 13
 3548              		@ sp needed
 3549 005c 80BD     		pop	{r7, pc}
 3550              	.L241:
 3551 005e 00BF     		.align	2
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 132


 3552              	.L240:
 3553 0060 04000000 		.word	pxReadyTasksLists
 3554 0064 68000000 		.word	xDelayedTaskList1
 3555 0068 7C000000 		.word	xDelayedTaskList2
 3556 006c 98000000 		.word	xPendingReadyList
 3557 0070 AC000000 		.word	xTasksWaitingTermination
 3558 0074 C4000000 		.word	xSuspendedTaskList
 3559 0078 90000000 		.word	pxDelayedTaskList
 3560 007c 94000000 		.word	pxOverflowDelayedTaskList
 3561              		.cfi_endproc
 3562              	.LFE102:
 3563              		.size	prvInitialiseTaskLists, .-prvInitialiseTaskLists
 3564              		.section	.text.prvCheckTasksWaitingTermination,"ax",%progbits
 3565              		.align	2
 3566              		.thumb
 3567              		.thumb_func
 3568              		.type	prvCheckTasksWaitingTermination, %function
 3569              	prvCheckTasksWaitingTermination:
 3570              	.LFB103:
3637:Source/tasks.c **** /*-----------------------------------------------------------*/
3638:Source/tasks.c **** 
3639:Source/tasks.c **** static void prvCheckTasksWaitingTermination( void )
3640:Source/tasks.c **** {
 3571              		.loc 1 3640 0
 3572              		.cfi_startproc
 3573              		@ args = 0, pretend = 0, frame = 8
 3574              		@ frame_needed = 1, uses_anonymous_args = 0
 3575 0000 80B5     		push	{r7, lr}
 3576              		.cfi_def_cfa_offset 8
 3577              		.cfi_offset 7, -8
 3578              		.cfi_offset 14, -4
 3579 0002 82B0     		sub	sp, sp, #8
 3580              		.cfi_def_cfa_offset 16
 3581 0004 00AF     		add	r7, sp, #0
 3582              		.cfi_def_cfa_register 7
 3583              	.LBB50:
3641:Source/tasks.c **** 
3642:Source/tasks.c **** 	/** THIS FUNCTION IS CALLED FROM THE RTOS IDLE TASK **/
3643:Source/tasks.c **** 
3644:Source/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3645:Source/tasks.c **** 	{
3646:Source/tasks.c **** 		TCB_t *pxTCB;
3647:Source/tasks.c **** 
3648:Source/tasks.c **** 		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
3649:Source/tasks.c **** 		being called too often in the idle task. */
3650:Source/tasks.c **** 		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 3584              		.loc 1 3650 0
 3585 0006 19E0     		b	.L243
 3586              	.L244:
3651:Source/tasks.c **** 		{
3652:Source/tasks.c **** 			taskENTER_CRITICAL();
 3587              		.loc 1 3652 0
 3588 0008 FFF7FEFF 		bl	vPortEnterCritical
3653:Source/tasks.c **** 			{
3654:Source/tasks.c **** 				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is u
 3589              		.loc 1 3654 0
 3590 000c 0F4B     		ldr	r3, .L245
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 133


 3591 000e DB68     		ldr	r3, [r3, #12]
 3592 0010 DB68     		ldr	r3, [r3, #12]
 3593 0012 7B60     		str	r3, [r7, #4]
3655:Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 3594              		.loc 1 3655 0
 3595 0014 7B68     		ldr	r3, [r7, #4]
 3596 0016 0433     		adds	r3, r3, #4
 3597 0018 1846     		mov	r0, r3
 3598 001a FFF7FEFF 		bl	uxListRemove
3656:Source/tasks.c **** 				--uxCurrentNumberOfTasks;
 3599              		.loc 1 3656 0
 3600 001e 0C4B     		ldr	r3, .L245+4
 3601 0020 1B68     		ldr	r3, [r3]
 3602 0022 013B     		subs	r3, r3, #1
 3603 0024 0A4A     		ldr	r2, .L245+4
 3604 0026 1360     		str	r3, [r2]
3657:Source/tasks.c **** 				--uxDeletedTasksWaitingCleanUp;
 3605              		.loc 1 3657 0
 3606 0028 0A4B     		ldr	r3, .L245+8
 3607 002a 1B68     		ldr	r3, [r3]
 3608 002c 013B     		subs	r3, r3, #1
 3609 002e 094A     		ldr	r2, .L245+8
 3610 0030 1360     		str	r3, [r2]
3658:Source/tasks.c **** 			}
3659:Source/tasks.c **** 			taskEXIT_CRITICAL();
 3611              		.loc 1 3659 0
 3612 0032 FFF7FEFF 		bl	vPortExitCritical
3660:Source/tasks.c **** 
3661:Source/tasks.c **** 			prvDeleteTCB( pxTCB );
 3613              		.loc 1 3661 0
 3614 0036 7868     		ldr	r0, [r7, #4]
 3615 0038 FFF7FEFF 		bl	prvDeleteTCB
 3616              	.L243:
3650:Source/tasks.c **** 		{
 3617              		.loc 1 3650 0
 3618 003c 054B     		ldr	r3, .L245+8
 3619 003e 1B68     		ldr	r3, [r3]
 3620 0040 002B     		cmp	r3, #0
 3621 0042 E1D1     		bne	.L244
 3622              	.LBE50:
3662:Source/tasks.c **** 		}
3663:Source/tasks.c **** 	}
3664:Source/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3665:Source/tasks.c **** }
 3623              		.loc 1 3665 0
 3624 0044 00BF     		nop
 3625 0046 0837     		adds	r7, r7, #8
 3626              		.cfi_def_cfa_offset 8
 3627 0048 BD46     		mov	sp, r7
 3628              		.cfi_def_cfa_register 13
 3629              		@ sp needed
 3630 004a 80BD     		pop	{r7, pc}
 3631              	.L246:
 3632              		.align	2
 3633              	.L245:
 3634 004c AC000000 		.word	xTasksWaitingTermination
 3635 0050 D8000000 		.word	uxCurrentNumberOfTasks
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 134


 3636 0054 C0000000 		.word	uxDeletedTasksWaitingCleanUp
 3637              		.cfi_endproc
 3638              	.LFE103:
 3639              		.size	prvCheckTasksWaitingTermination, .-prvCheckTasksWaitingTermination
 3640              		.section	.text.prvTaskCheckFreeStackSpace,"ax",%progbits
 3641              		.align	2
 3642              		.thumb
 3643              		.thumb_func
 3644              		.type	prvTaskCheckFreeStackSpace, %function
 3645              	prvTaskCheckFreeStackSpace:
 3646              	.LFB104:
3666:Source/tasks.c **** /*-----------------------------------------------------------*/
3667:Source/tasks.c **** 
3668:Source/tasks.c **** #if( configUSE_TRACE_FACILITY == 1 )
3669:Source/tasks.c **** 
3670:Source/tasks.c **** 	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, 
3671:Source/tasks.c **** 	{
3672:Source/tasks.c **** 	TCB_t *pxTCB;
3673:Source/tasks.c **** 
3674:Source/tasks.c **** 		/* xTask is NULL then get the state of the calling task. */
3675:Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3676:Source/tasks.c **** 
3677:Source/tasks.c **** 		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
3678:Source/tasks.c **** 		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
3679:Source/tasks.c **** 		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
3680:Source/tasks.c **** 		pxTaskStatus->pxStackBase = pxTCB->pxStack;
3681:Source/tasks.c **** 		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
3682:Source/tasks.c **** 
3683:Source/tasks.c **** 		#if ( configUSE_MUTEXES == 1 )
3684:Source/tasks.c **** 		{
3685:Source/tasks.c **** 			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
3686:Source/tasks.c **** 		}
3687:Source/tasks.c **** 		#else
3688:Source/tasks.c **** 		{
3689:Source/tasks.c **** 			pxTaskStatus->uxBasePriority = 0;
3690:Source/tasks.c **** 		}
3691:Source/tasks.c **** 		#endif
3692:Source/tasks.c **** 
3693:Source/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
3694:Source/tasks.c **** 		{
3695:Source/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
3696:Source/tasks.c **** 		}
3697:Source/tasks.c **** 		#else
3698:Source/tasks.c **** 		{
3699:Source/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = 0;
3700:Source/tasks.c **** 		}
3701:Source/tasks.c **** 		#endif
3702:Source/tasks.c **** 
3703:Source/tasks.c **** 		/* Obtaining the task state is a little fiddly, so is only done if the
3704:Source/tasks.c **** 		value of eState passed into this function is eInvalid - otherwise the
3705:Source/tasks.c **** 		state is just set to whatever is passed in. */
3706:Source/tasks.c **** 		if( eState != eInvalid )
3707:Source/tasks.c **** 		{
3708:Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
3709:Source/tasks.c **** 			{
3710:Source/tasks.c **** 				pxTaskStatus->eCurrentState = eRunning;
3711:Source/tasks.c **** 			}
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 135


3712:Source/tasks.c **** 			else
3713:Source/tasks.c **** 			{
3714:Source/tasks.c **** 				pxTaskStatus->eCurrentState = eState;
3715:Source/tasks.c **** 
3716:Source/tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
3717:Source/tasks.c **** 				{
3718:Source/tasks.c **** 					/* If the task is in the suspended list then there is a
3719:Source/tasks.c **** 					chance it is actually just blocked indefinitely - so really
3720:Source/tasks.c **** 					it should be reported as being in the Blocked state. */
3721:Source/tasks.c **** 					if( eState == eSuspended )
3722:Source/tasks.c **** 					{
3723:Source/tasks.c **** 						vTaskSuspendAll();
3724:Source/tasks.c **** 						{
3725:Source/tasks.c **** 							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
3726:Source/tasks.c **** 							{
3727:Source/tasks.c **** 								pxTaskStatus->eCurrentState = eBlocked;
3728:Source/tasks.c **** 							}
3729:Source/tasks.c **** 						}
3730:Source/tasks.c **** 						( void ) xTaskResumeAll();
3731:Source/tasks.c **** 					}
3732:Source/tasks.c **** 				}
3733:Source/tasks.c **** 				#endif /* INCLUDE_vTaskSuspend */
3734:Source/tasks.c **** 			}
3735:Source/tasks.c **** 		}
3736:Source/tasks.c **** 		else
3737:Source/tasks.c **** 		{
3738:Source/tasks.c **** 			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
3739:Source/tasks.c **** 		}
3740:Source/tasks.c **** 
3741:Source/tasks.c **** 		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
3742:Source/tasks.c **** 		parameter is provided to allow it to be skipped. */
3743:Source/tasks.c **** 		if( xGetFreeStackSpace != pdFALSE )
3744:Source/tasks.c **** 		{
3745:Source/tasks.c **** 			#if ( portSTACK_GROWTH > 0 )
3746:Source/tasks.c **** 			{
3747:Source/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfSt
3748:Source/tasks.c **** 			}
3749:Source/tasks.c **** 			#else
3750:Source/tasks.c **** 			{
3751:Source/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack )
3752:Source/tasks.c **** 			}
3753:Source/tasks.c **** 			#endif
3754:Source/tasks.c **** 		}
3755:Source/tasks.c **** 		else
3756:Source/tasks.c **** 		{
3757:Source/tasks.c **** 			pxTaskStatus->usStackHighWaterMark = 0;
3758:Source/tasks.c **** 		}
3759:Source/tasks.c **** 	}
3760:Source/tasks.c **** 
3761:Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3762:Source/tasks.c **** /*-----------------------------------------------------------*/
3763:Source/tasks.c **** 
3764:Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3765:Source/tasks.c **** 
3766:Source/tasks.c **** 	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, 
3767:Source/tasks.c **** 	{
3768:Source/tasks.c **** 	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 136


3769:Source/tasks.c **** 	UBaseType_t uxTask = 0;
3770:Source/tasks.c **** 
3771:Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
3772:Source/tasks.c **** 		{
3773:Source/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is
3774:Source/tasks.c **** 
3775:Source/tasks.c **** 			/* Populate an TaskStatus_t structure within the
3776:Source/tasks.c **** 			pxTaskStatusArray array for each task that is referenced from
3777:Source/tasks.c **** 			pxList.  See the definition of TaskStatus_t in task.h for the
3778:Source/tasks.c **** 			meaning of each TaskStatus_t structure member. */
3779:Source/tasks.c **** 			do
3780:Source/tasks.c **** 			{
3781:Source/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is
3782:Source/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
3783:Source/tasks.c **** 				uxTask++;
3784:Source/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
3785:Source/tasks.c **** 		}
3786:Source/tasks.c **** 		else
3787:Source/tasks.c **** 		{
3788:Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3789:Source/tasks.c **** 		}
3790:Source/tasks.c **** 
3791:Source/tasks.c **** 		return uxTask;
3792:Source/tasks.c **** 	}
3793:Source/tasks.c **** 
3794:Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3795:Source/tasks.c **** /*-----------------------------------------------------------*/
3796:Source/tasks.c **** 
3797:Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUD
3798:Source/tasks.c **** 
3799:Source/tasks.c **** 	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
3800:Source/tasks.c **** 	{
 3647              		.loc 1 3800 0
 3648              		.cfi_startproc
 3649              		@ args = 0, pretend = 0, frame = 16
 3650              		@ frame_needed = 1, uses_anonymous_args = 0
 3651              		@ link register save eliminated.
 3652 0000 80B4     		push	{r7}
 3653              		.cfi_def_cfa_offset 4
 3654              		.cfi_offset 7, -4
 3655 0002 85B0     		sub	sp, sp, #20
 3656              		.cfi_def_cfa_offset 24
 3657 0004 00AF     		add	r7, sp, #0
 3658              		.cfi_def_cfa_register 7
 3659 0006 7860     		str	r0, [r7, #4]
3801:Source/tasks.c **** 	uint32_t ulCount = 0U;
 3660              		.loc 1 3801 0
 3661 0008 0023     		movs	r3, #0
 3662 000a FB60     		str	r3, [r7, #12]
3802:Source/tasks.c **** 
3803:Source/tasks.c **** 		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 3663              		.loc 1 3803 0
 3664 000c 05E0     		b	.L248
 3665              	.L249:
3804:Source/tasks.c **** 		{
3805:Source/tasks.c **** 			pucStackByte -= portSTACK_GROWTH;
 3666              		.loc 1 3805 0
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 137


 3667 000e 7B68     		ldr	r3, [r7, #4]
 3668 0010 0133     		adds	r3, r3, #1
 3669 0012 7B60     		str	r3, [r7, #4]
3806:Source/tasks.c **** 			ulCount++;
 3670              		.loc 1 3806 0
 3671 0014 FB68     		ldr	r3, [r7, #12]
 3672 0016 0133     		adds	r3, r3, #1
 3673 0018 FB60     		str	r3, [r7, #12]
 3674              	.L248:
3803:Source/tasks.c **** 		{
 3675              		.loc 1 3803 0
 3676 001a 7B68     		ldr	r3, [r7, #4]
 3677 001c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3678 001e A52B     		cmp	r3, #165
 3679 0020 F5D0     		beq	.L249
3807:Source/tasks.c **** 		}
3808:Source/tasks.c **** 
3809:Source/tasks.c **** 		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller a
 3680              		.loc 1 3809 0
 3681 0022 FB68     		ldr	r3, [r7, #12]
 3682 0024 9B08     		lsrs	r3, r3, #2
 3683 0026 FB60     		str	r3, [r7, #12]
3810:Source/tasks.c **** 
3811:Source/tasks.c **** 		return ( configSTACK_DEPTH_TYPE ) ulCount;
 3684              		.loc 1 3811 0
 3685 0028 FB68     		ldr	r3, [r7, #12]
 3686 002a 9BB2     		uxth	r3, r3
3812:Source/tasks.c **** 	}
 3687              		.loc 1 3812 0
 3688 002c 1846     		mov	r0, r3
 3689 002e 1437     		adds	r7, r7, #20
 3690              		.cfi_def_cfa_offset 4
 3691 0030 BD46     		mov	sp, r7
 3692              		.cfi_def_cfa_register 13
 3693              		@ sp needed
 3694 0032 80BC     		pop	{r7}
 3695              		.cfi_restore 7
 3696              		.cfi_def_cfa_offset 0
 3697 0034 7047     		bx	lr
 3698              		.cfi_endproc
 3699              	.LFE104:
 3700              		.size	prvTaskCheckFreeStackSpace, .-prvTaskCheckFreeStackSpace
 3701 0036 00BF     		.section	.text.uxTaskGetStackHighWaterMark,"ax",%progbits
 3702              		.align	2
 3703              		.global	uxTaskGetStackHighWaterMark
 3704              		.thumb
 3705              		.thumb_func
 3706              		.type	uxTaskGetStackHighWaterMark, %function
 3707              	uxTaskGetStackHighWaterMark:
 3708              	.LFB105:
3813:Source/tasks.c **** 
3814:Source/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( 
3815:Source/tasks.c **** /*-----------------------------------------------------------*/
3816:Source/tasks.c **** 
3817:Source/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 )
3818:Source/tasks.c **** 
3819:Source/tasks.c **** 	/* uxTaskGetStackHighWaterMark() and uxTaskGetStackHighWaterMark2() are the
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 138


3820:Source/tasks.c **** 	same except for their return type.  Using configSTACK_DEPTH_TYPE allows the
3821:Source/tasks.c **** 	user to determine the return type.  It gets around the problem of the value
3822:Source/tasks.c **** 	overflowing on 8-bit types without breaking backward compatibility for
3823:Source/tasks.c **** 	applications that expect an 8-bit return type. */
3824:Source/tasks.c **** 	configSTACK_DEPTH_TYPE uxTaskGetStackHighWaterMark2( TaskHandle_t xTask )
3825:Source/tasks.c **** 	{
3826:Source/tasks.c **** 	TCB_t *pxTCB;
3827:Source/tasks.c **** 	uint8_t *pucEndOfStack;
3828:Source/tasks.c **** 	configSTACK_DEPTH_TYPE uxReturn;
3829:Source/tasks.c **** 
3830:Source/tasks.c **** 		/* uxTaskGetStackHighWaterMark() and uxTaskGetStackHighWaterMark2() are
3831:Source/tasks.c **** 		the same except for their return type.  Using configSTACK_DEPTH_TYPE
3832:Source/tasks.c **** 		allows the user to determine the return type.  It gets around the
3833:Source/tasks.c **** 		problem of the value overflowing on 8-bit types without breaking
3834:Source/tasks.c **** 		backward compatibility for applications that expect an 8-bit return
3835:Source/tasks.c **** 		type. */
3836:Source/tasks.c **** 
3837:Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3838:Source/tasks.c **** 
3839:Source/tasks.c **** 		#if portSTACK_GROWTH < 0
3840:Source/tasks.c **** 		{
3841:Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
3842:Source/tasks.c **** 		}
3843:Source/tasks.c **** 		#else
3844:Source/tasks.c **** 		{
3845:Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
3846:Source/tasks.c **** 		}
3847:Source/tasks.c **** 		#endif
3848:Source/tasks.c **** 
3849:Source/tasks.c **** 		uxReturn = prvTaskCheckFreeStackSpace( pucEndOfStack );
3850:Source/tasks.c **** 
3851:Source/tasks.c **** 		return uxReturn;
3852:Source/tasks.c **** 	}
3853:Source/tasks.c **** 
3854:Source/tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark2 */
3855:Source/tasks.c **** /*-----------------------------------------------------------*/
3856:Source/tasks.c **** 
3857:Source/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )
3858:Source/tasks.c **** 
3859:Source/tasks.c **** 	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
3860:Source/tasks.c **** 	{
 3709              		.loc 1 3860 0
 3710              		.cfi_startproc
 3711              		@ args = 0, pretend = 0, frame = 24
 3712              		@ frame_needed = 1, uses_anonymous_args = 0
 3713 0000 80B5     		push	{r7, lr}
 3714              		.cfi_def_cfa_offset 8
 3715              		.cfi_offset 7, -8
 3716              		.cfi_offset 14, -4
 3717 0002 86B0     		sub	sp, sp, #24
 3718              		.cfi_def_cfa_offset 32
 3719 0004 00AF     		add	r7, sp, #0
 3720              		.cfi_def_cfa_register 7
 3721 0006 7860     		str	r0, [r7, #4]
3861:Source/tasks.c **** 	TCB_t *pxTCB;
3862:Source/tasks.c **** 	uint8_t *pucEndOfStack;
3863:Source/tasks.c **** 	UBaseType_t uxReturn;
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 139


3864:Source/tasks.c **** 
3865:Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
 3722              		.loc 1 3865 0
 3723 0008 7B68     		ldr	r3, [r7, #4]
 3724 000a 002B     		cmp	r3, #0
 3725 000c 02D1     		bne	.L252
 3726              		.loc 1 3865 0 is_stmt 0 discriminator 1
 3727 000e 094B     		ldr	r3, .L255
 3728 0010 1B68     		ldr	r3, [r3]
 3729 0012 00E0     		b	.L253
 3730              	.L252:
 3731              		.loc 1 3865 0 discriminator 2
 3732 0014 7B68     		ldr	r3, [r7, #4]
 3733              	.L253:
 3734              		.loc 1 3865 0 discriminator 4
 3735 0016 7B61     		str	r3, [r7, #20]
3866:Source/tasks.c **** 
3867:Source/tasks.c **** 		#if portSTACK_GROWTH < 0
3868:Source/tasks.c **** 		{
3869:Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 3736              		.loc 1 3869 0 is_stmt 1 discriminator 4
 3737 0018 7B69     		ldr	r3, [r7, #20]
 3738 001a 1B6B     		ldr	r3, [r3, #48]
 3739 001c 3B61     		str	r3, [r7, #16]
3870:Source/tasks.c **** 		}
3871:Source/tasks.c **** 		#else
3872:Source/tasks.c **** 		{
3873:Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
3874:Source/tasks.c **** 		}
3875:Source/tasks.c **** 		#endif
3876:Source/tasks.c **** 
3877:Source/tasks.c **** 		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 3740              		.loc 1 3877 0 discriminator 4
 3741 001e 3869     		ldr	r0, [r7, #16]
 3742 0020 FFF7FEFF 		bl	prvTaskCheckFreeStackSpace
 3743 0024 0346     		mov	r3, r0
 3744 0026 FB60     		str	r3, [r7, #12]
3878:Source/tasks.c **** 
3879:Source/tasks.c **** 		return uxReturn;
 3745              		.loc 1 3879 0 discriminator 4
 3746 0028 FB68     		ldr	r3, [r7, #12]
3880:Source/tasks.c **** 	}
 3747              		.loc 1 3880 0 discriminator 4
 3748 002a 1846     		mov	r0, r3
 3749 002c 1837     		adds	r7, r7, #24
 3750              		.cfi_def_cfa_offset 8
 3751 002e BD46     		mov	sp, r7
 3752              		.cfi_def_cfa_register 13
 3753              		@ sp needed
 3754 0030 80BD     		pop	{r7, pc}
 3755              	.L256:
 3756 0032 00BF     		.align	2
 3757              	.L255:
 3758 0034 00000000 		.word	pxCurrentTCB
 3759              		.cfi_endproc
 3760              	.LFE105:
 3761              		.size	uxTaskGetStackHighWaterMark, .-uxTaskGetStackHighWaterMark
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 140


 3762              		.section	.text.prvDeleteTCB,"ax",%progbits
 3763              		.align	2
 3764              		.thumb
 3765              		.thumb_func
 3766              		.type	prvDeleteTCB, %function
 3767              	prvDeleteTCB:
 3768              	.LFB106:
3881:Source/tasks.c **** 
3882:Source/tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark */
3883:Source/tasks.c **** /*-----------------------------------------------------------*/
3884:Source/tasks.c **** 
3885:Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
3886:Source/tasks.c **** 
3887:Source/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB )
3888:Source/tasks.c **** 	{
 3769              		.loc 1 3888 0
 3770              		.cfi_startproc
 3771              		@ args = 0, pretend = 0, frame = 8
 3772              		@ frame_needed = 1, uses_anonymous_args = 0
 3773 0000 80B5     		push	{r7, lr}
 3774              		.cfi_def_cfa_offset 8
 3775              		.cfi_offset 7, -8
 3776              		.cfi_offset 14, -4
 3777 0002 82B0     		sub	sp, sp, #8
 3778              		.cfi_def_cfa_offset 16
 3779 0004 00AF     		add	r7, sp, #0
 3780              		.cfi_def_cfa_register 7
 3781 0006 7860     		str	r0, [r7, #4]
3889:Source/tasks.c **** 		/* This call is required specifically for the TriCore port.  It must be
3890:Source/tasks.c **** 		above the vPortFree() calls.  The call is also used by ports/demos that
3891:Source/tasks.c **** 		want to allocate and clean RAM statically. */
3892:Source/tasks.c **** 		portCLEAN_UP_TCB( pxTCB );
3893:Source/tasks.c **** 
3894:Source/tasks.c **** 		/* Free up the memory allocated by the scheduler for the task.  It is up
3895:Source/tasks.c **** 		to the task to free any memory allocated at the application level.
3896:Source/tasks.c **** 		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
3897:Source/tasks.c **** 		for additional information. */
3898:Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
3899:Source/tasks.c **** 		{
3900:Source/tasks.c **** 			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
3901:Source/tasks.c **** 		}
3902:Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
3903:Source/tasks.c **** 
3904:Source/tasks.c **** 		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( p
3905:Source/tasks.c **** 		{
3906:Source/tasks.c **** 			/* The task can only have been allocated dynamically - free both
3907:Source/tasks.c **** 			the stack and TCB. */
3908:Source/tasks.c **** 			vPortFree( pxTCB->pxStack );
 3782              		.loc 1 3908 0
 3783 0008 7B68     		ldr	r3, [r7, #4]
 3784 000a 1B6B     		ldr	r3, [r3, #48]
 3785 000c 1846     		mov	r0, r3
 3786 000e FFF7FEFF 		bl	vPortFree
3909:Source/tasks.c **** 			vPortFree( pxTCB );
 3787              		.loc 1 3909 0
 3788 0012 7868     		ldr	r0, [r7, #4]
 3789 0014 FFF7FEFF 		bl	vPortFree
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 141


3910:Source/tasks.c **** 		}
3911:Source/tasks.c **** 		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consol
3912:Source/tasks.c **** 		{
3913:Source/tasks.c **** 			/* The task could have been allocated statically or dynamically, so
3914:Source/tasks.c **** 			check what was statically allocated before trying to free the
3915:Source/tasks.c **** 			memory. */
3916:Source/tasks.c **** 			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
3917:Source/tasks.c **** 			{
3918:Source/tasks.c **** 				/* Both the stack and TCB were allocated dynamically, so both
3919:Source/tasks.c **** 				must be freed. */
3920:Source/tasks.c **** 				vPortFree( pxTCB->pxStack );
3921:Source/tasks.c **** 				vPortFree( pxTCB );
3922:Source/tasks.c **** 			}
3923:Source/tasks.c **** 			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
3924:Source/tasks.c **** 			{
3925:Source/tasks.c **** 				/* Only the stack was statically allocated, so the TCB is the
3926:Source/tasks.c **** 				only memory that must be freed. */
3927:Source/tasks.c **** 				vPortFree( pxTCB );
3928:Source/tasks.c **** 			}
3929:Source/tasks.c **** 			else
3930:Source/tasks.c **** 			{
3931:Source/tasks.c **** 				/* Neither the stack nor the TCB were allocated dynamically, so
3932:Source/tasks.c **** 				nothing needs to be freed. */
3933:Source/tasks.c **** 				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
3934:Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3935:Source/tasks.c **** 			}
3936:Source/tasks.c **** 		}
3937:Source/tasks.c **** 		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
3938:Source/tasks.c **** 	}
 3790              		.loc 1 3938 0
 3791 0018 00BF     		nop
 3792 001a 0837     		adds	r7, r7, #8
 3793              		.cfi_def_cfa_offset 8
 3794 001c BD46     		mov	sp, r7
 3795              		.cfi_def_cfa_register 13
 3796              		@ sp needed
 3797 001e 80BD     		pop	{r7, pc}
 3798              		.cfi_endproc
 3799              	.LFE106:
 3800              		.size	prvDeleteTCB, .-prvDeleteTCB
 3801              		.section	.text.prvResetNextTaskUnblockTime,"ax",%progbits
 3802              		.align	2
 3803              		.thumb
 3804              		.thumb_func
 3805              		.type	prvResetNextTaskUnblockTime, %function
 3806              	prvResetNextTaskUnblockTime:
 3807              	.LFB107:
3939:Source/tasks.c **** 
3940:Source/tasks.c **** #endif /* INCLUDE_vTaskDelete */
3941:Source/tasks.c **** /*-----------------------------------------------------------*/
3942:Source/tasks.c **** 
3943:Source/tasks.c **** static void prvResetNextTaskUnblockTime( void )
3944:Source/tasks.c **** {
 3808              		.loc 1 3944 0
 3809              		.cfi_startproc
 3810              		@ args = 0, pretend = 0, frame = 8
 3811              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 142


 3812              		@ link register save eliminated.
 3813 0000 80B4     		push	{r7}
 3814              		.cfi_def_cfa_offset 4
 3815              		.cfi_offset 7, -4
 3816 0002 83B0     		sub	sp, sp, #12
 3817              		.cfi_def_cfa_offset 16
 3818 0004 00AF     		add	r7, sp, #0
 3819              		.cfi_def_cfa_register 7
3945:Source/tasks.c **** TCB_t *pxTCB;
3946:Source/tasks.c **** 
3947:Source/tasks.c **** 	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 3820              		.loc 1 3947 0
 3821 0006 0C4B     		ldr	r3, .L262
 3822 0008 1B68     		ldr	r3, [r3]
 3823 000a 1B68     		ldr	r3, [r3]
 3824 000c 002B     		cmp	r3, #0
 3825 000e 04D1     		bne	.L259
3948:Source/tasks.c **** 	{
3949:Source/tasks.c **** 		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
3950:Source/tasks.c **** 		the maximum possible value so it is	extremely unlikely that the
3951:Source/tasks.c **** 		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
3952:Source/tasks.c **** 		there is an item in the delayed list. */
3953:Source/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
 3826              		.loc 1 3953 0
 3827 0010 0A4B     		ldr	r3, .L262+4
 3828 0012 4FF0FF32 		mov	r2, #-1
 3829 0016 1A60     		str	r2, [r3]
3954:Source/tasks.c **** 	}
3955:Source/tasks.c **** 	else
3956:Source/tasks.c **** 	{
3957:Source/tasks.c **** 		/* The new current delayed list is not empty, get the value of
3958:Source/tasks.c **** 		the item at the head of the delayed list.  This is the time at
3959:Source/tasks.c **** 		which the task at the head of the delayed list should be removed
3960:Source/tasks.c **** 		from the Blocked state. */
3961:Source/tasks.c **** 		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as thi
3962:Source/tasks.c **** 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
3963:Source/tasks.c **** 	}
3964:Source/tasks.c **** }
 3830              		.loc 1 3964 0
 3831 0018 08E0     		b	.L261
 3832              	.L259:
3961:Source/tasks.c **** 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 3833              		.loc 1 3961 0
 3834 001a 074B     		ldr	r3, .L262
 3835 001c 1B68     		ldr	r3, [r3]
 3836 001e DB68     		ldr	r3, [r3, #12]
 3837 0020 DB68     		ldr	r3, [r3, #12]
 3838 0022 7B60     		str	r3, [r7, #4]
3962:Source/tasks.c **** 	}
 3839              		.loc 1 3962 0
 3840 0024 7B68     		ldr	r3, [r7, #4]
 3841 0026 5B68     		ldr	r3, [r3, #4]
 3842 0028 044A     		ldr	r2, .L262+4
 3843 002a 1360     		str	r3, [r2]
 3844              	.L261:
 3845              		.loc 1 3964 0
 3846 002c 00BF     		nop
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 143


 3847 002e 0C37     		adds	r7, r7, #12
 3848              		.cfi_def_cfa_offset 4
 3849 0030 BD46     		mov	sp, r7
 3850              		.cfi_def_cfa_register 13
 3851              		@ sp needed
 3852 0032 80BC     		pop	{r7}
 3853              		.cfi_restore 7
 3854              		.cfi_def_cfa_offset 0
 3855 0034 7047     		bx	lr
 3856              	.L263:
 3857 0036 00BF     		.align	2
 3858              	.L262:
 3859 0038 90000000 		.word	pxDelayedTaskList
 3860 003c F8000000 		.word	xNextTaskUnblockTime
 3861              		.cfi_endproc
 3862              	.LFE107:
 3863              		.size	prvResetNextTaskUnblockTime, .-prvResetNextTaskUnblockTime
 3864              		.section	.text.xTaskGetCurrentTaskHandle,"ax",%progbits
 3865              		.align	2
 3866              		.global	xTaskGetCurrentTaskHandle
 3867              		.thumb
 3868              		.thumb_func
 3869              		.type	xTaskGetCurrentTaskHandle, %function
 3870              	xTaskGetCurrentTaskHandle:
 3871              	.LFB108:
3965:Source/tasks.c **** /*-----------------------------------------------------------*/
3966:Source/tasks.c **** 
3967:Source/tasks.c **** #if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )
3968:Source/tasks.c **** 
3969:Source/tasks.c **** 	TaskHandle_t xTaskGetCurrentTaskHandle( void )
3970:Source/tasks.c **** 	{
 3872              		.loc 1 3970 0
 3873              		.cfi_startproc
 3874              		@ args = 0, pretend = 0, frame = 8
 3875              		@ frame_needed = 1, uses_anonymous_args = 0
 3876              		@ link register save eliminated.
 3877 0000 80B4     		push	{r7}
 3878              		.cfi_def_cfa_offset 4
 3879              		.cfi_offset 7, -4
 3880 0002 83B0     		sub	sp, sp, #12
 3881              		.cfi_def_cfa_offset 16
 3882 0004 00AF     		add	r7, sp, #0
 3883              		.cfi_def_cfa_register 7
3971:Source/tasks.c **** 	TaskHandle_t xReturn;
3972:Source/tasks.c **** 
3973:Source/tasks.c **** 		/* A critical section is not required as this is not called from
3974:Source/tasks.c **** 		an interrupt and the current TCB will always be the same for any
3975:Source/tasks.c **** 		individual execution thread. */
3976:Source/tasks.c **** 		xReturn = pxCurrentTCB;
 3884              		.loc 1 3976 0
 3885 0006 044B     		ldr	r3, .L266
 3886 0008 1B68     		ldr	r3, [r3]
 3887 000a 7B60     		str	r3, [r7, #4]
3977:Source/tasks.c **** 
3978:Source/tasks.c **** 		return xReturn;
 3888              		.loc 1 3978 0
 3889 000c 7B68     		ldr	r3, [r7, #4]
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 144


3979:Source/tasks.c **** 	}
 3890              		.loc 1 3979 0
 3891 000e 1846     		mov	r0, r3
 3892 0010 0C37     		adds	r7, r7, #12
 3893              		.cfi_def_cfa_offset 4
 3894 0012 BD46     		mov	sp, r7
 3895              		.cfi_def_cfa_register 13
 3896              		@ sp needed
 3897 0014 80BC     		pop	{r7}
 3898              		.cfi_restore 7
 3899              		.cfi_def_cfa_offset 0
 3900 0016 7047     		bx	lr
 3901              	.L267:
 3902              		.align	2
 3903              	.L266:
 3904 0018 00000000 		.word	pxCurrentTCB
 3905              		.cfi_endproc
 3906              	.LFE108:
 3907              		.size	xTaskGetCurrentTaskHandle, .-xTaskGetCurrentTaskHandle
 3908              		.section	.text.xTaskPriorityInherit,"ax",%progbits
 3909              		.align	2
 3910              		.global	xTaskPriorityInherit
 3911              		.thumb
 3912              		.thumb_func
 3913              		.type	xTaskPriorityInherit, %function
 3914              	xTaskPriorityInherit:
 3915              	.LFB109:
3980:Source/tasks.c **** 
3981:Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) ) */
3982:Source/tasks.c **** /*-----------------------------------------------------------*/
3983:Source/tasks.c **** 
3984:Source/tasks.c **** #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
3985:Source/tasks.c **** 
3986:Source/tasks.c **** 	BaseType_t xTaskGetSchedulerState( void )
3987:Source/tasks.c **** 	{
3988:Source/tasks.c **** 	BaseType_t xReturn;
3989:Source/tasks.c **** 
3990:Source/tasks.c **** 		if( xSchedulerRunning == pdFALSE )
3991:Source/tasks.c **** 		{
3992:Source/tasks.c **** 			xReturn = taskSCHEDULER_NOT_STARTED;
3993:Source/tasks.c **** 		}
3994:Source/tasks.c **** 		else
3995:Source/tasks.c **** 		{
3996:Source/tasks.c **** 			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
3997:Source/tasks.c **** 			{
3998:Source/tasks.c **** 				xReturn = taskSCHEDULER_RUNNING;
3999:Source/tasks.c **** 			}
4000:Source/tasks.c **** 			else
4001:Source/tasks.c **** 			{
4002:Source/tasks.c **** 				xReturn = taskSCHEDULER_SUSPENDED;
4003:Source/tasks.c **** 			}
4004:Source/tasks.c **** 		}
4005:Source/tasks.c **** 
4006:Source/tasks.c **** 		return xReturn;
4007:Source/tasks.c **** 	}
4008:Source/tasks.c **** 
4009:Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) ) */
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 145


4010:Source/tasks.c **** /*-----------------------------------------------------------*/
4011:Source/tasks.c **** 
4012:Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4013:Source/tasks.c **** 
4014:Source/tasks.c **** 	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
4015:Source/tasks.c **** 	{
 3916              		.loc 1 4015 0
 3917              		.cfi_startproc
 3918              		@ args = 0, pretend = 0, frame = 16
 3919              		@ frame_needed = 1, uses_anonymous_args = 0
 3920 0000 80B5     		push	{r7, lr}
 3921              		.cfi_def_cfa_offset 8
 3922              		.cfi_offset 7, -8
 3923              		.cfi_offset 14, -4
 3924 0002 84B0     		sub	sp, sp, #16
 3925              		.cfi_def_cfa_offset 24
 3926 0004 00AF     		add	r7, sp, #0
 3927              		.cfi_def_cfa_register 7
 3928 0006 7860     		str	r0, [r7, #4]
4016:Source/tasks.c **** 	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 3929              		.loc 1 4016 0
 3930 0008 7B68     		ldr	r3, [r7, #4]
 3931 000a BB60     		str	r3, [r7, #8]
4017:Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
 3932              		.loc 1 4017 0
 3933 000c 0023     		movs	r3, #0
 3934 000e FB60     		str	r3, [r7, #12]
4018:Source/tasks.c **** 
4019:Source/tasks.c **** 		/* If the mutex was given back by an interrupt while the queue was
4020:Source/tasks.c **** 		locked then the mutex holder might now be NULL.  _RB_ Is this still
4021:Source/tasks.c **** 		needed as interrupts can no longer use mutexes? */
4022:Source/tasks.c **** 		if( pxMutexHolder != NULL )
 3935              		.loc 1 4022 0
 3936 0010 7B68     		ldr	r3, [r7, #4]
 3937 0012 002B     		cmp	r3, #0
 3938 0014 5ED0     		beq	.L269
4023:Source/tasks.c **** 		{
4024:Source/tasks.c **** 			/* If the holder of the mutex has a priority below the priority of
4025:Source/tasks.c **** 			the task attempting to obtain the mutex then it will temporarily
4026:Source/tasks.c **** 			inherit the priority of the task attempting to obtain the mutex. */
4027:Source/tasks.c **** 			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 3939              		.loc 1 4027 0
 3940 0016 BB68     		ldr	r3, [r7, #8]
 3941 0018 DA6A     		ldr	r2, [r3, #44]
 3942 001a 314B     		ldr	r3, .L276
 3943 001c 1B68     		ldr	r3, [r3]
 3944 001e DB6A     		ldr	r3, [r3, #44]
 3945 0020 9A42     		cmp	r2, r3
 3946 0022 4ED2     		bcs	.L270
4028:Source/tasks.c **** 			{
4029:Source/tasks.c **** 				/* Adjust the mutex holder state to account for its new
4030:Source/tasks.c **** 				priority.  Only reset the event list item value if the value is
4031:Source/tasks.c **** 				not being used for anything else. */
4032:Source/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VA
 3947              		.loc 1 4032 0
 3948 0024 BB68     		ldr	r3, [r7, #8]
 3949 0026 9B69     		ldr	r3, [r3, #24]
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 146


 3950 0028 002B     		cmp	r3, #0
 3951 002a 06DB     		blt	.L271
4033:Source/tasks.c **** 				{
4034:Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIOR
 3952              		.loc 1 4034 0
 3953 002c 2C4B     		ldr	r3, .L276
 3954 002e 1B68     		ldr	r3, [r3]
 3955 0030 DB6A     		ldr	r3, [r3, #44]
 3956 0032 C3F10502 		rsb	r2, r3, #5
 3957 0036 BB68     		ldr	r3, [r7, #8]
 3958 0038 9A61     		str	r2, [r3, #24]
 3959              	.L271:
4035:Source/tasks.c **** 				}
4036:Source/tasks.c **** 				else
4037:Source/tasks.c **** 				{
4038:Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4039:Source/tasks.c **** 				}
4040:Source/tasks.c **** 
4041:Source/tasks.c **** 				/* If the task being modified is in the ready state it will need
4042:Source/tasks.c **** 				to be moved into a new list. */
4043:Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutex
 3960              		.loc 1 4043 0
 3961 003a BB68     		ldr	r3, [r7, #8]
 3962 003c 5969     		ldr	r1, [r3, #20]
 3963 003e BB68     		ldr	r3, [r7, #8]
 3964 0040 DA6A     		ldr	r2, [r3, #44]
 3965 0042 1346     		mov	r3, r2
 3966 0044 9B00     		lsls	r3, r3, #2
 3967 0046 1344     		add	r3, r3, r2
 3968 0048 9B00     		lsls	r3, r3, #2
 3969 004a 264A     		ldr	r2, .L276+4
 3970 004c 1344     		add	r3, r3, r2
 3971 004e 9942     		cmp	r1, r3
 3972 0050 2FD1     		bne	.L272
4044:Source/tasks.c **** 				{
4045:Source/tasks.c **** 					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 3973              		.loc 1 4045 0
 3974 0052 BB68     		ldr	r3, [r7, #8]
 3975 0054 0433     		adds	r3, r3, #4
 3976 0056 1846     		mov	r0, r3
 3977 0058 FFF7FEFF 		bl	uxListRemove
 3978 005c 0346     		mov	r3, r0
 3979 005e 002B     		cmp	r3, #0
 3980 0060 0AD1     		bne	.L273
4046:Source/tasks.c **** 					{
4047:Source/tasks.c **** 						/* It is known that the task is in its ready list so
4048:Source/tasks.c **** 						there is no need to check again and the port level
4049:Source/tasks.c **** 						reset macro can be called directly. */
4050:Source/tasks.c **** 						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 3981              		.loc 1 4050 0
 3982 0062 BB68     		ldr	r3, [r7, #8]
 3983 0064 DB6A     		ldr	r3, [r3, #44]
 3984 0066 0122     		movs	r2, #1
 3985 0068 02FA03F3 		lsl	r3, r2, r3
 3986 006c DA43     		mvns	r2, r3
 3987 006e 1E4B     		ldr	r3, .L276+8
 3988 0070 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 147


 3989 0072 1340     		ands	r3, r3, r2
 3990 0074 1C4A     		ldr	r2, .L276+8
 3991 0076 1360     		str	r3, [r2]
 3992              	.L273:
4051:Source/tasks.c **** 					}
4052:Source/tasks.c **** 					else
4053:Source/tasks.c **** 					{
4054:Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4055:Source/tasks.c **** 					}
4056:Source/tasks.c **** 
4057:Source/tasks.c **** 					/* Inherit the priority before being moved into the new list. */
4058:Source/tasks.c **** 					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 3993              		.loc 1 4058 0
 3994 0078 194B     		ldr	r3, .L276
 3995 007a 1B68     		ldr	r3, [r3]
 3996 007c DA6A     		ldr	r2, [r3, #44]
 3997 007e BB68     		ldr	r3, [r7, #8]
 3998 0080 DA62     		str	r2, [r3, #44]
4059:Source/tasks.c **** 					prvAddTaskToReadyList( pxMutexHolderTCB );
 3999              		.loc 1 4059 0
 4000 0082 BB68     		ldr	r3, [r7, #8]
 4001 0084 DB6A     		ldr	r3, [r3, #44]
 4002 0086 0122     		movs	r2, #1
 4003 0088 9A40     		lsls	r2, r2, r3
 4004 008a 174B     		ldr	r3, .L276+8
 4005 008c 1B68     		ldr	r3, [r3]
 4006 008e 1343     		orrs	r3, r3, r2
 4007 0090 154A     		ldr	r2, .L276+8
 4008 0092 1360     		str	r3, [r2]
 4009 0094 BB68     		ldr	r3, [r7, #8]
 4010 0096 DA6A     		ldr	r2, [r3, #44]
 4011 0098 1346     		mov	r3, r2
 4012 009a 9B00     		lsls	r3, r3, #2
 4013 009c 1344     		add	r3, r3, r2
 4014 009e 9B00     		lsls	r3, r3, #2
 4015 00a0 104A     		ldr	r2, .L276+4
 4016 00a2 1A44     		add	r2, r2, r3
 4017 00a4 BB68     		ldr	r3, [r7, #8]
 4018 00a6 0433     		adds	r3, r3, #4
 4019 00a8 1946     		mov	r1, r3
 4020 00aa 1046     		mov	r0, r2
 4021 00ac FFF7FEFF 		bl	vListInsertEnd
 4022 00b0 04E0     		b	.L274
 4023              	.L272:
4060:Source/tasks.c **** 				}
4061:Source/tasks.c **** 				else
4062:Source/tasks.c **** 				{
4063:Source/tasks.c **** 					/* Just inherit the priority. */
4064:Source/tasks.c **** 					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 4024              		.loc 1 4064 0
 4025 00b2 0B4B     		ldr	r3, .L276
 4026 00b4 1B68     		ldr	r3, [r3]
 4027 00b6 DA6A     		ldr	r2, [r3, #44]
 4028 00b8 BB68     		ldr	r3, [r7, #8]
 4029 00ba DA62     		str	r2, [r3, #44]
 4030              	.L274:
4065:Source/tasks.c **** 				}
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 148


4066:Source/tasks.c **** 
4067:Source/tasks.c **** 				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
4068:Source/tasks.c **** 
4069:Source/tasks.c **** 				/* Inheritance occurred. */
4070:Source/tasks.c **** 				xReturn = pdTRUE;
 4031              		.loc 1 4070 0
 4032 00bc 0123     		movs	r3, #1
 4033 00be FB60     		str	r3, [r7, #12]
 4034 00c0 08E0     		b	.L269
 4035              	.L270:
4071:Source/tasks.c **** 			}
4072:Source/tasks.c **** 			else
4073:Source/tasks.c **** 			{
4074:Source/tasks.c **** 				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 4036              		.loc 1 4074 0
 4037 00c2 BB68     		ldr	r3, [r7, #8]
 4038 00c4 1A6C     		ldr	r2, [r3, #64]
 4039 00c6 064B     		ldr	r3, .L276
 4040 00c8 1B68     		ldr	r3, [r3]
 4041 00ca DB6A     		ldr	r3, [r3, #44]
 4042 00cc 9A42     		cmp	r2, r3
 4043 00ce 01D2     		bcs	.L269
4075:Source/tasks.c **** 				{
4076:Source/tasks.c **** 					/* The base priority of the mutex holder is lower than the
4077:Source/tasks.c **** 					priority of the task attempting to take the mutex, but the
4078:Source/tasks.c **** 					current priority of the mutex holder is not lower than the
4079:Source/tasks.c **** 					priority of the task attempting to take the mutex.
4080:Source/tasks.c **** 					Therefore the mutex holder must have already inherited a
4081:Source/tasks.c **** 					priority, but inheritance would have occurred if that had
4082:Source/tasks.c **** 					not been the case. */
4083:Source/tasks.c **** 					xReturn = pdTRUE;
 4044              		.loc 1 4083 0
 4045 00d0 0123     		movs	r3, #1
 4046 00d2 FB60     		str	r3, [r7, #12]
 4047              	.L269:
4084:Source/tasks.c **** 				}
4085:Source/tasks.c **** 				else
4086:Source/tasks.c **** 				{
4087:Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4088:Source/tasks.c **** 				}
4089:Source/tasks.c **** 			}
4090:Source/tasks.c **** 		}
4091:Source/tasks.c **** 		else
4092:Source/tasks.c **** 		{
4093:Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4094:Source/tasks.c **** 		}
4095:Source/tasks.c **** 
4096:Source/tasks.c **** 		return xReturn;
 4048              		.loc 1 4096 0
 4049 00d4 FB68     		ldr	r3, [r7, #12]
4097:Source/tasks.c **** 	}
 4050              		.loc 1 4097 0
 4051 00d6 1846     		mov	r0, r3
 4052 00d8 1037     		adds	r7, r7, #16
 4053              		.cfi_def_cfa_offset 8
 4054 00da BD46     		mov	sp, r7
 4055              		.cfi_def_cfa_register 13
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 149


 4056              		@ sp needed
 4057 00dc 80BD     		pop	{r7, pc}
 4058              	.L277:
 4059 00de 00BF     		.align	2
 4060              	.L276:
 4061 00e0 00000000 		.word	pxCurrentTCB
 4062 00e4 04000000 		.word	pxReadyTasksLists
 4063 00e8 E0000000 		.word	uxTopReadyPriority
 4064              		.cfi_endproc
 4065              	.LFE109:
 4066              		.size	xTaskPriorityInherit, .-xTaskPriorityInherit
 4067              		.section	.text.xTaskPriorityDisinherit,"ax",%progbits
 4068              		.align	2
 4069              		.global	xTaskPriorityDisinherit
 4070              		.thumb
 4071              		.thumb_func
 4072              		.type	xTaskPriorityDisinherit, %function
 4073              	xTaskPriorityDisinherit:
 4074              	.LFB110:
4098:Source/tasks.c **** 
4099:Source/tasks.c **** #endif /* configUSE_MUTEXES */
4100:Source/tasks.c **** /*-----------------------------------------------------------*/
4101:Source/tasks.c **** 
4102:Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4103:Source/tasks.c **** 
4104:Source/tasks.c **** 	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
4105:Source/tasks.c **** 	{
 4075              		.loc 1 4105 0
 4076              		.cfi_startproc
 4077              		@ args = 0, pretend = 0, frame = 16
 4078              		@ frame_needed = 1, uses_anonymous_args = 0
 4079 0000 80B5     		push	{r7, lr}
 4080              		.cfi_def_cfa_offset 8
 4081              		.cfi_offset 7, -8
 4082              		.cfi_offset 14, -4
 4083 0002 84B0     		sub	sp, sp, #16
 4084              		.cfi_def_cfa_offset 24
 4085 0004 00AF     		add	r7, sp, #0
 4086              		.cfi_def_cfa_register 7
 4087 0006 7860     		str	r0, [r7, #4]
4106:Source/tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
 4088              		.loc 1 4106 0
 4089 0008 7B68     		ldr	r3, [r7, #4]
 4090 000a BB60     		str	r3, [r7, #8]
4107:Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
 4091              		.loc 1 4107 0
 4092 000c 0023     		movs	r3, #0
 4093 000e FB60     		str	r3, [r7, #12]
4108:Source/tasks.c **** 
4109:Source/tasks.c **** 		if( pxMutexHolder != NULL )
 4094              		.loc 1 4109 0
 4095 0010 7B68     		ldr	r3, [r7, #4]
 4096 0012 002B     		cmp	r3, #0
 4097 0014 4FD0     		beq	.L279
4110:Source/tasks.c **** 		{
4111:Source/tasks.c **** 			/* A task can only have an inherited priority if it holds the mutex.
4112:Source/tasks.c **** 			If the mutex is held by a task then it cannot be given from an
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 150


4113:Source/tasks.c **** 			interrupt, and if a mutex is given by the holding task then it must
4114:Source/tasks.c **** 			be the running state task. */
4115:Source/tasks.c **** 			configASSERT( pxTCB == pxCurrentTCB );
4116:Source/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
4117:Source/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
 4098              		.loc 1 4117 0
 4099 0016 BB68     		ldr	r3, [r7, #8]
 4100 0018 5B6C     		ldr	r3, [r3, #68]
 4101 001a 5A1E     		subs	r2, r3, #1
 4102 001c BB68     		ldr	r3, [r7, #8]
 4103 001e 5A64     		str	r2, [r3, #68]
4118:Source/tasks.c **** 
4119:Source/tasks.c **** 			/* Has the holder of the mutex inherited the priority of another
4120:Source/tasks.c **** 			task? */
4121:Source/tasks.c **** 			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 4104              		.loc 1 4121 0
 4105 0020 BB68     		ldr	r3, [r7, #8]
 4106 0022 DA6A     		ldr	r2, [r3, #44]
 4107 0024 BB68     		ldr	r3, [r7, #8]
 4108 0026 1B6C     		ldr	r3, [r3, #64]
 4109 0028 9A42     		cmp	r2, r3
 4110 002a 44D0     		beq	.L279
4122:Source/tasks.c **** 			{
4123:Source/tasks.c **** 				/* Only disinherit if no other mutexes are held. */
4124:Source/tasks.c **** 				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 4111              		.loc 1 4124 0
 4112 002c BB68     		ldr	r3, [r7, #8]
 4113 002e 5B6C     		ldr	r3, [r3, #68]
 4114 0030 002B     		cmp	r3, #0
 4115 0032 40D1     		bne	.L279
4125:Source/tasks.c **** 				{
4126:Source/tasks.c **** 					/* A task can only have an inherited priority if it holds
4127:Source/tasks.c **** 					the mutex.  If the mutex is held by a task then it cannot be
4128:Source/tasks.c **** 					given from an interrupt, and if a mutex is given by the
4129:Source/tasks.c **** 					holding task then it must be the running state task.  Remove
4130:Source/tasks.c **** 					the holding task from the ready/delayed list. */
4131:Source/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 4116              		.loc 1 4131 0
 4117 0034 BB68     		ldr	r3, [r7, #8]
 4118 0036 0433     		adds	r3, r3, #4
 4119 0038 1846     		mov	r0, r3
 4120 003a FFF7FEFF 		bl	uxListRemove
 4121 003e 0346     		mov	r3, r0
 4122 0040 002B     		cmp	r3, #0
 4123 0042 15D1     		bne	.L280
4132:Source/tasks.c **** 					{
4133:Source/tasks.c **** 						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 4124              		.loc 1 4133 0
 4125 0044 BB68     		ldr	r3, [r7, #8]
 4126 0046 DA6A     		ldr	r2, [r3, #44]
 4127 0048 1D49     		ldr	r1, .L283
 4128 004a 1346     		mov	r3, r2
 4129 004c 9B00     		lsls	r3, r3, #2
 4130 004e 1344     		add	r3, r3, r2
 4131 0050 9B00     		lsls	r3, r3, #2
 4132 0052 0B44     		add	r3, r3, r1
 4133 0054 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 151


 4134 0056 002B     		cmp	r3, #0
 4135 0058 0AD1     		bne	.L280
 4136              		.loc 1 4133 0 is_stmt 0 discriminator 1
 4137 005a BB68     		ldr	r3, [r7, #8]
 4138 005c DB6A     		ldr	r3, [r3, #44]
 4139 005e 0122     		movs	r2, #1
 4140 0060 02FA03F3 		lsl	r3, r2, r3
 4141 0064 DA43     		mvns	r2, r3
 4142 0066 174B     		ldr	r3, .L283+4
 4143 0068 1B68     		ldr	r3, [r3]
 4144 006a 1340     		ands	r3, r3, r2
 4145 006c 154A     		ldr	r2, .L283+4
 4146 006e 1360     		str	r3, [r2]
 4147              	.L280:
4134:Source/tasks.c **** 					}
4135:Source/tasks.c **** 					else
4136:Source/tasks.c **** 					{
4137:Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4138:Source/tasks.c **** 					}
4139:Source/tasks.c **** 
4140:Source/tasks.c **** 					/* Disinherit the priority before adding the task into the
4141:Source/tasks.c **** 					new	ready list. */
4142:Source/tasks.c **** 					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
4143:Source/tasks.c **** 					pxTCB->uxPriority = pxTCB->uxBasePriority;
 4148              		.loc 1 4143 0 is_stmt 1
 4149 0070 BB68     		ldr	r3, [r7, #8]
 4150 0072 1A6C     		ldr	r2, [r3, #64]
 4151 0074 BB68     		ldr	r3, [r7, #8]
 4152 0076 DA62     		str	r2, [r3, #44]
4144:Source/tasks.c **** 
4145:Source/tasks.c **** 					/* Reset the event list item value.  It cannot be in use for
4146:Source/tasks.c **** 					any other purpose if this task is running, and it must be
4147:Source/tasks.c **** 					running to give back the mutex. */
4148:Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( T
 4153              		.loc 1 4148 0
 4154 0078 BB68     		ldr	r3, [r7, #8]
 4155 007a DB6A     		ldr	r3, [r3, #44]
 4156 007c C3F10502 		rsb	r2, r3, #5
 4157 0080 BB68     		ldr	r3, [r7, #8]
 4158 0082 9A61     		str	r2, [r3, #24]
4149:Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 4159              		.loc 1 4149 0
 4160 0084 BB68     		ldr	r3, [r7, #8]
 4161 0086 DB6A     		ldr	r3, [r3, #44]
 4162 0088 0122     		movs	r2, #1
 4163 008a 9A40     		lsls	r2, r2, r3
 4164 008c 0D4B     		ldr	r3, .L283+4
 4165 008e 1B68     		ldr	r3, [r3]
 4166 0090 1343     		orrs	r3, r3, r2
 4167 0092 0C4A     		ldr	r2, .L283+4
 4168 0094 1360     		str	r3, [r2]
 4169 0096 BB68     		ldr	r3, [r7, #8]
 4170 0098 DA6A     		ldr	r2, [r3, #44]
 4171 009a 1346     		mov	r3, r2
 4172 009c 9B00     		lsls	r3, r3, #2
 4173 009e 1344     		add	r3, r3, r2
 4174 00a0 9B00     		lsls	r3, r3, #2
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 152


 4175 00a2 074A     		ldr	r2, .L283
 4176 00a4 1A44     		add	r2, r2, r3
 4177 00a6 BB68     		ldr	r3, [r7, #8]
 4178 00a8 0433     		adds	r3, r3, #4
 4179 00aa 1946     		mov	r1, r3
 4180 00ac 1046     		mov	r0, r2
 4181 00ae FFF7FEFF 		bl	vListInsertEnd
4150:Source/tasks.c **** 
4151:Source/tasks.c **** 					/* Return true to indicate that a context switch is required.
4152:Source/tasks.c **** 					This is only actually required in the corner case whereby
4153:Source/tasks.c **** 					multiple mutexes were held and the mutexes were given back
4154:Source/tasks.c **** 					in an order different to that in which they were taken.
4155:Source/tasks.c **** 					If a context switch did not occur when the first mutex was
4156:Source/tasks.c **** 					returned, even if a task was waiting on it, then a context
4157:Source/tasks.c **** 					switch should occur when the last mutex is returned whether
4158:Source/tasks.c **** 					a task is waiting on it or not. */
4159:Source/tasks.c **** 					xReturn = pdTRUE;
 4182              		.loc 1 4159 0
 4183 00b2 0123     		movs	r3, #1
 4184 00b4 FB60     		str	r3, [r7, #12]
 4185              	.L279:
4160:Source/tasks.c **** 				}
4161:Source/tasks.c **** 				else
4162:Source/tasks.c **** 				{
4163:Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4164:Source/tasks.c **** 				}
4165:Source/tasks.c **** 			}
4166:Source/tasks.c **** 			else
4167:Source/tasks.c **** 			{
4168:Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4169:Source/tasks.c **** 			}
4170:Source/tasks.c **** 		}
4171:Source/tasks.c **** 		else
4172:Source/tasks.c **** 		{
4173:Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4174:Source/tasks.c **** 		}
4175:Source/tasks.c **** 
4176:Source/tasks.c **** 		return xReturn;
 4186              		.loc 1 4176 0
 4187 00b6 FB68     		ldr	r3, [r7, #12]
4177:Source/tasks.c **** 	}
 4188              		.loc 1 4177 0
 4189 00b8 1846     		mov	r0, r3
 4190 00ba 1037     		adds	r7, r7, #16
 4191              		.cfi_def_cfa_offset 8
 4192 00bc BD46     		mov	sp, r7
 4193              		.cfi_def_cfa_register 13
 4194              		@ sp needed
 4195 00be 80BD     		pop	{r7, pc}
 4196              	.L284:
 4197              		.align	2
 4198              	.L283:
 4199 00c0 04000000 		.word	pxReadyTasksLists
 4200 00c4 E0000000 		.word	uxTopReadyPriority
 4201              		.cfi_endproc
 4202              	.LFE110:
 4203              		.size	xTaskPriorityDisinherit, .-xTaskPriorityDisinherit
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 153


 4204              		.section	.text.vTaskPriorityDisinheritAfterTimeout,"ax",%progbits
 4205              		.align	2
 4206              		.global	vTaskPriorityDisinheritAfterTimeout
 4207              		.thumb
 4208              		.thumb_func
 4209              		.type	vTaskPriorityDisinheritAfterTimeout, %function
 4210              	vTaskPriorityDisinheritAfterTimeout:
 4211              	.LFB111:
4178:Source/tasks.c **** 
4179:Source/tasks.c **** #endif /* configUSE_MUTEXES */
4180:Source/tasks.c **** /*-----------------------------------------------------------*/
4181:Source/tasks.c **** 
4182:Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4183:Source/tasks.c **** 
4184:Source/tasks.c **** 	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestP
4185:Source/tasks.c **** 	{
 4212              		.loc 1 4185 0
 4213              		.cfi_startproc
 4214              		@ args = 0, pretend = 0, frame = 24
 4215              		@ frame_needed = 1, uses_anonymous_args = 0
 4216 0000 80B5     		push	{r7, lr}
 4217              		.cfi_def_cfa_offset 8
 4218              		.cfi_offset 7, -8
 4219              		.cfi_offset 14, -4
 4220 0002 86B0     		sub	sp, sp, #24
 4221              		.cfi_def_cfa_offset 32
 4222 0004 00AF     		add	r7, sp, #0
 4223              		.cfi_def_cfa_register 7
 4224 0006 7860     		str	r0, [r7, #4]
 4225 0008 3960     		str	r1, [r7]
4186:Source/tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
 4226              		.loc 1 4186 0
 4227 000a 7B68     		ldr	r3, [r7, #4]
 4228 000c 3B61     		str	r3, [r7, #16]
4187:Source/tasks.c **** 	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
4188:Source/tasks.c **** 	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 4229              		.loc 1 4188 0
 4230 000e 0123     		movs	r3, #1
 4231 0010 FB60     		str	r3, [r7, #12]
4189:Source/tasks.c **** 
4190:Source/tasks.c **** 		if( pxMutexHolder != NULL )
 4232              		.loc 1 4190 0
 4233 0012 7B68     		ldr	r3, [r7, #4]
 4234 0014 002B     		cmp	r3, #0
 4235 0016 58D0     		beq	.L291
4191:Source/tasks.c **** 		{
4192:Source/tasks.c **** 			/* If pxMutexHolder is not NULL then the holder must hold at least
4193:Source/tasks.c **** 			one mutex. */
4194:Source/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
4195:Source/tasks.c **** 
4196:Source/tasks.c **** 			/* Determine the priority to which the priority of the task that
4197:Source/tasks.c **** 			holds the mutex should be set.  This will be the greater of the
4198:Source/tasks.c **** 			holding task's base priority and the priority of the highest
4199:Source/tasks.c **** 			priority task that is waiting to obtain the mutex. */
4200:Source/tasks.c **** 			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 4236              		.loc 1 4200 0
 4237 0018 3B69     		ldr	r3, [r7, #16]
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 154


 4238 001a 1A6C     		ldr	r2, [r3, #64]
 4239 001c 3B68     		ldr	r3, [r7]
 4240 001e 9A42     		cmp	r2, r3
 4241 0020 02D2     		bcs	.L287
4201:Source/tasks.c **** 			{
4202:Source/tasks.c **** 				uxPriorityToUse = uxHighestPriorityWaitingTask;
 4242              		.loc 1 4202 0
 4243 0022 3B68     		ldr	r3, [r7]
 4244 0024 7B61     		str	r3, [r7, #20]
 4245 0026 02E0     		b	.L288
 4246              	.L287:
4203:Source/tasks.c **** 			}
4204:Source/tasks.c **** 			else
4205:Source/tasks.c **** 			{
4206:Source/tasks.c **** 				uxPriorityToUse = pxTCB->uxBasePriority;
 4247              		.loc 1 4206 0
 4248 0028 3B69     		ldr	r3, [r7, #16]
 4249 002a 1B6C     		ldr	r3, [r3, #64]
 4250 002c 7B61     		str	r3, [r7, #20]
 4251              	.L288:
4207:Source/tasks.c **** 			}
4208:Source/tasks.c **** 
4209:Source/tasks.c **** 			/* Does the priority need to change? */
4210:Source/tasks.c **** 			if( pxTCB->uxPriority != uxPriorityToUse )
 4252              		.loc 1 4210 0
 4253 002e 3B69     		ldr	r3, [r7, #16]
 4254 0030 DA6A     		ldr	r2, [r3, #44]
 4255 0032 7B69     		ldr	r3, [r7, #20]
 4256 0034 9A42     		cmp	r2, r3
 4257 0036 48D0     		beq	.L291
4211:Source/tasks.c **** 			{
4212:Source/tasks.c **** 				/* Only disinherit if no other mutexes are held.  This is a
4213:Source/tasks.c **** 				simplification in the priority inheritance implementation.  If
4214:Source/tasks.c **** 				the task that holds the mutex is also holding other mutexes then
4215:Source/tasks.c **** 				the other mutexes may have caused the priority inheritance. */
4216:Source/tasks.c **** 				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 4258              		.loc 1 4216 0
 4259 0038 3B69     		ldr	r3, [r7, #16]
 4260 003a 5A6C     		ldr	r2, [r3, #68]
 4261 003c FB68     		ldr	r3, [r7, #12]
 4262 003e 9A42     		cmp	r2, r3
 4263 0040 43D1     		bne	.L291
4217:Source/tasks.c **** 				{
4218:Source/tasks.c **** 					/* If a task has timed out because it already holds the
4219:Source/tasks.c **** 					mutex it was trying to obtain then it cannot of inherited
4220:Source/tasks.c **** 					its own priority. */
4221:Source/tasks.c **** 					configASSERT( pxTCB != pxCurrentTCB );
4222:Source/tasks.c **** 
4223:Source/tasks.c **** 					/* Disinherit the priority, remembering the previous
4224:Source/tasks.c **** 					priority to facilitate determining the subject task's
4225:Source/tasks.c **** 					state. */
4226:Source/tasks.c **** 					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
4227:Source/tasks.c **** 					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 4264              		.loc 1 4227 0
 4265 0042 3B69     		ldr	r3, [r7, #16]
 4266 0044 DB6A     		ldr	r3, [r3, #44]
 4267 0046 BB60     		str	r3, [r7, #8]
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 155


4228:Source/tasks.c **** 					pxTCB->uxPriority = uxPriorityToUse;
 4268              		.loc 1 4228 0
 4269 0048 3B69     		ldr	r3, [r7, #16]
 4270 004a 7A69     		ldr	r2, [r7, #20]
 4271 004c DA62     		str	r2, [r3, #44]
4229:Source/tasks.c **** 
4230:Source/tasks.c **** 					/* Only reset the event list item value if the value is not
4231:Source/tasks.c **** 					being used for anything else. */
4232:Source/tasks.c **** 					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE
 4272              		.loc 1 4232 0
 4273 004e 3B69     		ldr	r3, [r7, #16]
 4274 0050 9B69     		ldr	r3, [r3, #24]
 4275 0052 002B     		cmp	r3, #0
 4276 0054 04DB     		blt	.L289
4233:Source/tasks.c **** 					{
4234:Source/tasks.c **** 						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( 
 4277              		.loc 1 4234 0
 4278 0056 7B69     		ldr	r3, [r7, #20]
 4279 0058 C3F10502 		rsb	r2, r3, #5
 4280 005c 3B69     		ldr	r3, [r7, #16]
 4281 005e 9A61     		str	r2, [r3, #24]
 4282              	.L289:
4235:Source/tasks.c **** 					}
4236:Source/tasks.c **** 					else
4237:Source/tasks.c **** 					{
4238:Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4239:Source/tasks.c **** 					}
4240:Source/tasks.c **** 
4241:Source/tasks.c **** 					/* If the running task is not the task that holds the mutex
4242:Source/tasks.c **** 					then the task that holds the mutex could be in either the
4243:Source/tasks.c **** 					Ready, Blocked or Suspended states.  Only remove the task
4244:Source/tasks.c **** 					from its current state list if it is in the Ready state as
4245:Source/tasks.c **** 					the task's priority is going to change and there is one
4246:Source/tasks.c **** 					Ready list per priority. */
4247:Source/tasks.c **** 					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xState
 4283              		.loc 1 4247 0
 4284 0060 3B69     		ldr	r3, [r7, #16]
 4285 0062 5969     		ldr	r1, [r3, #20]
 4286 0064 BA68     		ldr	r2, [r7, #8]
 4287 0066 1346     		mov	r3, r2
 4288 0068 9B00     		lsls	r3, r3, #2
 4289 006a 1344     		add	r3, r3, r2
 4290 006c 9B00     		lsls	r3, r3, #2
 4291 006e 194A     		ldr	r2, .L292
 4292 0070 1344     		add	r3, r3, r2
 4293 0072 9942     		cmp	r1, r3
 4294 0074 29D1     		bne	.L291
4248:Source/tasks.c **** 					{
4249:Source/tasks.c **** 						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 4295              		.loc 1 4249 0
 4296 0076 3B69     		ldr	r3, [r7, #16]
 4297 0078 0433     		adds	r3, r3, #4
 4298 007a 1846     		mov	r0, r3
 4299 007c FFF7FEFF 		bl	uxListRemove
 4300 0080 0346     		mov	r3, r0
 4301 0082 002B     		cmp	r3, #0
 4302 0084 0AD1     		bne	.L290
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 156


4250:Source/tasks.c **** 						{
4251:Source/tasks.c **** 							/* It is known that the task is in its ready list so
4252:Source/tasks.c **** 							there is no need to check again and the port level
4253:Source/tasks.c **** 							reset macro can be called directly. */
4254:Source/tasks.c **** 							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 4303              		.loc 1 4254 0
 4304 0086 3B69     		ldr	r3, [r7, #16]
 4305 0088 DB6A     		ldr	r3, [r3, #44]
 4306 008a 0122     		movs	r2, #1
 4307 008c 02FA03F3 		lsl	r3, r2, r3
 4308 0090 DA43     		mvns	r2, r3
 4309 0092 114B     		ldr	r3, .L292+4
 4310 0094 1B68     		ldr	r3, [r3]
 4311 0096 1340     		ands	r3, r3, r2
 4312 0098 0F4A     		ldr	r2, .L292+4
 4313 009a 1360     		str	r3, [r2]
 4314              	.L290:
4255:Source/tasks.c **** 						}
4256:Source/tasks.c **** 						else
4257:Source/tasks.c **** 						{
4258:Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
4259:Source/tasks.c **** 						}
4260:Source/tasks.c **** 
4261:Source/tasks.c **** 						prvAddTaskToReadyList( pxTCB );
 4315              		.loc 1 4261 0
 4316 009c 3B69     		ldr	r3, [r7, #16]
 4317 009e DB6A     		ldr	r3, [r3, #44]
 4318 00a0 0122     		movs	r2, #1
 4319 00a2 9A40     		lsls	r2, r2, r3
 4320 00a4 0C4B     		ldr	r3, .L292+4
 4321 00a6 1B68     		ldr	r3, [r3]
 4322 00a8 1343     		orrs	r3, r3, r2
 4323 00aa 0B4A     		ldr	r2, .L292+4
 4324 00ac 1360     		str	r3, [r2]
 4325 00ae 3B69     		ldr	r3, [r7, #16]
 4326 00b0 DA6A     		ldr	r2, [r3, #44]
 4327 00b2 1346     		mov	r3, r2
 4328 00b4 9B00     		lsls	r3, r3, #2
 4329 00b6 1344     		add	r3, r3, r2
 4330 00b8 9B00     		lsls	r3, r3, #2
 4331 00ba 064A     		ldr	r2, .L292
 4332 00bc 1A44     		add	r2, r2, r3
 4333 00be 3B69     		ldr	r3, [r7, #16]
 4334 00c0 0433     		adds	r3, r3, #4
 4335 00c2 1946     		mov	r1, r3
 4336 00c4 1046     		mov	r0, r2
 4337 00c6 FFF7FEFF 		bl	vListInsertEnd
 4338              	.L291:
4262:Source/tasks.c **** 					}
4263:Source/tasks.c **** 					else
4264:Source/tasks.c **** 					{
4265:Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4266:Source/tasks.c **** 					}
4267:Source/tasks.c **** 				}
4268:Source/tasks.c **** 				else
4269:Source/tasks.c **** 				{
4270:Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 157


4271:Source/tasks.c **** 				}
4272:Source/tasks.c **** 			}
4273:Source/tasks.c **** 			else
4274:Source/tasks.c **** 			{
4275:Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4276:Source/tasks.c **** 			}
4277:Source/tasks.c **** 		}
4278:Source/tasks.c **** 		else
4279:Source/tasks.c **** 		{
4280:Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4281:Source/tasks.c **** 		}
4282:Source/tasks.c **** 	}
 4339              		.loc 1 4282 0
 4340 00ca 00BF     		nop
 4341 00cc 1837     		adds	r7, r7, #24
 4342              		.cfi_def_cfa_offset 8
 4343 00ce BD46     		mov	sp, r7
 4344              		.cfi_def_cfa_register 13
 4345              		@ sp needed
 4346 00d0 80BD     		pop	{r7, pc}
 4347              	.L293:
 4348 00d2 00BF     		.align	2
 4349              	.L292:
 4350 00d4 04000000 		.word	pxReadyTasksLists
 4351 00d8 E0000000 		.word	uxTopReadyPriority
 4352              		.cfi_endproc
 4353              	.LFE111:
 4354              		.size	vTaskPriorityDisinheritAfterTimeout, .-vTaskPriorityDisinheritAfterTimeout
 4355              		.section	.text.uxTaskResetEventItemValue,"ax",%progbits
 4356              		.align	2
 4357              		.global	uxTaskResetEventItemValue
 4358              		.thumb
 4359              		.thumb_func
 4360              		.type	uxTaskResetEventItemValue, %function
 4361              	uxTaskResetEventItemValue:
 4362              	.LFB112:
4283:Source/tasks.c **** 
4284:Source/tasks.c **** #endif /* configUSE_MUTEXES */
4285:Source/tasks.c **** /*-----------------------------------------------------------*/
4286:Source/tasks.c **** 
4287:Source/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
4288:Source/tasks.c **** 
4289:Source/tasks.c **** 	void vTaskEnterCritical( void )
4290:Source/tasks.c **** 	{
4291:Source/tasks.c **** 		portDISABLE_INTERRUPTS();
4292:Source/tasks.c **** 
4293:Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
4294:Source/tasks.c **** 		{
4295:Source/tasks.c **** 			( pxCurrentTCB->uxCriticalNesting )++;
4296:Source/tasks.c **** 
4297:Source/tasks.c **** 			/* This is not the interrupt safe version of the enter critical
4298:Source/tasks.c **** 			function so	assert() if it is being called from an interrupt
4299:Source/tasks.c **** 			context.  Only API functions that end in "FromISR" can be used in an
4300:Source/tasks.c **** 			interrupt.  Only assert if the critical nesting count is 1 to
4301:Source/tasks.c **** 			protect against recursive calls if the assert function also uses a
4302:Source/tasks.c **** 			critical section. */
4303:Source/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting == 1 )
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 158


4304:Source/tasks.c **** 			{
4305:Source/tasks.c **** 				portASSERT_IF_IN_ISR();
4306:Source/tasks.c **** 			}
4307:Source/tasks.c **** 		}
4308:Source/tasks.c **** 		else
4309:Source/tasks.c **** 		{
4310:Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4311:Source/tasks.c **** 		}
4312:Source/tasks.c **** 	}
4313:Source/tasks.c **** 
4314:Source/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
4315:Source/tasks.c **** /*-----------------------------------------------------------*/
4316:Source/tasks.c **** 
4317:Source/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
4318:Source/tasks.c **** 
4319:Source/tasks.c **** 	void vTaskExitCritical( void )
4320:Source/tasks.c **** 	{
4321:Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
4322:Source/tasks.c **** 		{
4323:Source/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting > 0U )
4324:Source/tasks.c **** 			{
4325:Source/tasks.c **** 				( pxCurrentTCB->uxCriticalNesting )--;
4326:Source/tasks.c **** 
4327:Source/tasks.c **** 				if( pxCurrentTCB->uxCriticalNesting == 0U )
4328:Source/tasks.c **** 				{
4329:Source/tasks.c **** 					portENABLE_INTERRUPTS();
4330:Source/tasks.c **** 				}
4331:Source/tasks.c **** 				else
4332:Source/tasks.c **** 				{
4333:Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4334:Source/tasks.c **** 				}
4335:Source/tasks.c **** 			}
4336:Source/tasks.c **** 			else
4337:Source/tasks.c **** 			{
4338:Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4339:Source/tasks.c **** 			}
4340:Source/tasks.c **** 		}
4341:Source/tasks.c **** 		else
4342:Source/tasks.c **** 		{
4343:Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4344:Source/tasks.c **** 		}
4345:Source/tasks.c **** 	}
4346:Source/tasks.c **** 
4347:Source/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
4348:Source/tasks.c **** /*-----------------------------------------------------------*/
4349:Source/tasks.c **** 
4350:Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
4351:Source/tasks.c **** 
4352:Source/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
4353:Source/tasks.c **** 	{
4354:Source/tasks.c **** 	size_t x;
4355:Source/tasks.c **** 
4356:Source/tasks.c **** 		/* Start by copying the entire string. */
4357:Source/tasks.c **** 		strcpy( pcBuffer, pcTaskName );
4358:Source/tasks.c **** 
4359:Source/tasks.c **** 		/* Pad the end of the string with spaces to ensure columns line up when
4360:Source/tasks.c **** 		printed out. */
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 159


4361:Source/tasks.c **** 		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
4362:Source/tasks.c **** 		{
4363:Source/tasks.c **** 			pcBuffer[ x ] = ' ';
4364:Source/tasks.c **** 		}
4365:Source/tasks.c **** 
4366:Source/tasks.c **** 		/* Terminate. */
4367:Source/tasks.c **** 		pcBuffer[ x ] = ( char ) 0x00;
4368:Source/tasks.c **** 
4369:Source/tasks.c **** 		/* Return the new end of string. */
4370:Source/tasks.c **** 		return &( pcBuffer[ x ] );
4371:Source/tasks.c **** 	}
4372:Source/tasks.c **** 
4373:Source/tasks.c **** #endif /* ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) */
4374:Source/tasks.c **** /*-----------------------------------------------------------*/
4375:Source/tasks.c **** 
4376:Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( config
4377:Source/tasks.c **** 
4378:Source/tasks.c **** 	void vTaskList( char * pcWriteBuffer )
4379:Source/tasks.c **** 	{
4380:Source/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
4381:Source/tasks.c **** 	UBaseType_t uxArraySize, x;
4382:Source/tasks.c **** 	char cStatus;
4383:Source/tasks.c **** 
4384:Source/tasks.c **** 		/*
4385:Source/tasks.c **** 		 * PLEASE NOTE:
4386:Source/tasks.c **** 		 *
4387:Source/tasks.c **** 		 * This function is provided for convenience only, and is used by many
4388:Source/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
4389:Source/tasks.c **** 		 * scheduler.
4390:Source/tasks.c **** 		 *
4391:Source/tasks.c **** 		 * vTaskList() calls uxTaskGetSystemState(), then formats part of the
4392:Source/tasks.c **** 		 * uxTaskGetSystemState() output into a human readable table that
4393:Source/tasks.c **** 		 * displays task names, states and stack usage.
4394:Source/tasks.c **** 		 *
4395:Source/tasks.c **** 		 * vTaskList() has a dependency on the sprintf() C library function that
4396:Source/tasks.c **** 		 * might bloat the code size, use a lot of stack, and provide different
4397:Source/tasks.c **** 		 * results on different platforms.  An alternative, tiny, third party,
4398:Source/tasks.c **** 		 * and limited functionality implementation of sprintf() is provided in
4399:Source/tasks.c **** 		 * many of the FreeRTOS/Demo sub-directories in a file called
4400:Source/tasks.c **** 		 * printf-stdarg.c (note printf-stdarg.c does not provide a full
4401:Source/tasks.c **** 		 * snprintf() implementation!).
4402:Source/tasks.c **** 		 *
4403:Source/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
4404:Source/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
4405:Source/tasks.c **** 		 * through a call to vTaskList().
4406:Source/tasks.c **** 		 */
4407:Source/tasks.c **** 
4408:Source/tasks.c **** 
4409:Source/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
4410:Source/tasks.c **** 		*pcWriteBuffer = ( char ) 0x00;
4411:Source/tasks.c **** 
4412:Source/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
4413:Source/tasks.c **** 		function is executing. */
4414:Source/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
4415:Source/tasks.c **** 
4416:Source/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  if
4417:Source/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 160


4418:Source/tasks.c **** 		equate to NULL. */
4419:Source/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e907
4420:Source/tasks.c **** 
4421:Source/tasks.c **** 		if( pxTaskStatusArray != NULL )
4422:Source/tasks.c **** 		{
4423:Source/tasks.c **** 			/* Generate the (binary) data. */
4424:Source/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
4425:Source/tasks.c **** 
4426:Source/tasks.c **** 			/* Create a human readable table from the binary data. */
4427:Source/tasks.c **** 			for( x = 0; x < uxArraySize; x++ )
4428:Source/tasks.c **** 			{
4429:Source/tasks.c **** 				switch( pxTaskStatusArray[ x ].eCurrentState )
4430:Source/tasks.c **** 				{
4431:Source/tasks.c **** 					case eRunning:		cStatus = tskRUNNING_CHAR;
4432:Source/tasks.c **** 										break;
4433:Source/tasks.c **** 
4434:Source/tasks.c **** 					case eReady:		cStatus = tskREADY_CHAR;
4435:Source/tasks.c **** 										break;
4436:Source/tasks.c **** 
4437:Source/tasks.c **** 					case eBlocked:		cStatus = tskBLOCKED_CHAR;
4438:Source/tasks.c **** 										break;
4439:Source/tasks.c **** 
4440:Source/tasks.c **** 					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
4441:Source/tasks.c **** 										break;
4442:Source/tasks.c **** 
4443:Source/tasks.c **** 					case eDeleted:		cStatus = tskDELETED_CHAR;
4444:Source/tasks.c **** 										break;
4445:Source/tasks.c **** 
4446:Source/tasks.c **** 					case eInvalid:		/* Fall through. */
4447:Source/tasks.c **** 					default:			/* Should not get here, but it is included
4448:Source/tasks.c **** 										to prevent static checking errors. */
4449:Source/tasks.c **** 										cStatus = ( char ) 0x00;
4450:Source/tasks.c **** 										break;
4451:Source/tasks.c **** 				}
4452:Source/tasks.c **** 
4453:Source/tasks.c **** 				/* Write the task name to the string, padding with spaces so it
4454:Source/tasks.c **** 				can be printed in tabular form more easily. */
4455:Source/tasks.c **** 				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
4456:Source/tasks.c **** 
4457:Source/tasks.c **** 				/* Write the rest of the string. */
4458:Source/tasks.c **** 				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x 
4459:Source/tasks.c **** 				pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers 
4460:Source/tasks.c **** 			}
4461:Source/tasks.c **** 
4462:Source/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4463:Source/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4464:Source/tasks.c **** 			vPortFree( pxTaskStatusArray );
4465:Source/tasks.c **** 		}
4466:Source/tasks.c **** 		else
4467:Source/tasks.c **** 		{
4468:Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4469:Source/tasks.c **** 		}
4470:Source/tasks.c **** 	}
4471:Source/tasks.c **** 
4472:Source/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( 
4473:Source/tasks.c **** /*----------------------------------------------------------*/
4474:Source/tasks.c **** 
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 161


4475:Source/tasks.c **** #if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( c
4476:Source/tasks.c **** 
4477:Source/tasks.c **** 	void vTaskGetRunTimeStats( char *pcWriteBuffer )
4478:Source/tasks.c **** 	{
4479:Source/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
4480:Source/tasks.c **** 	UBaseType_t uxArraySize, x;
4481:Source/tasks.c **** 	uint32_t ulTotalTime, ulStatsAsPercentage;
4482:Source/tasks.c **** 
4483:Source/tasks.c **** 		#if( configUSE_TRACE_FACILITY != 1 )
4484:Source/tasks.c **** 		{
4485:Source/tasks.c **** 			#error configUSE_TRACE_FACILITY must also be set to 1 in FreeRTOSConfig.h to use vTaskGetRunTime
4486:Source/tasks.c **** 		}
4487:Source/tasks.c **** 		#endif
4488:Source/tasks.c **** 
4489:Source/tasks.c **** 		/*
4490:Source/tasks.c **** 		 * PLEASE NOTE:
4491:Source/tasks.c **** 		 *
4492:Source/tasks.c **** 		 * This function is provided for convenience only, and is used by many
4493:Source/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
4494:Source/tasks.c **** 		 * scheduler.
4495:Source/tasks.c **** 		 *
4496:Source/tasks.c **** 		 * vTaskGetRunTimeStats() calls uxTaskGetSystemState(), then formats part
4497:Source/tasks.c **** 		 * of the uxTaskGetSystemState() output into a human readable table that
4498:Source/tasks.c **** 		 * displays the amount of time each task has spent in the Running state
4499:Source/tasks.c **** 		 * in both absolute and percentage terms.
4500:Source/tasks.c **** 		 *
4501:Source/tasks.c **** 		 * vTaskGetRunTimeStats() has a dependency on the sprintf() C library
4502:Source/tasks.c **** 		 * function that might bloat the code size, use a lot of stack, and
4503:Source/tasks.c **** 		 * provide different results on different platforms.  An alternative,
4504:Source/tasks.c **** 		 * tiny, third party, and limited functionality implementation of
4505:Source/tasks.c **** 		 * sprintf() is provided in many of the FreeRTOS/Demo sub-directories in
4506:Source/tasks.c **** 		 * a file called printf-stdarg.c (note printf-stdarg.c does not provide
4507:Source/tasks.c **** 		 * a full snprintf() implementation!).
4508:Source/tasks.c **** 		 *
4509:Source/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
4510:Source/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
4511:Source/tasks.c **** 		 * through a call to vTaskGetRunTimeStats().
4512:Source/tasks.c **** 		 */
4513:Source/tasks.c **** 
4514:Source/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
4515:Source/tasks.c **** 		*pcWriteBuffer = ( char ) 0x00;
4516:Source/tasks.c **** 
4517:Source/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
4518:Source/tasks.c **** 		function is executing. */
4519:Source/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
4520:Source/tasks.c **** 
4521:Source/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  If
4522:Source/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4523:Source/tasks.c **** 		equate to NULL. */
4524:Source/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e907
4525:Source/tasks.c **** 
4526:Source/tasks.c **** 		if( pxTaskStatusArray != NULL )
4527:Source/tasks.c **** 		{
4528:Source/tasks.c **** 			/* Generate the (binary) data. */
4529:Source/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
4530:Source/tasks.c **** 
4531:Source/tasks.c **** 			/* For percentage calculations. */
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 162


4532:Source/tasks.c **** 			ulTotalTime /= 100UL;
4533:Source/tasks.c **** 
4534:Source/tasks.c **** 			/* Avoid divide by zero errors. */
4535:Source/tasks.c **** 			if( ulTotalTime > 0UL )
4536:Source/tasks.c **** 			{
4537:Source/tasks.c **** 				/* Create a human readable table from the binary data. */
4538:Source/tasks.c **** 				for( x = 0; x < uxArraySize; x++ )
4539:Source/tasks.c **** 				{
4540:Source/tasks.c **** 					/* What percentage of the total run time has the task used?
4541:Source/tasks.c **** 					This will always be rounded down to the nearest integer.
4542:Source/tasks.c **** 					ulTotalRunTimeDiv100 has already been divided by 100. */
4543:Source/tasks.c **** 					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
4544:Source/tasks.c **** 
4545:Source/tasks.c **** 					/* Write the task name to the string, padding with
4546:Source/tasks.c **** 					spaces so it can be printed in tabular form more
4547:Source/tasks.c **** 					easily. */
4548:Source/tasks.c **** 					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
4549:Source/tasks.c **** 
4550:Source/tasks.c **** 					if( ulStatsAsPercentage > 0UL )
4551:Source/tasks.c **** 					{
4552:Source/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4553:Source/tasks.c **** 						{
4554:Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t%lu%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter, ulSta
4555:Source/tasks.c **** 						}
4556:Source/tasks.c **** 						#else
4557:Source/tasks.c **** 						{
4558:Source/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4559:Source/tasks.c **** 							printf() library can be used. */
4560:Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
4561:Source/tasks.c **** 						}
4562:Source/tasks.c **** 						#endif
4563:Source/tasks.c **** 					}
4564:Source/tasks.c **** 					else
4565:Source/tasks.c **** 					{
4566:Source/tasks.c **** 						/* If the percentage is zero here then the task has
4567:Source/tasks.c **** 						consumed less than 1% of the total run time. */
4568:Source/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4569:Source/tasks.c **** 						{
4570:Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t<1%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter );
4571:Source/tasks.c **** 						}
4572:Source/tasks.c **** 						#else
4573:Source/tasks.c **** 						{
4574:Source/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4575:Source/tasks.c **** 							printf() library can be used. */
4576:Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
4577:Source/tasks.c **** 						}
4578:Source/tasks.c **** 						#endif
4579:Source/tasks.c **** 					}
4580:Source/tasks.c **** 
4581:Source/tasks.c **** 					pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers
4582:Source/tasks.c **** 				}
4583:Source/tasks.c **** 			}
4584:Source/tasks.c **** 			else
4585:Source/tasks.c **** 			{
4586:Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4587:Source/tasks.c **** 			}
4588:Source/tasks.c **** 
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 163


4589:Source/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4590:Source/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4591:Source/tasks.c **** 			vPortFree( pxTaskStatusArray );
4592:Source/tasks.c **** 		}
4593:Source/tasks.c **** 		else
4594:Source/tasks.c **** 		{
4595:Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4596:Source/tasks.c **** 		}
4597:Source/tasks.c **** 	}
4598:Source/tasks.c **** 
4599:Source/tasks.c **** #endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) 
4600:Source/tasks.c **** /*-----------------------------------------------------------*/
4601:Source/tasks.c **** 
4602:Source/tasks.c **** TickType_t uxTaskResetEventItemValue( void )
4603:Source/tasks.c **** {
 4363              		.loc 1 4603 0
 4364              		.cfi_startproc
 4365              		@ args = 0, pretend = 0, frame = 8
 4366              		@ frame_needed = 1, uses_anonymous_args = 0
 4367              		@ link register save eliminated.
 4368 0000 80B4     		push	{r7}
 4369              		.cfi_def_cfa_offset 4
 4370              		.cfi_offset 7, -4
 4371 0002 83B0     		sub	sp, sp, #12
 4372              		.cfi_def_cfa_offset 16
 4373 0004 00AF     		add	r7, sp, #0
 4374              		.cfi_def_cfa_register 7
4604:Source/tasks.c **** TickType_t uxReturn;
4605:Source/tasks.c **** 
4606:Source/tasks.c **** 	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 4375              		.loc 1 4606 0
 4376 0006 094B     		ldr	r3, .L296
 4377 0008 1B68     		ldr	r3, [r3]
 4378 000a 9B69     		ldr	r3, [r3, #24]
 4379 000c 7B60     		str	r3, [r7, #4]
4607:Source/tasks.c **** 
4608:Source/tasks.c **** 	/* Reset the event list item to its normal value - so it can be used with
4609:Source/tasks.c **** 	queues and semaphores. */
4610:Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES 
 4380              		.loc 1 4610 0
 4381 000e 074B     		ldr	r3, .L296
 4382 0010 1B68     		ldr	r3, [r3]
 4383 0012 064A     		ldr	r2, .L296
 4384 0014 1268     		ldr	r2, [r2]
 4385 0016 D26A     		ldr	r2, [r2, #44]
 4386 0018 C2F10502 		rsb	r2, r2, #5
 4387 001c 9A61     		str	r2, [r3, #24]
4611:Source/tasks.c **** 
4612:Source/tasks.c **** 	return uxReturn;
 4388              		.loc 1 4612 0
 4389 001e 7B68     		ldr	r3, [r7, #4]
4613:Source/tasks.c **** }
 4390              		.loc 1 4613 0
 4391 0020 1846     		mov	r0, r3
 4392 0022 0C37     		adds	r7, r7, #12
 4393              		.cfi_def_cfa_offset 4
 4394 0024 BD46     		mov	sp, r7
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 164


 4395              		.cfi_def_cfa_register 13
 4396              		@ sp needed
 4397 0026 80BC     		pop	{r7}
 4398              		.cfi_restore 7
 4399              		.cfi_def_cfa_offset 0
 4400 0028 7047     		bx	lr
 4401              	.L297:
 4402 002a 00BF     		.align	2
 4403              	.L296:
 4404 002c 00000000 		.word	pxCurrentTCB
 4405              		.cfi_endproc
 4406              	.LFE112:
 4407              		.size	uxTaskResetEventItemValue, .-uxTaskResetEventItemValue
 4408              		.section	.text.pvTaskIncrementMutexHeldCount,"ax",%progbits
 4409              		.align	2
 4410              		.global	pvTaskIncrementMutexHeldCount
 4411              		.thumb
 4412              		.thumb_func
 4413              		.type	pvTaskIncrementMutexHeldCount, %function
 4414              	pvTaskIncrementMutexHeldCount:
 4415              	.LFB113:
4614:Source/tasks.c **** /*-----------------------------------------------------------*/
4615:Source/tasks.c **** 
4616:Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4617:Source/tasks.c **** 
4618:Source/tasks.c **** 	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
4619:Source/tasks.c **** 	{
 4416              		.loc 1 4619 0
 4417              		.cfi_startproc
 4418              		@ args = 0, pretend = 0, frame = 0
 4419              		@ frame_needed = 1, uses_anonymous_args = 0
 4420              		@ link register save eliminated.
 4421 0000 80B4     		push	{r7}
 4422              		.cfi_def_cfa_offset 4
 4423              		.cfi_offset 7, -4
 4424 0002 00AF     		add	r7, sp, #0
 4425              		.cfi_def_cfa_register 7
4620:Source/tasks.c **** 		/* If xSemaphoreCreateMutex() is called before any tasks have been created
4621:Source/tasks.c **** 		then pxCurrentTCB will be NULL. */
4622:Source/tasks.c **** 		if( pxCurrentTCB != NULL )
 4426              		.loc 1 4622 0
 4427 0004 074B     		ldr	r3, .L301
 4428 0006 1B68     		ldr	r3, [r3]
 4429 0008 002B     		cmp	r3, #0
 4430 000a 04D0     		beq	.L299
4623:Source/tasks.c **** 		{
4624:Source/tasks.c **** 			( pxCurrentTCB->uxMutexesHeld )++;
 4431              		.loc 1 4624 0
 4432 000c 054B     		ldr	r3, .L301
 4433 000e 1B68     		ldr	r3, [r3]
 4434 0010 5A6C     		ldr	r2, [r3, #68]
 4435 0012 0132     		adds	r2, r2, #1
 4436 0014 5A64     		str	r2, [r3, #68]
 4437              	.L299:
4625:Source/tasks.c **** 		}
4626:Source/tasks.c **** 
4627:Source/tasks.c **** 		return pxCurrentTCB;
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 165


 4438              		.loc 1 4627 0
 4439 0016 034B     		ldr	r3, .L301
 4440 0018 1B68     		ldr	r3, [r3]
4628:Source/tasks.c **** 	}
 4441              		.loc 1 4628 0
 4442 001a 1846     		mov	r0, r3
 4443 001c BD46     		mov	sp, r7
 4444              		.cfi_def_cfa_register 13
 4445              		@ sp needed
 4446 001e 80BC     		pop	{r7}
 4447              		.cfi_restore 7
 4448              		.cfi_def_cfa_offset 0
 4449 0020 7047     		bx	lr
 4450              	.L302:
 4451 0022 00BF     		.align	2
 4452              	.L301:
 4453 0024 00000000 		.word	pxCurrentTCB
 4454              		.cfi_endproc
 4455              	.LFE113:
 4456              		.size	pvTaskIncrementMutexHeldCount, .-pvTaskIncrementMutexHeldCount
 4457              		.section	.text.ulTaskNotifyTake,"ax",%progbits
 4458              		.align	2
 4459              		.global	ulTaskNotifyTake
 4460              		.thumb
 4461              		.thumb_func
 4462              		.type	ulTaskNotifyTake, %function
 4463              	ulTaskNotifyTake:
 4464              	.LFB114:
4629:Source/tasks.c **** 
4630:Source/tasks.c **** #endif /* configUSE_MUTEXES */
4631:Source/tasks.c **** /*-----------------------------------------------------------*/
4632:Source/tasks.c **** 
4633:Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4634:Source/tasks.c **** 
4635:Source/tasks.c **** 	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
4636:Source/tasks.c **** 	{
 4465              		.loc 1 4636 0
 4466              		.cfi_startproc
 4467              		@ args = 0, pretend = 0, frame = 16
 4468              		@ frame_needed = 1, uses_anonymous_args = 0
 4469 0000 80B5     		push	{r7, lr}
 4470              		.cfi_def_cfa_offset 8
 4471              		.cfi_offset 7, -8
 4472              		.cfi_offset 14, -4
 4473 0002 84B0     		sub	sp, sp, #16
 4474              		.cfi_def_cfa_offset 24
 4475 0004 00AF     		add	r7, sp, #0
 4476              		.cfi_def_cfa_register 7
 4477 0006 7860     		str	r0, [r7, #4]
 4478 0008 3960     		str	r1, [r7]
4637:Source/tasks.c **** 	uint32_t ulReturn;
4638:Source/tasks.c **** 
4639:Source/tasks.c **** 		taskENTER_CRITICAL();
 4479              		.loc 1 4639 0
 4480 000a FFF7FEFF 		bl	vPortEnterCritical
4640:Source/tasks.c **** 		{
4641:Source/tasks.c **** 			/* Only block if the notification count is not already non-zero. */
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 166


4642:Source/tasks.c **** 			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 4481              		.loc 1 4642 0
 4482 000e 1E4B     		ldr	r3, .L309
 4483 0010 1B68     		ldr	r3, [r3]
 4484 0012 9B6C     		ldr	r3, [r3, #72]
 4485 0014 002B     		cmp	r3, #0
 4486 0016 13D1     		bne	.L304
4643:Source/tasks.c **** 			{
4644:Source/tasks.c **** 				/* Mark this task as waiting for a notification. */
4645:Source/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 4487              		.loc 1 4645 0
 4488 0018 1B4B     		ldr	r3, .L309
 4489 001a 1B68     		ldr	r3, [r3]
 4490 001c 0122     		movs	r2, #1
 4491 001e 83F84C20 		strb	r2, [r3, #76]
4646:Source/tasks.c **** 
4647:Source/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
 4492              		.loc 1 4647 0
 4493 0022 3B68     		ldr	r3, [r7]
 4494 0024 002B     		cmp	r3, #0
 4495 0026 0BD0     		beq	.L304
4648:Source/tasks.c **** 				{
4649:Source/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 4496              		.loc 1 4649 0
 4497 0028 0121     		movs	r1, #1
 4498 002a 3868     		ldr	r0, [r7]
 4499 002c FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
4650:Source/tasks.c **** 					traceTASK_NOTIFY_TAKE_BLOCK();
4651:Source/tasks.c **** 
4652:Source/tasks.c **** 					/* All ports are written to allow a yield in a critical
4653:Source/tasks.c **** 					section (some will yield immediately, others wait until the
4654:Source/tasks.c **** 					critical section exits) - but it is not something that
4655:Source/tasks.c **** 					application code should ever do. */
4656:Source/tasks.c **** 					portYIELD_WITHIN_API();
 4500              		.loc 1 4656 0
 4501 0030 164B     		ldr	r3, .L309+4
 4502 0032 4FF08052 		mov	r2, #268435456
 4503 0036 1A60     		str	r2, [r3]
 4504              		.syntax unified
 4505              	@ 4656 "Source\tasks.c" 1
 4506 0038 BFF34F8F 		dsb
 4507              	@ 0 "" 2
 4508              	@ 4656 "Source\tasks.c" 1
 4509 003c BFF36F8F 		isb
 4510              	@ 0 "" 2
 4511              		.thumb
 4512              		.syntax unified
 4513              	.L304:
4657:Source/tasks.c **** 				}
4658:Source/tasks.c **** 				else
4659:Source/tasks.c **** 				{
4660:Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4661:Source/tasks.c **** 				}
4662:Source/tasks.c **** 			}
4663:Source/tasks.c **** 			else
4664:Source/tasks.c **** 			{
4665:Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 167


4666:Source/tasks.c **** 			}
4667:Source/tasks.c **** 		}
4668:Source/tasks.c **** 		taskEXIT_CRITICAL();
 4514              		.loc 1 4668 0
 4515 0040 FFF7FEFF 		bl	vPortExitCritical
4669:Source/tasks.c **** 
4670:Source/tasks.c **** 		taskENTER_CRITICAL();
 4516              		.loc 1 4670 0
 4517 0044 FFF7FEFF 		bl	vPortEnterCritical
4671:Source/tasks.c **** 		{
4672:Source/tasks.c **** 			traceTASK_NOTIFY_TAKE();
4673:Source/tasks.c **** 			ulReturn = pxCurrentTCB->ulNotifiedValue;
 4518              		.loc 1 4673 0
 4519 0048 0F4B     		ldr	r3, .L309
 4520 004a 1B68     		ldr	r3, [r3]
 4521 004c 9B6C     		ldr	r3, [r3, #72]
 4522 004e FB60     		str	r3, [r7, #12]
4674:Source/tasks.c **** 
4675:Source/tasks.c **** 			if( ulReturn != 0UL )
 4523              		.loc 1 4675 0
 4524 0050 FB68     		ldr	r3, [r7, #12]
 4525 0052 002B     		cmp	r3, #0
 4526 0054 0CD0     		beq	.L305
4676:Source/tasks.c **** 			{
4677:Source/tasks.c **** 				if( xClearCountOnExit != pdFALSE )
 4527              		.loc 1 4677 0
 4528 0056 7B68     		ldr	r3, [r7, #4]
 4529 0058 002B     		cmp	r3, #0
 4530 005a 04D0     		beq	.L306
4678:Source/tasks.c **** 				{
4679:Source/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = 0UL;
 4531              		.loc 1 4679 0
 4532 005c 0A4B     		ldr	r3, .L309
 4533 005e 1B68     		ldr	r3, [r3]
 4534 0060 0022     		movs	r2, #0
 4535 0062 9A64     		str	r2, [r3, #72]
 4536 0064 04E0     		b	.L305
 4537              	.L306:
4680:Source/tasks.c **** 				}
4681:Source/tasks.c **** 				else
4682:Source/tasks.c **** 				{
4683:Source/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 4538              		.loc 1 4683 0
 4539 0066 084B     		ldr	r3, .L309
 4540 0068 1B68     		ldr	r3, [r3]
 4541 006a FA68     		ldr	r2, [r7, #12]
 4542 006c 013A     		subs	r2, r2, #1
 4543 006e 9A64     		str	r2, [r3, #72]
 4544              	.L305:
4684:Source/tasks.c **** 				}
4685:Source/tasks.c **** 			}
4686:Source/tasks.c **** 			else
4687:Source/tasks.c **** 			{
4688:Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4689:Source/tasks.c **** 			}
4690:Source/tasks.c **** 
4691:Source/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 168


 4545              		.loc 1 4691 0
 4546 0070 054B     		ldr	r3, .L309
 4547 0072 1B68     		ldr	r3, [r3]
 4548 0074 0022     		movs	r2, #0
 4549 0076 83F84C20 		strb	r2, [r3, #76]
4692:Source/tasks.c **** 		}
4693:Source/tasks.c **** 		taskEXIT_CRITICAL();
 4550              		.loc 1 4693 0
 4551 007a FFF7FEFF 		bl	vPortExitCritical
4694:Source/tasks.c **** 
4695:Source/tasks.c **** 		return ulReturn;
 4552              		.loc 1 4695 0
 4553 007e FB68     		ldr	r3, [r7, #12]
4696:Source/tasks.c **** 	}
 4554              		.loc 1 4696 0
 4555 0080 1846     		mov	r0, r3
 4556 0082 1037     		adds	r7, r7, #16
 4557              		.cfi_def_cfa_offset 8
 4558 0084 BD46     		mov	sp, r7
 4559              		.cfi_def_cfa_register 13
 4560              		@ sp needed
 4561 0086 80BD     		pop	{r7, pc}
 4562              	.L310:
 4563              		.align	2
 4564              	.L309:
 4565 0088 00000000 		.word	pxCurrentTCB
 4566 008c 04ED00E0 		.word	-536810236
 4567              		.cfi_endproc
 4568              	.LFE114:
 4569              		.size	ulTaskNotifyTake, .-ulTaskNotifyTake
 4570              		.section	.text.xTaskNotifyWait,"ax",%progbits
 4571              		.align	2
 4572              		.global	xTaskNotifyWait
 4573              		.thumb
 4574              		.thumb_func
 4575              		.type	xTaskNotifyWait, %function
 4576              	xTaskNotifyWait:
 4577              	.LFB115:
4697:Source/tasks.c **** 
4698:Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4699:Source/tasks.c **** /*-----------------------------------------------------------*/
4700:Source/tasks.c **** 
4701:Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4702:Source/tasks.c **** 
4703:Source/tasks.c **** 	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t 
4704:Source/tasks.c **** 	{
 4578              		.loc 1 4704 0
 4579              		.cfi_startproc
 4580              		@ args = 0, pretend = 0, frame = 24
 4581              		@ frame_needed = 1, uses_anonymous_args = 0
 4582 0000 80B5     		push	{r7, lr}
 4583              		.cfi_def_cfa_offset 8
 4584              		.cfi_offset 7, -8
 4585              		.cfi_offset 14, -4
 4586 0002 86B0     		sub	sp, sp, #24
 4587              		.cfi_def_cfa_offset 32
 4588 0004 00AF     		add	r7, sp, #0
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 169


 4589              		.cfi_def_cfa_register 7
 4590 0006 F860     		str	r0, [r7, #12]
 4591 0008 B960     		str	r1, [r7, #8]
 4592 000a 7A60     		str	r2, [r7, #4]
 4593 000c 3B60     		str	r3, [r7]
4705:Source/tasks.c **** 	BaseType_t xReturn;
4706:Source/tasks.c **** 
4707:Source/tasks.c **** 		taskENTER_CRITICAL();
 4594              		.loc 1 4707 0
 4595 000e FFF7FEFF 		bl	vPortEnterCritical
4708:Source/tasks.c **** 		{
4709:Source/tasks.c **** 			/* Only block if a notification is not already pending. */
4710:Source/tasks.c **** 			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 4596              		.loc 1 4710 0
 4597 0012 264B     		ldr	r3, .L317
 4598 0014 1B68     		ldr	r3, [r3]
 4599 0016 93F84C30 		ldrb	r3, [r3, #76]
 4600 001a DBB2     		uxtb	r3, r3
 4601 001c 022B     		cmp	r3, #2
 4602 001e 1AD0     		beq	.L312
4711:Source/tasks.c **** 			{
4712:Source/tasks.c **** 				/* Clear bits in the task's notification value as bits may get
4713:Source/tasks.c **** 				set	by the notifying task or interrupt.  This can be used to
4714:Source/tasks.c **** 				clear the value to zero. */
4715:Source/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 4603              		.loc 1 4715 0
 4604 0020 224B     		ldr	r3, .L317
 4605 0022 1B68     		ldr	r3, [r3]
 4606 0024 996C     		ldr	r1, [r3, #72]
 4607 0026 FA68     		ldr	r2, [r7, #12]
 4608 0028 D243     		mvns	r2, r2
 4609 002a 0A40     		ands	r2, r2, r1
 4610 002c 9A64     		str	r2, [r3, #72]
4716:Source/tasks.c **** 
4717:Source/tasks.c **** 				/* Mark this task as waiting for a notification. */
4718:Source/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 4611              		.loc 1 4718 0
 4612 002e 1F4B     		ldr	r3, .L317
 4613 0030 1B68     		ldr	r3, [r3]
 4614 0032 0122     		movs	r2, #1
 4615 0034 83F84C20 		strb	r2, [r3, #76]
4719:Source/tasks.c **** 
4720:Source/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
 4616              		.loc 1 4720 0
 4617 0038 3B68     		ldr	r3, [r7]
 4618 003a 002B     		cmp	r3, #0
 4619 003c 0BD0     		beq	.L312
4721:Source/tasks.c **** 				{
4722:Source/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 4620              		.loc 1 4722 0
 4621 003e 0121     		movs	r1, #1
 4622 0040 3868     		ldr	r0, [r7]
 4623 0042 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
4723:Source/tasks.c **** 					traceTASK_NOTIFY_WAIT_BLOCK();
4724:Source/tasks.c **** 
4725:Source/tasks.c **** 					/* All ports are written to allow a yield in a critical
4726:Source/tasks.c **** 					section (some will yield immediately, others wait until the
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 170


4727:Source/tasks.c **** 					critical section exits) - but it is not something that
4728:Source/tasks.c **** 					application code should ever do. */
4729:Source/tasks.c **** 					portYIELD_WITHIN_API();
 4624              		.loc 1 4729 0
 4625 0046 1A4B     		ldr	r3, .L317+4
 4626 0048 4FF08052 		mov	r2, #268435456
 4627 004c 1A60     		str	r2, [r3]
 4628              		.syntax unified
 4629              	@ 4729 "Source\tasks.c" 1
 4630 004e BFF34F8F 		dsb
 4631              	@ 0 "" 2
 4632              	@ 4729 "Source\tasks.c" 1
 4633 0052 BFF36F8F 		isb
 4634              	@ 0 "" 2
 4635              		.thumb
 4636              		.syntax unified
 4637              	.L312:
4730:Source/tasks.c **** 				}
4731:Source/tasks.c **** 				else
4732:Source/tasks.c **** 				{
4733:Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4734:Source/tasks.c **** 				}
4735:Source/tasks.c **** 			}
4736:Source/tasks.c **** 			else
4737:Source/tasks.c **** 			{
4738:Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4739:Source/tasks.c **** 			}
4740:Source/tasks.c **** 		}
4741:Source/tasks.c **** 		taskEXIT_CRITICAL();
 4638              		.loc 1 4741 0
 4639 0056 FFF7FEFF 		bl	vPortExitCritical
4742:Source/tasks.c **** 
4743:Source/tasks.c **** 		taskENTER_CRITICAL();
 4640              		.loc 1 4743 0
 4641 005a FFF7FEFF 		bl	vPortEnterCritical
4744:Source/tasks.c **** 		{
4745:Source/tasks.c **** 			traceTASK_NOTIFY_WAIT();
4746:Source/tasks.c **** 
4747:Source/tasks.c **** 			if( pulNotificationValue != NULL )
 4642              		.loc 1 4747 0
 4643 005e 7B68     		ldr	r3, [r7, #4]
 4644 0060 002B     		cmp	r3, #0
 4645 0062 04D0     		beq	.L313
4748:Source/tasks.c **** 			{
4749:Source/tasks.c **** 				/* Output the current notification value, which may or may not
4750:Source/tasks.c **** 				have changed. */
4751:Source/tasks.c **** 				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 4646              		.loc 1 4751 0
 4647 0064 114B     		ldr	r3, .L317
 4648 0066 1B68     		ldr	r3, [r3]
 4649 0068 9A6C     		ldr	r2, [r3, #72]
 4650 006a 7B68     		ldr	r3, [r7, #4]
 4651 006c 1A60     		str	r2, [r3]
 4652              	.L313:
4752:Source/tasks.c **** 			}
4753:Source/tasks.c **** 
4754:Source/tasks.c **** 			/* If ucNotifyValue is set then either the task never entered the
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 171


4755:Source/tasks.c **** 			blocked state (because a notification was already pending) or the
4756:Source/tasks.c **** 			task unblocked because of a notification.  Otherwise the task
4757:Source/tasks.c **** 			unblocked because of a timeout. */
4758:Source/tasks.c **** 			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 4653              		.loc 1 4758 0
 4654 006e 0F4B     		ldr	r3, .L317
 4655 0070 1B68     		ldr	r3, [r3]
 4656 0072 93F84C30 		ldrb	r3, [r3, #76]
 4657 0076 DBB2     		uxtb	r3, r3
 4658 0078 022B     		cmp	r3, #2
 4659 007a 02D0     		beq	.L314
4759:Source/tasks.c **** 			{
4760:Source/tasks.c **** 				/* A notification was not received. */
4761:Source/tasks.c **** 				xReturn = pdFALSE;
 4660              		.loc 1 4761 0
 4661 007c 0023     		movs	r3, #0
 4662 007e 7B61     		str	r3, [r7, #20]
 4663 0080 08E0     		b	.L315
 4664              	.L314:
4762:Source/tasks.c **** 			}
4763:Source/tasks.c **** 			else
4764:Source/tasks.c **** 			{
4765:Source/tasks.c **** 				/* A notification was already pending or a notification was
4766:Source/tasks.c **** 				received while the task was waiting. */
4767:Source/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 4665              		.loc 1 4767 0
 4666 0082 0A4B     		ldr	r3, .L317
 4667 0084 1B68     		ldr	r3, [r3]
 4668 0086 996C     		ldr	r1, [r3, #72]
 4669 0088 BA68     		ldr	r2, [r7, #8]
 4670 008a D243     		mvns	r2, r2
 4671 008c 0A40     		ands	r2, r2, r1
 4672 008e 9A64     		str	r2, [r3, #72]
4768:Source/tasks.c **** 				xReturn = pdTRUE;
 4673              		.loc 1 4768 0
 4674 0090 0123     		movs	r3, #1
 4675 0092 7B61     		str	r3, [r7, #20]
 4676              	.L315:
4769:Source/tasks.c **** 			}
4770:Source/tasks.c **** 
4771:Source/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 4677              		.loc 1 4771 0
 4678 0094 054B     		ldr	r3, .L317
 4679 0096 1B68     		ldr	r3, [r3]
 4680 0098 0022     		movs	r2, #0
 4681 009a 83F84C20 		strb	r2, [r3, #76]
4772:Source/tasks.c **** 		}
4773:Source/tasks.c **** 		taskEXIT_CRITICAL();
 4682              		.loc 1 4773 0
 4683 009e FFF7FEFF 		bl	vPortExitCritical
4774:Source/tasks.c **** 
4775:Source/tasks.c **** 		return xReturn;
 4684              		.loc 1 4775 0
 4685 00a2 7B69     		ldr	r3, [r7, #20]
4776:Source/tasks.c **** 	}
 4686              		.loc 1 4776 0
 4687 00a4 1846     		mov	r0, r3
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 172


 4688 00a6 1837     		adds	r7, r7, #24
 4689              		.cfi_def_cfa_offset 8
 4690 00a8 BD46     		mov	sp, r7
 4691              		.cfi_def_cfa_register 13
 4692              		@ sp needed
 4693 00aa 80BD     		pop	{r7, pc}
 4694              	.L318:
 4695              		.align	2
 4696              	.L317:
 4697 00ac 00000000 		.word	pxCurrentTCB
 4698 00b0 04ED00E0 		.word	-536810236
 4699              		.cfi_endproc
 4700              	.LFE115:
 4701              		.size	xTaskNotifyWait, .-xTaskNotifyWait
 4702              		.section	.text.xTaskGenericNotify,"ax",%progbits
 4703              		.align	2
 4704              		.global	xTaskGenericNotify
 4705              		.thumb
 4706              		.thumb_func
 4707              		.type	xTaskGenericNotify, %function
 4708              	xTaskGenericNotify:
 4709              	.LFB116:
4777:Source/tasks.c **** 
4778:Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4779:Source/tasks.c **** /*-----------------------------------------------------------*/
4780:Source/tasks.c **** 
4781:Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4782:Source/tasks.c **** 
4783:Source/tasks.c **** 	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction
4784:Source/tasks.c **** 	{
 4710              		.loc 1 4784 0
 4711              		.cfi_startproc
 4712              		@ args = 0, pretend = 0, frame = 32
 4713              		@ frame_needed = 1, uses_anonymous_args = 0
 4714 0000 80B5     		push	{r7, lr}
 4715              		.cfi_def_cfa_offset 8
 4716              		.cfi_offset 7, -8
 4717              		.cfi_offset 14, -4
 4718 0002 88B0     		sub	sp, sp, #32
 4719              		.cfi_def_cfa_offset 40
 4720 0004 00AF     		add	r7, sp, #0
 4721              		.cfi_def_cfa_register 7
 4722 0006 F860     		str	r0, [r7, #12]
 4723 0008 B960     		str	r1, [r7, #8]
 4724 000a 3B60     		str	r3, [r7]
 4725 000c 1346     		mov	r3, r2
 4726 000e FB71     		strb	r3, [r7, #7]
4785:Source/tasks.c **** 	TCB_t * pxTCB;
4786:Source/tasks.c **** 	BaseType_t xReturn = pdPASS;
 4727              		.loc 1 4786 0
 4728 0010 0123     		movs	r3, #1
 4729 0012 FB61     		str	r3, [r7, #28]
4787:Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4788:Source/tasks.c **** 
4789:Source/tasks.c **** 		configASSERT( xTaskToNotify );
4790:Source/tasks.c **** 		pxTCB = xTaskToNotify;
 4730              		.loc 1 4790 0
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 173


 4731 0014 FB68     		ldr	r3, [r7, #12]
 4732 0016 BB61     		str	r3, [r7, #24]
4791:Source/tasks.c **** 
4792:Source/tasks.c **** 		taskENTER_CRITICAL();
 4733              		.loc 1 4792 0
 4734 0018 FFF7FEFF 		bl	vPortEnterCritical
4793:Source/tasks.c **** 		{
4794:Source/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
 4735              		.loc 1 4794 0
 4736 001c 3B68     		ldr	r3, [r7]
 4737 001e 002B     		cmp	r3, #0
 4738 0020 03D0     		beq	.L320
4795:Source/tasks.c **** 			{
4796:Source/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 4739              		.loc 1 4796 0
 4740 0022 BB69     		ldr	r3, [r7, #24]
 4741 0024 9A6C     		ldr	r2, [r3, #72]
 4742 0026 3B68     		ldr	r3, [r7]
 4743 0028 1A60     		str	r2, [r3]
 4744              	.L320:
4797:Source/tasks.c **** 			}
4798:Source/tasks.c **** 
4799:Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
 4745              		.loc 1 4799 0
 4746 002a BB69     		ldr	r3, [r7, #24]
 4747 002c 93F84C30 		ldrb	r3, [r3, #76]
 4748 0030 FB75     		strb	r3, [r7, #23]
4800:Source/tasks.c **** 
4801:Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 4749              		.loc 1 4801 0
 4750 0032 BB69     		ldr	r3, [r7, #24]
 4751 0034 0222     		movs	r2, #2
 4752 0036 83F84C20 		strb	r2, [r3, #76]
4802:Source/tasks.c **** 
4803:Source/tasks.c **** 			switch( eAction )
 4753              		.loc 1 4803 0
 4754 003a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4755 003c 042B     		cmp	r3, #4
 4756 003e 28D8     		bhi	.L333
 4757 0040 01A2     		adr	r2, .L323
 4758 0042 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 4759 0046 00BF     		.p2align 2
 4760              	.L323:
 4761 0048 93000000 		.word	.L333+1
 4762 004c 5D000000 		.word	.L324+1
 4763 0050 6B000000 		.word	.L325+1
 4764 0054 77000000 		.word	.L326+1
 4765 0058 7F000000 		.word	.L327+1
 4766              		.p2align 1
 4767              	.L324:
4804:Source/tasks.c **** 			{
4805:Source/tasks.c **** 				case eSetBits	:
4806:Source/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
 4768              		.loc 1 4806 0
 4769 005c BB69     		ldr	r3, [r7, #24]
 4770 005e 9A6C     		ldr	r2, [r3, #72]
 4771 0060 BB68     		ldr	r3, [r7, #8]
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 174


 4772 0062 1A43     		orrs	r2, r2, r3
 4773 0064 BB69     		ldr	r3, [r7, #24]
 4774 0066 9A64     		str	r2, [r3, #72]
4807:Source/tasks.c **** 					break;
 4775              		.loc 1 4807 0
 4776 0068 14E0     		b	.L328
 4777              	.L325:
4808:Source/tasks.c **** 
4809:Source/tasks.c **** 				case eIncrement	:
4810:Source/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
 4778              		.loc 1 4810 0
 4779 006a BB69     		ldr	r3, [r7, #24]
 4780 006c 9B6C     		ldr	r3, [r3, #72]
 4781 006e 5A1C     		adds	r2, r3, #1
 4782 0070 BB69     		ldr	r3, [r7, #24]
 4783 0072 9A64     		str	r2, [r3, #72]
4811:Source/tasks.c **** 					break;
 4784              		.loc 1 4811 0
 4785 0074 0EE0     		b	.L328
 4786              	.L326:
4812:Source/tasks.c **** 
4813:Source/tasks.c **** 				case eSetValueWithOverwrite	:
4814:Source/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
 4787              		.loc 1 4814 0
 4788 0076 BB69     		ldr	r3, [r7, #24]
 4789 0078 BA68     		ldr	r2, [r7, #8]
 4790 007a 9A64     		str	r2, [r3, #72]
4815:Source/tasks.c **** 					break;
 4791              		.loc 1 4815 0
 4792 007c 0AE0     		b	.L328
 4793              	.L327:
4816:Source/tasks.c **** 
4817:Source/tasks.c **** 				case eSetValueWithoutOverwrite :
4818:Source/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 4794              		.loc 1 4818 0
 4795 007e FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 4796 0080 022B     		cmp	r3, #2
 4797 0082 03D0     		beq	.L329
4819:Source/tasks.c **** 					{
4820:Source/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
 4798              		.loc 1 4820 0
 4799 0084 BB69     		ldr	r3, [r7, #24]
 4800 0086 BA68     		ldr	r2, [r7, #8]
 4801 0088 9A64     		str	r2, [r3, #72]
4821:Source/tasks.c **** 					}
4822:Source/tasks.c **** 					else
4823:Source/tasks.c **** 					{
4824:Source/tasks.c **** 						/* The value could not be written to the task. */
4825:Source/tasks.c **** 						xReturn = pdFAIL;
4826:Source/tasks.c **** 					}
4827:Source/tasks.c **** 					break;
 4802              		.loc 1 4827 0
 4803 008a 03E0     		b	.L328
 4804              	.L329:
4825:Source/tasks.c **** 					}
 4805              		.loc 1 4825 0
 4806 008c 0023     		movs	r3, #0
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 175


 4807 008e FB61     		str	r3, [r7, #28]
 4808              		.loc 1 4827 0
 4809 0090 00E0     		b	.L328
 4810              	.L333:
4828:Source/tasks.c **** 
4829:Source/tasks.c **** 				case eNoAction:
4830:Source/tasks.c **** 					/* The task is being notified without its notify value being
4831:Source/tasks.c **** 					updated. */
4832:Source/tasks.c **** 					break;
4833:Source/tasks.c **** 
4834:Source/tasks.c **** 				default:
4835:Source/tasks.c **** 					/* Should not get here if all enums are handled.
4836:Source/tasks.c **** 					Artificially force an assert by testing a value the
4837:Source/tasks.c **** 					compiler can't assume is const. */
4838:Source/tasks.c **** 					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
4839:Source/tasks.c **** 
4840:Source/tasks.c **** 					break;
 4811              		.loc 1 4840 0
 4812 0092 00BF     		nop
 4813              	.L328:
4841:Source/tasks.c **** 			}
4842:Source/tasks.c **** 
4843:Source/tasks.c **** 			traceTASK_NOTIFY();
4844:Source/tasks.c **** 
4845:Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4846:Source/tasks.c **** 			notification then unblock it now. */
4847:Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 4814              		.loc 1 4847 0
 4815 0094 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 4816 0096 012B     		cmp	r3, #1
 4817 0098 2AD1     		bne	.L331
4848:Source/tasks.c **** 			{
4849:Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 4818              		.loc 1 4849 0
 4819 009a BB69     		ldr	r3, [r7, #24]
 4820 009c 0433     		adds	r3, r3, #4
 4821 009e 1846     		mov	r0, r3
 4822 00a0 FFF7FEFF 		bl	uxListRemove
4850:Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
 4823              		.loc 1 4850 0
 4824 00a4 BB69     		ldr	r3, [r7, #24]
 4825 00a6 DB6A     		ldr	r3, [r3, #44]
 4826 00a8 0122     		movs	r2, #1
 4827 00aa 9A40     		lsls	r2, r2, r3
 4828 00ac 144B     		ldr	r3, .L334
 4829 00ae 1B68     		ldr	r3, [r3]
 4830 00b0 1343     		orrs	r3, r3, r2
 4831 00b2 134A     		ldr	r2, .L334
 4832 00b4 1360     		str	r3, [r2]
 4833 00b6 BB69     		ldr	r3, [r7, #24]
 4834 00b8 DA6A     		ldr	r2, [r3, #44]
 4835 00ba 1346     		mov	r3, r2
 4836 00bc 9B00     		lsls	r3, r3, #2
 4837 00be 1344     		add	r3, r3, r2
 4838 00c0 9B00     		lsls	r3, r3, #2
 4839 00c2 104A     		ldr	r2, .L334+4
 4840 00c4 1A44     		add	r2, r2, r3
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 176


 4841 00c6 BB69     		ldr	r3, [r7, #24]
 4842 00c8 0433     		adds	r3, r3, #4
 4843 00ca 1946     		mov	r1, r3
 4844 00cc 1046     		mov	r0, r2
 4845 00ce FFF7FEFF 		bl	vListInsertEnd
4851:Source/tasks.c **** 
4852:Source/tasks.c **** 				/* The task should not have been on an event list. */
4853:Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4854:Source/tasks.c **** 
4855:Source/tasks.c **** 				#if( configUSE_TICKLESS_IDLE != 0 )
4856:Source/tasks.c **** 				{
4857:Source/tasks.c **** 					/* If a task is blocked waiting for a notification then
4858:Source/tasks.c **** 					xNextTaskUnblockTime might be set to the blocked task's time
4859:Source/tasks.c **** 					out time.  If the task is unblocked for a reason other than
4860:Source/tasks.c **** 					a timeout xNextTaskUnblockTime is normally left unchanged,
4861:Source/tasks.c **** 					because it will automatically get reset to a new value when
4862:Source/tasks.c **** 					the tick count equals xNextTaskUnblockTime.  However if
4863:Source/tasks.c **** 					tickless idling is used it might be more important to enter
4864:Source/tasks.c **** 					sleep mode at the earliest possible time - so reset
4865:Source/tasks.c **** 					xNextTaskUnblockTime here to ensure it is updated at the
4866:Source/tasks.c **** 					earliest possible time. */
4867:Source/tasks.c **** 					prvResetNextTaskUnblockTime();
4868:Source/tasks.c **** 				}
4869:Source/tasks.c **** 				#endif
4870:Source/tasks.c **** 
4871:Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 4846              		.loc 1 4871 0
 4847 00d2 BB69     		ldr	r3, [r7, #24]
 4848 00d4 DA6A     		ldr	r2, [r3, #44]
 4849 00d6 0C4B     		ldr	r3, .L334+8
 4850 00d8 1B68     		ldr	r3, [r3]
 4851 00da DB6A     		ldr	r3, [r3, #44]
 4852 00dc 9A42     		cmp	r2, r3
 4853 00de 07D9     		bls	.L331
4872:Source/tasks.c **** 				{
4873:Source/tasks.c **** 					/* The notified task has a priority above the currently
4874:Source/tasks.c **** 					executing task so a yield is required. */
4875:Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
 4854              		.loc 1 4875 0
 4855 00e0 0A4B     		ldr	r3, .L334+12
 4856 00e2 4FF08052 		mov	r2, #268435456
 4857 00e6 1A60     		str	r2, [r3]
 4858              		.syntax unified
 4859              	@ 4875 "Source\tasks.c" 1
 4860 00e8 BFF34F8F 		dsb
 4861              	@ 0 "" 2
 4862              	@ 4875 "Source\tasks.c" 1
 4863 00ec BFF36F8F 		isb
 4864              	@ 0 "" 2
 4865              		.thumb
 4866              		.syntax unified
 4867              	.L331:
4876:Source/tasks.c **** 				}
4877:Source/tasks.c **** 				else
4878:Source/tasks.c **** 				{
4879:Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4880:Source/tasks.c **** 				}
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 177


4881:Source/tasks.c **** 			}
4882:Source/tasks.c **** 			else
4883:Source/tasks.c **** 			{
4884:Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4885:Source/tasks.c **** 			}
4886:Source/tasks.c **** 		}
4887:Source/tasks.c **** 		taskEXIT_CRITICAL();
 4868              		.loc 1 4887 0
 4869 00f0 FFF7FEFF 		bl	vPortExitCritical
4888:Source/tasks.c **** 
4889:Source/tasks.c **** 		return xReturn;
 4870              		.loc 1 4889 0
 4871 00f4 FB69     		ldr	r3, [r7, #28]
4890:Source/tasks.c **** 	}
 4872              		.loc 1 4890 0
 4873 00f6 1846     		mov	r0, r3
 4874 00f8 2037     		adds	r7, r7, #32
 4875              		.cfi_def_cfa_offset 8
 4876 00fa BD46     		mov	sp, r7
 4877              		.cfi_def_cfa_register 13
 4878              		@ sp needed
 4879 00fc 80BD     		pop	{r7, pc}
 4880              	.L335:
 4881 00fe 00BF     		.align	2
 4882              	.L334:
 4883 0100 E0000000 		.word	uxTopReadyPriority
 4884 0104 04000000 		.word	pxReadyTasksLists
 4885 0108 00000000 		.word	pxCurrentTCB
 4886 010c 04ED00E0 		.word	-536810236
 4887              		.cfi_endproc
 4888              	.LFE116:
 4889              		.size	xTaskGenericNotify, .-xTaskGenericNotify
 4890              		.section	.text.xTaskGenericNotifyFromISR,"ax",%progbits
 4891              		.align	2
 4892              		.global	xTaskGenericNotifyFromISR
 4893              		.thumb
 4894              		.thumb_func
 4895              		.type	xTaskGenericNotifyFromISR, %function
 4896              	xTaskGenericNotifyFromISR:
 4897              	.LFB117:
4891:Source/tasks.c **** 
4892:Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4893:Source/tasks.c **** /*-----------------------------------------------------------*/
4894:Source/tasks.c **** 
4895:Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4896:Source/tasks.c **** 
4897:Source/tasks.c **** 	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction 
4898:Source/tasks.c **** 	{
 4898              		.loc 1 4898 0
 4899              		.cfi_startproc
 4900              		@ args = 4, pretend = 0, frame = 48
 4901              		@ frame_needed = 1, uses_anonymous_args = 0
 4902 0000 80B5     		push	{r7, lr}
 4903              		.cfi_def_cfa_offset 8
 4904              		.cfi_offset 7, -8
 4905              		.cfi_offset 14, -4
 4906 0002 8CB0     		sub	sp, sp, #48
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 178


 4907              		.cfi_def_cfa_offset 56
 4908 0004 00AF     		add	r7, sp, #0
 4909              		.cfi_def_cfa_register 7
 4910 0006 F860     		str	r0, [r7, #12]
 4911 0008 B960     		str	r1, [r7, #8]
 4912 000a 3B60     		str	r3, [r7]
 4913 000c 1346     		mov	r3, r2
 4914 000e FB71     		strb	r3, [r7, #7]
4899:Source/tasks.c **** 	TCB_t * pxTCB;
4900:Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4901:Source/tasks.c **** 	BaseType_t xReturn = pdPASS;
 4915              		.loc 1 4901 0
 4916 0010 0123     		movs	r3, #1
 4917 0012 FB62     		str	r3, [r7, #44]
4902:Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
4903:Source/tasks.c **** 
4904:Source/tasks.c **** 		configASSERT( xTaskToNotify );
4905:Source/tasks.c **** 
4906:Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
4907:Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
4908:Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
4909:Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
4910:Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4911:Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
4912:Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4913:Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
4914:Source/tasks.c **** 		been assigned a priority above the configured maximum system call
4915:Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
4916:Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
4917:Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
4918:Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
4919:Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
4920:Source/tasks.c **** 		provided on the following link:
4921:Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
4922:Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
4923:Source/tasks.c **** 
4924:Source/tasks.c **** 		pxTCB = xTaskToNotify;
 4918              		.loc 1 4924 0
 4919 0014 FB68     		ldr	r3, [r7, #12]
 4920 0016 BB62     		str	r3, [r7, #40]
 4921              	.LBB51:
 4922              	.LBB52:
 213:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	(
 4923              		.loc 2 213 0
 4924              		.syntax unified
 4925              	@ 213 ".\Source\portable\GCC\ARM_CM3/portmacro.h" 1
 4926 0018 EFF31182 			mrs r2, basepri											
 4927 001c 4FF0A003 		mov r3, #160												
 4928 0020 83F31188 		msr basepri, r3											
 4929 0024 BFF36F8F 		isb														
 4930 0028 BFF34F8F 		dsb														
 4931              	
 4932              	@ 0 "" 2
 4933              		.thumb
 4934              		.syntax unified
 4935 002c BA61     		str	r2, [r7, #24]
 4936 002e 7B61     		str	r3, [r7, #20]
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 179


 225:.\Source\portable\GCC\ARM_CM3/portmacro.h **** }
 4937              		.loc 2 225 0
 4938 0030 BB69     		ldr	r3, [r7, #24]
 4939              	.LBE52:
 4940              	.LBE51:
4925:Source/tasks.c **** 
4926:Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 4941              		.loc 1 4926 0
 4942 0032 3B62     		str	r3, [r7, #32]
4927:Source/tasks.c **** 		{
4928:Source/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
 4943              		.loc 1 4928 0
 4944 0034 3B68     		ldr	r3, [r7]
 4945 0036 002B     		cmp	r3, #0
 4946 0038 03D0     		beq	.L338
4929:Source/tasks.c **** 			{
4930:Source/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 4947              		.loc 1 4930 0
 4948 003a BB6A     		ldr	r3, [r7, #40]
 4949 003c 9A6C     		ldr	r2, [r3, #72]
 4950 003e 3B68     		ldr	r3, [r7]
 4951 0040 1A60     		str	r2, [r3]
 4952              	.L338:
4931:Source/tasks.c **** 			}
4932:Source/tasks.c **** 
4933:Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
 4953              		.loc 1 4933 0
 4954 0042 BB6A     		ldr	r3, [r7, #40]
 4955 0044 93F84C30 		ldrb	r3, [r3, #76]
 4956 0048 FB77     		strb	r3, [r7, #31]
4934:Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 4957              		.loc 1 4934 0
 4958 004a BB6A     		ldr	r3, [r7, #40]
 4959 004c 0222     		movs	r2, #2
 4960 004e 83F84C20 		strb	r2, [r3, #76]
4935:Source/tasks.c **** 
4936:Source/tasks.c **** 			switch( eAction )
 4961              		.loc 1 4936 0
 4962 0052 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4963 0054 042B     		cmp	r3, #4
 4964 0056 28D8     		bhi	.L354
 4965 0058 01A2     		adr	r2, .L341
 4966 005a 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 4967 005e 00BF     		.p2align 2
 4968              	.L341:
 4969 0060 AB000000 		.word	.L354+1
 4970 0064 75000000 		.word	.L342+1
 4971 0068 83000000 		.word	.L343+1
 4972 006c 8F000000 		.word	.L344+1
 4973 0070 97000000 		.word	.L345+1
 4974              		.p2align 1
 4975              	.L342:
4937:Source/tasks.c **** 			{
4938:Source/tasks.c **** 				case eSetBits	:
4939:Source/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
 4976              		.loc 1 4939 0
 4977 0074 BB6A     		ldr	r3, [r7, #40]
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 180


 4978 0076 9A6C     		ldr	r2, [r3, #72]
 4979 0078 BB68     		ldr	r3, [r7, #8]
 4980 007a 1A43     		orrs	r2, r2, r3
 4981 007c BB6A     		ldr	r3, [r7, #40]
 4982 007e 9A64     		str	r2, [r3, #72]
4940:Source/tasks.c **** 					break;
 4983              		.loc 1 4940 0
 4984 0080 14E0     		b	.L346
 4985              	.L343:
4941:Source/tasks.c **** 
4942:Source/tasks.c **** 				case eIncrement	:
4943:Source/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
 4986              		.loc 1 4943 0
 4987 0082 BB6A     		ldr	r3, [r7, #40]
 4988 0084 9B6C     		ldr	r3, [r3, #72]
 4989 0086 5A1C     		adds	r2, r3, #1
 4990 0088 BB6A     		ldr	r3, [r7, #40]
 4991 008a 9A64     		str	r2, [r3, #72]
4944:Source/tasks.c **** 					break;
 4992              		.loc 1 4944 0
 4993 008c 0EE0     		b	.L346
 4994              	.L344:
4945:Source/tasks.c **** 
4946:Source/tasks.c **** 				case eSetValueWithOverwrite	:
4947:Source/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
 4995              		.loc 1 4947 0
 4996 008e BB6A     		ldr	r3, [r7, #40]
 4997 0090 BA68     		ldr	r2, [r7, #8]
 4998 0092 9A64     		str	r2, [r3, #72]
4948:Source/tasks.c **** 					break;
 4999              		.loc 1 4948 0
 5000 0094 0AE0     		b	.L346
 5001              	.L345:
4949:Source/tasks.c **** 
4950:Source/tasks.c **** 				case eSetValueWithoutOverwrite :
4951:Source/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 5002              		.loc 1 4951 0
 5003 0096 FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 5004 0098 022B     		cmp	r3, #2
 5005 009a 03D0     		beq	.L347
4952:Source/tasks.c **** 					{
4953:Source/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
 5006              		.loc 1 4953 0
 5007 009c BB6A     		ldr	r3, [r7, #40]
 5008 009e BA68     		ldr	r2, [r7, #8]
 5009 00a0 9A64     		str	r2, [r3, #72]
4954:Source/tasks.c **** 					}
4955:Source/tasks.c **** 					else
4956:Source/tasks.c **** 					{
4957:Source/tasks.c **** 						/* The value could not be written to the task. */
4958:Source/tasks.c **** 						xReturn = pdFAIL;
4959:Source/tasks.c **** 					}
4960:Source/tasks.c **** 					break;
 5010              		.loc 1 4960 0
 5011 00a2 03E0     		b	.L346
 5012              	.L347:
4958:Source/tasks.c **** 					}
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 181


 5013              		.loc 1 4958 0
 5014 00a4 0023     		movs	r3, #0
 5015 00a6 FB62     		str	r3, [r7, #44]
 5016              		.loc 1 4960 0
 5017 00a8 00E0     		b	.L346
 5018              	.L354:
4961:Source/tasks.c **** 
4962:Source/tasks.c **** 				case eNoAction :
4963:Source/tasks.c **** 					/* The task is being notified without its notify value being
4964:Source/tasks.c **** 					updated. */
4965:Source/tasks.c **** 					break;
4966:Source/tasks.c **** 
4967:Source/tasks.c **** 				default:
4968:Source/tasks.c **** 					/* Should not get here if all enums are handled.
4969:Source/tasks.c **** 					Artificially force an assert by testing a value the
4970:Source/tasks.c **** 					compiler can't assume is const. */
4971:Source/tasks.c **** 					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
4972:Source/tasks.c **** 					break;
 5019              		.loc 1 4972 0
 5020 00aa 00BF     		nop
 5021              	.L346:
4973:Source/tasks.c **** 			}
4974:Source/tasks.c **** 
4975:Source/tasks.c **** 			traceTASK_NOTIFY_FROM_ISR();
4976:Source/tasks.c **** 
4977:Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4978:Source/tasks.c **** 			notification then unblock it now. */
4979:Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 5022              		.loc 1 4979 0
 5023 00ac FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 5024 00ae 012B     		cmp	r3, #1
 5025 00b0 36D1     		bne	.L349
4980:Source/tasks.c **** 			{
4981:Source/tasks.c **** 				/* The task should not have been on an event list. */
4982:Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4983:Source/tasks.c **** 
4984:Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 5026              		.loc 1 4984 0
 5027 00b2 204B     		ldr	r3, .L355
 5028 00b4 1B68     		ldr	r3, [r3]
 5029 00b6 002B     		cmp	r3, #0
 5030 00b8 1CD1     		bne	.L350
4985:Source/tasks.c **** 				{
4986:Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 5031              		.loc 1 4986 0
 5032 00ba BB6A     		ldr	r3, [r7, #40]
 5033 00bc 0433     		adds	r3, r3, #4
 5034 00be 1846     		mov	r0, r3
 5035 00c0 FFF7FEFF 		bl	uxListRemove
4987:Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 5036              		.loc 1 4987 0
 5037 00c4 BB6A     		ldr	r3, [r7, #40]
 5038 00c6 DB6A     		ldr	r3, [r3, #44]
 5039 00c8 0122     		movs	r2, #1
 5040 00ca 9A40     		lsls	r2, r2, r3
 5041 00cc 1A4B     		ldr	r3, .L355+4
 5042 00ce 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 182


 5043 00d0 1343     		orrs	r3, r3, r2
 5044 00d2 194A     		ldr	r2, .L355+4
 5045 00d4 1360     		str	r3, [r2]
 5046 00d6 BB6A     		ldr	r3, [r7, #40]
 5047 00d8 DA6A     		ldr	r2, [r3, #44]
 5048 00da 1346     		mov	r3, r2
 5049 00dc 9B00     		lsls	r3, r3, #2
 5050 00de 1344     		add	r3, r3, r2
 5051 00e0 9B00     		lsls	r3, r3, #2
 5052 00e2 164A     		ldr	r2, .L355+8
 5053 00e4 1A44     		add	r2, r2, r3
 5054 00e6 BB6A     		ldr	r3, [r7, #40]
 5055 00e8 0433     		adds	r3, r3, #4
 5056 00ea 1946     		mov	r1, r3
 5057 00ec 1046     		mov	r0, r2
 5058 00ee FFF7FEFF 		bl	vListInsertEnd
 5059 00f2 05E0     		b	.L351
 5060              	.L350:
4988:Source/tasks.c **** 				}
4989:Source/tasks.c **** 				else
4990:Source/tasks.c **** 				{
4991:Source/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
4992:Source/tasks.c **** 					this task pending until the scheduler is resumed. */
4993:Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 5061              		.loc 1 4993 0
 5062 00f4 BB6A     		ldr	r3, [r7, #40]
 5063 00f6 1833     		adds	r3, r3, #24
 5064 00f8 1946     		mov	r1, r3
 5065 00fa 1148     		ldr	r0, .L355+12
 5066 00fc FFF7FEFF 		bl	vListInsertEnd
 5067              	.L351:
4994:Source/tasks.c **** 				}
4995:Source/tasks.c **** 
4996:Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 5068              		.loc 1 4996 0
 5069 0100 BB6A     		ldr	r3, [r7, #40]
 5070 0102 DA6A     		ldr	r2, [r3, #44]
 5071 0104 0F4B     		ldr	r3, .L355+16
 5072 0106 1B68     		ldr	r3, [r3]
 5073 0108 DB6A     		ldr	r3, [r3, #44]
 5074 010a 9A42     		cmp	r2, r3
 5075 010c 08D9     		bls	.L349
4997:Source/tasks.c **** 				{
4998:Source/tasks.c **** 					/* The notified task has a priority above the currently
4999:Source/tasks.c **** 					executing task so a yield is required. */
5000:Source/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
 5076              		.loc 1 5000 0
 5077 010e BB6B     		ldr	r3, [r7, #56]
 5078 0110 002B     		cmp	r3, #0
 5079 0112 02D0     		beq	.L352
5001:Source/tasks.c **** 					{
5002:Source/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
 5080              		.loc 1 5002 0
 5081 0114 BB6B     		ldr	r3, [r7, #56]
 5082 0116 0122     		movs	r2, #1
 5083 0118 1A60     		str	r2, [r3]
 5084              	.L352:
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 183


5003:Source/tasks.c **** 					}
5004:Source/tasks.c **** 
5005:Source/tasks.c **** 					/* Mark that a yield is pending in case the user is not
5006:Source/tasks.c **** 					using the "xHigherPriorityTaskWoken" parameter to an ISR
5007:Source/tasks.c **** 					safe FreeRTOS function. */
5008:Source/tasks.c **** 					xYieldPending = pdTRUE;
 5085              		.loc 1 5008 0
 5086 011a 0B4B     		ldr	r3, .L355+20
 5087 011c 0122     		movs	r2, #1
 5088 011e 1A60     		str	r2, [r3]
 5089              	.L349:
 5090 0120 3B6A     		ldr	r3, [r7, #32]
 5091 0122 7B62     		str	r3, [r7, #36]
 5092              	.LBB53:
 5093              	.LBB54:
 5094              		.loc 2 231 0
 5095 0124 7B6A     		ldr	r3, [r7, #36]
 5096              		.syntax unified
 5097              	@ 231 ".\Source\portable\GCC\ARM_CM3/portmacro.h" 1
 5098 0126 83F31188 			msr basepri, r3	
 5099              	@ 0 "" 2
 5100              		.thumb
 5101              		.syntax unified
 5102              	.LBE54:
 5103              	.LBE53:
5009:Source/tasks.c **** 				}
5010:Source/tasks.c **** 				else
5011:Source/tasks.c **** 				{
5012:Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
5013:Source/tasks.c **** 				}
5014:Source/tasks.c **** 			}
5015:Source/tasks.c **** 		}
5016:Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
5017:Source/tasks.c **** 
5018:Source/tasks.c **** 		return xReturn;
 5104              		.loc 1 5018 0
 5105 012a FB6A     		ldr	r3, [r7, #44]
5019:Source/tasks.c **** 	}
 5106              		.loc 1 5019 0
 5107 012c 1846     		mov	r0, r3
 5108 012e 3037     		adds	r7, r7, #48
 5109              		.cfi_def_cfa_offset 8
 5110 0130 BD46     		mov	sp, r7
 5111              		.cfi_def_cfa_register 13
 5112              		@ sp needed
 5113 0132 80BD     		pop	{r7, pc}
 5114              	.L356:
 5115              		.align	2
 5116              	.L355:
 5117 0134 00010000 		.word	uxSchedulerSuspended
 5118 0138 E0000000 		.word	uxTopReadyPriority
 5119 013c 04000000 		.word	pxReadyTasksLists
 5120 0140 98000000 		.word	xPendingReadyList
 5121 0144 00000000 		.word	pxCurrentTCB
 5122 0148 EC000000 		.word	xYieldPending
 5123              		.cfi_endproc
 5124              	.LFE117:
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 184


 5125              		.size	xTaskGenericNotifyFromISR, .-xTaskGenericNotifyFromISR
 5126              		.section	.text.vTaskNotifyGiveFromISR,"ax",%progbits
 5127              		.align	2
 5128              		.global	vTaskNotifyGiveFromISR
 5129              		.thumb
 5130              		.thumb_func
 5131              		.type	vTaskNotifyGiveFromISR, %function
 5132              	vTaskNotifyGiveFromISR:
 5133              	.LFB118:
5020:Source/tasks.c **** 
5021:Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5022:Source/tasks.c **** /*-----------------------------------------------------------*/
5023:Source/tasks.c **** 
5024:Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
5025:Source/tasks.c **** 
5026:Source/tasks.c **** 	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
5027:Source/tasks.c **** 	{
 5134              		.loc 1 5027 0
 5135              		.cfi_startproc
 5136              		@ args = 0, pretend = 0, frame = 32
 5137              		@ frame_needed = 1, uses_anonymous_args = 0
 5138 0000 80B5     		push	{r7, lr}
 5139              		.cfi_def_cfa_offset 8
 5140              		.cfi_offset 7, -8
 5141              		.cfi_offset 14, -4
 5142 0002 88B0     		sub	sp, sp, #32
 5143              		.cfi_def_cfa_offset 40
 5144 0004 00AF     		add	r7, sp, #0
 5145              		.cfi_def_cfa_register 7
 5146 0006 7860     		str	r0, [r7, #4]
 5147 0008 3960     		str	r1, [r7]
5028:Source/tasks.c **** 	TCB_t * pxTCB;
5029:Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
5030:Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
5031:Source/tasks.c **** 
5032:Source/tasks.c **** 		configASSERT( xTaskToNotify );
5033:Source/tasks.c **** 
5034:Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
5035:Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
5036:Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
5037:Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
5038:Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
5039:Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
5040:Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
5041:Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
5042:Source/tasks.c **** 		been assigned a priority above the configured maximum system call
5043:Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
5044:Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
5045:Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
5046:Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
5047:Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
5048:Source/tasks.c **** 		provided on the following link:
5049:Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
5050:Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
5051:Source/tasks.c **** 
5052:Source/tasks.c **** 		pxTCB = xTaskToNotify;
 5148              		.loc 1 5052 0
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 185


 5149 000a 7B68     		ldr	r3, [r7, #4]
 5150 000c FB61     		str	r3, [r7, #28]
 5151              	.LBB55:
 5152              	.LBB56:
 213:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	(
 5153              		.loc 2 213 0
 5154              		.syntax unified
 5155              	@ 213 ".\Source\portable\GCC\ARM_CM3/portmacro.h" 1
 5156 000e EFF31182 			mrs r2, basepri											
 5157 0012 4FF0A003 		mov r3, #160												
 5158 0016 83F31188 		msr basepri, r3											
 5159 001a BFF36F8F 		isb														
 5160 001e BFF34F8F 		dsb														
 5161              	
 5162              	@ 0 "" 2
 5163              		.thumb
 5164              		.syntax unified
 5165 0022 FA60     		str	r2, [r7, #12]
 5166 0024 BB60     		str	r3, [r7, #8]
 225:.\Source\portable\GCC\ARM_CM3/portmacro.h **** }
 5167              		.loc 2 225 0
 5168 0026 FB68     		ldr	r3, [r7, #12]
 5169              	.LBE56:
 5170              	.LBE55:
5053:Source/tasks.c **** 
5054:Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 5171              		.loc 1 5054 0
 5172 0028 7B61     		str	r3, [r7, #20]
5055:Source/tasks.c **** 		{
5056:Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
 5173              		.loc 1 5056 0
 5174 002a FB69     		ldr	r3, [r7, #28]
 5175 002c 93F84C30 		ldrb	r3, [r3, #76]
 5176 0030 FB74     		strb	r3, [r7, #19]
5057:Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 5177              		.loc 1 5057 0
 5178 0032 FB69     		ldr	r3, [r7, #28]
 5179 0034 0222     		movs	r2, #2
 5180 0036 83F84C20 		strb	r2, [r3, #76]
5058:Source/tasks.c **** 
5059:Source/tasks.c **** 			/* 'Giving' is equivalent to incrementing a count in a counting
5060:Source/tasks.c **** 			semaphore. */
5061:Source/tasks.c **** 			( pxTCB->ulNotifiedValue )++;
 5181              		.loc 1 5061 0
 5182 003a FB69     		ldr	r3, [r7, #28]
 5183 003c 9B6C     		ldr	r3, [r3, #72]
 5184 003e 5A1C     		adds	r2, r3, #1
 5185 0040 FB69     		ldr	r3, [r7, #28]
 5186 0042 9A64     		str	r2, [r3, #72]
5062:Source/tasks.c **** 
5063:Source/tasks.c **** 			traceTASK_NOTIFY_GIVE_FROM_ISR();
5064:Source/tasks.c **** 
5065:Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
5066:Source/tasks.c **** 			notification then unblock it now. */
5067:Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 5187              		.loc 1 5067 0
 5188 0044 FB7C     		ldrb	r3, [r7, #19]	@ zero_extendqisi2
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 186


 5189 0046 012B     		cmp	r3, #1
 5190 0048 36D1     		bne	.L359
5068:Source/tasks.c **** 			{
5069:Source/tasks.c **** 				/* The task should not have been on an event list. */
5070:Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
5071:Source/tasks.c **** 
5072:Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 5191              		.loc 1 5072 0
 5192 004a 204B     		ldr	r3, .L363
 5193 004c 1B68     		ldr	r3, [r3]
 5194 004e 002B     		cmp	r3, #0
 5195 0050 1CD1     		bne	.L360
5073:Source/tasks.c **** 				{
5074:Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 5196              		.loc 1 5074 0
 5197 0052 FB69     		ldr	r3, [r7, #28]
 5198 0054 0433     		adds	r3, r3, #4
 5199 0056 1846     		mov	r0, r3
 5200 0058 FFF7FEFF 		bl	uxListRemove
5075:Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 5201              		.loc 1 5075 0
 5202 005c FB69     		ldr	r3, [r7, #28]
 5203 005e DB6A     		ldr	r3, [r3, #44]
 5204 0060 0122     		movs	r2, #1
 5205 0062 9A40     		lsls	r2, r2, r3
 5206 0064 1A4B     		ldr	r3, .L363+4
 5207 0066 1B68     		ldr	r3, [r3]
 5208 0068 1343     		orrs	r3, r3, r2
 5209 006a 194A     		ldr	r2, .L363+4
 5210 006c 1360     		str	r3, [r2]
 5211 006e FB69     		ldr	r3, [r7, #28]
 5212 0070 DA6A     		ldr	r2, [r3, #44]
 5213 0072 1346     		mov	r3, r2
 5214 0074 9B00     		lsls	r3, r3, #2
 5215 0076 1344     		add	r3, r3, r2
 5216 0078 9B00     		lsls	r3, r3, #2
 5217 007a 164A     		ldr	r2, .L363+8
 5218 007c 1A44     		add	r2, r2, r3
 5219 007e FB69     		ldr	r3, [r7, #28]
 5220 0080 0433     		adds	r3, r3, #4
 5221 0082 1946     		mov	r1, r3
 5222 0084 1046     		mov	r0, r2
 5223 0086 FFF7FEFF 		bl	vListInsertEnd
 5224 008a 05E0     		b	.L361
 5225              	.L360:
5076:Source/tasks.c **** 				}
5077:Source/tasks.c **** 				else
5078:Source/tasks.c **** 				{
5079:Source/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
5080:Source/tasks.c **** 					this task pending until the scheduler is resumed. */
5081:Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 5226              		.loc 1 5081 0
 5227 008c FB69     		ldr	r3, [r7, #28]
 5228 008e 1833     		adds	r3, r3, #24
 5229 0090 1946     		mov	r1, r3
 5230 0092 1148     		ldr	r0, .L363+12
 5231 0094 FFF7FEFF 		bl	vListInsertEnd
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 187


 5232              	.L361:
5082:Source/tasks.c **** 				}
5083:Source/tasks.c **** 
5084:Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 5233              		.loc 1 5084 0
 5234 0098 FB69     		ldr	r3, [r7, #28]
 5235 009a DA6A     		ldr	r2, [r3, #44]
 5236 009c 0F4B     		ldr	r3, .L363+16
 5237 009e 1B68     		ldr	r3, [r3]
 5238 00a0 DB6A     		ldr	r3, [r3, #44]
 5239 00a2 9A42     		cmp	r2, r3
 5240 00a4 08D9     		bls	.L359
5085:Source/tasks.c **** 				{
5086:Source/tasks.c **** 					/* The notified task has a priority above the currently
5087:Source/tasks.c **** 					executing task so a yield is required. */
5088:Source/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
 5241              		.loc 1 5088 0
 5242 00a6 3B68     		ldr	r3, [r7]
 5243 00a8 002B     		cmp	r3, #0
 5244 00aa 02D0     		beq	.L362
5089:Source/tasks.c **** 					{
5090:Source/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
 5245              		.loc 1 5090 0
 5246 00ac 3B68     		ldr	r3, [r7]
 5247 00ae 0122     		movs	r2, #1
 5248 00b0 1A60     		str	r2, [r3]
 5249              	.L362:
5091:Source/tasks.c **** 					}
5092:Source/tasks.c **** 
5093:Source/tasks.c **** 					/* Mark that a yield is pending in case the user is not
5094:Source/tasks.c **** 					using the "xHigherPriorityTaskWoken" parameter in an ISR
5095:Source/tasks.c **** 					safe FreeRTOS function. */
5096:Source/tasks.c **** 					xYieldPending = pdTRUE;
 5250              		.loc 1 5096 0
 5251 00b2 0B4B     		ldr	r3, .L363+20
 5252 00b4 0122     		movs	r2, #1
 5253 00b6 1A60     		str	r2, [r3]
 5254              	.L359:
 5255 00b8 7B69     		ldr	r3, [r7, #20]
 5256 00ba BB61     		str	r3, [r7, #24]
 5257              	.LBB57:
 5258              	.LBB58:
 5259              		.loc 2 231 0
 5260 00bc BB69     		ldr	r3, [r7, #24]
 5261              		.syntax unified
 5262              	@ 231 ".\Source\portable\GCC\ARM_CM3/portmacro.h" 1
 5263 00be 83F31188 			msr basepri, r3	
 5264              	@ 0 "" 2
 5265              		.thumb
 5266              		.syntax unified
 5267              	.LBE58:
 5268              	.LBE57:
5097:Source/tasks.c **** 				}
5098:Source/tasks.c **** 				else
5099:Source/tasks.c **** 				{
5100:Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
5101:Source/tasks.c **** 				}
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 188


5102:Source/tasks.c **** 			}
5103:Source/tasks.c **** 		}
5104:Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
5105:Source/tasks.c **** 	}
 5269              		.loc 1 5105 0
 5270 00c2 00BF     		nop
 5271 00c4 2037     		adds	r7, r7, #32
 5272              		.cfi_def_cfa_offset 8
 5273 00c6 BD46     		mov	sp, r7
 5274              		.cfi_def_cfa_register 13
 5275              		@ sp needed
 5276 00c8 80BD     		pop	{r7, pc}
 5277              	.L364:
 5278 00ca 00BF     		.align	2
 5279              	.L363:
 5280 00cc 00010000 		.word	uxSchedulerSuspended
 5281 00d0 E0000000 		.word	uxTopReadyPriority
 5282 00d4 04000000 		.word	pxReadyTasksLists
 5283 00d8 98000000 		.word	xPendingReadyList
 5284 00dc 00000000 		.word	pxCurrentTCB
 5285 00e0 EC000000 		.word	xYieldPending
 5286              		.cfi_endproc
 5287              	.LFE118:
 5288              		.size	vTaskNotifyGiveFromISR, .-vTaskNotifyGiveFromISR
 5289              		.section	.text.xTaskNotifyStateClear,"ax",%progbits
 5290              		.align	2
 5291              		.global	xTaskNotifyStateClear
 5292              		.thumb
 5293              		.thumb_func
 5294              		.type	xTaskNotifyStateClear, %function
 5295              	xTaskNotifyStateClear:
 5296              	.LFB119:
5106:Source/tasks.c **** 
5107:Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5108:Source/tasks.c **** /*-----------------------------------------------------------*/
5109:Source/tasks.c **** 
5110:Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
5111:Source/tasks.c **** 
5112:Source/tasks.c **** 	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
5113:Source/tasks.c **** 	{
 5297              		.loc 1 5113 0
 5298              		.cfi_startproc
 5299              		@ args = 0, pretend = 0, frame = 16
 5300              		@ frame_needed = 1, uses_anonymous_args = 0
 5301 0000 80B5     		push	{r7, lr}
 5302              		.cfi_def_cfa_offset 8
 5303              		.cfi_offset 7, -8
 5304              		.cfi_offset 14, -4
 5305 0002 84B0     		sub	sp, sp, #16
 5306              		.cfi_def_cfa_offset 24
 5307 0004 00AF     		add	r7, sp, #0
 5308              		.cfi_def_cfa_register 7
 5309 0006 7860     		str	r0, [r7, #4]
5114:Source/tasks.c **** 	TCB_t *pxTCB;
5115:Source/tasks.c **** 	BaseType_t xReturn;
5116:Source/tasks.c **** 
5117:Source/tasks.c **** 		/* If null is passed in here then it is the calling task that is having
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 189


5118:Source/tasks.c **** 		its notification state cleared. */
5119:Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
 5310              		.loc 1 5119 0
 5311 0008 7B68     		ldr	r3, [r7, #4]
 5312 000a 002B     		cmp	r3, #0
 5313 000c 02D1     		bne	.L366
 5314              		.loc 1 5119 0 is_stmt 0 discriminator 1
 5315 000e 0E4B     		ldr	r3, .L371
 5316 0010 1B68     		ldr	r3, [r3]
 5317 0012 00E0     		b	.L367
 5318              	.L366:
 5319              		.loc 1 5119 0 discriminator 2
 5320 0014 7B68     		ldr	r3, [r7, #4]
 5321              	.L367:
 5322              		.loc 1 5119 0 discriminator 4
 5323 0016 BB60     		str	r3, [r7, #8]
5120:Source/tasks.c **** 
5121:Source/tasks.c **** 		taskENTER_CRITICAL();
 5324              		.loc 1 5121 0 is_stmt 1 discriminator 4
 5325 0018 FFF7FEFF 		bl	vPortEnterCritical
5122:Source/tasks.c **** 		{
5123:Source/tasks.c **** 			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
 5326              		.loc 1 5123 0 discriminator 4
 5327 001c BB68     		ldr	r3, [r7, #8]
 5328 001e 93F84C30 		ldrb	r3, [r3, #76]
 5329 0022 DBB2     		uxtb	r3, r3
 5330 0024 022B     		cmp	r3, #2
 5331 0026 06D1     		bne	.L368
5124:Source/tasks.c **** 			{
5125:Source/tasks.c **** 				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 5332              		.loc 1 5125 0
 5333 0028 BB68     		ldr	r3, [r7, #8]
 5334 002a 0022     		movs	r2, #0
 5335 002c 83F84C20 		strb	r2, [r3, #76]
5126:Source/tasks.c **** 				xReturn = pdPASS;
 5336              		.loc 1 5126 0
 5337 0030 0123     		movs	r3, #1
 5338 0032 FB60     		str	r3, [r7, #12]
 5339 0034 01E0     		b	.L369
 5340              	.L368:
5127:Source/tasks.c **** 			}
5128:Source/tasks.c **** 			else
5129:Source/tasks.c **** 			{
5130:Source/tasks.c **** 				xReturn = pdFAIL;
 5341              		.loc 1 5130 0
 5342 0036 0023     		movs	r3, #0
 5343 0038 FB60     		str	r3, [r7, #12]
 5344              	.L369:
5131:Source/tasks.c **** 			}
5132:Source/tasks.c **** 		}
5133:Source/tasks.c **** 		taskEXIT_CRITICAL();
 5345              		.loc 1 5133 0
 5346 003a FFF7FEFF 		bl	vPortExitCritical
5134:Source/tasks.c **** 
5135:Source/tasks.c **** 		return xReturn;
 5347              		.loc 1 5135 0
 5348 003e FB68     		ldr	r3, [r7, #12]
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 190


5136:Source/tasks.c **** 	}
 5349              		.loc 1 5136 0
 5350 0040 1846     		mov	r0, r3
 5351 0042 1037     		adds	r7, r7, #16
 5352              		.cfi_def_cfa_offset 8
 5353 0044 BD46     		mov	sp, r7
 5354              		.cfi_def_cfa_register 13
 5355              		@ sp needed
 5356 0046 80BD     		pop	{r7, pc}
 5357              	.L372:
 5358              		.align	2
 5359              	.L371:
 5360 0048 00000000 		.word	pxCurrentTCB
 5361              		.cfi_endproc
 5362              	.LFE119:
 5363              		.size	xTaskNotifyStateClear, .-xTaskNotifyStateClear
 5364              		.section	.text.ulTaskNotifyValueClear,"ax",%progbits
 5365              		.align	2
 5366              		.global	ulTaskNotifyValueClear
 5367              		.thumb
 5368              		.thumb_func
 5369              		.type	ulTaskNotifyValueClear, %function
 5370              	ulTaskNotifyValueClear:
 5371              	.LFB120:
5137:Source/tasks.c **** 
5138:Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5139:Source/tasks.c **** /*-----------------------------------------------------------*/
5140:Source/tasks.c **** 
5141:Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
5142:Source/tasks.c **** 
5143:Source/tasks.c **** 	uint32_t ulTaskNotifyValueClear( TaskHandle_t xTask, uint32_t ulBitsToClear )
5144:Source/tasks.c **** 	{
 5372              		.loc 1 5144 0
 5373              		.cfi_startproc
 5374              		@ args = 0, pretend = 0, frame = 16
 5375              		@ frame_needed = 1, uses_anonymous_args = 0
 5376 0000 80B5     		push	{r7, lr}
 5377              		.cfi_def_cfa_offset 8
 5378              		.cfi_offset 7, -8
 5379              		.cfi_offset 14, -4
 5380 0002 84B0     		sub	sp, sp, #16
 5381              		.cfi_def_cfa_offset 24
 5382 0004 00AF     		add	r7, sp, #0
 5383              		.cfi_def_cfa_register 7
 5384 0006 7860     		str	r0, [r7, #4]
 5385 0008 3960     		str	r1, [r7]
5145:Source/tasks.c **** 	TCB_t *pxTCB;
5146:Source/tasks.c **** 	uint32_t ulReturn;
5147:Source/tasks.c **** 
5148:Source/tasks.c **** 		/* If null is passed in here then it is the calling task that is having
5149:Source/tasks.c **** 		its notification state cleared. */
5150:Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
 5386              		.loc 1 5150 0
 5387 000a 7B68     		ldr	r3, [r7, #4]
 5388 000c 002B     		cmp	r3, #0
 5389 000e 02D1     		bne	.L374
 5390              		.loc 1 5150 0 is_stmt 0 discriminator 1
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 191


 5391 0010 0C4B     		ldr	r3, .L377
 5392 0012 1B68     		ldr	r3, [r3]
 5393 0014 00E0     		b	.L375
 5394              	.L374:
 5395              		.loc 1 5150 0 discriminator 2
 5396 0016 7B68     		ldr	r3, [r7, #4]
 5397              	.L375:
 5398              		.loc 1 5150 0 discriminator 4
 5399 0018 FB60     		str	r3, [r7, #12]
5151:Source/tasks.c **** 
5152:Source/tasks.c **** 		taskENTER_CRITICAL();
 5400              		.loc 1 5152 0 is_stmt 1 discriminator 4
 5401 001a FFF7FEFF 		bl	vPortEnterCritical
5153:Source/tasks.c **** 		{
5154:Source/tasks.c **** 			/* Return the notification as it was before the bits were cleared,
5155:Source/tasks.c **** 			then clear the bit mask. */
5156:Source/tasks.c **** 			ulReturn = pxCurrentTCB->ulNotifiedValue;
 5402              		.loc 1 5156 0 discriminator 4
 5403 001e 094B     		ldr	r3, .L377
 5404 0020 1B68     		ldr	r3, [r3]
 5405 0022 9B6C     		ldr	r3, [r3, #72]
 5406 0024 BB60     		str	r3, [r7, #8]
5157:Source/tasks.c **** 			pxTCB->ulNotifiedValue &= ~ulBitsToClear;
 5407              		.loc 1 5157 0 discriminator 4
 5408 0026 FB68     		ldr	r3, [r7, #12]
 5409 0028 9A6C     		ldr	r2, [r3, #72]
 5410 002a 3B68     		ldr	r3, [r7]
 5411 002c DB43     		mvns	r3, r3
 5412 002e 1A40     		ands	r2, r2, r3
 5413 0030 FB68     		ldr	r3, [r7, #12]
 5414 0032 9A64     		str	r2, [r3, #72]
5158:Source/tasks.c **** 		}
5159:Source/tasks.c **** 		taskEXIT_CRITICAL();
 5415              		.loc 1 5159 0 discriminator 4
 5416 0034 FFF7FEFF 		bl	vPortExitCritical
5160:Source/tasks.c **** 
5161:Source/tasks.c **** 		return ulReturn;
 5417              		.loc 1 5161 0 discriminator 4
 5418 0038 BB68     		ldr	r3, [r7, #8]
5162:Source/tasks.c **** 	}
 5419              		.loc 1 5162 0 discriminator 4
 5420 003a 1846     		mov	r0, r3
 5421 003c 1037     		adds	r7, r7, #16
 5422              		.cfi_def_cfa_offset 8
 5423 003e BD46     		mov	sp, r7
 5424              		.cfi_def_cfa_register 13
 5425              		@ sp needed
 5426 0040 80BD     		pop	{r7, pc}
 5427              	.L378:
 5428 0042 00BF     		.align	2
 5429              	.L377:
 5430 0044 00000000 		.word	pxCurrentTCB
 5431              		.cfi_endproc
 5432              	.LFE120:
 5433              		.size	ulTaskNotifyValueClear, .-ulTaskNotifyValueClear
 5434              		.section	.text.prvAddCurrentTaskToDelayedList,"ax",%progbits
 5435              		.align	2
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 192


 5436              		.thumb
 5437              		.thumb_func
 5438              		.type	prvAddCurrentTaskToDelayedList, %function
 5439              	prvAddCurrentTaskToDelayedList:
 5440              	.LFB121:
5163:Source/tasks.c **** 
5164:Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5165:Source/tasks.c **** /*-----------------------------------------------------------*/
5166:Source/tasks.c **** 
5167:Source/tasks.c **** #if( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) )
5168:Source/tasks.c **** 
5169:Source/tasks.c **** 	uint32_t ulTaskGetIdleRunTimeCounter( void )
5170:Source/tasks.c **** 	{
5171:Source/tasks.c **** 		return xIdleTaskHandle->ulRunTimeCounter;
5172:Source/tasks.c **** 	}
5173:Source/tasks.c **** 
5174:Source/tasks.c **** #endif
5175:Source/tasks.c **** /*-----------------------------------------------------------*/
5176:Source/tasks.c **** 
5177:Source/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockInde
5178:Source/tasks.c **** {
 5441              		.loc 1 5178 0
 5442              		.cfi_startproc
 5443              		@ args = 0, pretend = 0, frame = 16
 5444              		@ frame_needed = 1, uses_anonymous_args = 0
 5445 0000 80B5     		push	{r7, lr}
 5446              		.cfi_def_cfa_offset 8
 5447              		.cfi_offset 7, -8
 5448              		.cfi_offset 14, -4
 5449 0002 84B0     		sub	sp, sp, #16
 5450              		.cfi_def_cfa_offset 24
 5451 0004 00AF     		add	r7, sp, #0
 5452              		.cfi_def_cfa_register 7
 5453 0006 7860     		str	r0, [r7, #4]
 5454 0008 3960     		str	r1, [r7]
5179:Source/tasks.c **** TickType_t xTimeToWake;
5180:Source/tasks.c **** const TickType_t xConstTickCount = xTickCount;
 5455              		.loc 1 5180 0
 5456 000a 294B     		ldr	r3, .L385
 5457 000c 1B68     		ldr	r3, [r3]
 5458 000e FB60     		str	r3, [r7, #12]
5181:Source/tasks.c **** 
5182:Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
5183:Source/tasks.c **** 	{
5184:Source/tasks.c **** 		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
5185:Source/tasks.c **** 		reset to pdFALSE so it can be detected as having been set to pdTRUE
5186:Source/tasks.c **** 		when the task leaves the Blocked state. */
5187:Source/tasks.c **** 		pxCurrentTCB->ucDelayAborted = pdFALSE;
5188:Source/tasks.c **** 	}
5189:Source/tasks.c **** 	#endif
5190:Source/tasks.c **** 
5191:Source/tasks.c **** 	/* Remove the task from the ready list before adding it to the blocked list
5192:Source/tasks.c **** 	as the same list item is used for both lists. */
5193:Source/tasks.c **** 	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 5459              		.loc 1 5193 0
 5460 0010 284B     		ldr	r3, .L385+4
 5461 0012 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 193


 5462 0014 0433     		adds	r3, r3, #4
 5463 0016 1846     		mov	r0, r3
 5464 0018 FFF7FEFF 		bl	uxListRemove
 5465 001c 0346     		mov	r3, r0
 5466 001e 002B     		cmp	r3, #0
 5467 0020 0BD1     		bne	.L380
5194:Source/tasks.c **** 	{
5195:Source/tasks.c **** 		/* The current task must be in a ready list, so there is no need to
5196:Source/tasks.c **** 		check, and the port reset macro can be called directly. */
5197:Source/tasks.c **** 		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentT
 5468              		.loc 1 5197 0
 5469 0022 244B     		ldr	r3, .L385+4
 5470 0024 1B68     		ldr	r3, [r3]
 5471 0026 DB6A     		ldr	r3, [r3, #44]
 5472 0028 0122     		movs	r2, #1
 5473 002a 02FA03F3 		lsl	r3, r2, r3
 5474 002e DA43     		mvns	r2, r3
 5475 0030 214B     		ldr	r3, .L385+8
 5476 0032 1B68     		ldr	r3, [r3]
 5477 0034 1340     		ands	r3, r3, r2
 5478 0036 204A     		ldr	r2, .L385+8
 5479 0038 1360     		str	r3, [r2]
 5480              	.L380:
5198:Source/tasks.c **** 	}
5199:Source/tasks.c **** 	else
5200:Source/tasks.c **** 	{
5201:Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
5202:Source/tasks.c **** 	}
5203:Source/tasks.c **** 
5204:Source/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
5205:Source/tasks.c **** 	{
5206:Source/tasks.c **** 		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 5481              		.loc 1 5206 0
 5482 003a 7B68     		ldr	r3, [r7, #4]
 5483 003c B3F1FF3F 		cmp	r3, #-1
 5484 0040 0AD1     		bne	.L381
 5485              		.loc 1 5206 0 is_stmt 0 discriminator 1
 5486 0042 3B68     		ldr	r3, [r7]
 5487 0044 002B     		cmp	r3, #0
 5488 0046 07D0     		beq	.L381
5207:Source/tasks.c **** 		{
5208:Source/tasks.c **** 			/* Add the task to the suspended task list instead of a delayed task
5209:Source/tasks.c **** 			list to ensure it is not woken by a timing event.  It will block
5210:Source/tasks.c **** 			indefinitely. */
5211:Source/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 5489              		.loc 1 5211 0 is_stmt 1
 5490 0048 1A4B     		ldr	r3, .L385+4
 5491 004a 1B68     		ldr	r3, [r3]
 5492 004c 0433     		adds	r3, r3, #4
 5493 004e 1946     		mov	r1, r3
 5494 0050 1A48     		ldr	r0, .L385+12
 5495 0052 FFF7FEFF 		bl	vListInsertEnd
5212:Source/tasks.c **** 		}
5213:Source/tasks.c **** 		else
5214:Source/tasks.c **** 		{
5215:Source/tasks.c **** 			/* Calculate the time at which the task should be woken if the event
5216:Source/tasks.c **** 			does not occur.  This may overflow but this doesn't matter, the
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 194


5217:Source/tasks.c **** 			kernel will manage it correctly. */
5218:Source/tasks.c **** 			xTimeToWake = xConstTickCount + xTicksToWait;
5219:Source/tasks.c **** 
5220:Source/tasks.c **** 			/* The list item will be inserted in wake time order. */
5221:Source/tasks.c **** 			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
5222:Source/tasks.c **** 
5223:Source/tasks.c **** 			if( xTimeToWake < xConstTickCount )
5224:Source/tasks.c **** 			{
5225:Source/tasks.c **** 				/* Wake time has overflowed.  Place this item in the overflow
5226:Source/tasks.c **** 				list. */
5227:Source/tasks.c **** 				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5228:Source/tasks.c **** 			}
5229:Source/tasks.c **** 			else
5230:Source/tasks.c **** 			{
5231:Source/tasks.c **** 				/* The wake time has not overflowed, so the current block list
5232:Source/tasks.c **** 				is used. */
5233:Source/tasks.c **** 				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5234:Source/tasks.c **** 
5235:Source/tasks.c **** 				/* If the task entering the blocked state was placed at the
5236:Source/tasks.c **** 				head of the list of blocked tasks then xNextTaskUnblockTime
5237:Source/tasks.c **** 				needs to be updated too. */
5238:Source/tasks.c **** 				if( xTimeToWake < xNextTaskUnblockTime )
5239:Source/tasks.c **** 				{
5240:Source/tasks.c **** 					xNextTaskUnblockTime = xTimeToWake;
5241:Source/tasks.c **** 				}
5242:Source/tasks.c **** 				else
5243:Source/tasks.c **** 				{
5244:Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
5245:Source/tasks.c **** 				}
5246:Source/tasks.c **** 			}
5247:Source/tasks.c **** 		}
5248:Source/tasks.c **** 	}
5249:Source/tasks.c **** 	#else /* INCLUDE_vTaskSuspend */
5250:Source/tasks.c **** 	{
5251:Source/tasks.c **** 		/* Calculate the time at which the task should be woken if the event
5252:Source/tasks.c **** 		does not occur.  This may overflow but this doesn't matter, the kernel
5253:Source/tasks.c **** 		will manage it correctly. */
5254:Source/tasks.c **** 		xTimeToWake = xConstTickCount + xTicksToWait;
5255:Source/tasks.c **** 
5256:Source/tasks.c **** 		/* The list item will be inserted in wake time order. */
5257:Source/tasks.c **** 		listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
5258:Source/tasks.c **** 
5259:Source/tasks.c **** 		if( xTimeToWake < xConstTickCount )
5260:Source/tasks.c **** 		{
5261:Source/tasks.c **** 			/* Wake time has overflowed.  Place this item in the overflow list. */
5262:Source/tasks.c **** 			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5263:Source/tasks.c **** 		}
5264:Source/tasks.c **** 		else
5265:Source/tasks.c **** 		{
5266:Source/tasks.c **** 			/* The wake time has not overflowed, so the current block list is used. */
5267:Source/tasks.c **** 			vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5268:Source/tasks.c **** 
5269:Source/tasks.c **** 			/* If the task entering the blocked state was placed at the head of the
5270:Source/tasks.c **** 			list of blocked tasks then xNextTaskUnblockTime needs to be updated
5271:Source/tasks.c **** 			too. */
5272:Source/tasks.c **** 			if( xTimeToWake < xNextTaskUnblockTime )
5273:Source/tasks.c **** 			{
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 195


5274:Source/tasks.c **** 				xNextTaskUnblockTime = xTimeToWake;
5275:Source/tasks.c **** 			}
5276:Source/tasks.c **** 			else
5277:Source/tasks.c **** 			{
5278:Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
5279:Source/tasks.c **** 			}
5280:Source/tasks.c **** 		}
5281:Source/tasks.c **** 
5282:Source/tasks.c **** 		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
5283:Source/tasks.c **** 		( void ) xCanBlockIndefinitely;
5284:Source/tasks.c **** 	}
5285:Source/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
5286:Source/tasks.c **** }
 5496              		.loc 1 5286 0
 5497 0056 26E0     		b	.L384
 5498              	.L381:
5218:Source/tasks.c **** 
 5499              		.loc 1 5218 0
 5500 0058 FA68     		ldr	r2, [r7, #12]
 5501 005a 7B68     		ldr	r3, [r7, #4]
 5502 005c 1344     		add	r3, r3, r2
 5503 005e BB60     		str	r3, [r7, #8]
5221:Source/tasks.c **** 
 5504              		.loc 1 5221 0
 5505 0060 144B     		ldr	r3, .L385+4
 5506 0062 1B68     		ldr	r3, [r3]
 5507 0064 BA68     		ldr	r2, [r7, #8]
 5508 0066 5A60     		str	r2, [r3, #4]
5223:Source/tasks.c **** 			{
 5509              		.loc 1 5223 0
 5510 0068 BA68     		ldr	r2, [r7, #8]
 5511 006a FB68     		ldr	r3, [r7, #12]
 5512 006c 9A42     		cmp	r2, r3
 5513 006e 09D2     		bcs	.L383
5227:Source/tasks.c **** 			}
 5514              		.loc 1 5227 0
 5515 0070 134B     		ldr	r3, .L385+16
 5516 0072 1A68     		ldr	r2, [r3]
 5517 0074 0F4B     		ldr	r3, .L385+4
 5518 0076 1B68     		ldr	r3, [r3]
 5519 0078 0433     		adds	r3, r3, #4
 5520 007a 1946     		mov	r1, r3
 5521 007c 1046     		mov	r0, r2
 5522 007e FFF7FEFF 		bl	vListInsert
 5523              		.loc 1 5286 0
 5524 0082 10E0     		b	.L384
 5525              	.L383:
5233:Source/tasks.c **** 
 5526              		.loc 1 5233 0
 5527 0084 0F4B     		ldr	r3, .L385+20
 5528 0086 1A68     		ldr	r2, [r3]
 5529 0088 0A4B     		ldr	r3, .L385+4
 5530 008a 1B68     		ldr	r3, [r3]
 5531 008c 0433     		adds	r3, r3, #4
 5532 008e 1946     		mov	r1, r3
 5533 0090 1046     		mov	r0, r2
 5534 0092 FFF7FEFF 		bl	vListInsert
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 196


5238:Source/tasks.c **** 				{
 5535              		.loc 1 5238 0
 5536 0096 0C4B     		ldr	r3, .L385+24
 5537 0098 1B68     		ldr	r3, [r3]
 5538 009a BA68     		ldr	r2, [r7, #8]
 5539 009c 9A42     		cmp	r2, r3
 5540 009e 02D2     		bcs	.L384
5240:Source/tasks.c **** 				}
 5541              		.loc 1 5240 0
 5542 00a0 094A     		ldr	r2, .L385+24
 5543 00a2 BB68     		ldr	r3, [r7, #8]
 5544 00a4 1360     		str	r3, [r2]
 5545              	.L384:
 5546              		.loc 1 5286 0
 5547 00a6 00BF     		nop
 5548 00a8 1037     		adds	r7, r7, #16
 5549              		.cfi_def_cfa_offset 8
 5550 00aa BD46     		mov	sp, r7
 5551              		.cfi_def_cfa_register 13
 5552              		@ sp needed
 5553 00ac 80BD     		pop	{r7, pc}
 5554              	.L386:
 5555 00ae 00BF     		.align	2
 5556              	.L385:
 5557 00b0 DC000000 		.word	xTickCount
 5558 00b4 00000000 		.word	pxCurrentTCB
 5559 00b8 E0000000 		.word	uxTopReadyPriority
 5560 00bc C4000000 		.word	xSuspendedTaskList
 5561 00c0 94000000 		.word	pxOverflowDelayedTaskList
 5562 00c4 90000000 		.word	pxDelayedTaskList
 5563 00c8 F8000000 		.word	xNextTaskUnblockTime
 5564              		.cfi_endproc
 5565              	.LFE121:
 5566              		.size	prvAddCurrentTaskToDelayedList, .-prvAddCurrentTaskToDelayedList
 5567              		.text
 5568              	.Letext0:
 5569              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.3\\psoc creator\\import\\gnu\\arm\\5.4.
 5570              		.file 4 "c:\\program files (x86)\\cypress\\psoc creator\\4.3\\psoc creator\\import\\gnu\\arm\\5.4.
 5571              		.file 5 "c:\\program files (x86)\\cypress\\psoc creator\\4.3\\psoc creator\\import\\gnu\\arm\\5.4.
 5572              		.file 6 ".\\Source\\include/projdefs.h"
 5573              		.file 7 ".\\Source\\include/list.h"
 5574              		.file 8 ".\\Source\\include/task.h"
 5575              		.file 9 "Generated_Source\\PSoC5/core_cm3.h"
 5576              		.section	.debug_info,"",%progbits
 5577              	.Ldebug_info0:
 5578 0000 8E170000 		.4byte	0x178e
 5579 0004 0400     		.2byte	0x4
 5580 0006 00000000 		.4byte	.Ldebug_abbrev0
 5581 000a 04       		.byte	0x4
 5582 000b 01       		.uleb128 0x1
 5583 000c 87010000 		.4byte	.LASF233
 5584 0010 0C       		.byte	0xc
 5585 0011 E3090000 		.4byte	.LASF234
 5586 0015 16030000 		.4byte	.LASF235
 5587 0019 00000000 		.4byte	.Ldebug_ranges0+0
 5588 001d 00000000 		.4byte	0
 5589 0021 00000000 		.4byte	.Ldebug_line0
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 197


 5590 0025 02       		.uleb128 0x2
 5591 0026 41050000 		.4byte	.LASF4
 5592 002a 03       		.byte	0x3
 5593 002b D8       		.byte	0xd8
 5594 002c 30000000 		.4byte	0x30
 5595 0030 03       		.uleb128 0x3
 5596 0031 04       		.byte	0x4
 5597 0032 07       		.byte	0x7
 5598 0033 DE000000 		.4byte	.LASF0
 5599 0037 04       		.uleb128 0x4
 5600 0038 04       		.byte	0x4
 5601 0039 05       		.byte	0x5
 5602 003a 696E7400 		.ascii	"int\000"
 5603 003e 03       		.uleb128 0x3
 5604 003f 08       		.byte	0x8
 5605 0040 05       		.byte	0x5
 5606 0041 E0070000 		.4byte	.LASF1
 5607 0045 03       		.uleb128 0x3
 5608 0046 08       		.byte	0x8
 5609 0047 04       		.byte	0x4
 5610 0048 A3090000 		.4byte	.LASF2
 5611 004c 03       		.uleb128 0x3
 5612 004d 01       		.byte	0x1
 5613 004e 06       		.byte	0x6
 5614 004f FE0D0000 		.4byte	.LASF3
 5615 0053 02       		.uleb128 0x2
 5616 0054 350B0000 		.4byte	.LASF5
 5617 0058 04       		.byte	0x4
 5618 0059 1D       		.byte	0x1d
 5619 005a 5E000000 		.4byte	0x5e
 5620 005e 03       		.uleb128 0x3
 5621 005f 01       		.byte	0x1
 5622 0060 08       		.byte	0x8
 5623 0061 4C0C0000 		.4byte	.LASF6
 5624 0065 03       		.uleb128 0x3
 5625 0066 02       		.byte	0x2
 5626 0067 05       		.byte	0x5
 5627 0068 3B0A0000 		.4byte	.LASF7
 5628 006c 02       		.uleb128 0x2
 5629 006d C5040000 		.4byte	.LASF8
 5630 0071 04       		.byte	0x4
 5631 0072 2B       		.byte	0x2b
 5632 0073 77000000 		.4byte	0x77
 5633 0077 03       		.uleb128 0x3
 5634 0078 02       		.byte	0x2
 5635 0079 07       		.byte	0x7
 5636 007a 210E0000 		.4byte	.LASF9
 5637 007e 02       		.uleb128 0x2
 5638 007f 52010000 		.4byte	.LASF10
 5639 0083 04       		.byte	0x4
 5640 0084 3F       		.byte	0x3f
 5641 0085 89000000 		.4byte	0x89
 5642 0089 03       		.uleb128 0x3
 5643 008a 04       		.byte	0x4
 5644 008b 05       		.byte	0x5
 5645 008c 5D0A0000 		.4byte	.LASF11
 5646 0090 02       		.uleb128 0x2
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 198


 5647 0091 790C0000 		.4byte	.LASF12
 5648 0095 04       		.byte	0x4
 5649 0096 41       		.byte	0x41
 5650 0097 9B000000 		.4byte	0x9b
 5651 009b 03       		.uleb128 0x3
 5652 009c 04       		.byte	0x4
 5653 009d 07       		.byte	0x7
 5654 009e 7F0B0000 		.4byte	.LASF13
 5655 00a2 03       		.uleb128 0x3
 5656 00a3 08       		.byte	0x8
 5657 00a4 07       		.byte	0x7
 5658 00a5 21040000 		.4byte	.LASF14
 5659 00a9 03       		.uleb128 0x3
 5660 00aa 04       		.byte	0x4
 5661 00ab 07       		.byte	0x7
 5662 00ac 650B0000 		.4byte	.LASF15
 5663 00b0 05       		.uleb128 0x5
 5664 00b1 04       		.byte	0x4
 5665 00b2 06       		.uleb128 0x6
 5666 00b3 04       		.byte	0x4
 5667 00b4 B8000000 		.4byte	0xb8
 5668 00b8 03       		.uleb128 0x3
 5669 00b9 01       		.byte	0x1
 5670 00ba 08       		.byte	0x8
 5671 00bb A6060000 		.4byte	.LASF16
 5672 00bf 06       		.uleb128 0x6
 5673 00c0 04       		.byte	0x4
 5674 00c1 C5000000 		.4byte	0xc5
 5675 00c5 07       		.uleb128 0x7
 5676 00c6 B8000000 		.4byte	0xb8
 5677 00ca 02       		.uleb128 0x2
 5678 00cb 6D070000 		.4byte	.LASF17
 5679 00cf 05       		.byte	0x5
 5680 00d0 18       		.byte	0x18
 5681 00d1 53000000 		.4byte	0x53
 5682 00d5 02       		.uleb128 0x2
 5683 00d6 BE090000 		.4byte	.LASF18
 5684 00da 05       		.byte	0x5
 5685 00db 24       		.byte	0x24
 5686 00dc 6C000000 		.4byte	0x6c
 5687 00e0 02       		.uleb128 0x2
 5688 00e1 E50B0000 		.4byte	.LASF19
 5689 00e5 05       		.byte	0x5
 5690 00e6 2C       		.byte	0x2c
 5691 00e7 7E000000 		.4byte	0x7e
 5692 00eb 02       		.uleb128 0x2
 5693 00ec 7E030000 		.4byte	.LASF20
 5694 00f0 05       		.byte	0x5
 5695 00f1 30       		.byte	0x30
 5696 00f2 90000000 		.4byte	0x90
 5697 00f6 03       		.uleb128 0x3
 5698 00f7 04       		.byte	0x4
 5699 00f8 04       		.byte	0x4
 5700 00f9 C9030000 		.4byte	.LASF21
 5701 00fd 03       		.uleb128 0x3
 5702 00fe 08       		.byte	0x8
 5703 00ff 04       		.byte	0x4
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 199


 5704 0100 550E0000 		.4byte	.LASF22
 5705 0104 08       		.uleb128 0x8
 5706 0105 EB000000 		.4byte	0xeb
 5707 0109 08       		.uleb128 0x8
 5708 010a CA000000 		.4byte	0xca
 5709 010e 02       		.uleb128 0x2
 5710 010f 71080000 		.4byte	.LASF23
 5711 0113 06       		.byte	0x6
 5712 0114 23       		.byte	0x23
 5713 0115 19010000 		.4byte	0x119
 5714 0119 06       		.uleb128 0x6
 5715 011a 04       		.byte	0x4
 5716 011b 1F010000 		.4byte	0x11f
 5717 011f 09       		.uleb128 0x9
 5718 0120 2A010000 		.4byte	0x12a
 5719 0124 0A       		.uleb128 0xa
 5720 0125 B0000000 		.4byte	0xb0
 5721 0129 00       		.byte	0
 5722 012a 02       		.uleb128 0x2
 5723 012b 11010000 		.4byte	.LASF24
 5724 012f 02       		.byte	0x2
 5725 0130 37       		.byte	0x37
 5726 0131 EB000000 		.4byte	0xeb
 5727 0135 02       		.uleb128 0x2
 5728 0136 1F080000 		.4byte	.LASF25
 5729 013a 02       		.byte	0x2
 5730 013b 38       		.byte	0x38
 5731 013c 89000000 		.4byte	0x89
 5732 0140 02       		.uleb128 0x2
 5733 0141 DD060000 		.4byte	.LASF26
 5734 0145 02       		.byte	0x2
 5735 0146 39       		.byte	0x39
 5736 0147 9B000000 		.4byte	0x9b
 5737 014b 02       		.uleb128 0x2
 5738 014c 7B090000 		.4byte	.LASF27
 5739 0150 02       		.byte	0x2
 5740 0151 3F       		.byte	0x3f
 5741 0152 EB000000 		.4byte	0xeb
 5742 0156 06       		.uleb128 0x6
 5743 0157 04       		.byte	0x4
 5744 0158 CA000000 		.4byte	0xca
 5745 015c 0B       		.uleb128 0xb
 5746 015d 6A010000 		.4byte	.LASF33
 5747 0161 14       		.byte	0x14
 5748 0162 07       		.byte	0x7
 5749 0163 8C       		.byte	0x8c
 5750 0164 A5010000 		.4byte	0x1a5
 5751 0168 0C       		.uleb128 0xc
 5752 0169 520A0000 		.4byte	.LASF28
 5753 016d 07       		.byte	0x7
 5754 016e 8F       		.byte	0x8f
 5755 016f 4B010000 		.4byte	0x14b
 5756 0173 00       		.byte	0
 5757 0174 0C       		.uleb128 0xc
 5758 0175 80080000 		.4byte	.LASF29
 5759 0179 07       		.byte	0x7
 5760 017a 90       		.byte	0x90
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 200


 5761 017b A5010000 		.4byte	0x1a5
 5762 017f 04       		.byte	0x4
 5763 0180 0C       		.uleb128 0xc
 5764 0181 A1040000 		.4byte	.LASF30
 5765 0185 07       		.byte	0x7
 5766 0186 91       		.byte	0x91
 5767 0187 A5010000 		.4byte	0x1a5
 5768 018b 08       		.byte	0x8
 5769 018c 0C       		.uleb128 0xc
 5770 018d 160D0000 		.4byte	.LASF31
 5771 0191 07       		.byte	0x7
 5772 0192 92       		.byte	0x92
 5773 0193 B0000000 		.4byte	0xb0
 5774 0197 0C       		.byte	0xc
 5775 0198 0C       		.uleb128 0xc
 5776 0199 020A0000 		.4byte	.LASF32
 5777 019d 07       		.byte	0x7
 5778 019e 93       		.byte	0x93
 5779 019f DC010000 		.4byte	0x1dc
 5780 01a3 10       		.byte	0x10
 5781 01a4 00       		.byte	0
 5782 01a5 06       		.uleb128 0x6
 5783 01a6 04       		.byte	0x4
 5784 01a7 5C010000 		.4byte	0x15c
 5785 01ab 0B       		.uleb128 0xb
 5786 01ac 70050000 		.4byte	.LASF34
 5787 01b0 14       		.byte	0x14
 5788 01b1 07       		.byte	0x7
 5789 01b2 A4       		.byte	0xa4
 5790 01b3 DC010000 		.4byte	0x1dc
 5791 01b7 0C       		.uleb128 0xc
 5792 01b8 0B000000 		.4byte	.LASF35
 5793 01bc 07       		.byte	0x7
 5794 01bd A7       		.byte	0xa7
 5795 01be 29020000 		.4byte	0x229
 5796 01c2 00       		.byte	0
 5797 01c3 0C       		.uleb128 0xc
 5798 01c4 09010000 		.4byte	.LASF36
 5799 01c8 07       		.byte	0x7
 5800 01c9 A8       		.byte	0xa8
 5801 01ca 2E020000 		.4byte	0x22e
 5802 01ce 04       		.byte	0x4
 5803 01cf 0C       		.uleb128 0xc
 5804 01d0 0F070000 		.4byte	.LASF37
 5805 01d4 07       		.byte	0x7
 5806 01d5 A9       		.byte	0xa9
 5807 01d6 1E020000 		.4byte	0x21e
 5808 01da 08       		.byte	0x8
 5809 01db 00       		.byte	0
 5810 01dc 06       		.uleb128 0x6
 5811 01dd 04       		.byte	0x4
 5812 01de AB010000 		.4byte	0x1ab
 5813 01e2 02       		.uleb128 0x2
 5814 01e3 AB060000 		.4byte	.LASF38
 5815 01e7 07       		.byte	0x7
 5816 01e8 96       		.byte	0x96
 5817 01e9 5C010000 		.4byte	0x15c
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 201


 5818 01ed 0B       		.uleb128 0xb
 5819 01ee 53050000 		.4byte	.LASF39
 5820 01f2 0C       		.byte	0xc
 5821 01f3 07       		.byte	0x7
 5822 01f4 98       		.byte	0x98
 5823 01f5 1E020000 		.4byte	0x21e
 5824 01f9 0C       		.uleb128 0xc
 5825 01fa 520A0000 		.4byte	.LASF28
 5826 01fe 07       		.byte	0x7
 5827 01ff 9B       		.byte	0x9b
 5828 0200 4B010000 		.4byte	0x14b
 5829 0204 00       		.byte	0
 5830 0205 0C       		.uleb128 0xc
 5831 0206 80080000 		.4byte	.LASF29
 5832 020a 07       		.byte	0x7
 5833 020b 9C       		.byte	0x9c
 5834 020c A5010000 		.4byte	0x1a5
 5835 0210 04       		.byte	0x4
 5836 0211 0C       		.uleb128 0xc
 5837 0212 A1040000 		.4byte	.LASF30
 5838 0216 07       		.byte	0x7
 5839 0217 9D       		.byte	0x9d
 5840 0218 A5010000 		.4byte	0x1a5
 5841 021c 08       		.byte	0x8
 5842 021d 00       		.byte	0
 5843 021e 02       		.uleb128 0x2
 5844 021f 29070000 		.4byte	.LASF40
 5845 0223 07       		.byte	0x7
 5846 0224 9F       		.byte	0x9f
 5847 0225 ED010000 		.4byte	0x1ed
 5848 0229 08       		.uleb128 0x8
 5849 022a 40010000 		.4byte	0x140
 5850 022e 06       		.uleb128 0x6
 5851 022f 04       		.byte	0x4
 5852 0230 E2010000 		.4byte	0x1e2
 5853 0234 02       		.uleb128 0x2
 5854 0235 67090000 		.4byte	.LASF41
 5855 0239 07       		.byte	0x7
 5856 023a AB       		.byte	0xab
 5857 023b AB010000 		.4byte	0x1ab
 5858 023f 02       		.uleb128 0x2
 5859 0240 0D090000 		.4byte	.LASF42
 5860 0244 08       		.byte	0x8
 5861 0245 46       		.byte	0x46
 5862 0246 4A020000 		.4byte	0x24a
 5863 024a 06       		.uleb128 0x6
 5864 024b 04       		.byte	0x4
 5865 024c 50020000 		.4byte	0x250
 5866 0250 0B       		.uleb128 0xb
 5867 0251 49000000 		.4byte	.LASF43
 5868 0255 50       		.byte	0x50
 5869 0256 01       		.byte	0x1
 5870 0257 FC       		.byte	0xfc
 5871 0258 DE020000 		.4byte	0x2de
 5872 025c 0C       		.uleb128 0xc
 5873 025d 710E0000 		.4byte	.LASF44
 5874 0261 01       		.byte	0x1
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 202


 5875 0262 FE       		.byte	0xfe
 5876 0263 C7030000 		.4byte	0x3c7
 5877 0267 00       		.byte	0
 5878 0268 0D       		.uleb128 0xd
 5879 0269 400E0000 		.4byte	.LASF45
 5880 026d 01       		.byte	0x1
 5881 026e 0401     		.2byte	0x104
 5882 0270 E2010000 		.4byte	0x1e2
 5883 0274 04       		.byte	0x4
 5884 0275 0D       		.uleb128 0xd
 5885 0276 DE0C0000 		.4byte	.LASF46
 5886 027a 01       		.byte	0x1
 5887 027b 0501     		.2byte	0x105
 5888 027d E2010000 		.4byte	0x1e2
 5889 0281 18       		.byte	0x18
 5890 0282 0D       		.uleb128 0xd
 5891 0283 1B000000 		.4byte	.LASF47
 5892 0287 01       		.byte	0x1
 5893 0288 0601     		.2byte	0x106
 5894 028a 40010000 		.4byte	0x140
 5895 028e 2C       		.byte	0x2c
 5896 028f 0D       		.uleb128 0xd
 5897 0290 E00A0000 		.4byte	.LASF48
 5898 0294 01       		.byte	0x1
 5899 0295 0701     		.2byte	0x107
 5900 0297 C1030000 		.4byte	0x3c1
 5901 029b 30       		.byte	0x30
 5902 029c 0D       		.uleb128 0xd
 5903 029d 00000000 		.4byte	.LASF49
 5904 02a1 01       		.byte	0x1
 5905 02a2 0801     		.2byte	0x108
 5906 02a4 D2030000 		.4byte	0x3d2
 5907 02a8 34       		.byte	0x34
 5908 02a9 0D       		.uleb128 0xd
 5909 02aa BF0C0000 		.4byte	.LASF50
 5910 02ae 01       		.byte	0x1
 5911 02af 1801     		.2byte	0x118
 5912 02b1 40010000 		.4byte	0x140
 5913 02b5 40       		.byte	0x40
 5914 02b6 0D       		.uleb128 0xd
 5915 02b7 67060000 		.4byte	.LASF51
 5916 02bb 01       		.byte	0x1
 5917 02bc 1901     		.2byte	0x119
 5918 02be 40010000 		.4byte	0x140
 5919 02c2 44       		.byte	0x44
 5920 02c3 0D       		.uleb128 0xd
 5921 02c4 35060000 		.4byte	.LASF52
 5922 02c8 01       		.byte	0x1
 5923 02c9 3701     		.2byte	0x137
 5924 02cb 04010000 		.4byte	0x104
 5925 02cf 48       		.byte	0x48
 5926 02d0 0D       		.uleb128 0xd
 5927 02d1 87030000 		.4byte	.LASF53
 5928 02d5 01       		.byte	0x1
 5929 02d6 3801     		.2byte	0x138
 5930 02d8 09010000 		.4byte	0x109
 5931 02dc 4C       		.byte	0x4c
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 203


 5932 02dd 00       		.byte	0
 5933 02de 0E       		.uleb128 0xe
 5934 02df 01       		.byte	0x1
 5935 02e0 5E000000 		.4byte	0x5e
 5936 02e4 08       		.byte	0x8
 5937 02e5 50       		.byte	0x50
 5938 02e6 0F030000 		.4byte	0x30f
 5939 02ea 0F       		.uleb128 0xf
 5940 02eb 1E0C0000 		.4byte	.LASF54
 5941 02ef 00       		.byte	0
 5942 02f0 0F       		.uleb128 0xf
 5943 02f1 75070000 		.4byte	.LASF55
 5944 02f5 01       		.byte	0x1
 5945 02f6 0F       		.uleb128 0xf
 5946 02f7 2B0D0000 		.4byte	.LASF56
 5947 02fb 02       		.byte	0x2
 5948 02fc 0F       		.uleb128 0xf
 5949 02fd 3E000000 		.4byte	.LASF57
 5950 0301 03       		.byte	0x3
 5951 0302 0F       		.uleb128 0xf
 5952 0303 EE070000 		.4byte	.LASF58
 5953 0307 04       		.byte	0x4
 5954 0308 0F       		.uleb128 0xf
 5955 0309 A80C0000 		.4byte	.LASF59
 5956 030d 05       		.byte	0x5
 5957 030e 00       		.byte	0
 5958 030f 02       		.uleb128 0x2
 5959 0310 5C090000 		.4byte	.LASF60
 5960 0314 08       		.byte	0x8
 5961 0315 57       		.byte	0x57
 5962 0316 DE020000 		.4byte	0x2de
 5963 031a 0E       		.uleb128 0xe
 5964 031b 01       		.byte	0x1
 5965 031c 5E000000 		.4byte	0x5e
 5966 0320 08       		.byte	0x8
 5967 0321 5B       		.byte	0x5b
 5968 0322 45030000 		.4byte	0x345
 5969 0326 0F       		.uleb128 0xf
 5970 0327 B3000000 		.4byte	.LASF61
 5971 032b 00       		.byte	0
 5972 032c 0F       		.uleb128 0xf
 5973 032d 9A090000 		.4byte	.LASF62
 5974 0331 01       		.byte	0x1
 5975 0332 0F       		.uleb128 0xf
 5976 0333 48050000 		.4byte	.LASF63
 5977 0337 02       		.byte	0x2
 5978 0338 0F       		.uleb128 0xf
 5979 0339 0A040000 		.4byte	.LASF64
 5980 033d 03       		.byte	0x3
 5981 033e 0F       		.uleb128 0xf
 5982 033f B6060000 		.4byte	.LASF65
 5983 0343 04       		.byte	0x4
 5984 0344 00       		.byte	0
 5985 0345 02       		.uleb128 0x2
 5986 0346 33050000 		.4byte	.LASF66
 5987 034a 08       		.byte	0x8
 5988 034b 61       		.byte	0x61
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 204


 5989 034c 1A030000 		.4byte	0x31a
 5990 0350 0B       		.uleb128 0xb
 5991 0351 1D010000 		.4byte	.LASF67
 5992 0355 08       		.byte	0x8
 5993 0356 08       		.byte	0x8
 5994 0357 66       		.byte	0x66
 5995 0358 75030000 		.4byte	0x375
 5996 035c 0C       		.uleb128 0xc
 5997 035d 9A020000 		.4byte	.LASF68
 5998 0361 08       		.byte	0x8
 5999 0362 68       		.byte	0x68
 6000 0363 35010000 		.4byte	0x135
 6001 0367 00       		.byte	0
 6002 0368 0C       		.uleb128 0xc
 6003 0369 53080000 		.4byte	.LASF69
 6004 036d 08       		.byte	0x8
 6005 036e 69       		.byte	0x69
 6006 036f 4B010000 		.4byte	0x14b
 6007 0373 04       		.byte	0x4
 6008 0374 00       		.byte	0
 6009 0375 02       		.uleb128 0x2
 6010 0376 D9080000 		.4byte	.LASF70
 6011 037a 08       		.byte	0x8
 6012 037b 6A       		.byte	0x6a
 6013 037c 50030000 		.4byte	0x350
 6014 0380 0B       		.uleb128 0xb
 6015 0381 AF090000 		.4byte	.LASF71
 6016 0385 0C       		.byte	0xc
 6017 0386 08       		.byte	0x8
 6018 0387 6F       		.byte	0x6f
 6019 0388 B1030000 		.4byte	0x3b1
 6020 038c 0C       		.uleb128 0xc
 6021 038d 300C0000 		.4byte	.LASF72
 6022 0391 08       		.byte	0x8
 6023 0392 71       		.byte	0x71
 6024 0393 B0000000 		.4byte	0xb0
 6025 0397 00       		.byte	0
 6026 0398 0C       		.uleb128 0xc
 6027 0399 0F080000 		.4byte	.LASF73
 6028 039d 08       		.byte	0x8
 6029 039e 72       		.byte	0x72
 6030 039f EB000000 		.4byte	0xeb
 6031 03a3 04       		.byte	0x4
 6032 03a4 0C       		.uleb128 0xc
 6033 03a5 D3020000 		.4byte	.LASF74
 6034 03a9 08       		.byte	0x8
 6035 03aa 73       		.byte	0x73
 6036 03ab EB000000 		.4byte	0xeb
 6037 03af 08       		.byte	0x8
 6038 03b0 00       		.byte	0
 6039 03b1 02       		.uleb128 0x2
 6040 03b2 9E070000 		.4byte	.LASF75
 6041 03b6 08       		.byte	0x8
 6042 03b7 74       		.byte	0x74
 6043 03b8 80030000 		.4byte	0x380
 6044 03bc 07       		.uleb128 0x7
 6045 03bd BF000000 		.4byte	0xbf
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 205


 6046 03c1 06       		.uleb128 0x6
 6047 03c2 04       		.byte	0x4
 6048 03c3 2A010000 		.4byte	0x12a
 6049 03c7 06       		.uleb128 0x6
 6050 03c8 04       		.byte	0x4
 6051 03c9 CD030000 		.4byte	0x3cd
 6052 03cd 08       		.uleb128 0x8
 6053 03ce 2A010000 		.4byte	0x12a
 6054 03d2 10       		.uleb128 0x10
 6055 03d3 B8000000 		.4byte	0xb8
 6056 03d7 E2030000 		.4byte	0x3e2
 6057 03db 11       		.uleb128 0x11
 6058 03dc A9000000 		.4byte	0xa9
 6059 03e0 0B       		.byte	0xb
 6060 03e1 00       		.byte	0
 6061 03e2 12       		.uleb128 0x12
 6062 03e3 60030000 		.4byte	.LASF76
 6063 03e7 01       		.byte	0x1
 6064 03e8 4901     		.2byte	0x149
 6065 03ea 50020000 		.4byte	0x250
 6066 03ee 12       		.uleb128 0x12
 6067 03ef 030D0000 		.4byte	.LASF77
 6068 03f3 01       		.byte	0x1
 6069 03f4 4D01     		.2byte	0x14d
 6070 03f6 E2030000 		.4byte	0x3e2
 6071 03fa 13       		.uleb128 0x13
 6072 03fb C2070000 		.4byte	.LASF82
 6073 03ff 02       		.byte	0x2
 6074 0400 D1       		.byte	0xd1
 6075 0401 EB000000 		.4byte	0xeb
 6076 0405 03       		.byte	0x3
 6077 0406 21040000 		.4byte	0x421
 6078 040a 14       		.uleb128 0x14
 6079 040b A4030000 		.4byte	.LASF78
 6080 040f 02       		.byte	0x2
 6081 0410 D3       		.byte	0xd3
 6082 0411 EB000000 		.4byte	0xeb
 6083 0415 14       		.uleb128 0x14
 6084 0416 D0060000 		.4byte	.LASF79
 6085 041a 02       		.byte	0x2
 6086 041b D3       		.byte	0xd3
 6087 041c EB000000 		.4byte	0xeb
 6088 0420 00       		.byte	0
 6089 0421 15       		.uleb128 0x15
 6090 0422 BD050000 		.4byte	.LASF80
 6091 0426 02       		.byte	0x2
 6092 0427 E5       		.byte	0xe5
 6093 0428 03       		.byte	0x3
 6094 0429 39040000 		.4byte	0x439
 6095 042d 16       		.uleb128 0x16
 6096 042e 22090000 		.4byte	.LASF84
 6097 0432 02       		.byte	0x2
 6098 0433 E5       		.byte	0xe5
 6099 0434 EB000000 		.4byte	0xeb
 6100 0438 00       		.byte	0
 6101 0439 15       		.uleb128 0x15
 6102 043a 910B0000 		.4byte	.LASF81
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 206


 6103 043e 02       		.byte	0x2
 6104 043f C1       		.byte	0xc1
 6105 0440 03       		.byte	0x3
 6106 0441 51040000 		.4byte	0x451
 6107 0445 14       		.uleb128 0x14
 6108 0446 D0060000 		.4byte	.LASF79
 6109 044a 02       		.byte	0x2
 6110 044b C3       		.byte	0xc3
 6111 044c EB000000 		.4byte	0xeb
 6112 0450 00       		.byte	0
 6113 0451 13       		.uleb128 0x13
 6114 0452 F7070000 		.4byte	.LASF83
 6115 0456 02       		.byte	0x2
 6116 0457 82       		.byte	0x82
 6117 0458 CA000000 		.4byte	0xca
 6118 045c 03       		.byte	0x3
 6119 045d 78040000 		.4byte	0x478
 6120 0461 16       		.uleb128 0x16
 6121 0462 6D020000 		.4byte	.LASF85
 6122 0466 02       		.byte	0x2
 6123 0467 82       		.byte	0x82
 6124 0468 EB000000 		.4byte	0xeb
 6125 046c 14       		.uleb128 0x14
 6126 046d 3F0B0000 		.4byte	.LASF86
 6127 0471 02       		.byte	0x2
 6128 0472 84       		.byte	0x84
 6129 0473 CA000000 		.4byte	0xca
 6130 0477 00       		.byte	0
 6131 0478 17       		.uleb128 0x17
 6132 0479 48070000 		.4byte	.LASF110
 6133 047d 01       		.byte	0x1
 6134 047e DD02     		.2byte	0x2dd
 6135 0480 35010000 		.4byte	0x135
 6136 0484 00000000 		.4byte	.LFB68
 6137 0488 82000000 		.4byte	.LFE68-.LFB68
 6138 048c 01       		.uleb128 0x1
 6139 048d 9C       		.byte	0x9c
 6140 048e 24050000 		.4byte	0x524
 6141 0492 18       		.uleb128 0x18
 6142 0493 93070000 		.4byte	.LASF87
 6143 0497 01       		.byte	0x1
 6144 0498 DD02     		.2byte	0x2dd
 6145 049a 0E010000 		.4byte	0x10e
 6146 049e 02       		.uleb128 0x2
 6147 049f 91       		.byte	0x91
 6148 04a0 64       		.sleb128 -28
 6149 04a1 18       		.uleb128 0x18
 6150 04a2 59030000 		.4byte	.LASF88
 6151 04a6 01       		.byte	0x1
 6152 04a7 DE02     		.2byte	0x2de
 6153 04a9 BC030000 		.4byte	0x3bc
 6154 04ad 02       		.uleb128 0x2
 6155 04ae 91       		.byte	0x91
 6156 04af 60       		.sleb128 -32
 6157 04b0 18       		.uleb128 0x18
 6158 04b1 DE030000 		.4byte	.LASF89
 6159 04b5 01       		.byte	0x1
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 207


 6160 04b6 DF02     		.2byte	0x2df
 6161 04b8 24050000 		.4byte	0x524
 6162 04bc 02       		.uleb128 0x2
 6163 04bd 91       		.byte	0x91
 6164 04be 5E       		.sleb128 -34
 6165 04bf 18       		.uleb128 0x18
 6166 04c0 450A0000 		.4byte	.LASF90
 6167 04c4 01       		.byte	0x1
 6168 04c5 E002     		.2byte	0x2e0
 6169 04c7 29050000 		.4byte	0x529
 6170 04cb 02       		.uleb128 0x2
 6171 04cc 91       		.byte	0x91
 6172 04cd 58       		.sleb128 -40
 6173 04ce 18       		.uleb128 0x18
 6174 04cf 1B000000 		.4byte	.LASF47
 6175 04d3 01       		.byte	0x1
 6176 04d4 E102     		.2byte	0x2e1
 6177 04d6 40010000 		.4byte	0x140
 6178 04da 02       		.uleb128 0x2
 6179 04db 91       		.byte	0x91
 6180 04dc 00       		.sleb128 0
 6181 04dd 18       		.uleb128 0x18
 6182 04de B10E0000 		.4byte	.LASF91
 6183 04e2 01       		.byte	0x1
 6184 04e3 E202     		.2byte	0x2e2
 6185 04e5 34050000 		.4byte	0x534
 6186 04e9 02       		.uleb128 0x2
 6187 04ea 91       		.byte	0x91
 6188 04eb 04       		.sleb128 4
 6189 04ec 19       		.uleb128 0x19
 6190 04ed 8A070000 		.4byte	.LASF92
 6191 04f1 01       		.byte	0x1
 6192 04f2 E402     		.2byte	0x2e4
 6193 04f4 39050000 		.4byte	0x539
 6194 04f8 02       		.uleb128 0x2
 6195 04f9 91       		.byte	0x91
 6196 04fa 74       		.sleb128 -12
 6197 04fb 19       		.uleb128 0x19
 6198 04fc 5D0B0000 		.4byte	.LASF93
 6199 0500 01       		.byte	0x1
 6200 0501 E502     		.2byte	0x2e5
 6201 0503 35010000 		.4byte	0x135
 6202 0507 02       		.uleb128 0x2
 6203 0508 91       		.byte	0x91
 6204 0509 70       		.sleb128 -16
 6205 050a 1A       		.uleb128 0x1a
 6206 050b 10000000 		.4byte	.LBB27
 6207 050f 34000000 		.4byte	.LBE27-.LBB27
 6208 0513 19       		.uleb128 0x19
 6209 0514 E00A0000 		.4byte	.LASF48
 6210 0518 01       		.byte	0x1
 6211 0519 0203     		.2byte	0x302
 6212 051b C1030000 		.4byte	0x3c1
 6213 051f 02       		.uleb128 0x2
 6214 0520 91       		.byte	0x91
 6215 0521 6C       		.sleb128 -20
 6216 0522 00       		.byte	0
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 208


 6217 0523 00       		.byte	0
 6218 0524 07       		.uleb128 0x7
 6219 0525 D5000000 		.4byte	0xd5
 6220 0529 07       		.uleb128 0x7
 6221 052a B0000000 		.4byte	0xb0
 6222 052e 06       		.uleb128 0x6
 6223 052f 04       		.byte	0x4
 6224 0530 3F020000 		.4byte	0x23f
 6225 0534 07       		.uleb128 0x7
 6226 0535 2E050000 		.4byte	0x52e
 6227 0539 06       		.uleb128 0x6
 6228 053a 04       		.byte	0x4
 6229 053b EE030000 		.4byte	0x3ee
 6230 053f 1B       		.uleb128 0x1b
 6231 0540 84000000 		.4byte	.LASF96
 6232 0544 01       		.byte	0x1
 6233 0545 3803     		.2byte	0x338
 6234 0547 00000000 		.4byte	.LFB69
 6235 054b FE000000 		.4byte	.LFE69-.LFB69
 6236 054f 01       		.uleb128 0x1
 6237 0550 9C       		.byte	0x9c
 6238 0551 EA050000 		.4byte	0x5ea
 6239 0555 18       		.uleb128 0x18
 6240 0556 93070000 		.4byte	.LASF87
 6241 055a 01       		.byte	0x1
 6242 055b 3803     		.2byte	0x338
 6243 055d 0E010000 		.4byte	0x10e
 6244 0561 02       		.uleb128 0x2
 6245 0562 91       		.byte	0x91
 6246 0563 6C       		.sleb128 -20
 6247 0564 18       		.uleb128 0x18
 6248 0565 59030000 		.4byte	.LASF88
 6249 0569 01       		.byte	0x1
 6250 056a 3903     		.2byte	0x339
 6251 056c BC030000 		.4byte	0x3bc
 6252 0570 02       		.uleb128 0x2
 6253 0571 91       		.byte	0x91
 6254 0572 68       		.sleb128 -24
 6255 0573 18       		.uleb128 0x18
 6256 0574 E9060000 		.4byte	.LASF94
 6257 0578 01       		.byte	0x1
 6258 0579 3A03     		.2byte	0x33a
 6259 057b EA050000 		.4byte	0x5ea
 6260 057f 02       		.uleb128 0x2
 6261 0580 91       		.byte	0x91
 6262 0581 64       		.sleb128 -28
 6263 0582 18       		.uleb128 0x18
 6264 0583 450A0000 		.4byte	.LASF90
 6265 0587 01       		.byte	0x1
 6266 0588 3B03     		.2byte	0x33b
 6267 058a 29050000 		.4byte	0x529
 6268 058e 02       		.uleb128 0x2
 6269 058f 91       		.byte	0x91
 6270 0590 60       		.sleb128 -32
 6271 0591 18       		.uleb128 0x18
 6272 0592 1B000000 		.4byte	.LASF47
 6273 0596 01       		.byte	0x1
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 209


 6274 0597 3C03     		.2byte	0x33c
 6275 0599 40010000 		.4byte	0x140
 6276 059d 02       		.uleb128 0x2
 6277 059e 91       		.byte	0x91
 6278 059f 00       		.sleb128 0
 6279 05a0 18       		.uleb128 0x18
 6280 05a1 B10E0000 		.4byte	.LASF91
 6281 05a5 01       		.byte	0x1
 6282 05a6 3D03     		.2byte	0x33d
 6283 05a8 34050000 		.4byte	0x534
 6284 05ac 02       		.uleb128 0x2
 6285 05ad 91       		.byte	0x91
 6286 05ae 04       		.sleb128 4
 6287 05af 18       		.uleb128 0x18
 6288 05b0 8A070000 		.4byte	.LASF92
 6289 05b4 01       		.byte	0x1
 6290 05b5 3E03     		.2byte	0x33e
 6291 05b7 39050000 		.4byte	0x539
 6292 05bb 02       		.uleb128 0x2
 6293 05bc 91       		.byte	0x91
 6294 05bd 08       		.sleb128 8
 6295 05be 18       		.uleb128 0x18
 6296 05bf A30D0000 		.4byte	.LASF95
 6297 05c3 01       		.byte	0x1
 6298 05c4 3F03     		.2byte	0x33f
 6299 05c6 FA050000 		.4byte	0x5fa
 6300 05ca 02       		.uleb128 0x2
 6301 05cb 91       		.byte	0x91
 6302 05cc 0C       		.sleb128 12
 6303 05cd 19       		.uleb128 0x19
 6304 05ce 710E0000 		.4byte	.LASF44
 6305 05d2 01       		.byte	0x1
 6306 05d3 4103     		.2byte	0x341
 6307 05d5 C1030000 		.4byte	0x3c1
 6308 05d9 02       		.uleb128 0x2
 6309 05da 91       		.byte	0x91
 6310 05db 70       		.sleb128 -16
 6311 05dc 1C       		.uleb128 0x1c
 6312 05dd 7800     		.ascii	"x\000"
 6313 05df 01       		.byte	0x1
 6314 05e0 4203     		.2byte	0x342
 6315 05e2 40010000 		.4byte	0x140
 6316 05e6 02       		.uleb128 0x2
 6317 05e7 91       		.byte	0x91
 6318 05e8 74       		.sleb128 -12
 6319 05e9 00       		.byte	0
 6320 05ea 07       		.uleb128 0x7
 6321 05eb EB000000 		.4byte	0xeb
 6322 05ef 06       		.uleb128 0x6
 6323 05f0 04       		.byte	0x4
 6324 05f1 F5050000 		.4byte	0x5f5
 6325 05f5 07       		.uleb128 0x7
 6326 05f6 B1030000 		.4byte	0x3b1
 6327 05fa 07       		.uleb128 0x7
 6328 05fb EF050000 		.4byte	0x5ef
 6329 05ff 1B       		.uleb128 0x1b
 6330 0600 54070000 		.4byte	.LASF97
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 210


 6331 0604 01       		.byte	0x1
 6332 0605 3504     		.2byte	0x435
 6333 0607 00000000 		.4byte	.LFB70
 6334 060b D4000000 		.4byte	.LFE70-.LFB70
 6335 060f 01       		.uleb128 0x1
 6336 0610 9C       		.byte	0x9c
 6337 0611 25060000 		.4byte	0x625
 6338 0615 18       		.uleb128 0x18
 6339 0616 8A070000 		.4byte	.LASF92
 6340 061a 01       		.byte	0x1
 6341 061b 3504     		.2byte	0x435
 6342 061d 39050000 		.4byte	0x539
 6343 0621 02       		.uleb128 0x2
 6344 0622 91       		.byte	0x91
 6345 0623 74       		.sleb128 -12
 6346 0624 00       		.byte	0
 6347 0625 1D       		.uleb128 0x1d
 6348 0626 C7090000 		.4byte	.LASF100
 6349 062a 01       		.byte	0x1
 6350 062b 8A04     		.2byte	0x48a
 6351 062d 00000000 		.4byte	.LFB71
 6352 0631 FC000000 		.4byte	.LFE71-.LFB71
 6353 0635 01       		.uleb128 0x1
 6354 0636 9C       		.byte	0x9c
 6355 0637 5A060000 		.4byte	0x65a
 6356 063b 18       		.uleb128 0x18
 6357 063c E80A0000 		.4byte	.LASF98
 6358 0640 01       		.byte	0x1
 6359 0641 8A04     		.2byte	0x48a
 6360 0643 3F020000 		.4byte	0x23f
 6361 0647 02       		.uleb128 0x2
 6362 0648 91       		.byte	0x91
 6363 0649 6C       		.sleb128 -20
 6364 064a 19       		.uleb128 0x19
 6365 064b 4F0E0000 		.4byte	.LASF99
 6366 064f 01       		.byte	0x1
 6367 0650 8C04     		.2byte	0x48c
 6368 0652 39050000 		.4byte	0x539
 6369 0656 02       		.uleb128 0x2
 6370 0657 91       		.byte	0x91
 6371 0658 74       		.sleb128 -12
 6372 0659 00       		.byte	0
 6373 065a 1D       		.uleb128 0x1d
 6374 065b CE0C0000 		.4byte	.LASF101
 6375 065f 01       		.byte	0x1
 6376 0660 E904     		.2byte	0x4e9
 6377 0662 00000000 		.4byte	.LFB72
 6378 0666 A0000000 		.4byte	.LFE72-.LFB72
 6379 066a 01       		.uleb128 0x1
 6380 066b 9C       		.byte	0x9c
 6381 066c D5060000 		.4byte	0x6d5
 6382 0670 18       		.uleb128 0x18
 6383 0671 220B0000 		.4byte	.LASF102
 6384 0675 01       		.byte	0x1
 6385 0676 E904     		.2byte	0x4e9
 6386 0678 DB060000 		.4byte	0x6db
 6387 067c 02       		.uleb128 0x2
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 211


 6388 067d 91       		.byte	0x91
 6389 067e 64       		.sleb128 -28
 6390 067f 18       		.uleb128 0x18
 6391 0680 EF0D0000 		.4byte	.LASF103
 6392 0684 01       		.byte	0x1
 6393 0685 E904     		.2byte	0x4e9
 6394 0687 E0060000 		.4byte	0x6e0
 6395 068b 02       		.uleb128 0x2
 6396 068c 91       		.byte	0x91
 6397 068d 60       		.sleb128 -32
 6398 068e 19       		.uleb128 0x19
 6399 068f 340E0000 		.4byte	.LASF104
 6400 0693 01       		.byte	0x1
 6401 0694 EB04     		.2byte	0x4eb
 6402 0696 4B010000 		.4byte	0x14b
 6403 069a 02       		.uleb128 0x2
 6404 069b 91       		.byte	0x91
 6405 069c 6C       		.sleb128 -20
 6406 069d 19       		.uleb128 0x19
 6407 069e 410D0000 		.4byte	.LASF105
 6408 06a2 01       		.byte	0x1
 6409 06a3 EC04     		.2byte	0x4ec
 6410 06a5 35010000 		.4byte	0x135
 6411 06a9 02       		.uleb128 0x2
 6412 06aa 91       		.byte	0x91
 6413 06ab 68       		.sleb128 -24
 6414 06ac 19       		.uleb128 0x19
 6415 06ad F6060000 		.4byte	.LASF106
 6416 06b1 01       		.byte	0x1
 6417 06b2 EC04     		.2byte	0x4ec
 6418 06b4 35010000 		.4byte	0x135
 6419 06b8 02       		.uleb128 0x2
 6420 06b9 91       		.byte	0x91
 6421 06ba 74       		.sleb128 -12
 6422 06bb 1A       		.uleb128 0x1a
 6423 06bc 12000000 		.4byte	.LBB28
 6424 06c0 62000000 		.4byte	.LBE28-.LBB28
 6425 06c4 19       		.uleb128 0x19
 6426 06c5 9A050000 		.4byte	.LASF107
 6427 06c9 01       		.byte	0x1
 6428 06ca F604     		.2byte	0x4f6
 6429 06cc E0060000 		.4byte	0x6e0
 6430 06d0 02       		.uleb128 0x2
 6431 06d1 91       		.byte	0x91
 6432 06d2 70       		.sleb128 -16
 6433 06d3 00       		.byte	0
 6434 06d4 00       		.byte	0
 6435 06d5 06       		.uleb128 0x6
 6436 06d6 04       		.byte	0x4
 6437 06d7 4B010000 		.4byte	0x14b
 6438 06db 07       		.uleb128 0x7
 6439 06dc D5060000 		.4byte	0x6d5
 6440 06e0 07       		.uleb128 0x7
 6441 06e1 4B010000 		.4byte	0x14b
 6442 06e5 1D       		.uleb128 0x1d
 6443 06e6 0C060000 		.4byte	.LASF108
 6444 06ea 01       		.byte	0x1
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 212


 6445 06eb 3D05     		.2byte	0x53d
 6446 06ed 00000000 		.4byte	.LFB73
 6447 06f1 48000000 		.4byte	.LFE73-.LFB73
 6448 06f5 01       		.uleb128 0x1
 6449 06f6 9C       		.byte	0x9c
 6450 06f7 1A070000 		.4byte	0x71a
 6451 06fb 18       		.uleb128 0x18
 6452 06fc 3E0C0000 		.4byte	.LASF109
 6453 0700 01       		.byte	0x1
 6454 0701 3D05     		.2byte	0x53d
 6455 0703 E0060000 		.4byte	0x6e0
 6456 0707 02       		.uleb128 0x2
 6457 0708 91       		.byte	0x91
 6458 0709 6C       		.sleb128 -20
 6459 070a 19       		.uleb128 0x19
 6460 070b 410D0000 		.4byte	.LASF105
 6461 070f 01       		.byte	0x1
 6462 0710 3F05     		.2byte	0x53f
 6463 0712 35010000 		.4byte	0x135
 6464 0716 02       		.uleb128 0x2
 6465 0717 91       		.byte	0x91
 6466 0718 74       		.sleb128 -12
 6467 0719 00       		.byte	0
 6468 071a 17       		.uleb128 0x17
 6469 071b 7C070000 		.4byte	.LASF111
 6470 071f 01       		.byte	0x1
 6471 0720 6A05     		.2byte	0x56a
 6472 0722 0F030000 		.4byte	0x30f
 6473 0726 00000000 		.4byte	.LFB74
 6474 072a B0000000 		.4byte	.LFE74-.LFB74
 6475 072e 01       		.uleb128 0x1
 6476 072f 9C       		.byte	0x9c
 6477 0730 8F070000 		.4byte	0x78f
 6478 0734 18       		.uleb128 0x18
 6479 0735 94090000 		.4byte	.LASF112
 6480 0739 01       		.byte	0x1
 6481 073a 6A05     		.2byte	0x56a
 6482 073c 3F020000 		.4byte	0x23f
 6483 0740 02       		.uleb128 0x2
 6484 0741 91       		.byte	0x91
 6485 0742 5C       		.sleb128 -36
 6486 0743 19       		.uleb128 0x19
 6487 0744 E0020000 		.4byte	.LASF113
 6488 0748 01       		.byte	0x1
 6489 0749 6C05     		.2byte	0x56c
 6490 074b 0F030000 		.4byte	0x30f
 6491 074f 02       		.uleb128 0x2
 6492 0750 91       		.byte	0x91
 6493 0751 77       		.sleb128 -9
 6494 0752 19       		.uleb128 0x19
 6495 0753 32000000 		.4byte	.LASF114
 6496 0757 01       		.byte	0x1
 6497 0758 6D05     		.2byte	0x56d
 6498 075a 8F070000 		.4byte	0x78f
 6499 075e 02       		.uleb128 0x2
 6500 075f 91       		.byte	0x91
 6501 0760 6C       		.sleb128 -20
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 213


 6502 0761 19       		.uleb128 0x19
 6503 0762 D0000000 		.4byte	.LASF115
 6504 0766 01       		.byte	0x1
 6505 0767 6D05     		.2byte	0x56d
 6506 0769 8F070000 		.4byte	0x78f
 6507 076d 02       		.uleb128 0x2
 6508 076e 91       		.byte	0x91
 6509 076f 68       		.sleb128 -24
 6510 0770 19       		.uleb128 0x19
 6511 0771 A9020000 		.4byte	.LASF116
 6512 0775 01       		.byte	0x1
 6513 0776 6D05     		.2byte	0x56d
 6514 0778 8F070000 		.4byte	0x78f
 6515 077c 02       		.uleb128 0x2
 6516 077d 91       		.byte	0x91
 6517 077e 64       		.sleb128 -28
 6518 077f 19       		.uleb128 0x19
 6519 0780 4F0E0000 		.4byte	.LASF99
 6520 0784 01       		.byte	0x1
 6521 0785 6E05     		.2byte	0x56e
 6522 0787 A5070000 		.4byte	0x7a5
 6523 078b 02       		.uleb128 0x2
 6524 078c 91       		.byte	0x91
 6525 078d 70       		.sleb128 -16
 6526 078e 00       		.byte	0
 6527 078f 06       		.uleb128 0x6
 6528 0790 04       		.byte	0x4
 6529 0791 95070000 		.4byte	0x795
 6530 0795 07       		.uleb128 0x7
 6531 0796 34020000 		.4byte	0x234
 6532 079a 06       		.uleb128 0x6
 6533 079b 04       		.byte	0x4
 6534 079c A0070000 		.4byte	0x7a0
 6535 07a0 07       		.uleb128 0x7
 6536 07a1 EE030000 		.4byte	0x3ee
 6537 07a5 07       		.uleb128 0x7
 6538 07a6 9A070000 		.4byte	0x79a
 6539 07aa 17       		.uleb128 0x17
 6540 07ab 88050000 		.4byte	.LASF117
 6541 07af 01       		.byte	0x1
 6542 07b0 C605     		.2byte	0x5c6
 6543 07b2 40010000 		.4byte	0x140
 6544 07b6 00000000 		.4byte	.LFB75
 6545 07ba 34000000 		.4byte	.LFE75-.LFB75
 6546 07be 01       		.uleb128 0x1
 6547 07bf 9C       		.byte	0x9c
 6548 07c0 F2070000 		.4byte	0x7f2
 6549 07c4 18       		.uleb128 0x18
 6550 07c5 94090000 		.4byte	.LASF112
 6551 07c9 01       		.byte	0x1
 6552 07ca C605     		.2byte	0x5c6
 6553 07cc F2070000 		.4byte	0x7f2
 6554 07d0 02       		.uleb128 0x2
 6555 07d1 91       		.byte	0x91
 6556 07d2 6C       		.sleb128 -20
 6557 07d3 19       		.uleb128 0x19
 6558 07d4 4F0E0000 		.4byte	.LASF99
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 214


 6559 07d8 01       		.byte	0x1
 6560 07d9 C805     		.2byte	0x5c8
 6561 07db 9A070000 		.4byte	0x79a
 6562 07df 02       		.uleb128 0x2
 6563 07e0 91       		.byte	0x91
 6564 07e1 74       		.sleb128 -12
 6565 07e2 19       		.uleb128 0x19
 6566 07e3 F6020000 		.4byte	.LASF118
 6567 07e7 01       		.byte	0x1
 6568 07e8 C905     		.2byte	0x5c9
 6569 07ea 40010000 		.4byte	0x140
 6570 07ee 02       		.uleb128 0x2
 6571 07ef 91       		.byte	0x91
 6572 07f0 70       		.sleb128 -16
 6573 07f1 00       		.byte	0
 6574 07f2 07       		.uleb128 0x7
 6575 07f3 3F020000 		.4byte	0x23f
 6576 07f7 1E       		.uleb128 0x1e
 6577 07f8 AE080000 		.4byte	.LASF119
 6578 07fc 01       		.byte	0x1
 6579 07fd DC05     		.2byte	0x5dc
 6580 07ff 40010000 		.4byte	0x140
 6581 0803 00000000 		.4byte	.LFB76
 6582 0807 54000000 		.4byte	.LFE76-.LFB76
 6583 080b 01       		.uleb128 0x1
 6584 080c 9C       		.byte	0x9c
 6585 080d 96080000 		.4byte	0x896
 6586 0811 18       		.uleb128 0x18
 6587 0812 94090000 		.4byte	.LASF112
 6588 0816 01       		.byte	0x1
 6589 0817 DC05     		.2byte	0x5dc
 6590 0819 F2070000 		.4byte	0x7f2
 6591 081d 02       		.uleb128 0x2
 6592 081e 91       		.byte	0x91
 6593 081f 5C       		.sleb128 -36
 6594 0820 19       		.uleb128 0x19
 6595 0821 4F0E0000 		.4byte	.LASF99
 6596 0825 01       		.byte	0x1
 6597 0826 DE05     		.2byte	0x5de
 6598 0828 9A070000 		.4byte	0x79a
 6599 082c 02       		.uleb128 0x2
 6600 082d 91       		.byte	0x91
 6601 082e 6C       		.sleb128 -20
 6602 082f 19       		.uleb128 0x19
 6603 0830 F6020000 		.4byte	.LASF118
 6604 0834 01       		.byte	0x1
 6605 0835 DF05     		.2byte	0x5df
 6606 0837 40010000 		.4byte	0x140
 6607 083b 02       		.uleb128 0x2
 6608 083c 91       		.byte	0x91
 6609 083d 68       		.sleb128 -24
 6610 083e 19       		.uleb128 0x19
 6611 083f 51040000 		.4byte	.LASF120
 6612 0843 01       		.byte	0x1
 6613 0844 DF05     		.2byte	0x5df
 6614 0846 40010000 		.4byte	0x140
 6615 084a 02       		.uleb128 0x2
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 215


 6616 084b 91       		.byte	0x91
 6617 084c 70       		.sleb128 -16
 6618 084d 1F       		.uleb128 0x1f
 6619 084e FA030000 		.4byte	0x3fa
 6620 0852 08000000 		.4byte	.LBB29
 6621 0856 1A000000 		.4byte	.LBE29-.LBB29
 6622 085a 01       		.byte	0x1
 6623 085b F305     		.2byte	0x5f3
 6624 085d 7C080000 		.4byte	0x87c
 6625 0861 1A       		.uleb128 0x1a
 6626 0862 08000000 		.4byte	.LBB30
 6627 0866 1A000000 		.4byte	.LBE30-.LBB30
 6628 086a 20       		.uleb128 0x20
 6629 086b 0A040000 		.4byte	0x40a
 6630 086f 02       		.uleb128 0x2
 6631 0870 91       		.byte	0x91
 6632 0871 64       		.sleb128 -28
 6633 0872 20       		.uleb128 0x20
 6634 0873 15040000 		.4byte	0x415
 6635 0877 02       		.uleb128 0x2
 6636 0878 91       		.byte	0x91
 6637 0879 60       		.sleb128 -32
 6638 087a 00       		.byte	0
 6639 087b 00       		.byte	0
 6640 087c 21       		.uleb128 0x21
 6641 087d 21040000 		.4byte	0x421
 6642 0881 3E000000 		.4byte	.LBB31
 6643 0885 06000000 		.4byte	.LBE31-.LBB31
 6644 0889 01       		.byte	0x1
 6645 088a FA05     		.2byte	0x5fa
 6646 088c 22       		.uleb128 0x22
 6647 088d 2D040000 		.4byte	0x42d
 6648 0891 02       		.uleb128 0x2
 6649 0892 91       		.byte	0x91
 6650 0893 74       		.sleb128 -12
 6651 0894 00       		.byte	0
 6652 0895 00       		.byte	0
 6653 0896 1D       		.uleb128 0x1d
 6654 0897 4B090000 		.4byte	.LASF121
 6655 089b 01       		.byte	0x1
 6656 089c 0406     		.2byte	0x604
 6657 089e 00000000 		.4byte	.LFB77
 6658 08a2 38010000 		.4byte	.LFE77-.LFB77
 6659 08a6 01       		.uleb128 0x1
 6660 08a7 9C       		.byte	0x9c
 6661 08a8 07090000 		.4byte	0x907
 6662 08ac 18       		.uleb128 0x18
 6663 08ad 94090000 		.4byte	.LASF112
 6664 08b1 01       		.byte	0x1
 6665 08b2 0406     		.2byte	0x604
 6666 08b4 3F020000 		.4byte	0x23f
 6667 08b8 02       		.uleb128 0x2
 6668 08b9 91       		.byte	0x91
 6669 08ba 64       		.sleb128 -28
 6670 08bb 18       		.uleb128 0x18
 6671 08bc 63080000 		.4byte	.LASF122
 6672 08c0 01       		.byte	0x1
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 216


 6673 08c1 0406     		.2byte	0x604
 6674 08c3 40010000 		.4byte	0x140
 6675 08c7 02       		.uleb128 0x2
 6676 08c8 91       		.byte	0x91
 6677 08c9 60       		.sleb128 -32
 6678 08ca 19       		.uleb128 0x19
 6679 08cb 4F0E0000 		.4byte	.LASF99
 6680 08cf 01       		.byte	0x1
 6681 08d0 0606     		.2byte	0x606
 6682 08d2 39050000 		.4byte	0x539
 6683 08d6 02       		.uleb128 0x2
 6684 08d7 91       		.byte	0x91
 6685 08d8 70       		.sleb128 -16
 6686 08d9 19       		.uleb128 0x19
 6687 08da E80E0000 		.4byte	.LASF123
 6688 08de 01       		.byte	0x1
 6689 08df 0706     		.2byte	0x607
 6690 08e1 40010000 		.4byte	0x140
 6691 08e5 02       		.uleb128 0x2
 6692 08e6 91       		.byte	0x91
 6693 08e7 6C       		.sleb128 -20
 6694 08e8 19       		.uleb128 0x19
 6695 08e9 ED0C0000 		.4byte	.LASF124
 6696 08ed 01       		.byte	0x1
 6697 08ee 0706     		.2byte	0x607
 6698 08f0 40010000 		.4byte	0x140
 6699 08f4 02       		.uleb128 0x2
 6700 08f5 91       		.byte	0x91
 6701 08f6 68       		.sleb128 -24
 6702 08f7 19       		.uleb128 0x19
 6703 08f8 95030000 		.4byte	.LASF125
 6704 08fc 01       		.byte	0x1
 6705 08fd 0806     		.2byte	0x608
 6706 08ff 35010000 		.4byte	0x135
 6707 0903 02       		.uleb128 0x2
 6708 0904 91       		.byte	0x91
 6709 0905 74       		.sleb128 -12
 6710 0906 00       		.byte	0
 6711 0907 1D       		.uleb128 0x1d
 6712 0908 340D0000 		.4byte	.LASF126
 6713 090c 01       		.byte	0x1
 6714 090d A806     		.2byte	0x6a8
 6715 090f 00000000 		.4byte	.LFB78
 6716 0913 04010000 		.4byte	.LFE78-.LFB78
 6717 0917 01       		.uleb128 0x1
 6718 0918 9C       		.byte	0x9c
 6719 0919 3C090000 		.4byte	0x93c
 6720 091d 18       		.uleb128 0x18
 6721 091e FE0A0000 		.4byte	.LASF127
 6722 0922 01       		.byte	0x1
 6723 0923 A806     		.2byte	0x6a8
 6724 0925 3F020000 		.4byte	0x23f
 6725 0929 02       		.uleb128 0x2
 6726 092a 91       		.byte	0x91
 6727 092b 6C       		.sleb128 -20
 6728 092c 19       		.uleb128 0x19
 6729 092d 4F0E0000 		.4byte	.LASF99
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 217


 6730 0931 01       		.byte	0x1
 6731 0932 AA06     		.2byte	0x6aa
 6732 0934 39050000 		.4byte	0x539
 6733 0938 02       		.uleb128 0x2
 6734 0939 91       		.byte	0x91
 6735 093a 74       		.sleb128 -12
 6736 093b 00       		.byte	0
 6737 093c 23       		.uleb128 0x23
 6738 093d AB0A0000 		.4byte	.LASF170
 6739 0941 01       		.byte	0x1
 6740 0942 0D07     		.2byte	0x70d
 6741 0944 35010000 		.4byte	0x135
 6742 0948 00000000 		.4byte	.LFB79
 6743 094c 44000000 		.4byte	.LFE79-.LFB79
 6744 0950 01       		.uleb128 0x1
 6745 0951 9C       		.byte	0x9c
 6746 0952 84090000 		.4byte	0x984
 6747 0956 18       		.uleb128 0x18
 6748 0957 94090000 		.4byte	.LASF112
 6749 095b 01       		.byte	0x1
 6750 095c 0D07     		.2byte	0x70d
 6751 095e F2070000 		.4byte	0x7f2
 6752 0962 02       		.uleb128 0x2
 6753 0963 91       		.byte	0x91
 6754 0964 6C       		.sleb128 -20
 6755 0965 19       		.uleb128 0x19
 6756 0966 5D0B0000 		.4byte	.LASF93
 6757 096a 01       		.byte	0x1
 6758 096b 0F07     		.2byte	0x70f
 6759 096d 35010000 		.4byte	0x135
 6760 0971 02       		.uleb128 0x2
 6761 0972 91       		.byte	0x91
 6762 0973 74       		.sleb128 -12
 6763 0974 19       		.uleb128 0x19
 6764 0975 4F0E0000 		.4byte	.LASF99
 6765 0979 01       		.byte	0x1
 6766 097a 1007     		.2byte	0x710
 6767 097c A5070000 		.4byte	0x7a5
 6768 0980 02       		.uleb128 0x2
 6769 0981 91       		.byte	0x91
 6770 0982 70       		.sleb128 -16
 6771 0983 00       		.byte	0
 6772 0984 1D       		.uleb128 0x1d
 6773 0985 7E0E0000 		.4byte	.LASF128
 6774 0989 01       		.byte	0x1
 6775 098a 3B07     		.2byte	0x73b
 6776 098c 00000000 		.4byte	.LFB80
 6777 0990 A0000000 		.4byte	.LFE80-.LFB80
 6778 0994 01       		.uleb128 0x1
 6779 0995 9C       		.byte	0x9c
 6780 0996 B9090000 		.4byte	0x9b9
 6781 099a 18       		.uleb128 0x18
 6782 099b E8020000 		.4byte	.LASF129
 6783 099f 01       		.byte	0x1
 6784 09a0 3B07     		.2byte	0x73b
 6785 09a2 3F020000 		.4byte	0x23f
 6786 09a6 02       		.uleb128 0x2
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 218


 6787 09a7 91       		.byte	0x91
 6788 09a8 6C       		.sleb128 -20
 6789 09a9 19       		.uleb128 0x19
 6790 09aa 4F0E0000 		.4byte	.LASF99
 6791 09ae 01       		.byte	0x1
 6792 09af 3D07     		.2byte	0x73d
 6793 09b1 B9090000 		.4byte	0x9b9
 6794 09b5 02       		.uleb128 0x2
 6795 09b6 91       		.byte	0x91
 6796 09b7 74       		.sleb128 -12
 6797 09b8 00       		.byte	0
 6798 09b9 07       		.uleb128 0x7
 6799 09ba 39050000 		.4byte	0x539
 6800 09be 17       		.uleb128 0x17
 6801 09bf F4040000 		.4byte	.LASF130
 6802 09c3 01       		.byte	0x1
 6803 09c4 7107     		.2byte	0x771
 6804 09c6 35010000 		.4byte	0x135
 6805 09ca 00000000 		.4byte	.LFB81
 6806 09ce C0000000 		.4byte	.LFE81-.LFB81
 6807 09d2 01       		.uleb128 0x1
 6808 09d3 9C       		.byte	0x9c
 6809 09d4 5D0A0000 		.4byte	0xa5d
 6810 09d8 18       		.uleb128 0x18
 6811 09d9 E8020000 		.4byte	.LASF129
 6812 09dd 01       		.byte	0x1
 6813 09de 7107     		.2byte	0x771
 6814 09e0 3F020000 		.4byte	0x23f
 6815 09e4 02       		.uleb128 0x2
 6816 09e5 91       		.byte	0x91
 6817 09e6 5C       		.sleb128 -36
 6818 09e7 19       		.uleb128 0x19
 6819 09e8 95030000 		.4byte	.LASF125
 6820 09ec 01       		.byte	0x1
 6821 09ed 7307     		.2byte	0x773
 6822 09ef 35010000 		.4byte	0x135
 6823 09f3 02       		.uleb128 0x2
 6824 09f4 91       		.byte	0x91
 6825 09f5 74       		.sleb128 -12
 6826 09f6 19       		.uleb128 0x19
 6827 09f7 4F0E0000 		.4byte	.LASF99
 6828 09fb 01       		.byte	0x1
 6829 09fc 7407     		.2byte	0x774
 6830 09fe B9090000 		.4byte	0x9b9
 6831 0a02 02       		.uleb128 0x2
 6832 0a03 91       		.byte	0x91
 6833 0a04 70       		.sleb128 -16
 6834 0a05 19       		.uleb128 0x19
 6835 0a06 67030000 		.4byte	.LASF131
 6836 0a0a 01       		.byte	0x1
 6837 0a0b 7507     		.2byte	0x775
 6838 0a0d 40010000 		.4byte	0x140
 6839 0a11 02       		.uleb128 0x2
 6840 0a12 91       		.byte	0x91
 6841 0a13 68       		.sleb128 -24
 6842 0a14 1F       		.uleb128 0x1f
 6843 0a15 FA030000 		.4byte	0x3fa
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 219


 6844 0a19 10000000 		.4byte	.LBB33
 6845 0a1d 1A000000 		.4byte	.LBE33-.LBB33
 6846 0a21 01       		.byte	0x1
 6847 0a22 8B07     		.2byte	0x78b
 6848 0a24 430A0000 		.4byte	0xa43
 6849 0a28 1A       		.uleb128 0x1a
 6850 0a29 10000000 		.4byte	.LBB34
 6851 0a2d 1A000000 		.4byte	.LBE34-.LBB34
 6852 0a31 20       		.uleb128 0x20
 6853 0a32 0A040000 		.4byte	0x40a
 6854 0a36 02       		.uleb128 0x2
 6855 0a37 91       		.byte	0x91
 6856 0a38 64       		.sleb128 -28
 6857 0a39 20       		.uleb128 0x20
 6858 0a3a 15040000 		.4byte	0x415
 6859 0a3e 02       		.uleb128 0x2
 6860 0a3f 91       		.byte	0x91
 6861 0a40 60       		.sleb128 -32
 6862 0a41 00       		.byte	0
 6863 0a42 00       		.byte	0
 6864 0a43 21       		.uleb128 0x21
 6865 0a44 21040000 		.4byte	0x421
 6866 0a48 9C000000 		.4byte	.LBB35
 6867 0a4c 06000000 		.4byte	.LBE35-.LBB35
 6868 0a50 01       		.byte	0x1
 6869 0a51 AF07     		.2byte	0x7af
 6870 0a53 22       		.uleb128 0x22
 6871 0a54 2D040000 		.4byte	0x42d
 6872 0a58 02       		.uleb128 0x2
 6873 0a59 91       		.byte	0x91
 6874 0a5a 6C       		.sleb128 -20
 6875 0a5b 00       		.byte	0
 6876 0a5c 00       		.byte	0
 6877 0a5d 1D       		.uleb128 0x1d
 6878 0a5e F40B0000 		.4byte	.LASF132
 6879 0a62 01       		.byte	0x1
 6880 0a63 B707     		.2byte	0x7b7
 6881 0a65 00000000 		.4byte	.LFB82
 6882 0a69 6C000000 		.4byte	.LFE82-.LFB82
 6883 0a6d 01       		.uleb128 0x1
 6884 0a6e 9C       		.byte	0x9c
 6885 0a6f A60A0000 		.4byte	0xaa6
 6886 0a73 19       		.uleb128 0x19
 6887 0a74 5D0B0000 		.4byte	.LASF93
 6888 0a78 01       		.byte	0x1
 6889 0a79 B907     		.2byte	0x7b9
 6890 0a7b 35010000 		.4byte	0x135
 6891 0a7f 02       		.uleb128 0x2
 6892 0a80 91       		.byte	0x91
 6893 0a81 74       		.sleb128 -12
 6894 0a82 21       		.uleb128 0x21
 6895 0a83 39040000 		.4byte	0x439
 6896 0a87 22000000 		.4byte	.LBB37
 6897 0a8b 12000000 		.4byte	.LBE37-.LBB37
 6898 0a8f 01       		.byte	0x1
 6899 0a90 FF07     		.2byte	0x7ff
 6900 0a92 1A       		.uleb128 0x1a
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 220


 6901 0a93 22000000 		.4byte	.LBB38
 6902 0a97 12000000 		.4byte	.LBE38-.LBB38
 6903 0a9b 20       		.uleb128 0x20
 6904 0a9c 45040000 		.4byte	0x445
 6905 0aa0 02       		.uleb128 0x2
 6906 0aa1 91       		.byte	0x91
 6907 0aa2 70       		.sleb128 -16
 6908 0aa3 00       		.byte	0
 6909 0aa4 00       		.byte	0
 6910 0aa5 00       		.byte	0
 6911 0aa6 1D       		.uleb128 0x1d
 6912 0aa7 76050000 		.4byte	.LASF133
 6913 0aab 01       		.byte	0x1
 6914 0aac 3308     		.2byte	0x833
 6915 0aae 00000000 		.4byte	.LFB83
 6916 0ab2 30000000 		.4byte	.LFE83-.LFB83
 6917 0ab6 01       		.uleb128 0x1
 6918 0ab7 9C       		.byte	0x9c
 6919 0ab8 E00A0000 		.4byte	0xae0
 6920 0abc 21       		.uleb128 0x21
 6921 0abd 39040000 		.4byte	0x439
 6922 0ac1 06000000 		.4byte	.LBB39
 6923 0ac5 12000000 		.4byte	.LBE39-.LBB39
 6924 0ac9 01       		.byte	0x1
 6925 0aca 3808     		.2byte	0x838
 6926 0acc 1A       		.uleb128 0x1a
 6927 0acd 06000000 		.4byte	.LBB40
 6928 0ad1 12000000 		.4byte	.LBE40-.LBB40
 6929 0ad5 20       		.uleb128 0x20
 6930 0ad6 45040000 		.4byte	0x445
 6931 0ada 02       		.uleb128 0x2
 6932 0adb 91       		.byte	0x91
 6933 0adc 74       		.sleb128 -12
 6934 0add 00       		.byte	0
 6935 0ade 00       		.byte	0
 6936 0adf 00       		.byte	0
 6937 0ae0 24       		.uleb128 0x24
 6938 0ae1 07050000 		.4byte	.LASF165
 6939 0ae5 01       		.byte	0x1
 6940 0ae6 3E08     		.2byte	0x83e
 6941 0ae8 00000000 		.4byte	.LFB84
 6942 0aec 1C000000 		.4byte	.LFE84-.LFB84
 6943 0af0 01       		.uleb128 0x1
 6944 0af1 9C       		.byte	0x9c
 6945 0af2 17       		.uleb128 0x17
 6946 0af3 730A0000 		.4byte	.LASF134
 6947 0af7 01       		.byte	0x1
 6948 0af8 9208     		.2byte	0x892
 6949 0afa 35010000 		.4byte	0x135
 6950 0afe 00000000 		.4byte	.LFB85
 6951 0b02 1C010000 		.4byte	.LFE85-.LFB85
 6952 0b06 01       		.uleb128 0x1
 6953 0b07 9C       		.byte	0x9c
 6954 0b08 440B0000 		.4byte	0xb44
 6955 0b0c 19       		.uleb128 0x19
 6956 0b0d 4F0E0000 		.4byte	.LASF99
 6957 0b11 01       		.byte	0x1
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 221


 6958 0b12 9408     		.2byte	0x894
 6959 0b14 39050000 		.4byte	0x539
 6960 0b18 02       		.uleb128 0x2
 6961 0b19 91       		.byte	0x91
 6962 0b1a 74       		.sleb128 -12
 6963 0b1b 19       		.uleb128 0x19
 6964 0b1c 410D0000 		.4byte	.LASF105
 6965 0b20 01       		.byte	0x1
 6966 0b21 9508     		.2byte	0x895
 6967 0b23 35010000 		.4byte	0x135
 6968 0b27 02       		.uleb128 0x2
 6969 0b28 91       		.byte	0x91
 6970 0b29 70       		.sleb128 -16
 6971 0b2a 1A       		.uleb128 0x1a
 6972 0b2b 9E000000 		.4byte	.LBB41
 6973 0b2f 2E000000 		.4byte	.LBE41-.LBB41
 6974 0b33 19       		.uleb128 0x19
 6975 0b34 5C010000 		.4byte	.LASF135
 6976 0b38 01       		.byte	0x1
 6977 0b39 CD08     		.2byte	0x8cd
 6978 0b3b 4B010000 		.4byte	0x14b
 6979 0b3f 02       		.uleb128 0x2
 6980 0b40 91       		.byte	0x91
 6981 0b41 6C       		.sleb128 -20
 6982 0b42 00       		.byte	0
 6983 0b43 00       		.byte	0
 6984 0b44 1E       		.uleb128 0x1e
 6985 0b45 C7080000 		.4byte	.LASF136
 6986 0b49 01       		.byte	0x1
 6987 0b4a 0009     		.2byte	0x900
 6988 0b4c 4B010000 		.4byte	0x14b
 6989 0b50 00000000 		.4byte	.LFB86
 6990 0b54 1C000000 		.4byte	.LFE86-.LFB86
 6991 0b58 01       		.uleb128 0x1
 6992 0b59 9C       		.byte	0x9c
 6993 0b5a 6E0B0000 		.4byte	0xb6e
 6994 0b5e 19       		.uleb128 0x19
 6995 0b5f ED0B0000 		.4byte	.LASF137
 6996 0b63 01       		.byte	0x1
 6997 0b64 0209     		.2byte	0x902
 6998 0b66 4B010000 		.4byte	0x14b
 6999 0b6a 02       		.uleb128 0x2
 7000 0b6b 91       		.byte	0x91
 7001 0b6c 74       		.sleb128 -12
 7002 0b6d 00       		.byte	0
 7003 0b6e 1E       		.uleb128 0x1e
 7004 0b6f 38040000 		.4byte	.LASF138
 7005 0b73 01       		.byte	0x1
 7006 0b74 0F09     		.2byte	0x90f
 7007 0b76 4B010000 		.4byte	0x14b
 7008 0b7a 00000000 		.4byte	.LFB87
 7009 0b7e 20000000 		.4byte	.LFE87-.LFB87
 7010 0b82 01       		.uleb128 0x1
 7011 0b83 9C       		.byte	0x9c
 7012 0b84 A70B0000 		.4byte	0xba7
 7013 0b88 19       		.uleb128 0x19
 7014 0b89 5D0B0000 		.4byte	.LASF93
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 222


 7015 0b8d 01       		.byte	0x1
 7016 0b8e 1109     		.2byte	0x911
 7017 0b90 4B010000 		.4byte	0x14b
 7018 0b94 02       		.uleb128 0x2
 7019 0b95 91       		.byte	0x91
 7020 0b96 70       		.sleb128 -16
 7021 0b97 19       		.uleb128 0x19
 7022 0b98 67030000 		.4byte	.LASF131
 7023 0b9c 01       		.byte	0x1
 7024 0b9d 1209     		.2byte	0x912
 7025 0b9f 40010000 		.4byte	0x140
 7026 0ba3 02       		.uleb128 0x2
 7027 0ba4 91       		.byte	0x91
 7028 0ba5 74       		.sleb128 -12
 7029 0ba6 00       		.byte	0
 7030 0ba7 25       		.uleb128 0x25
 7031 0ba8 FF020000 		.4byte	.LASF188
 7032 0bac 01       		.byte	0x1
 7033 0bad 2E09     		.2byte	0x92e
 7034 0baf 40010000 		.4byte	0x140
 7035 0bb3 00000000 		.4byte	.LFB88
 7036 0bb7 14000000 		.4byte	.LFE88-.LFB88
 7037 0bbb 01       		.uleb128 0x1
 7038 0bbc 9C       		.byte	0x9c
 7039 0bbd 1E       		.uleb128 0x1e
 7040 0bbe D70B0000 		.4byte	.LASF139
 7041 0bc2 01       		.byte	0x1
 7042 0bc3 3609     		.2byte	0x936
 7043 0bc5 B2000000 		.4byte	0xb2
 7044 0bc9 00000000 		.4byte	.LFB89
 7045 0bcd 2C000000 		.4byte	.LFE89-.LFB89
 7046 0bd1 01       		.uleb128 0x1
 7047 0bd2 9C       		.byte	0x9c
 7048 0bd3 F60B0000 		.4byte	0xbf6
 7049 0bd7 18       		.uleb128 0x18
 7050 0bd8 6E090000 		.4byte	.LASF140
 7051 0bdc 01       		.byte	0x1
 7052 0bdd 3609     		.2byte	0x936
 7053 0bdf 3F020000 		.4byte	0x23f
 7054 0be3 02       		.uleb128 0x2
 7055 0be4 91       		.byte	0x91
 7056 0be5 6C       		.sleb128 -20
 7057 0be6 19       		.uleb128 0x19
 7058 0be7 4F0E0000 		.4byte	.LASF99
 7059 0beb 01       		.byte	0x1
 7060 0bec 3809     		.2byte	0x938
 7061 0bee 39050000 		.4byte	0x539
 7062 0bf2 02       		.uleb128 0x2
 7063 0bf3 91       		.byte	0x91
 7064 0bf4 74       		.sleb128 -12
 7065 0bf5 00       		.byte	0
 7066 0bf6 17       		.uleb128 0x17
 7067 0bf7 C1020000 		.4byte	.LASF141
 7068 0bfb 01       		.byte	0x1
 7069 0bfc 310A     		.2byte	0xa31
 7070 0bfe 35010000 		.4byte	0x135
 7071 0c02 00000000 		.4byte	.LFB90
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 223


 7072 0c06 30000000 		.4byte	.LFE90-.LFB90
 7073 0c0a 01       		.uleb128 0x1
 7074 0c0b 9C       		.byte	0x9c
 7075 0c0c 2F0C0000 		.4byte	0xc2f
 7076 0c10 18       		.uleb128 0x18
 7077 0c11 930D0000 		.4byte	.LASF142
 7078 0c15 01       		.byte	0x1
 7079 0c16 310A     		.2byte	0xa31
 7080 0c18 4B010000 		.4byte	0x14b
 7081 0c1c 02       		.uleb128 0x2
 7082 0c1d 91       		.byte	0x91
 7083 0c1e 6C       		.sleb128 -20
 7084 0c1f 19       		.uleb128 0x19
 7085 0c20 95030000 		.4byte	.LASF125
 7086 0c24 01       		.byte	0x1
 7087 0c25 330A     		.2byte	0xa33
 7088 0c27 35010000 		.4byte	0x135
 7089 0c2b 02       		.uleb128 0x2
 7090 0c2c 91       		.byte	0x91
 7091 0c2d 74       		.sleb128 -12
 7092 0c2e 00       		.byte	0
 7093 0c2f 17       		.uleb128 0x17
 7094 0c30 5A020000 		.4byte	.LASF143
 7095 0c34 01       		.byte	0x1
 7096 0c35 930A     		.2byte	0xa93
 7097 0c37 35010000 		.4byte	0x135
 7098 0c3b 00000000 		.4byte	.LFB91
 7099 0c3f 50010000 		.4byte	.LFE91-.LFB91
 7100 0c43 01       		.uleb128 0x1
 7101 0c44 9C       		.byte	0x9c
 7102 0c45 A90C0000 		.4byte	0xca9
 7103 0c49 19       		.uleb128 0x19
 7104 0c4a 4F0E0000 		.4byte	.LASF99
 7105 0c4e 01       		.byte	0x1
 7106 0c4f 950A     		.2byte	0xa95
 7107 0c51 39050000 		.4byte	0x539
 7108 0c55 02       		.uleb128 0x2
 7109 0c56 91       		.byte	0x91
 7110 0c57 68       		.sleb128 -24
 7111 0c58 19       		.uleb128 0x19
 7112 0c59 520A0000 		.4byte	.LASF28
 7113 0c5d 01       		.byte	0x1
 7114 0c5e 960A     		.2byte	0xa96
 7115 0c60 4B010000 		.4byte	0x14b
 7116 0c64 02       		.uleb128 0x2
 7117 0c65 91       		.byte	0x91
 7118 0c66 64       		.sleb128 -28
 7119 0c67 19       		.uleb128 0x19
 7120 0c68 C20A0000 		.4byte	.LASF144
 7121 0c6c 01       		.byte	0x1
 7122 0c6d 970A     		.2byte	0xa97
 7123 0c6f 35010000 		.4byte	0x135
 7124 0c73 02       		.uleb128 0x2
 7125 0c74 91       		.byte	0x91
 7126 0c75 74       		.sleb128 -12
 7127 0c76 1A       		.uleb128 0x1a
 7128 0c77 12000000 		.4byte	.LBB42
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 224


 7129 0c7b FC000000 		.4byte	.LBE42-.LBB42
 7130 0c7f 19       		.uleb128 0x19
 7131 0c80 9A050000 		.4byte	.LASF107
 7132 0c84 01       		.byte	0x1
 7133 0c85 A10A     		.2byte	0xaa1
 7134 0c87 E0060000 		.4byte	0x6e0
 7135 0c8b 02       		.uleb128 0x2
 7136 0c8c 91       		.byte	0x91
 7137 0c8d 70       		.sleb128 -16
 7138 0c8e 1A       		.uleb128 0x1a
 7139 0c8f 26000000 		.4byte	.LBB43
 7140 0c93 22000000 		.4byte	.LBE43-.LBB43
 7141 0c97 19       		.uleb128 0x19
 7142 0c98 EF050000 		.4byte	.LASF145
 7143 0c9c 01       		.byte	0x1
 7144 0c9d A90A     		.2byte	0xaa9
 7145 0c9f A90C0000 		.4byte	0xca9
 7146 0ca3 02       		.uleb128 0x2
 7147 0ca4 91       		.byte	0x91
 7148 0ca5 6C       		.sleb128 -20
 7149 0ca6 00       		.byte	0
 7150 0ca7 00       		.byte	0
 7151 0ca8 00       		.byte	0
 7152 0ca9 06       		.uleb128 0x6
 7153 0caa 04       		.byte	0x4
 7154 0cab 34020000 		.4byte	0x234
 7155 0caf 1D       		.uleb128 0x1d
 7156 0cb0 8E040000 		.4byte	.LASF146
 7157 0cb4 01       		.byte	0x1
 7158 0cb5 AD0B     		.2byte	0xbad
 7159 0cb7 00000000 		.4byte	.LFB92
 7160 0cbb D8000000 		.4byte	.LFE92-.LFB92
 7161 0cbf 01       		.uleb128 0x1
 7162 0cc0 9C       		.byte	0x9c
 7163 0cc1 530D0000 		.4byte	0xd53
 7164 0cc5 26       		.uleb128 0x26
 7165 0cc6 1C000000 		.4byte	.LBB44
 7166 0cca 4E000000 		.4byte	.LBE44-.LBB44
 7167 0cce F10C0000 		.4byte	0xcf1
 7168 0cd2 19       		.uleb128 0x19
 7169 0cd3 270C0000 		.4byte	.LASF147
 7170 0cd7 01       		.byte	0x1
 7171 0cd8 D60B     		.2byte	0xbd6
 7172 0cda 590D0000 		.4byte	0xd59
 7173 0cde 02       		.uleb128 0x2
 7174 0cdf 91       		.byte	0x91
 7175 0ce0 74       		.sleb128 -12
 7176 0ce1 19       		.uleb128 0x19
 7177 0ce2 2A080000 		.4byte	.LASF148
 7178 0ce6 01       		.byte	0x1
 7179 0ce7 D60B     		.2byte	0xbd6
 7180 0ce9 EA050000 		.4byte	0x5ea
 7181 0ced 02       		.uleb128 0x2
 7182 0cee 91       		.byte	0x91
 7183 0cef 70       		.sleb128 -16
 7184 0cf0 00       		.byte	0
 7185 0cf1 1A       		.uleb128 0x1a
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 225


 7186 0cf2 6A000000 		.4byte	.LBB45
 7187 0cf6 50000000 		.4byte	.LBE45-.LBB45
 7188 0cfa 19       		.uleb128 0x19
 7189 0cfb B10C0000 		.4byte	.LASF149
 7190 0cff 01       		.byte	0x1
 7191 0d00 E10B     		.2byte	0xbe1
 7192 0d02 40010000 		.4byte	0x140
 7193 0d06 02       		.uleb128 0x2
 7194 0d07 91       		.byte	0x91
 7195 0d08 6C       		.sleb128 -20
 7196 0d09 1F       		.uleb128 0x1f
 7197 0d0a 51040000 		.4byte	0x451
 7198 0d0e 70000000 		.4byte	.LBB46
 7199 0d12 0A000000 		.4byte	.LBE46-.LBB46
 7200 0d16 01       		.byte	0x1
 7201 0d17 E10B     		.2byte	0xbe1
 7202 0d19 380D0000 		.4byte	0xd38
 7203 0d1d 22       		.uleb128 0x22
 7204 0d1e 61040000 		.4byte	0x461
 7205 0d22 02       		.uleb128 0x2
 7206 0d23 91       		.byte	0x91
 7207 0d24 64       		.sleb128 -28
 7208 0d25 1A       		.uleb128 0x1a
 7209 0d26 70000000 		.4byte	.LBB47
 7210 0d2a 0A000000 		.4byte	.LBE47-.LBB47
 7211 0d2e 20       		.uleb128 0x20
 7212 0d2f 6C040000 		.4byte	0x46c
 7213 0d33 02       		.uleb128 0x2
 7214 0d34 91       		.byte	0x91
 7215 0d35 63       		.sleb128 -29
 7216 0d36 00       		.byte	0
 7217 0d37 00       		.byte	0
 7218 0d38 1A       		.uleb128 0x1a
 7219 0d39 80000000 		.4byte	.LBB48
 7220 0d3d 3A000000 		.4byte	.LBE48-.LBB48
 7221 0d41 19       		.uleb128 0x19
 7222 0d42 26000000 		.4byte	.LASF150
 7223 0d46 01       		.byte	0x1
 7224 0d47 E10B     		.2byte	0xbe1
 7225 0d49 5E0D0000 		.4byte	0xd5e
 7226 0d4d 02       		.uleb128 0x2
 7227 0d4e 91       		.byte	0x91
 7228 0d4f 68       		.sleb128 -24
 7229 0d50 00       		.byte	0
 7230 0d51 00       		.byte	0
 7231 0d52 00       		.byte	0
 7232 0d53 06       		.uleb128 0x6
 7233 0d54 04       		.byte	0x4
 7234 0d55 EA050000 		.4byte	0x5ea
 7235 0d59 07       		.uleb128 0x7
 7236 0d5a 530D0000 		.4byte	0xd53
 7237 0d5e 07       		.uleb128 0x7
 7238 0d5f A90C0000 		.4byte	0xca9
 7239 0d63 1D       		.uleb128 0x1d
 7240 0d64 F6050000 		.4byte	.LASF151
 7241 0d68 01       		.byte	0x1
 7242 0d69 F80B     		.2byte	0xbf8
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 226


 7243 0d6b 00000000 		.4byte	.LFB93
 7244 0d6f 2C000000 		.4byte	.LFE93-.LFB93
 7245 0d73 01       		.uleb128 0x1
 7246 0d74 9C       		.byte	0x9c
 7247 0d75 980D0000 		.4byte	0xd98
 7248 0d79 18       		.uleb128 0x18
 7249 0d7a EB000000 		.4byte	.LASF152
 7250 0d7e 01       		.byte	0x1
 7251 0d7f F80B     		.2byte	0xbf8
 7252 0d81 5E0D0000 		.4byte	0xd5e
 7253 0d85 02       		.uleb128 0x2
 7254 0d86 91       		.byte	0x91
 7255 0d87 74       		.sleb128 -12
 7256 0d88 18       		.uleb128 0x18
 7257 0d89 090D0000 		.4byte	.LASF153
 7258 0d8d 01       		.byte	0x1
 7259 0d8e F80B     		.2byte	0xbf8
 7260 0d90 E0060000 		.4byte	0x6e0
 7261 0d94 02       		.uleb128 0x2
 7262 0d95 91       		.byte	0x91
 7263 0d96 70       		.sleb128 -16
 7264 0d97 00       		.byte	0
 7265 0d98 1D       		.uleb128 0x1d
 7266 0d99 5A0C0000 		.4byte	.LASF154
 7267 0d9d 01       		.byte	0x1
 7268 0d9e 090C     		.2byte	0xc09
 7269 0da0 00000000 		.4byte	.LFB94
 7270 0da4 3C000000 		.4byte	.LFE94-.LFB94
 7271 0da8 01       		.uleb128 0x1
 7272 0da9 9C       		.byte	0x9c
 7273 0daa DC0D0000 		.4byte	0xddc
 7274 0dae 18       		.uleb128 0x18
 7275 0daf EB000000 		.4byte	.LASF152
 7276 0db3 01       		.byte	0x1
 7277 0db4 090C     		.2byte	0xc09
 7278 0db6 A90C0000 		.4byte	0xca9
 7279 0dba 02       		.uleb128 0x2
 7280 0dbb 91       		.byte	0x91
 7281 0dbc 74       		.sleb128 -12
 7282 0dbd 18       		.uleb128 0x18
 7283 0dbe 520A0000 		.4byte	.LASF28
 7284 0dc2 01       		.byte	0x1
 7285 0dc3 090C     		.2byte	0xc09
 7286 0dc5 E0060000 		.4byte	0x6e0
 7287 0dc9 02       		.uleb128 0x2
 7288 0dca 91       		.byte	0x91
 7289 0dcb 70       		.sleb128 -16
 7290 0dcc 18       		.uleb128 0x18
 7291 0dcd 090D0000 		.4byte	.LASF153
 7292 0dd1 01       		.byte	0x1
 7293 0dd2 090C     		.2byte	0xc09
 7294 0dd4 E0060000 		.4byte	0x6e0
 7295 0dd8 02       		.uleb128 0x2
 7296 0dd9 91       		.byte	0x91
 7297 0dda 6C       		.sleb128 -20
 7298 0ddb 00       		.byte	0
 7299 0ddc 17       		.uleb128 0x17
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 227


 7300 0ddd 8D060000 		.4byte	.LASF155
 7301 0de1 01       		.byte	0x1
 7302 0de2 420C     		.2byte	0xc42
 7303 0de4 35010000 		.4byte	0x135
 7304 0de8 00000000 		.4byte	.LFB95
 7305 0dec A8000000 		.4byte	.LFE95-.LFB95
 7306 0df0 01       		.uleb128 0x1
 7307 0df1 9C       		.byte	0x9c
 7308 0df2 240E0000 		.4byte	0xe24
 7309 0df6 18       		.uleb128 0x18
 7310 0df7 EB000000 		.4byte	.LASF152
 7311 0dfb 01       		.byte	0x1
 7312 0dfc 420C     		.2byte	0xc42
 7313 0dfe 240E0000 		.4byte	0xe24
 7314 0e02 02       		.uleb128 0x2
 7315 0e03 91       		.byte	0x91
 7316 0e04 6C       		.sleb128 -20
 7317 0e05 19       		.uleb128 0x19
 7318 0e06 CF030000 		.4byte	.LASF156
 7319 0e0a 01       		.byte	0x1
 7320 0e0b 440C     		.2byte	0xc44
 7321 0e0d 39050000 		.4byte	0x539
 7322 0e11 02       		.uleb128 0x2
 7323 0e12 91       		.byte	0x91
 7324 0e13 70       		.sleb128 -16
 7325 0e14 19       		.uleb128 0x19
 7326 0e15 5D0B0000 		.4byte	.LASF93
 7327 0e19 01       		.byte	0x1
 7328 0e1a 450C     		.2byte	0xc45
 7329 0e1c 35010000 		.4byte	0x135
 7330 0e20 02       		.uleb128 0x2
 7331 0e21 91       		.byte	0x91
 7332 0e22 74       		.sleb128 -12
 7333 0e23 00       		.byte	0
 7334 0e24 07       		.uleb128 0x7
 7335 0e25 8F070000 		.4byte	0x78f
 7336 0e29 1D       		.uleb128 0x1d
 7337 0e2a 45060000 		.4byte	.LASF157
 7338 0e2e 01       		.byte	0x1
 7339 0e2f 860C     		.2byte	0xc86
 7340 0e31 00000000 		.4byte	.LFB96
 7341 0e35 84000000 		.4byte	.LFE96-.LFB96
 7342 0e39 01       		.uleb128 0x1
 7343 0e3a 9C       		.byte	0x9c
 7344 0e3b 6D0E0000 		.4byte	0xe6d
 7345 0e3f 18       		.uleb128 0x18
 7346 0e40 A10E0000 		.4byte	.LASF158
 7347 0e44 01       		.byte	0x1
 7348 0e45 860C     		.2byte	0xc86
 7349 0e47 2E020000 		.4byte	0x22e
 7350 0e4b 02       		.uleb128 0x2
 7351 0e4c 91       		.byte	0x91
 7352 0e4d 6C       		.sleb128 -20
 7353 0e4e 18       		.uleb128 0x18
 7354 0e4f 520A0000 		.4byte	.LASF28
 7355 0e53 01       		.byte	0x1
 7356 0e54 860C     		.2byte	0xc86
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 228


 7357 0e56 E0060000 		.4byte	0x6e0
 7358 0e5a 02       		.uleb128 0x2
 7359 0e5b 91       		.byte	0x91
 7360 0e5c 68       		.sleb128 -24
 7361 0e5d 19       		.uleb128 0x19
 7362 0e5e CF030000 		.4byte	.LASF156
 7363 0e62 01       		.byte	0x1
 7364 0e63 880C     		.2byte	0xc88
 7365 0e65 39050000 		.4byte	0x539
 7366 0e69 02       		.uleb128 0x2
 7367 0e6a 91       		.byte	0x91
 7368 0e6b 74       		.sleb128 -12
 7369 0e6c 00       		.byte	0
 7370 0e6d 1D       		.uleb128 0x1d
 7371 0e6e 2B020000 		.4byte	.LASF159
 7372 0e72 01       		.byte	0x1
 7373 0e73 B60C     		.2byte	0xcb6
 7374 0e75 00000000 		.4byte	.LFB97
 7375 0e79 30000000 		.4byte	.LFE97-.LFB97
 7376 0e7d 01       		.uleb128 0x1
 7377 0e7e 9C       		.byte	0x9c
 7378 0e7f 930E0000 		.4byte	0xe93
 7379 0e83 18       		.uleb128 0x18
 7380 0e84 A4080000 		.4byte	.LASF160
 7381 0e88 01       		.byte	0x1
 7382 0e89 B60C     		.2byte	0xcb6
 7383 0e8b 990E0000 		.4byte	0xe99
 7384 0e8f 02       		.uleb128 0x2
 7385 0e90 91       		.byte	0x91
 7386 0e91 74       		.sleb128 -12
 7387 0e92 00       		.byte	0
 7388 0e93 06       		.uleb128 0x6
 7389 0e94 04       		.byte	0x4
 7390 0e95 75030000 		.4byte	0x375
 7391 0e99 07       		.uleb128 0x7
 7392 0e9a 930E0000 		.4byte	0xe93
 7393 0e9e 27       		.uleb128 0x27
 7394 0e9f E3080000 		.4byte	.LASF161
 7395 0ea3 01       		.byte	0x1
 7396 0ea4 C20C     		.2byte	0xcc2
 7397 0ea6 00000000 		.4byte	.LFB98
 7398 0eaa 2C000000 		.4byte	.LFE98-.LFB98
 7399 0eae 01       		.uleb128 0x1
 7400 0eaf 9C       		.byte	0x9c
 7401 0eb0 C40E0000 		.4byte	0xec4
 7402 0eb4 18       		.uleb128 0x18
 7403 0eb5 A4080000 		.4byte	.LASF160
 7404 0eb9 01       		.byte	0x1
 7405 0eba C20C     		.2byte	0xcc2
 7406 0ebc 990E0000 		.4byte	0xe99
 7407 0ec0 02       		.uleb128 0x2
 7408 0ec1 91       		.byte	0x91
 7409 0ec2 74       		.sleb128 -12
 7410 0ec3 00       		.byte	0
 7411 0ec4 17       		.uleb128 0x17
 7412 0ec5 0D0B0000 		.4byte	.LASF162
 7413 0ec9 01       		.byte	0x1
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 229


 7414 0eca CA0C     		.2byte	0xcca
 7415 0ecc 35010000 		.4byte	0x135
 7416 0ed0 00000000 		.4byte	.LFB99
 7417 0ed4 8C000000 		.4byte	.LFE99-.LFB99
 7418 0ed8 01       		.uleb128 0x1
 7419 0ed9 9C       		.byte	0x9c
 7420 0eda 340F0000 		.4byte	0xf34
 7421 0ede 18       		.uleb128 0x18
 7422 0edf A4080000 		.4byte	.LASF160
 7423 0ee3 01       		.byte	0x1
 7424 0ee4 CA0C     		.2byte	0xcca
 7425 0ee6 990E0000 		.4byte	0xe99
 7426 0eea 02       		.uleb128 0x2
 7427 0eeb 91       		.byte	0x91
 7428 0eec 64       		.sleb128 -28
 7429 0eed 18       		.uleb128 0x18
 7430 0eee 9A0C0000 		.4byte	.LASF163
 7431 0ef2 01       		.byte	0x1
 7432 0ef3 CA0C     		.2byte	0xcca
 7433 0ef5 DB060000 		.4byte	0x6db
 7434 0ef9 02       		.uleb128 0x2
 7435 0efa 91       		.byte	0x91
 7436 0efb 60       		.sleb128 -32
 7437 0efc 19       		.uleb128 0x19
 7438 0efd 5D0B0000 		.4byte	.LASF93
 7439 0f01 01       		.byte	0x1
 7440 0f02 CC0C     		.2byte	0xccc
 7441 0f04 35010000 		.4byte	0x135
 7442 0f08 02       		.uleb128 0x2
 7443 0f09 91       		.byte	0x91
 7444 0f0a 74       		.sleb128 -12
 7445 0f0b 1A       		.uleb128 0x1a
 7446 0f0c 0E000000 		.4byte	.LBB49
 7447 0f10 68000000 		.4byte	.LBE49-.LBB49
 7448 0f14 19       		.uleb128 0x19
 7449 0f15 9A050000 		.4byte	.LASF107
 7450 0f19 01       		.byte	0x1
 7451 0f1a D40C     		.2byte	0xcd4
 7452 0f1c E0060000 		.4byte	0x6e0
 7453 0f20 02       		.uleb128 0x2
 7454 0f21 91       		.byte	0x91
 7455 0f22 70       		.sleb128 -16
 7456 0f23 19       		.uleb128 0x19
 7457 0f24 FD030000 		.4byte	.LASF164
 7458 0f28 01       		.byte	0x1
 7459 0f29 D50C     		.2byte	0xcd5
 7460 0f2b E0060000 		.4byte	0x6e0
 7461 0f2f 02       		.uleb128 0x2
 7462 0f30 91       		.byte	0x91
 7463 0f31 6C       		.sleb128 -20
 7464 0f32 00       		.byte	0
 7465 0f33 00       		.byte	0
 7466 0f34 24       		.uleb128 0x24
 7467 0f35 6E0B0000 		.4byte	.LASF166
 7468 0f39 01       		.byte	0x1
 7469 0f3a 090D     		.2byte	0xd09
 7470 0f3c 00000000 		.4byte	.LFB100
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 230


 7471 0f40 18000000 		.4byte	.LFE100-.LFB100
 7472 0f44 01       		.uleb128 0x1
 7473 0f45 9C       		.byte	0x9c
 7474 0f46 1B       		.uleb128 0x1b
 7475 0f47 03070000 		.4byte	.LASF167
 7476 0f4b 01       		.byte	0x1
 7477 0f4c 400D     		.2byte	0xd40
 7478 0f4e 00000000 		.4byte	.LFB101
 7479 0f52 0E000000 		.4byte	.LFE101-.LFB101
 7480 0f56 01       		.uleb128 0x1
 7481 0f57 9C       		.byte	0x9c
 7482 0f58 6C0F0000 		.4byte	0xf6c
 7483 0f5c 18       		.uleb128 0x18
 7484 0f5d 450A0000 		.4byte	.LASF90
 7485 0f61 01       		.byte	0x1
 7486 0f62 400D     		.2byte	0xd40
 7487 0f64 B0000000 		.4byte	0xb0
 7488 0f68 02       		.uleb128 0x2
 7489 0f69 91       		.byte	0x91
 7490 0f6a 74       		.sleb128 -12
 7491 0f6b 00       		.byte	0
 7492 0f6c 1B       		.uleb128 0x1b
 7493 0f6d 8A0E0000 		.4byte	.LASF168
 7494 0f71 01       		.byte	0x1
 7495 0f72 170E     		.2byte	0xe17
 7496 0f74 00000000 		.4byte	.LFB102
 7497 0f78 80000000 		.4byte	.LFE102-.LFB102
 7498 0f7c 01       		.uleb128 0x1
 7499 0f7d 9C       		.byte	0x9c
 7500 0f7e 920F0000 		.4byte	0xf92
 7501 0f82 19       		.uleb128 0x19
 7502 0f83 1B000000 		.4byte	.LASF47
 7503 0f87 01       		.byte	0x1
 7504 0f88 190E     		.2byte	0xe19
 7505 0f8a 40010000 		.4byte	0x140
 7506 0f8e 02       		.uleb128 0x2
 7507 0f8f 91       		.byte	0x91
 7508 0f90 74       		.sleb128 -12
 7509 0f91 00       		.byte	0
 7510 0f92 1B       		.uleb128 0x1b
 7511 0f93 BF0E0000 		.4byte	.LASF169
 7512 0f97 01       		.byte	0x1
 7513 0f98 370E     		.2byte	0xe37
 7514 0f9a 00000000 		.4byte	.LFB103
 7515 0f9e 58000000 		.4byte	.LFE103-.LFB103
 7516 0fa2 01       		.uleb128 0x1
 7517 0fa3 9C       		.byte	0x9c
 7518 0fa4 C20F0000 		.4byte	0xfc2
 7519 0fa8 1A       		.uleb128 0x1a
 7520 0fa9 06000000 		.4byte	.LBB50
 7521 0fad 3E000000 		.4byte	.LBE50-.LBB50
 7522 0fb1 19       		.uleb128 0x19
 7523 0fb2 4F0E0000 		.4byte	.LASF99
 7524 0fb6 01       		.byte	0x1
 7525 0fb7 3E0E     		.2byte	0xe3e
 7526 0fb9 39050000 		.4byte	0x539
 7527 0fbd 02       		.uleb128 0x2
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 231


 7528 0fbe 91       		.byte	0x91
 7529 0fbf 74       		.sleb128 -12
 7530 0fc0 00       		.byte	0
 7531 0fc1 00       		.byte	0
 7532 0fc2 23       		.uleb128 0x23
 7533 0fc3 780D0000 		.4byte	.LASF171
 7534 0fc7 01       		.byte	0x1
 7535 0fc8 D70E     		.2byte	0xed7
 7536 0fca D5000000 		.4byte	0xd5
 7537 0fce 00000000 		.4byte	.LFB104
 7538 0fd2 36000000 		.4byte	.LFE104-.LFB104
 7539 0fd6 01       		.uleb128 0x1
 7540 0fd7 9C       		.byte	0x9c
 7541 0fd8 FB0F0000 		.4byte	0xffb
 7542 0fdc 18       		.uleb128 0x18
 7543 0fdd 63050000 		.4byte	.LASF172
 7544 0fe1 01       		.byte	0x1
 7545 0fe2 D70E     		.2byte	0xed7
 7546 0fe4 FB0F0000 		.4byte	0xffb
 7547 0fe8 02       		.uleb128 0x2
 7548 0fe9 91       		.byte	0x91
 7549 0fea 6C       		.sleb128 -20
 7550 0feb 19       		.uleb128 0x19
 7551 0fec CD050000 		.4byte	.LASF173
 7552 0ff0 01       		.byte	0x1
 7553 0ff1 D90E     		.2byte	0xed9
 7554 0ff3 EB000000 		.4byte	0xeb
 7555 0ff7 02       		.uleb128 0x2
 7556 0ff8 91       		.byte	0x91
 7557 0ff9 74       		.sleb128 -12
 7558 0ffa 00       		.byte	0
 7559 0ffb 06       		.uleb128 0x6
 7560 0ffc 04       		.byte	0x4
 7561 0ffd 01100000 		.4byte	0x1001
 7562 1001 07       		.uleb128 0x7
 7563 1002 CA000000 		.4byte	0xca
 7564 1006 17       		.uleb128 0x17
 7565 1007 17050000 		.4byte	.LASF174
 7566 100b 01       		.byte	0x1
 7567 100c 130F     		.2byte	0xf13
 7568 100e 40010000 		.4byte	0x140
 7569 1012 00000000 		.4byte	.LFB105
 7570 1016 38000000 		.4byte	.LFE105-.LFB105
 7571 101a 01       		.uleb128 0x1
 7572 101b 9C       		.byte	0x9c
 7573 101c 5D100000 		.4byte	0x105d
 7574 1020 18       		.uleb128 0x18
 7575 1021 94090000 		.4byte	.LASF112
 7576 1025 01       		.byte	0x1
 7577 1026 130F     		.2byte	0xf13
 7578 1028 3F020000 		.4byte	0x23f
 7579 102c 02       		.uleb128 0x2
 7580 102d 91       		.byte	0x91
 7581 102e 64       		.sleb128 -28
 7582 102f 19       		.uleb128 0x19
 7583 1030 4F0E0000 		.4byte	.LASF99
 7584 1034 01       		.byte	0x1
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 232


 7585 1035 150F     		.2byte	0xf15
 7586 1037 39050000 		.4byte	0x539
 7587 103b 02       		.uleb128 0x2
 7588 103c 91       		.byte	0x91
 7589 103d 74       		.sleb128 -12
 7590 103e 19       		.uleb128 0x19
 7591 103f B80B0000 		.4byte	.LASF175
 7592 1043 01       		.byte	0x1
 7593 1044 160F     		.2byte	0xf16
 7594 1046 56010000 		.4byte	0x156
 7595 104a 02       		.uleb128 0x2
 7596 104b 91       		.byte	0x91
 7597 104c 70       		.sleb128 -16
 7598 104d 19       		.uleb128 0x19
 7599 104e F6020000 		.4byte	.LASF118
 7600 1052 01       		.byte	0x1
 7601 1053 170F     		.2byte	0xf17
 7602 1055 40010000 		.4byte	0x140
 7603 1059 02       		.uleb128 0x2
 7604 105a 91       		.byte	0x91
 7605 105b 6C       		.sleb128 -20
 7606 105c 00       		.byte	0
 7607 105d 1B       		.uleb128 0x1b
 7608 105e 1E0D0000 		.4byte	.LASF176
 7609 1062 01       		.byte	0x1
 7610 1063 2F0F     		.2byte	0xf2f
 7611 1065 00000000 		.4byte	.LFB106
 7612 1069 20000000 		.4byte	.LFE106-.LFB106
 7613 106d 01       		.uleb128 0x1
 7614 106e 9C       		.byte	0x9c
 7615 106f 83100000 		.4byte	0x1083
 7616 1073 18       		.uleb128 0x18
 7617 1074 4F0E0000 		.4byte	.LASF99
 7618 1078 01       		.byte	0x1
 7619 1079 2F0F     		.2byte	0xf2f
 7620 107b 39050000 		.4byte	0x539
 7621 107f 02       		.uleb128 0x2
 7622 1080 91       		.byte	0x91
 7623 1081 74       		.sleb128 -12
 7624 1082 00       		.byte	0
 7625 1083 28       		.uleb128 0x28
 7626 1084 37080000 		.4byte	.LASF177
 7627 1088 01       		.byte	0x1
 7628 1089 670F     		.2byte	0xf67
 7629 108b 00000000 		.4byte	.LFB107
 7630 108f 40000000 		.4byte	.LFE107-.LFB107
 7631 1093 01       		.uleb128 0x1
 7632 1094 9C       		.byte	0x9c
 7633 1095 A9100000 		.4byte	0x10a9
 7634 1099 19       		.uleb128 0x19
 7635 109a 4F0E0000 		.4byte	.LASF99
 7636 109e 01       		.byte	0x1
 7637 109f 690F     		.2byte	0xf69
 7638 10a1 39050000 		.4byte	0x539
 7639 10a5 02       		.uleb128 0x2
 7640 10a6 91       		.byte	0x91
 7641 10a7 74       		.sleb128 -12
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 233


 7642 10a8 00       		.byte	0
 7643 10a9 1E       		.uleb128 0x1e
 7644 10aa 510D0000 		.4byte	.LASF178
 7645 10ae 01       		.byte	0x1
 7646 10af 810F     		.2byte	0xf81
 7647 10b1 3F020000 		.4byte	0x23f
 7648 10b5 00000000 		.4byte	.LFB108
 7649 10b9 1C000000 		.4byte	.LFE108-.LFB108
 7650 10bd 01       		.uleb128 0x1
 7651 10be 9C       		.byte	0x9c
 7652 10bf D3100000 		.4byte	0x10d3
 7653 10c3 19       		.uleb128 0x19
 7654 10c4 5D0B0000 		.4byte	.LASF93
 7655 10c8 01       		.byte	0x1
 7656 10c9 830F     		.2byte	0xf83
 7657 10cb 3F020000 		.4byte	0x23f
 7658 10cf 02       		.uleb128 0x2
 7659 10d0 91       		.byte	0x91
 7660 10d1 74       		.sleb128 -12
 7661 10d2 00       		.byte	0
 7662 10d3 17       		.uleb128 0x17
 7663 10d4 A30B0000 		.4byte	.LASF179
 7664 10d8 01       		.byte	0x1
 7665 10d9 AE0F     		.2byte	0xfae
 7666 10db 35010000 		.4byte	0x135
 7667 10df 00000000 		.4byte	.LFB109
 7668 10e3 EC000000 		.4byte	.LFE109-.LFB109
 7669 10e7 01       		.uleb128 0x1
 7670 10e8 9C       		.byte	0x9c
 7671 10e9 1B110000 		.4byte	0x111b
 7672 10ed 18       		.uleb128 0x18
 7673 10ee D20A0000 		.4byte	.LASF180
 7674 10f2 01       		.byte	0x1
 7675 10f3 AE0F     		.2byte	0xfae
 7676 10f5 F2070000 		.4byte	0x7f2
 7677 10f9 02       		.uleb128 0x2
 7678 10fa 91       		.byte	0x91
 7679 10fb 6C       		.sleb128 -20
 7680 10fc 19       		.uleb128 0x19
 7681 10fd C60B0000 		.4byte	.LASF181
 7682 1101 01       		.byte	0x1
 7683 1102 B00F     		.2byte	0xfb0
 7684 1104 B9090000 		.4byte	0x9b9
 7685 1108 02       		.uleb128 0x2
 7686 1109 91       		.byte	0x91
 7687 110a 70       		.sleb128 -16
 7688 110b 19       		.uleb128 0x19
 7689 110c 5D0B0000 		.4byte	.LASF93
 7690 1110 01       		.byte	0x1
 7691 1111 B10F     		.2byte	0xfb1
 7692 1113 35010000 		.4byte	0x135
 7693 1117 02       		.uleb128 0x2
 7694 1118 91       		.byte	0x91
 7695 1119 74       		.sleb128 -12
 7696 111a 00       		.byte	0
 7697 111b 17       		.uleb128 0x17
 7698 111c 75060000 		.4byte	.LASF182
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 234


 7699 1120 01       		.byte	0x1
 7700 1121 0810     		.2byte	0x1008
 7701 1123 35010000 		.4byte	0x135
 7702 1127 00000000 		.4byte	.LFB110
 7703 112b C8000000 		.4byte	.LFE110-.LFB110
 7704 112f 01       		.uleb128 0x1
 7705 1130 9C       		.byte	0x9c
 7706 1131 63110000 		.4byte	0x1163
 7707 1135 18       		.uleb128 0x18
 7708 1136 D20A0000 		.4byte	.LASF180
 7709 113a 01       		.byte	0x1
 7710 113b 0810     		.2byte	0x1008
 7711 113d F2070000 		.4byte	0x7f2
 7712 1141 02       		.uleb128 0x2
 7713 1142 91       		.byte	0x91
 7714 1143 6C       		.sleb128 -20
 7715 1144 19       		.uleb128 0x19
 7716 1145 4F0E0000 		.4byte	.LASF99
 7717 1149 01       		.byte	0x1
 7718 114a 0A10     		.2byte	0x100a
 7719 114c B9090000 		.4byte	0x9b9
 7720 1150 02       		.uleb128 0x2
 7721 1151 91       		.byte	0x91
 7722 1152 70       		.sleb128 -16
 7723 1153 19       		.uleb128 0x19
 7724 1154 5D0B0000 		.4byte	.LASF93
 7725 1158 01       		.byte	0x1
 7726 1159 0B10     		.2byte	0x100b
 7727 115b 35010000 		.4byte	0x135
 7728 115f 02       		.uleb128 0x2
 7729 1160 91       		.byte	0x91
 7730 1161 74       		.sleb128 -12
 7731 1162 00       		.byte	0
 7732 1163 1D       		.uleb128 0x1d
 7733 1164 D0040000 		.4byte	.LASF183
 7734 1168 01       		.byte	0x1
 7735 1169 5810     		.2byte	0x1058
 7736 116b 00000000 		.4byte	.LFB111
 7737 116f DC000000 		.4byte	.LFE111-.LFB111
 7738 1173 01       		.uleb128 0x1
 7739 1174 9C       		.byte	0x9c
 7740 1175 D4110000 		.4byte	0x11d4
 7741 1179 18       		.uleb128 0x18
 7742 117a D20A0000 		.4byte	.LASF180
 7743 117e 01       		.byte	0x1
 7744 117f 5810     		.2byte	0x1058
 7745 1181 F2070000 		.4byte	0x7f2
 7746 1185 02       		.uleb128 0x2
 7747 1186 91       		.byte	0x91
 7748 1187 64       		.sleb128 -28
 7749 1188 18       		.uleb128 0x18
 7750 1189 1E0A0000 		.4byte	.LASF184
 7751 118d 01       		.byte	0x1
 7752 118e 5810     		.2byte	0x1058
 7753 1190 40010000 		.4byte	0x140
 7754 1194 02       		.uleb128 0x2
 7755 1195 91       		.byte	0x91
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 235


 7756 1196 60       		.sleb128 -32
 7757 1197 19       		.uleb128 0x19
 7758 1198 4F0E0000 		.4byte	.LASF99
 7759 119c 01       		.byte	0x1
 7760 119d 5A10     		.2byte	0x105a
 7761 119f B9090000 		.4byte	0x9b9
 7762 11a3 02       		.uleb128 0x2
 7763 11a4 91       		.byte	0x91
 7764 11a5 70       		.sleb128 -16
 7765 11a6 19       		.uleb128 0x19
 7766 11a7 ED0C0000 		.4byte	.LASF124
 7767 11ab 01       		.byte	0x1
 7768 11ac 5B10     		.2byte	0x105b
 7769 11ae 40010000 		.4byte	0x140
 7770 11b2 02       		.uleb128 0x2
 7771 11b3 91       		.byte	0x91
 7772 11b4 68       		.sleb128 -24
 7773 11b5 19       		.uleb128 0x19
 7774 11b6 D3090000 		.4byte	.LASF185
 7775 11ba 01       		.byte	0x1
 7776 11bb 5B10     		.2byte	0x105b
 7777 11bd 40010000 		.4byte	0x140
 7778 11c1 02       		.uleb128 0x2
 7779 11c2 91       		.byte	0x91
 7780 11c3 74       		.sleb128 -12
 7781 11c4 19       		.uleb128 0x19
 7782 11c5 5D000000 		.4byte	.LASF186
 7783 11c9 01       		.byte	0x1
 7784 11ca 5C10     		.2byte	0x105c
 7785 11cc D4110000 		.4byte	0x11d4
 7786 11d0 02       		.uleb128 0x2
 7787 11d1 91       		.byte	0x91
 7788 11d2 6C       		.sleb128 -20
 7789 11d3 00       		.byte	0
 7790 11d4 07       		.uleb128 0x7
 7791 11d5 40010000 		.4byte	0x140
 7792 11d9 1E       		.uleb128 0x1e
 7793 11da 31090000 		.4byte	.LASF187
 7794 11de 01       		.byte	0x1
 7795 11df FA11     		.2byte	0x11fa
 7796 11e1 4B010000 		.4byte	0x14b
 7797 11e5 00000000 		.4byte	.LFB112
 7798 11e9 30000000 		.4byte	.LFE112-.LFB112
 7799 11ed 01       		.uleb128 0x1
 7800 11ee 9C       		.byte	0x9c
 7801 11ef 03120000 		.4byte	0x1203
 7802 11f3 19       		.uleb128 0x19
 7803 11f4 F6020000 		.4byte	.LASF118
 7804 11f8 01       		.byte	0x1
 7805 11f9 FC11     		.2byte	0x11fc
 7806 11fb 4B010000 		.4byte	0x14b
 7807 11ff 02       		.uleb128 0x2
 7808 1200 91       		.byte	0x91
 7809 1201 74       		.sleb128 -12
 7810 1202 00       		.byte	0
 7811 1203 25       		.uleb128 0x25
 7812 1204 17060000 		.4byte	.LASF189
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 236


 7813 1208 01       		.byte	0x1
 7814 1209 0A12     		.2byte	0x120a
 7815 120b 3F020000 		.4byte	0x23f
 7816 120f 00000000 		.4byte	.LFB113
 7817 1213 28000000 		.4byte	.LFE113-.LFB113
 7818 1217 01       		.uleb128 0x1
 7819 1218 9C       		.byte	0x9c
 7820 1219 17       		.uleb128 0x17
 7821 121a 18070000 		.4byte	.LASF190
 7822 121e 01       		.byte	0x1
 7823 121f 1B12     		.2byte	0x121b
 7824 1221 EB000000 		.4byte	0xeb
 7825 1225 00000000 		.4byte	.LFB114
 7826 1229 90000000 		.4byte	.LFE114-.LFB114
 7827 122d 01       		.uleb128 0x1
 7828 122e 9C       		.byte	0x9c
 7829 122f 61120000 		.4byte	0x1261
 7830 1233 18       		.uleb128 0x18
 7831 1234 EB030000 		.4byte	.LASF191
 7832 1238 01       		.byte	0x1
 7833 1239 1B12     		.2byte	0x121b
 7834 123b 35010000 		.4byte	0x135
 7835 123f 02       		.uleb128 0x2
 7836 1240 91       		.byte	0x91
 7837 1241 6C       		.sleb128 -20
 7838 1242 18       		.uleb128 0x18
 7839 1243 090D0000 		.4byte	.LASF153
 7840 1247 01       		.byte	0x1
 7841 1248 1B12     		.2byte	0x121b
 7842 124a 4B010000 		.4byte	0x14b
 7843 124e 02       		.uleb128 0x2
 7844 124f 91       		.byte	0x91
 7845 1250 68       		.sleb128 -24
 7846 1251 19       		.uleb128 0x19
 7847 1252 DF0E0000 		.4byte	.LASF192
 7848 1256 01       		.byte	0x1
 7849 1257 1D12     		.2byte	0x121d
 7850 1259 EB000000 		.4byte	0xeb
 7851 125d 02       		.uleb128 0x2
 7852 125e 91       		.byte	0x91
 7853 125f 74       		.sleb128 -12
 7854 1260 00       		.byte	0
 7855 1261 17       		.uleb128 0x17
 7856 1262 38070000 		.4byte	.LASF193
 7857 1266 01       		.byte	0x1
 7858 1267 5F12     		.2byte	0x125f
 7859 1269 35010000 		.4byte	0x135
 7860 126d 00000000 		.4byte	.LFB115
 7861 1271 B4000000 		.4byte	.LFE115-.LFB115
 7862 1275 01       		.uleb128 0x1
 7863 1276 9C       		.byte	0x9c
 7864 1277 C7120000 		.4byte	0x12c7
 7865 127b 18       		.uleb128 0x18
 7866 127c 67040000 		.4byte	.LASF194
 7867 1280 01       		.byte	0x1
 7868 1281 5F12     		.2byte	0x125f
 7869 1283 EB000000 		.4byte	0xeb
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 237


 7870 1287 02       		.uleb128 0x2
 7871 1288 91       		.byte	0x91
 7872 1289 6C       		.sleb128 -20
 7873 128a 18       		.uleb128 0x18
 7874 128b 70000000 		.4byte	.LASF195
 7875 128f 01       		.byte	0x1
 7876 1290 5F12     		.2byte	0x125f
 7877 1292 EB000000 		.4byte	0xeb
 7878 1296 02       		.uleb128 0x2
 7879 1297 91       		.byte	0x91
 7880 1298 68       		.sleb128 -24
 7881 1299 18       		.uleb128 0x18
 7882 129a 480B0000 		.4byte	.LASF196
 7883 129e 01       		.byte	0x1
 7884 129f 5F12     		.2byte	0x125f
 7885 12a1 C7120000 		.4byte	0x12c7
 7886 12a5 02       		.uleb128 0x2
 7887 12a6 91       		.byte	0x91
 7888 12a7 64       		.sleb128 -28
 7889 12a8 18       		.uleb128 0x18
 7890 12a9 090D0000 		.4byte	.LASF153
 7891 12ad 01       		.byte	0x1
 7892 12ae 5F12     		.2byte	0x125f
 7893 12b0 4B010000 		.4byte	0x14b
 7894 12b4 02       		.uleb128 0x2
 7895 12b5 91       		.byte	0x91
 7896 12b6 60       		.sleb128 -32
 7897 12b7 19       		.uleb128 0x19
 7898 12b8 5D0B0000 		.4byte	.LASF93
 7899 12bc 01       		.byte	0x1
 7900 12bd 6112     		.2byte	0x1261
 7901 12bf 35010000 		.4byte	0x135
 7902 12c3 02       		.uleb128 0x2
 7903 12c4 91       		.byte	0x91
 7904 12c5 74       		.sleb128 -12
 7905 12c6 00       		.byte	0
 7906 12c7 06       		.uleb128 0x6
 7907 12c8 04       		.byte	0x4
 7908 12c9 EB000000 		.4byte	0xeb
 7909 12cd 17       		.uleb128 0x17
 7910 12ce B6030000 		.4byte	.LASF197
 7911 12d2 01       		.byte	0x1
 7912 12d3 AF12     		.2byte	0x12af
 7913 12d5 35010000 		.4byte	0x135
 7914 12d9 00000000 		.4byte	.LFB116
 7915 12dd 10010000 		.4byte	.LFE116-.LFB116
 7916 12e1 01       		.uleb128 0x1
 7917 12e2 9C       		.byte	0x9c
 7918 12e3 51130000 		.4byte	0x1351
 7919 12e7 18       		.uleb128 0x18
 7920 12e8 86090000 		.4byte	.LASF198
 7921 12ec 01       		.byte	0x1
 7922 12ed AF12     		.2byte	0x12af
 7923 12ef 3F020000 		.4byte	0x23f
 7924 12f3 02       		.uleb128 0x2
 7925 12f4 91       		.byte	0x91
 7926 12f5 64       		.sleb128 -28
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 238


 7927 12f6 18       		.uleb128 0x18
 7928 12f7 F60A0000 		.4byte	.LASF199
 7929 12fb 01       		.byte	0x1
 7930 12fc AF12     		.2byte	0x12af
 7931 12fe EB000000 		.4byte	0xeb
 7932 1302 02       		.uleb128 0x2
 7933 1303 91       		.byte	0x91
 7934 1304 60       		.sleb128 -32
 7935 1305 18       		.uleb128 0x18
 7936 1306 1A090000 		.4byte	.LASF200
 7937 130a 01       		.byte	0x1
 7938 130b AF12     		.2byte	0x12af
 7939 130d 45030000 		.4byte	0x345
 7940 1311 02       		.uleb128 0x2
 7941 1312 91       		.byte	0x91
 7942 1313 5F       		.sleb128 -33
 7943 1314 18       		.uleb128 0x18
 7944 1315 87080000 		.4byte	.LASF201
 7945 1319 01       		.byte	0x1
 7946 131a AF12     		.2byte	0x12af
 7947 131c C7120000 		.4byte	0x12c7
 7948 1320 02       		.uleb128 0x2
 7949 1321 91       		.byte	0x91
 7950 1322 58       		.sleb128 -40
 7951 1323 19       		.uleb128 0x19
 7952 1324 4F0E0000 		.4byte	.LASF99
 7953 1328 01       		.byte	0x1
 7954 1329 B112     		.2byte	0x12b1
 7955 132b 39050000 		.4byte	0x539
 7956 132f 02       		.uleb128 0x2
 7957 1330 91       		.byte	0x91
 7958 1331 70       		.sleb128 -16
 7959 1332 19       		.uleb128 0x19
 7960 1333 5D0B0000 		.4byte	.LASF93
 7961 1337 01       		.byte	0x1
 7962 1338 B212     		.2byte	0x12b2
 7963 133a 35010000 		.4byte	0x135
 7964 133e 02       		.uleb128 0x2
 7965 133f 91       		.byte	0x91
 7966 1340 74       		.sleb128 -12
 7967 1341 19       		.uleb128 0x19
 7968 1342 15020000 		.4byte	.LASF202
 7969 1346 01       		.byte	0x1
 7970 1347 B312     		.2byte	0x12b3
 7971 1349 CA000000 		.4byte	0xca
 7972 134d 02       		.uleb128 0x2
 7973 134e 91       		.byte	0x91
 7974 134f 6F       		.sleb128 -17
 7975 1350 00       		.byte	0
 7976 1351 17       		.uleb128 0x17
 7977 1352 40020000 		.4byte	.LASF203
 7978 1356 01       		.byte	0x1
 7979 1357 2113     		.2byte	0x1321
 7980 1359 35010000 		.4byte	0x135
 7981 135d 00000000 		.4byte	.LFB117
 7982 1361 4C010000 		.4byte	.LFE117-.LFB117
 7983 1365 01       		.uleb128 0x1
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 239


 7984 1366 9C       		.byte	0x9c
 7985 1367 3B140000 		.4byte	0x143b
 7986 136b 18       		.uleb128 0x18
 7987 136c 86090000 		.4byte	.LASF198
 7988 1370 01       		.byte	0x1
 7989 1371 2113     		.2byte	0x1321
 7990 1373 3F020000 		.4byte	0x23f
 7991 1377 02       		.uleb128 0x2
 7992 1378 91       		.byte	0x91
 7993 1379 54       		.sleb128 -44
 7994 137a 18       		.uleb128 0x18
 7995 137b F60A0000 		.4byte	.LASF199
 7996 137f 01       		.byte	0x1
 7997 1380 2113     		.2byte	0x1321
 7998 1382 EB000000 		.4byte	0xeb
 7999 1386 02       		.uleb128 0x2
 8000 1387 91       		.byte	0x91
 8001 1388 50       		.sleb128 -48
 8002 1389 18       		.uleb128 0x18
 8003 138a 1A090000 		.4byte	.LASF200
 8004 138e 01       		.byte	0x1
 8005 138f 2113     		.2byte	0x1321
 8006 1391 45030000 		.4byte	0x345
 8007 1395 02       		.uleb128 0x2
 8008 1396 91       		.byte	0x91
 8009 1397 4F       		.sleb128 -49
 8010 1398 18       		.uleb128 0x18
 8011 1399 87080000 		.4byte	.LASF201
 8012 139d 01       		.byte	0x1
 8013 139e 2113     		.2byte	0x1321
 8014 13a0 C7120000 		.4byte	0x12c7
 8015 13a4 02       		.uleb128 0x2
 8016 13a5 91       		.byte	0x91
 8017 13a6 48       		.sleb128 -56
 8018 13a7 18       		.uleb128 0x18
 8019 13a8 99000000 		.4byte	.LASF204
 8020 13ac 01       		.byte	0x1
 8021 13ad 2113     		.2byte	0x1321
 8022 13af 3B140000 		.4byte	0x143b
 8023 13b3 02       		.uleb128 0x2
 8024 13b4 91       		.byte	0x91
 8025 13b5 00       		.sleb128 0
 8026 13b6 19       		.uleb128 0x19
 8027 13b7 4F0E0000 		.4byte	.LASF99
 8028 13bb 01       		.byte	0x1
 8029 13bc 2313     		.2byte	0x1323
 8030 13be 39050000 		.4byte	0x539
 8031 13c2 02       		.uleb128 0x2
 8032 13c3 91       		.byte	0x91
 8033 13c4 70       		.sleb128 -16
 8034 13c5 19       		.uleb128 0x19
 8035 13c6 15020000 		.4byte	.LASF202
 8036 13ca 01       		.byte	0x1
 8037 13cb 2413     		.2byte	0x1324
 8038 13cd CA000000 		.4byte	0xca
 8039 13d1 02       		.uleb128 0x2
 8040 13d2 91       		.byte	0x91
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 240


 8041 13d3 67       		.sleb128 -25
 8042 13d4 19       		.uleb128 0x19
 8043 13d5 5D0B0000 		.4byte	.LASF93
 8044 13d9 01       		.byte	0x1
 8045 13da 2513     		.2byte	0x1325
 8046 13dc 35010000 		.4byte	0x135
 8047 13e0 02       		.uleb128 0x2
 8048 13e1 91       		.byte	0x91
 8049 13e2 74       		.sleb128 -12
 8050 13e3 19       		.uleb128 0x19
 8051 13e4 67030000 		.4byte	.LASF131
 8052 13e8 01       		.byte	0x1
 8053 13e9 2613     		.2byte	0x1326
 8054 13eb 40010000 		.4byte	0x140
 8055 13ef 02       		.uleb128 0x2
 8056 13f0 91       		.byte	0x91
 8057 13f1 68       		.sleb128 -24
 8058 13f2 1F       		.uleb128 0x1f
 8059 13f3 FA030000 		.4byte	0x3fa
 8060 13f7 18000000 		.4byte	.LBB51
 8061 13fb 1A000000 		.4byte	.LBE51-.LBB51
 8062 13ff 01       		.byte	0x1
 8063 1400 3E13     		.2byte	0x133e
 8064 1402 21140000 		.4byte	0x1421
 8065 1406 1A       		.uleb128 0x1a
 8066 1407 18000000 		.4byte	.LBB52
 8067 140b 1A000000 		.4byte	.LBE52-.LBB52
 8068 140f 20       		.uleb128 0x20
 8069 1410 0A040000 		.4byte	0x40a
 8070 1414 02       		.uleb128 0x2
 8071 1415 91       		.byte	0x91
 8072 1416 60       		.sleb128 -32
 8073 1417 20       		.uleb128 0x20
 8074 1418 15040000 		.4byte	0x415
 8075 141c 02       		.uleb128 0x2
 8076 141d 91       		.byte	0x91
 8077 141e 5C       		.sleb128 -36
 8078 141f 00       		.byte	0
 8079 1420 00       		.byte	0
 8080 1421 21       		.uleb128 0x21
 8081 1422 21040000 		.4byte	0x421
 8082 1426 24010000 		.4byte	.LBB53
 8083 142a 06000000 		.4byte	.LBE53-.LBB53
 8084 142e 01       		.byte	0x1
 8085 142f 9813     		.2byte	0x1398
 8086 1431 22       		.uleb128 0x22
 8087 1432 2D040000 		.4byte	0x42d
 8088 1436 02       		.uleb128 0x2
 8089 1437 91       		.byte	0x91
 8090 1438 6C       		.sleb128 -20
 8091 1439 00       		.byte	0
 8092 143a 00       		.byte	0
 8093 143b 06       		.uleb128 0x6
 8094 143c 04       		.byte	0x4
 8095 143d 35010000 		.4byte	0x135
 8096 1441 1D       		.uleb128 0x1d
 8097 1442 820A0000 		.4byte	.LASF205
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 241


 8098 1446 01       		.byte	0x1
 8099 1447 A213     		.2byte	0x13a2
 8100 1449 00000000 		.4byte	.LFB118
 8101 144d E4000000 		.4byte	.LFE118-.LFB118
 8102 1451 01       		.uleb128 0x1
 8103 1452 9C       		.byte	0x9c
 8104 1453 EB140000 		.4byte	0x14eb
 8105 1457 18       		.uleb128 0x18
 8106 1458 86090000 		.4byte	.LASF198
 8107 145c 01       		.byte	0x1
 8108 145d A213     		.2byte	0x13a2
 8109 145f 3F020000 		.4byte	0x23f
 8110 1463 02       		.uleb128 0x2
 8111 1464 91       		.byte	0x91
 8112 1465 5C       		.sleb128 -36
 8113 1466 18       		.uleb128 0x18
 8114 1467 99000000 		.4byte	.LASF204
 8115 146b 01       		.byte	0x1
 8116 146c A213     		.2byte	0x13a2
 8117 146e 3B140000 		.4byte	0x143b
 8118 1472 02       		.uleb128 0x2
 8119 1473 91       		.byte	0x91
 8120 1474 58       		.sleb128 -40
 8121 1475 19       		.uleb128 0x19
 8122 1476 4F0E0000 		.4byte	.LASF99
 8123 147a 01       		.byte	0x1
 8124 147b A413     		.2byte	0x13a4
 8125 147d 39050000 		.4byte	0x539
 8126 1481 02       		.uleb128 0x2
 8127 1482 91       		.byte	0x91
 8128 1483 74       		.sleb128 -12
 8129 1484 19       		.uleb128 0x19
 8130 1485 15020000 		.4byte	.LASF202
 8131 1489 01       		.byte	0x1
 8132 148a A513     		.2byte	0x13a5
 8133 148c CA000000 		.4byte	0xca
 8134 1490 02       		.uleb128 0x2
 8135 1491 91       		.byte	0x91
 8136 1492 6B       		.sleb128 -21
 8137 1493 19       		.uleb128 0x19
 8138 1494 67030000 		.4byte	.LASF131
 8139 1498 01       		.byte	0x1
 8140 1499 A613     		.2byte	0x13a6
 8141 149b 40010000 		.4byte	0x140
 8142 149f 02       		.uleb128 0x2
 8143 14a0 91       		.byte	0x91
 8144 14a1 6C       		.sleb128 -20
 8145 14a2 1F       		.uleb128 0x1f
 8146 14a3 FA030000 		.4byte	0x3fa
 8147 14a7 0E000000 		.4byte	.LBB55
 8148 14ab 1A000000 		.4byte	.LBE55-.LBB55
 8149 14af 01       		.byte	0x1
 8150 14b0 BE13     		.2byte	0x13be
 8151 14b2 D1140000 		.4byte	0x14d1
 8152 14b6 1A       		.uleb128 0x1a
 8153 14b7 0E000000 		.4byte	.LBB56
 8154 14bb 1A000000 		.4byte	.LBE56-.LBB56
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 242


 8155 14bf 20       		.uleb128 0x20
 8156 14c0 0A040000 		.4byte	0x40a
 8157 14c4 02       		.uleb128 0x2
 8158 14c5 91       		.byte	0x91
 8159 14c6 64       		.sleb128 -28
 8160 14c7 20       		.uleb128 0x20
 8161 14c8 15040000 		.4byte	0x415
 8162 14cc 02       		.uleb128 0x2
 8163 14cd 91       		.byte	0x91
 8164 14ce 60       		.sleb128 -32
 8165 14cf 00       		.byte	0
 8166 14d0 00       		.byte	0
 8167 14d1 21       		.uleb128 0x21
 8168 14d2 21040000 		.4byte	0x421
 8169 14d6 BC000000 		.4byte	.LBB57
 8170 14da 06000000 		.4byte	.LBE57-.LBB57
 8171 14de 01       		.byte	0x1
 8172 14df F013     		.2byte	0x13f0
 8173 14e1 22       		.uleb128 0x22
 8174 14e2 2D040000 		.4byte	0x42d
 8175 14e6 02       		.uleb128 0x2
 8176 14e7 91       		.byte	0x91
 8177 14e8 70       		.sleb128 -16
 8178 14e9 00       		.byte	0
 8179 14ea 00       		.byte	0
 8180 14eb 17       		.uleb128 0x17
 8181 14ec 840C0000 		.4byte	.LASF206
 8182 14f0 01       		.byte	0x1
 8183 14f1 F813     		.2byte	0x13f8
 8184 14f3 35010000 		.4byte	0x135
 8185 14f7 00000000 		.4byte	.LFB119
 8186 14fb 4C000000 		.4byte	.LFE119-.LFB119
 8187 14ff 01       		.uleb128 0x1
 8188 1500 9C       		.byte	0x9c
 8189 1501 33150000 		.4byte	0x1533
 8190 1505 18       		.uleb128 0x18
 8191 1506 94090000 		.4byte	.LASF112
 8192 150a 01       		.byte	0x1
 8193 150b F813     		.2byte	0x13f8
 8194 150d 3F020000 		.4byte	0x23f
 8195 1511 02       		.uleb128 0x2
 8196 1512 91       		.byte	0x91
 8197 1513 6C       		.sleb128 -20
 8198 1514 19       		.uleb128 0x19
 8199 1515 4F0E0000 		.4byte	.LASF99
 8200 1519 01       		.byte	0x1
 8201 151a FA13     		.2byte	0x13fa
 8202 151c 39050000 		.4byte	0x539
 8203 1520 02       		.uleb128 0x2
 8204 1521 91       		.byte	0x91
 8205 1522 70       		.sleb128 -16
 8206 1523 19       		.uleb128 0x19
 8207 1524 5D0B0000 		.4byte	.LASF93
 8208 1528 01       		.byte	0x1
 8209 1529 FB13     		.2byte	0x13fb
 8210 152b 35010000 		.4byte	0x135
 8211 152f 02       		.uleb128 0x2
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 243


 8212 1530 91       		.byte	0x91
 8213 1531 74       		.sleb128 -12
 8214 1532 00       		.byte	0
 8215 1533 17       		.uleb128 0x17
 8216 1534 0A0E0000 		.4byte	.LASF207
 8217 1538 01       		.byte	0x1
 8218 1539 1714     		.2byte	0x1417
 8219 153b EB000000 		.4byte	0xeb
 8220 153f 00000000 		.4byte	.LFB120
 8221 1543 48000000 		.4byte	.LFE120-.LFB120
 8222 1547 01       		.uleb128 0x1
 8223 1548 9C       		.byte	0x9c
 8224 1549 8A150000 		.4byte	0x158a
 8225 154d 18       		.uleb128 0x18
 8226 154e 94090000 		.4byte	.LASF112
 8227 1552 01       		.byte	0x1
 8228 1553 1714     		.2byte	0x1417
 8229 1555 3F020000 		.4byte	0x23f
 8230 1559 02       		.uleb128 0x2
 8231 155a 91       		.byte	0x91
 8232 155b 6C       		.sleb128 -20
 8233 155c 18       		.uleb128 0x18
 8234 155d 27010000 		.4byte	.LASF208
 8235 1561 01       		.byte	0x1
 8236 1562 1714     		.2byte	0x1417
 8237 1564 EB000000 		.4byte	0xeb
 8238 1568 02       		.uleb128 0x2
 8239 1569 91       		.byte	0x91
 8240 156a 68       		.sleb128 -24
 8241 156b 19       		.uleb128 0x19
 8242 156c 4F0E0000 		.4byte	.LASF99
 8243 1570 01       		.byte	0x1
 8244 1571 1914     		.2byte	0x1419
 8245 1573 39050000 		.4byte	0x539
 8246 1577 02       		.uleb128 0x2
 8247 1578 91       		.byte	0x91
 8248 1579 74       		.sleb128 -12
 8249 157a 19       		.uleb128 0x19
 8250 157b DF0E0000 		.4byte	.LASF192
 8251 157f 01       		.byte	0x1
 8252 1580 1A14     		.2byte	0x141a
 8253 1582 EB000000 		.4byte	0xeb
 8254 1586 02       		.uleb128 0x2
 8255 1587 91       		.byte	0x91
 8256 1588 70       		.sleb128 -16
 8257 1589 00       		.byte	0
 8258 158a 1B       		.uleb128 0x1b
 8259 158b AC0D0000 		.4byte	.LASF209
 8260 158f 01       		.byte	0x1
 8261 1590 3914     		.2byte	0x1439
 8262 1592 00000000 		.4byte	.LFB121
 8263 1596 CC000000 		.4byte	.LFE121-.LFB121
 8264 159a 01       		.uleb128 0x1
 8265 159b 9C       		.byte	0x9c
 8266 159c DD150000 		.4byte	0x15dd
 8267 15a0 18       		.uleb128 0x18
 8268 15a1 090D0000 		.4byte	.LASF153
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 244


 8269 15a5 01       		.byte	0x1
 8270 15a6 3914     		.2byte	0x1439
 8271 15a8 4B010000 		.4byte	0x14b
 8272 15ac 02       		.uleb128 0x2
 8273 15ad 91       		.byte	0x91
 8274 15ae 6C       		.sleb128 -20
 8275 15af 18       		.uleb128 0x18
 8276 15b0 080C0000 		.4byte	.LASF210
 8277 15b4 01       		.byte	0x1
 8278 15b5 3914     		.2byte	0x1439
 8279 15b7 DD150000 		.4byte	0x15dd
 8280 15bb 02       		.uleb128 0x2
 8281 15bc 91       		.byte	0x91
 8282 15bd 68       		.sleb128 -24
 8283 15be 19       		.uleb128 0x19
 8284 15bf 340E0000 		.4byte	.LASF104
 8285 15c3 01       		.byte	0x1
 8286 15c4 3B14     		.2byte	0x143b
 8287 15c6 4B010000 		.4byte	0x14b
 8288 15ca 02       		.uleb128 0x2
 8289 15cb 91       		.byte	0x91
 8290 15cc 70       		.sleb128 -16
 8291 15cd 19       		.uleb128 0x19
 8292 15ce 9A050000 		.4byte	.LASF107
 8293 15d2 01       		.byte	0x1
 8294 15d3 3C14     		.2byte	0x143c
 8295 15d5 E0060000 		.4byte	0x6e0
 8296 15d9 02       		.uleb128 0x2
 8297 15da 91       		.byte	0x91
 8298 15db 74       		.sleb128 -12
 8299 15dc 00       		.byte	0
 8300 15dd 07       		.uleb128 0x7
 8301 15de 35010000 		.4byte	0x135
 8302 15e2 10       		.uleb128 0x10
 8303 15e3 34020000 		.4byte	0x234
 8304 15e7 F2150000 		.4byte	0x15f2
 8305 15eb 11       		.uleb128 0x11
 8306 15ec A9000000 		.4byte	0xa9
 8307 15f0 04       		.byte	0x4
 8308 15f1 00       		.byte	0
 8309 15f2 19       		.uleb128 0x19
 8310 15f3 75010000 		.4byte	.LASF211
 8311 15f7 01       		.byte	0x1
 8312 15f8 5701     		.2byte	0x157
 8313 15fa E2150000 		.4byte	0x15e2
 8314 15fe 05       		.uleb128 0x5
 8315 15ff 03       		.byte	0x3
 8316 1600 04000000 		.4byte	pxReadyTasksLists
 8317 1604 19       		.uleb128 0x19
 8318 1605 76020000 		.4byte	.LASF212
 8319 1609 01       		.byte	0x1
 8320 160a 5801     		.2byte	0x158
 8321 160c 34020000 		.4byte	0x234
 8322 1610 05       		.uleb128 0x5
 8323 1611 03       		.byte	0x3
 8324 1612 68000000 		.4byte	xDelayedTaskList1
 8325 1616 19       		.uleb128 0x19
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 245


 8326 1617 88020000 		.4byte	.LASF213
 8327 161b 01       		.byte	0x1
 8328 161c 5901     		.2byte	0x159
 8329 161e 34020000 		.4byte	0x234
 8330 1622 05       		.uleb128 0x5
 8331 1623 03       		.byte	0x3
 8332 1624 7C000000 		.4byte	xDelayedTaskList2
 8333 1628 19       		.uleb128 0x19
 8334 1629 990A0000 		.4byte	.LASF214
 8335 162d 01       		.byte	0x1
 8336 162e 5A01     		.2byte	0x15a
 8337 1630 3A160000 		.4byte	0x163a
 8338 1634 05       		.uleb128 0x5
 8339 1635 03       		.byte	0x3
 8340 1636 90000000 		.4byte	pxDelayedTaskList
 8341 163a 08       		.uleb128 0x8
 8342 163b A90C0000 		.4byte	0xca9
 8343 163f 19       		.uleb128 0x19
 8344 1640 D5050000 		.4byte	.LASF215
 8345 1644 01       		.byte	0x1
 8346 1645 5B01     		.2byte	0x15b
 8347 1647 3A160000 		.4byte	0x163a
 8348 164b 05       		.uleb128 0x5
 8349 164c 03       		.byte	0x3
 8350 164d 94000000 		.4byte	pxOverflowDelayedTaskList
 8351 1651 19       		.uleb128 0x19
 8352 1652 7C040000 		.4byte	.LASF216
 8353 1656 01       		.byte	0x1
 8354 1657 5C01     		.2byte	0x15c
 8355 1659 34020000 		.4byte	0x234
 8356 165d 05       		.uleb128 0x5
 8357 165e 03       		.byte	0x3
 8358 165f 98000000 		.4byte	xPendingReadyList
 8359 1663 19       		.uleb128 0x19
 8360 1664 AC040000 		.4byte	.LASF217
 8361 1668 01       		.byte	0x1
 8362 1669 6001     		.2byte	0x160
 8363 166b 34020000 		.4byte	0x234
 8364 166f 05       		.uleb128 0x5
 8365 1670 03       		.byte	0x3
 8366 1671 AC000000 		.4byte	xTasksWaitingTermination
 8367 1675 19       		.uleb128 0x19
 8368 1676 35010000 		.4byte	.LASF218
 8369 167a 01       		.byte	0x1
 8370 167b 6101     		.2byte	0x161
 8371 167d 29020000 		.4byte	0x229
 8372 1681 05       		.uleb128 0x5
 8373 1682 03       		.byte	0x3
 8374 1683 C0000000 		.4byte	uxDeletedTasksWaitingCleanUp
 8375 1687 19       		.uleb128 0x19
 8376 1688 AA050000 		.4byte	.LASF219
 8377 168c 01       		.byte	0x1
 8378 168d 6701     		.2byte	0x167
 8379 168f 34020000 		.4byte	0x234
 8380 1693 05       		.uleb128 0x5
 8381 1694 03       		.byte	0x3
 8382 1695 C4000000 		.4byte	xSuspendedTaskList
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 246


 8383 1699 19       		.uleb128 0x19
 8384 169a D80D0000 		.4byte	.LASF220
 8385 169e 01       		.byte	0x1
 8386 169f 7201     		.2byte	0x172
 8387 16a1 29020000 		.4byte	0x229
 8388 16a5 05       		.uleb128 0x5
 8389 16a6 03       		.byte	0x3
 8390 16a7 D8000000 		.4byte	uxCurrentNumberOfTasks
 8391 16ab 19       		.uleb128 0x19
 8392 16ac D5070000 		.4byte	.LASF221
 8393 16b0 01       		.byte	0x1
 8394 16b1 7301     		.2byte	0x173
 8395 16b3 BD160000 		.4byte	0x16bd
 8396 16b7 05       		.uleb128 0x5
 8397 16b8 03       		.byte	0x3
 8398 16b9 DC000000 		.4byte	xTickCount
 8399 16bd 08       		.uleb128 0x8
 8400 16be 4B010000 		.4byte	0x14b
 8401 16c2 19       		.uleb128 0x19
 8402 16c3 BD000000 		.4byte	.LASF222
 8403 16c7 01       		.byte	0x1
 8404 16c8 7401     		.2byte	0x174
 8405 16ca 29020000 		.4byte	0x229
 8406 16ce 05       		.uleb128 0x5
 8407 16cf 03       		.byte	0x3
 8408 16d0 E0000000 		.4byte	uxTopReadyPriority
 8409 16d4 19       		.uleb128 0x19
 8410 16d5 F7000000 		.4byte	.LASF223
 8411 16d9 01       		.byte	0x1
 8412 16da 7501     		.2byte	0x175
 8413 16dc E6160000 		.4byte	0x16e6
 8414 16e0 05       		.uleb128 0x5
 8415 16e1 03       		.byte	0x3
 8416 16e2 E4000000 		.4byte	xSchedulerRunning
 8417 16e6 08       		.uleb128 0x8
 8418 16e7 35010000 		.4byte	0x135
 8419 16eb 19       		.uleb128 0x19
 8420 16ec 6B0D0000 		.4byte	.LASF224
 8421 16f0 01       		.byte	0x1
 8422 16f1 7601     		.2byte	0x176
 8423 16f3 BD160000 		.4byte	0x16bd
 8424 16f7 05       		.uleb128 0x5
 8425 16f8 03       		.byte	0x3
 8426 16f9 E8000000 		.4byte	xPendedTicks
 8427 16fd 19       		.uleb128 0x19
 8428 16fe FE0E0000 		.4byte	.LASF225
 8429 1702 01       		.byte	0x1
 8430 1703 7701     		.2byte	0x177
 8431 1705 E6160000 		.4byte	0x16e6
 8432 1709 05       		.uleb128 0x5
 8433 170a 03       		.byte	0x3
 8434 170b EC000000 		.4byte	xYieldPending
 8435 170f 19       		.uleb128 0x19
 8436 1710 F2090000 		.4byte	.LASF226
 8437 1714 01       		.byte	0x1
 8438 1715 7801     		.2byte	0x178
 8439 1717 E6160000 		.4byte	0x16e6
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 247


 8440 171b 05       		.uleb128 0x5
 8441 171c 03       		.byte	0x3
 8442 171d F0000000 		.4byte	xNumOfOverflows
 8443 1721 19       		.uleb128 0x19
 8444 1722 00090000 		.4byte	.LASF227
 8445 1726 01       		.byte	0x1
 8446 1727 7901     		.2byte	0x179
 8447 1729 40010000 		.4byte	0x140
 8448 172d 05       		.uleb128 0x5
 8449 172e 03       		.byte	0x3
 8450 172f F4000000 		.4byte	uxTaskNumber
 8451 1733 19       		.uleb128 0x19
 8452 1734 AD070000 		.4byte	.LASF228
 8453 1738 01       		.byte	0x1
 8454 1739 7A01     		.2byte	0x17a
 8455 173b BD160000 		.4byte	0x16bd
 8456 173f 05       		.uleb128 0x5
 8457 1740 03       		.byte	0x3
 8458 1741 F8000000 		.4byte	xNextTaskUnblockTime
 8459 1745 19       		.uleb128 0x19
 8460 1746 0E0A0000 		.4byte	.LASF229
 8461 174a 01       		.byte	0x1
 8462 174b 7B01     		.2byte	0x17b
 8463 174d 3F020000 		.4byte	0x23f
 8464 1751 05       		.uleb128 0x5
 8465 1752 03       		.byte	0x3
 8466 1753 FC000000 		.4byte	xIdleTaskHandle
 8467 1757 19       		.uleb128 0x19
 8468 1758 5C0E0000 		.4byte	.LASF230
 8469 175c 01       		.byte	0x1
 8470 175d 8501     		.2byte	0x185
 8471 175f 29020000 		.4byte	0x229
 8472 1763 05       		.uleb128 0x5
 8473 1764 03       		.byte	0x3
 8474 1765 00010000 		.4byte	uxSchedulerSuspended
 8475 1769 29       		.uleb128 0x29
 8476 176a 660A0000 		.4byte	.LASF231
 8477 176e 09       		.byte	0x9
 8478 176f 1207     		.2byte	0x712
 8479 1771 75170000 		.4byte	0x1775
 8480 1775 08       		.uleb128 0x8
 8481 1776 E0000000 		.4byte	0xe0
 8482 177a 2A       		.uleb128 0x2a
 8483 177b CB0D0000 		.4byte	.LASF232
 8484 177f 01       		.byte	0x1
 8485 1780 5101     		.2byte	0x151
 8486 1782 8C170000 		.4byte	0x178c
 8487 1786 05       		.uleb128 0x5
 8488 1787 03       		.byte	0x3
 8489 1788 00000000 		.4byte	pxCurrentTCB
 8490 178c 08       		.uleb128 0x8
 8491 178d 39050000 		.4byte	0x539
 8492 1791 00       		.byte	0
 8493              		.section	.debug_abbrev,"",%progbits
 8494              	.Ldebug_abbrev0:
 8495 0000 01       		.uleb128 0x1
 8496 0001 11       		.uleb128 0x11
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 248


 8497 0002 01       		.byte	0x1
 8498 0003 25       		.uleb128 0x25
 8499 0004 0E       		.uleb128 0xe
 8500 0005 13       		.uleb128 0x13
 8501 0006 0B       		.uleb128 0xb
 8502 0007 03       		.uleb128 0x3
 8503 0008 0E       		.uleb128 0xe
 8504 0009 1B       		.uleb128 0x1b
 8505 000a 0E       		.uleb128 0xe
 8506 000b 55       		.uleb128 0x55
 8507 000c 17       		.uleb128 0x17
 8508 000d 11       		.uleb128 0x11
 8509 000e 01       		.uleb128 0x1
 8510 000f 10       		.uleb128 0x10
 8511 0010 17       		.uleb128 0x17
 8512 0011 00       		.byte	0
 8513 0012 00       		.byte	0
 8514 0013 02       		.uleb128 0x2
 8515 0014 16       		.uleb128 0x16
 8516 0015 00       		.byte	0
 8517 0016 03       		.uleb128 0x3
 8518 0017 0E       		.uleb128 0xe
 8519 0018 3A       		.uleb128 0x3a
 8520 0019 0B       		.uleb128 0xb
 8521 001a 3B       		.uleb128 0x3b
 8522 001b 0B       		.uleb128 0xb
 8523 001c 49       		.uleb128 0x49
 8524 001d 13       		.uleb128 0x13
 8525 001e 00       		.byte	0
 8526 001f 00       		.byte	0
 8527 0020 03       		.uleb128 0x3
 8528 0021 24       		.uleb128 0x24
 8529 0022 00       		.byte	0
 8530 0023 0B       		.uleb128 0xb
 8531 0024 0B       		.uleb128 0xb
 8532 0025 3E       		.uleb128 0x3e
 8533 0026 0B       		.uleb128 0xb
 8534 0027 03       		.uleb128 0x3
 8535 0028 0E       		.uleb128 0xe
 8536 0029 00       		.byte	0
 8537 002a 00       		.byte	0
 8538 002b 04       		.uleb128 0x4
 8539 002c 24       		.uleb128 0x24
 8540 002d 00       		.byte	0
 8541 002e 0B       		.uleb128 0xb
 8542 002f 0B       		.uleb128 0xb
 8543 0030 3E       		.uleb128 0x3e
 8544 0031 0B       		.uleb128 0xb
 8545 0032 03       		.uleb128 0x3
 8546 0033 08       		.uleb128 0x8
 8547 0034 00       		.byte	0
 8548 0035 00       		.byte	0
 8549 0036 05       		.uleb128 0x5
 8550 0037 0F       		.uleb128 0xf
 8551 0038 00       		.byte	0
 8552 0039 0B       		.uleb128 0xb
 8553 003a 0B       		.uleb128 0xb
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 249


 8554 003b 00       		.byte	0
 8555 003c 00       		.byte	0
 8556 003d 06       		.uleb128 0x6
 8557 003e 0F       		.uleb128 0xf
 8558 003f 00       		.byte	0
 8559 0040 0B       		.uleb128 0xb
 8560 0041 0B       		.uleb128 0xb
 8561 0042 49       		.uleb128 0x49
 8562 0043 13       		.uleb128 0x13
 8563 0044 00       		.byte	0
 8564 0045 00       		.byte	0
 8565 0046 07       		.uleb128 0x7
 8566 0047 26       		.uleb128 0x26
 8567 0048 00       		.byte	0
 8568 0049 49       		.uleb128 0x49
 8569 004a 13       		.uleb128 0x13
 8570 004b 00       		.byte	0
 8571 004c 00       		.byte	0
 8572 004d 08       		.uleb128 0x8
 8573 004e 35       		.uleb128 0x35
 8574 004f 00       		.byte	0
 8575 0050 49       		.uleb128 0x49
 8576 0051 13       		.uleb128 0x13
 8577 0052 00       		.byte	0
 8578 0053 00       		.byte	0
 8579 0054 09       		.uleb128 0x9
 8580 0055 15       		.uleb128 0x15
 8581 0056 01       		.byte	0x1
 8582 0057 27       		.uleb128 0x27
 8583 0058 19       		.uleb128 0x19
 8584 0059 01       		.uleb128 0x1
 8585 005a 13       		.uleb128 0x13
 8586 005b 00       		.byte	0
 8587 005c 00       		.byte	0
 8588 005d 0A       		.uleb128 0xa
 8589 005e 05       		.uleb128 0x5
 8590 005f 00       		.byte	0
 8591 0060 49       		.uleb128 0x49
 8592 0061 13       		.uleb128 0x13
 8593 0062 00       		.byte	0
 8594 0063 00       		.byte	0
 8595 0064 0B       		.uleb128 0xb
 8596 0065 13       		.uleb128 0x13
 8597 0066 01       		.byte	0x1
 8598 0067 03       		.uleb128 0x3
 8599 0068 0E       		.uleb128 0xe
 8600 0069 0B       		.uleb128 0xb
 8601 006a 0B       		.uleb128 0xb
 8602 006b 3A       		.uleb128 0x3a
 8603 006c 0B       		.uleb128 0xb
 8604 006d 3B       		.uleb128 0x3b
 8605 006e 0B       		.uleb128 0xb
 8606 006f 01       		.uleb128 0x1
 8607 0070 13       		.uleb128 0x13
 8608 0071 00       		.byte	0
 8609 0072 00       		.byte	0
 8610 0073 0C       		.uleb128 0xc
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 250


 8611 0074 0D       		.uleb128 0xd
 8612 0075 00       		.byte	0
 8613 0076 03       		.uleb128 0x3
 8614 0077 0E       		.uleb128 0xe
 8615 0078 3A       		.uleb128 0x3a
 8616 0079 0B       		.uleb128 0xb
 8617 007a 3B       		.uleb128 0x3b
 8618 007b 0B       		.uleb128 0xb
 8619 007c 49       		.uleb128 0x49
 8620 007d 13       		.uleb128 0x13
 8621 007e 38       		.uleb128 0x38
 8622 007f 0B       		.uleb128 0xb
 8623 0080 00       		.byte	0
 8624 0081 00       		.byte	0
 8625 0082 0D       		.uleb128 0xd
 8626 0083 0D       		.uleb128 0xd
 8627 0084 00       		.byte	0
 8628 0085 03       		.uleb128 0x3
 8629 0086 0E       		.uleb128 0xe
 8630 0087 3A       		.uleb128 0x3a
 8631 0088 0B       		.uleb128 0xb
 8632 0089 3B       		.uleb128 0x3b
 8633 008a 05       		.uleb128 0x5
 8634 008b 49       		.uleb128 0x49
 8635 008c 13       		.uleb128 0x13
 8636 008d 38       		.uleb128 0x38
 8637 008e 0B       		.uleb128 0xb
 8638 008f 00       		.byte	0
 8639 0090 00       		.byte	0
 8640 0091 0E       		.uleb128 0xe
 8641 0092 04       		.uleb128 0x4
 8642 0093 01       		.byte	0x1
 8643 0094 0B       		.uleb128 0xb
 8644 0095 0B       		.uleb128 0xb
 8645 0096 49       		.uleb128 0x49
 8646 0097 13       		.uleb128 0x13
 8647 0098 3A       		.uleb128 0x3a
 8648 0099 0B       		.uleb128 0xb
 8649 009a 3B       		.uleb128 0x3b
 8650 009b 0B       		.uleb128 0xb
 8651 009c 01       		.uleb128 0x1
 8652 009d 13       		.uleb128 0x13
 8653 009e 00       		.byte	0
 8654 009f 00       		.byte	0
 8655 00a0 0F       		.uleb128 0xf
 8656 00a1 28       		.uleb128 0x28
 8657 00a2 00       		.byte	0
 8658 00a3 03       		.uleb128 0x3
 8659 00a4 0E       		.uleb128 0xe
 8660 00a5 1C       		.uleb128 0x1c
 8661 00a6 0B       		.uleb128 0xb
 8662 00a7 00       		.byte	0
 8663 00a8 00       		.byte	0
 8664 00a9 10       		.uleb128 0x10
 8665 00aa 01       		.uleb128 0x1
 8666 00ab 01       		.byte	0x1
 8667 00ac 49       		.uleb128 0x49
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 251


 8668 00ad 13       		.uleb128 0x13
 8669 00ae 01       		.uleb128 0x1
 8670 00af 13       		.uleb128 0x13
 8671 00b0 00       		.byte	0
 8672 00b1 00       		.byte	0
 8673 00b2 11       		.uleb128 0x11
 8674 00b3 21       		.uleb128 0x21
 8675 00b4 00       		.byte	0
 8676 00b5 49       		.uleb128 0x49
 8677 00b6 13       		.uleb128 0x13
 8678 00b7 2F       		.uleb128 0x2f
 8679 00b8 0B       		.uleb128 0xb
 8680 00b9 00       		.byte	0
 8681 00ba 00       		.byte	0
 8682 00bb 12       		.uleb128 0x12
 8683 00bc 16       		.uleb128 0x16
 8684 00bd 00       		.byte	0
 8685 00be 03       		.uleb128 0x3
 8686 00bf 0E       		.uleb128 0xe
 8687 00c0 3A       		.uleb128 0x3a
 8688 00c1 0B       		.uleb128 0xb
 8689 00c2 3B       		.uleb128 0x3b
 8690 00c3 05       		.uleb128 0x5
 8691 00c4 49       		.uleb128 0x49
 8692 00c5 13       		.uleb128 0x13
 8693 00c6 00       		.byte	0
 8694 00c7 00       		.byte	0
 8695 00c8 13       		.uleb128 0x13
 8696 00c9 2E       		.uleb128 0x2e
 8697 00ca 01       		.byte	0x1
 8698 00cb 03       		.uleb128 0x3
 8699 00cc 0E       		.uleb128 0xe
 8700 00cd 3A       		.uleb128 0x3a
 8701 00ce 0B       		.uleb128 0xb
 8702 00cf 3B       		.uleb128 0x3b
 8703 00d0 0B       		.uleb128 0xb
 8704 00d1 27       		.uleb128 0x27
 8705 00d2 19       		.uleb128 0x19
 8706 00d3 49       		.uleb128 0x49
 8707 00d4 13       		.uleb128 0x13
 8708 00d5 20       		.uleb128 0x20
 8709 00d6 0B       		.uleb128 0xb
 8710 00d7 01       		.uleb128 0x1
 8711 00d8 13       		.uleb128 0x13
 8712 00d9 00       		.byte	0
 8713 00da 00       		.byte	0
 8714 00db 14       		.uleb128 0x14
 8715 00dc 34       		.uleb128 0x34
 8716 00dd 00       		.byte	0
 8717 00de 03       		.uleb128 0x3
 8718 00df 0E       		.uleb128 0xe
 8719 00e0 3A       		.uleb128 0x3a
 8720 00e1 0B       		.uleb128 0xb
 8721 00e2 3B       		.uleb128 0x3b
 8722 00e3 0B       		.uleb128 0xb
 8723 00e4 49       		.uleb128 0x49
 8724 00e5 13       		.uleb128 0x13
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 252


 8725 00e6 00       		.byte	0
 8726 00e7 00       		.byte	0
 8727 00e8 15       		.uleb128 0x15
 8728 00e9 2E       		.uleb128 0x2e
 8729 00ea 01       		.byte	0x1
 8730 00eb 03       		.uleb128 0x3
 8731 00ec 0E       		.uleb128 0xe
 8732 00ed 3A       		.uleb128 0x3a
 8733 00ee 0B       		.uleb128 0xb
 8734 00ef 3B       		.uleb128 0x3b
 8735 00f0 0B       		.uleb128 0xb
 8736 00f1 27       		.uleb128 0x27
 8737 00f2 19       		.uleb128 0x19
 8738 00f3 20       		.uleb128 0x20
 8739 00f4 0B       		.uleb128 0xb
 8740 00f5 01       		.uleb128 0x1
 8741 00f6 13       		.uleb128 0x13
 8742 00f7 00       		.byte	0
 8743 00f8 00       		.byte	0
 8744 00f9 16       		.uleb128 0x16
 8745 00fa 05       		.uleb128 0x5
 8746 00fb 00       		.byte	0
 8747 00fc 03       		.uleb128 0x3
 8748 00fd 0E       		.uleb128 0xe
 8749 00fe 3A       		.uleb128 0x3a
 8750 00ff 0B       		.uleb128 0xb
 8751 0100 3B       		.uleb128 0x3b
 8752 0101 0B       		.uleb128 0xb
 8753 0102 49       		.uleb128 0x49
 8754 0103 13       		.uleb128 0x13
 8755 0104 00       		.byte	0
 8756 0105 00       		.byte	0
 8757 0106 17       		.uleb128 0x17
 8758 0107 2E       		.uleb128 0x2e
 8759 0108 01       		.byte	0x1
 8760 0109 3F       		.uleb128 0x3f
 8761 010a 19       		.uleb128 0x19
 8762 010b 03       		.uleb128 0x3
 8763 010c 0E       		.uleb128 0xe
 8764 010d 3A       		.uleb128 0x3a
 8765 010e 0B       		.uleb128 0xb
 8766 010f 3B       		.uleb128 0x3b
 8767 0110 05       		.uleb128 0x5
 8768 0111 27       		.uleb128 0x27
 8769 0112 19       		.uleb128 0x19
 8770 0113 49       		.uleb128 0x49
 8771 0114 13       		.uleb128 0x13
 8772 0115 11       		.uleb128 0x11
 8773 0116 01       		.uleb128 0x1
 8774 0117 12       		.uleb128 0x12
 8775 0118 06       		.uleb128 0x6
 8776 0119 40       		.uleb128 0x40
 8777 011a 18       		.uleb128 0x18
 8778 011b 9642     		.uleb128 0x2116
 8779 011d 19       		.uleb128 0x19
 8780 011e 01       		.uleb128 0x1
 8781 011f 13       		.uleb128 0x13
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 253


 8782 0120 00       		.byte	0
 8783 0121 00       		.byte	0
 8784 0122 18       		.uleb128 0x18
 8785 0123 05       		.uleb128 0x5
 8786 0124 00       		.byte	0
 8787 0125 03       		.uleb128 0x3
 8788 0126 0E       		.uleb128 0xe
 8789 0127 3A       		.uleb128 0x3a
 8790 0128 0B       		.uleb128 0xb
 8791 0129 3B       		.uleb128 0x3b
 8792 012a 05       		.uleb128 0x5
 8793 012b 49       		.uleb128 0x49
 8794 012c 13       		.uleb128 0x13
 8795 012d 02       		.uleb128 0x2
 8796 012e 18       		.uleb128 0x18
 8797 012f 00       		.byte	0
 8798 0130 00       		.byte	0
 8799 0131 19       		.uleb128 0x19
 8800 0132 34       		.uleb128 0x34
 8801 0133 00       		.byte	0
 8802 0134 03       		.uleb128 0x3
 8803 0135 0E       		.uleb128 0xe
 8804 0136 3A       		.uleb128 0x3a
 8805 0137 0B       		.uleb128 0xb
 8806 0138 3B       		.uleb128 0x3b
 8807 0139 05       		.uleb128 0x5
 8808 013a 49       		.uleb128 0x49
 8809 013b 13       		.uleb128 0x13
 8810 013c 02       		.uleb128 0x2
 8811 013d 18       		.uleb128 0x18
 8812 013e 00       		.byte	0
 8813 013f 00       		.byte	0
 8814 0140 1A       		.uleb128 0x1a
 8815 0141 0B       		.uleb128 0xb
 8816 0142 01       		.byte	0x1
 8817 0143 11       		.uleb128 0x11
 8818 0144 01       		.uleb128 0x1
 8819 0145 12       		.uleb128 0x12
 8820 0146 06       		.uleb128 0x6
 8821 0147 00       		.byte	0
 8822 0148 00       		.byte	0
 8823 0149 1B       		.uleb128 0x1b
 8824 014a 2E       		.uleb128 0x2e
 8825 014b 01       		.byte	0x1
 8826 014c 03       		.uleb128 0x3
 8827 014d 0E       		.uleb128 0xe
 8828 014e 3A       		.uleb128 0x3a
 8829 014f 0B       		.uleb128 0xb
 8830 0150 3B       		.uleb128 0x3b
 8831 0151 05       		.uleb128 0x5
 8832 0152 27       		.uleb128 0x27
 8833 0153 19       		.uleb128 0x19
 8834 0154 11       		.uleb128 0x11
 8835 0155 01       		.uleb128 0x1
 8836 0156 12       		.uleb128 0x12
 8837 0157 06       		.uleb128 0x6
 8838 0158 40       		.uleb128 0x40
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 254


 8839 0159 18       		.uleb128 0x18
 8840 015a 9642     		.uleb128 0x2116
 8841 015c 19       		.uleb128 0x19
 8842 015d 01       		.uleb128 0x1
 8843 015e 13       		.uleb128 0x13
 8844 015f 00       		.byte	0
 8845 0160 00       		.byte	0
 8846 0161 1C       		.uleb128 0x1c
 8847 0162 34       		.uleb128 0x34
 8848 0163 00       		.byte	0
 8849 0164 03       		.uleb128 0x3
 8850 0165 08       		.uleb128 0x8
 8851 0166 3A       		.uleb128 0x3a
 8852 0167 0B       		.uleb128 0xb
 8853 0168 3B       		.uleb128 0x3b
 8854 0169 05       		.uleb128 0x5
 8855 016a 49       		.uleb128 0x49
 8856 016b 13       		.uleb128 0x13
 8857 016c 02       		.uleb128 0x2
 8858 016d 18       		.uleb128 0x18
 8859 016e 00       		.byte	0
 8860 016f 00       		.byte	0
 8861 0170 1D       		.uleb128 0x1d
 8862 0171 2E       		.uleb128 0x2e
 8863 0172 01       		.byte	0x1
 8864 0173 3F       		.uleb128 0x3f
 8865 0174 19       		.uleb128 0x19
 8866 0175 03       		.uleb128 0x3
 8867 0176 0E       		.uleb128 0xe
 8868 0177 3A       		.uleb128 0x3a
 8869 0178 0B       		.uleb128 0xb
 8870 0179 3B       		.uleb128 0x3b
 8871 017a 05       		.uleb128 0x5
 8872 017b 27       		.uleb128 0x27
 8873 017c 19       		.uleb128 0x19
 8874 017d 11       		.uleb128 0x11
 8875 017e 01       		.uleb128 0x1
 8876 017f 12       		.uleb128 0x12
 8877 0180 06       		.uleb128 0x6
 8878 0181 40       		.uleb128 0x40
 8879 0182 18       		.uleb128 0x18
 8880 0183 9642     		.uleb128 0x2116
 8881 0185 19       		.uleb128 0x19
 8882 0186 01       		.uleb128 0x1
 8883 0187 13       		.uleb128 0x13
 8884 0188 00       		.byte	0
 8885 0189 00       		.byte	0
 8886 018a 1E       		.uleb128 0x1e
 8887 018b 2E       		.uleb128 0x2e
 8888 018c 01       		.byte	0x1
 8889 018d 3F       		.uleb128 0x3f
 8890 018e 19       		.uleb128 0x19
 8891 018f 03       		.uleb128 0x3
 8892 0190 0E       		.uleb128 0xe
 8893 0191 3A       		.uleb128 0x3a
 8894 0192 0B       		.uleb128 0xb
 8895 0193 3B       		.uleb128 0x3b
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 255


 8896 0194 05       		.uleb128 0x5
 8897 0195 27       		.uleb128 0x27
 8898 0196 19       		.uleb128 0x19
 8899 0197 49       		.uleb128 0x49
 8900 0198 13       		.uleb128 0x13
 8901 0199 11       		.uleb128 0x11
 8902 019a 01       		.uleb128 0x1
 8903 019b 12       		.uleb128 0x12
 8904 019c 06       		.uleb128 0x6
 8905 019d 40       		.uleb128 0x40
 8906 019e 18       		.uleb128 0x18
 8907 019f 9742     		.uleb128 0x2117
 8908 01a1 19       		.uleb128 0x19
 8909 01a2 01       		.uleb128 0x1
 8910 01a3 13       		.uleb128 0x13
 8911 01a4 00       		.byte	0
 8912 01a5 00       		.byte	0
 8913 01a6 1F       		.uleb128 0x1f
 8914 01a7 1D       		.uleb128 0x1d
 8915 01a8 01       		.byte	0x1
 8916 01a9 31       		.uleb128 0x31
 8917 01aa 13       		.uleb128 0x13
 8918 01ab 11       		.uleb128 0x11
 8919 01ac 01       		.uleb128 0x1
 8920 01ad 12       		.uleb128 0x12
 8921 01ae 06       		.uleb128 0x6
 8922 01af 58       		.uleb128 0x58
 8923 01b0 0B       		.uleb128 0xb
 8924 01b1 59       		.uleb128 0x59
 8925 01b2 05       		.uleb128 0x5
 8926 01b3 01       		.uleb128 0x1
 8927 01b4 13       		.uleb128 0x13
 8928 01b5 00       		.byte	0
 8929 01b6 00       		.byte	0
 8930 01b7 20       		.uleb128 0x20
 8931 01b8 34       		.uleb128 0x34
 8932 01b9 00       		.byte	0
 8933 01ba 31       		.uleb128 0x31
 8934 01bb 13       		.uleb128 0x13
 8935 01bc 02       		.uleb128 0x2
 8936 01bd 18       		.uleb128 0x18
 8937 01be 00       		.byte	0
 8938 01bf 00       		.byte	0
 8939 01c0 21       		.uleb128 0x21
 8940 01c1 1D       		.uleb128 0x1d
 8941 01c2 01       		.byte	0x1
 8942 01c3 31       		.uleb128 0x31
 8943 01c4 13       		.uleb128 0x13
 8944 01c5 11       		.uleb128 0x11
 8945 01c6 01       		.uleb128 0x1
 8946 01c7 12       		.uleb128 0x12
 8947 01c8 06       		.uleb128 0x6
 8948 01c9 58       		.uleb128 0x58
 8949 01ca 0B       		.uleb128 0xb
 8950 01cb 59       		.uleb128 0x59
 8951 01cc 05       		.uleb128 0x5
 8952 01cd 00       		.byte	0
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 256


 8953 01ce 00       		.byte	0
 8954 01cf 22       		.uleb128 0x22
 8955 01d0 05       		.uleb128 0x5
 8956 01d1 00       		.byte	0
 8957 01d2 31       		.uleb128 0x31
 8958 01d3 13       		.uleb128 0x13
 8959 01d4 02       		.uleb128 0x2
 8960 01d5 18       		.uleb128 0x18
 8961 01d6 00       		.byte	0
 8962 01d7 00       		.byte	0
 8963 01d8 23       		.uleb128 0x23
 8964 01d9 2E       		.uleb128 0x2e
 8965 01da 01       		.byte	0x1
 8966 01db 03       		.uleb128 0x3
 8967 01dc 0E       		.uleb128 0xe
 8968 01dd 3A       		.uleb128 0x3a
 8969 01de 0B       		.uleb128 0xb
 8970 01df 3B       		.uleb128 0x3b
 8971 01e0 05       		.uleb128 0x5
 8972 01e1 27       		.uleb128 0x27
 8973 01e2 19       		.uleb128 0x19
 8974 01e3 49       		.uleb128 0x49
 8975 01e4 13       		.uleb128 0x13
 8976 01e5 11       		.uleb128 0x11
 8977 01e6 01       		.uleb128 0x1
 8978 01e7 12       		.uleb128 0x12
 8979 01e8 06       		.uleb128 0x6
 8980 01e9 40       		.uleb128 0x40
 8981 01ea 18       		.uleb128 0x18
 8982 01eb 9742     		.uleb128 0x2117
 8983 01ed 19       		.uleb128 0x19
 8984 01ee 01       		.uleb128 0x1
 8985 01ef 13       		.uleb128 0x13
 8986 01f0 00       		.byte	0
 8987 01f1 00       		.byte	0
 8988 01f2 24       		.uleb128 0x24
 8989 01f3 2E       		.uleb128 0x2e
 8990 01f4 00       		.byte	0
 8991 01f5 3F       		.uleb128 0x3f
 8992 01f6 19       		.uleb128 0x19
 8993 01f7 03       		.uleb128 0x3
 8994 01f8 0E       		.uleb128 0xe
 8995 01f9 3A       		.uleb128 0x3a
 8996 01fa 0B       		.uleb128 0xb
 8997 01fb 3B       		.uleb128 0x3b
 8998 01fc 05       		.uleb128 0x5
 8999 01fd 27       		.uleb128 0x27
 9000 01fe 19       		.uleb128 0x19
 9001 01ff 11       		.uleb128 0x11
 9002 0200 01       		.uleb128 0x1
 9003 0201 12       		.uleb128 0x12
 9004 0202 06       		.uleb128 0x6
 9005 0203 40       		.uleb128 0x40
 9006 0204 18       		.uleb128 0x18
 9007 0205 9742     		.uleb128 0x2117
 9008 0207 19       		.uleb128 0x19
 9009 0208 00       		.byte	0
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 257


 9010 0209 00       		.byte	0
 9011 020a 25       		.uleb128 0x25
 9012 020b 2E       		.uleb128 0x2e
 9013 020c 00       		.byte	0
 9014 020d 3F       		.uleb128 0x3f
 9015 020e 19       		.uleb128 0x19
 9016 020f 03       		.uleb128 0x3
 9017 0210 0E       		.uleb128 0xe
 9018 0211 3A       		.uleb128 0x3a
 9019 0212 0B       		.uleb128 0xb
 9020 0213 3B       		.uleb128 0x3b
 9021 0214 05       		.uleb128 0x5
 9022 0215 27       		.uleb128 0x27
 9023 0216 19       		.uleb128 0x19
 9024 0217 49       		.uleb128 0x49
 9025 0218 13       		.uleb128 0x13
 9026 0219 11       		.uleb128 0x11
 9027 021a 01       		.uleb128 0x1
 9028 021b 12       		.uleb128 0x12
 9029 021c 06       		.uleb128 0x6
 9030 021d 40       		.uleb128 0x40
 9031 021e 18       		.uleb128 0x18
 9032 021f 9742     		.uleb128 0x2117
 9033 0221 19       		.uleb128 0x19
 9034 0222 00       		.byte	0
 9035 0223 00       		.byte	0
 9036 0224 26       		.uleb128 0x26
 9037 0225 0B       		.uleb128 0xb
 9038 0226 01       		.byte	0x1
 9039 0227 11       		.uleb128 0x11
 9040 0228 01       		.uleb128 0x1
 9041 0229 12       		.uleb128 0x12
 9042 022a 06       		.uleb128 0x6
 9043 022b 01       		.uleb128 0x1
 9044 022c 13       		.uleb128 0x13
 9045 022d 00       		.byte	0
 9046 022e 00       		.byte	0
 9047 022f 27       		.uleb128 0x27
 9048 0230 2E       		.uleb128 0x2e
 9049 0231 01       		.byte	0x1
 9050 0232 3F       		.uleb128 0x3f
 9051 0233 19       		.uleb128 0x19
 9052 0234 03       		.uleb128 0x3
 9053 0235 0E       		.uleb128 0xe
 9054 0236 3A       		.uleb128 0x3a
 9055 0237 0B       		.uleb128 0xb
 9056 0238 3B       		.uleb128 0x3b
 9057 0239 05       		.uleb128 0x5
 9058 023a 27       		.uleb128 0x27
 9059 023b 19       		.uleb128 0x19
 9060 023c 11       		.uleb128 0x11
 9061 023d 01       		.uleb128 0x1
 9062 023e 12       		.uleb128 0x12
 9063 023f 06       		.uleb128 0x6
 9064 0240 40       		.uleb128 0x40
 9065 0241 18       		.uleb128 0x18
 9066 0242 9742     		.uleb128 0x2117
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 258


 9067 0244 19       		.uleb128 0x19
 9068 0245 01       		.uleb128 0x1
 9069 0246 13       		.uleb128 0x13
 9070 0247 00       		.byte	0
 9071 0248 00       		.byte	0
 9072 0249 28       		.uleb128 0x28
 9073 024a 2E       		.uleb128 0x2e
 9074 024b 01       		.byte	0x1
 9075 024c 03       		.uleb128 0x3
 9076 024d 0E       		.uleb128 0xe
 9077 024e 3A       		.uleb128 0x3a
 9078 024f 0B       		.uleb128 0xb
 9079 0250 3B       		.uleb128 0x3b
 9080 0251 05       		.uleb128 0x5
 9081 0252 27       		.uleb128 0x27
 9082 0253 19       		.uleb128 0x19
 9083 0254 11       		.uleb128 0x11
 9084 0255 01       		.uleb128 0x1
 9085 0256 12       		.uleb128 0x12
 9086 0257 06       		.uleb128 0x6
 9087 0258 40       		.uleb128 0x40
 9088 0259 18       		.uleb128 0x18
 9089 025a 9742     		.uleb128 0x2117
 9090 025c 19       		.uleb128 0x19
 9091 025d 01       		.uleb128 0x1
 9092 025e 13       		.uleb128 0x13
 9093 025f 00       		.byte	0
 9094 0260 00       		.byte	0
 9095 0261 29       		.uleb128 0x29
 9096 0262 34       		.uleb128 0x34
 9097 0263 00       		.byte	0
 9098 0264 03       		.uleb128 0x3
 9099 0265 0E       		.uleb128 0xe
 9100 0266 3A       		.uleb128 0x3a
 9101 0267 0B       		.uleb128 0xb
 9102 0268 3B       		.uleb128 0x3b
 9103 0269 05       		.uleb128 0x5
 9104 026a 49       		.uleb128 0x49
 9105 026b 13       		.uleb128 0x13
 9106 026c 3F       		.uleb128 0x3f
 9107 026d 19       		.uleb128 0x19
 9108 026e 3C       		.uleb128 0x3c
 9109 026f 19       		.uleb128 0x19
 9110 0270 00       		.byte	0
 9111 0271 00       		.byte	0
 9112 0272 2A       		.uleb128 0x2a
 9113 0273 34       		.uleb128 0x34
 9114 0274 00       		.byte	0
 9115 0275 03       		.uleb128 0x3
 9116 0276 0E       		.uleb128 0xe
 9117 0277 3A       		.uleb128 0x3a
 9118 0278 0B       		.uleb128 0xb
 9119 0279 3B       		.uleb128 0x3b
 9120 027a 05       		.uleb128 0x5
 9121 027b 49       		.uleb128 0x49
 9122 027c 13       		.uleb128 0x13
 9123 027d 3F       		.uleb128 0x3f
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 259


 9124 027e 19       		.uleb128 0x19
 9125 027f 02       		.uleb128 0x2
 9126 0280 18       		.uleb128 0x18
 9127 0281 00       		.byte	0
 9128 0282 00       		.byte	0
 9129 0283 00       		.byte	0
 9130              		.section	.debug_aranges,"",%progbits
 9131 0000 C4010000 		.4byte	0x1c4
 9132 0004 0200     		.2byte	0x2
 9133 0006 00000000 		.4byte	.Ldebug_info0
 9134 000a 04       		.byte	0x4
 9135 000b 00       		.byte	0
 9136 000c 0000     		.2byte	0
 9137 000e 0000     		.2byte	0
 9138 0010 00000000 		.4byte	.LFB68
 9139 0014 82000000 		.4byte	.LFE68-.LFB68
 9140 0018 00000000 		.4byte	.LFB69
 9141 001c FE000000 		.4byte	.LFE69-.LFB69
 9142 0020 00000000 		.4byte	.LFB70
 9143 0024 D4000000 		.4byte	.LFE70-.LFB70
 9144 0028 00000000 		.4byte	.LFB71
 9145 002c FC000000 		.4byte	.LFE71-.LFB71
 9146 0030 00000000 		.4byte	.LFB72
 9147 0034 A0000000 		.4byte	.LFE72-.LFB72
 9148 0038 00000000 		.4byte	.LFB73
 9149 003c 48000000 		.4byte	.LFE73-.LFB73
 9150 0040 00000000 		.4byte	.LFB74
 9151 0044 B0000000 		.4byte	.LFE74-.LFB74
 9152 0048 00000000 		.4byte	.LFB75
 9153 004c 34000000 		.4byte	.LFE75-.LFB75
 9154 0050 00000000 		.4byte	.LFB76
 9155 0054 54000000 		.4byte	.LFE76-.LFB76
 9156 0058 00000000 		.4byte	.LFB77
 9157 005c 38010000 		.4byte	.LFE77-.LFB77
 9158 0060 00000000 		.4byte	.LFB78
 9159 0064 04010000 		.4byte	.LFE78-.LFB78
 9160 0068 00000000 		.4byte	.LFB79
 9161 006c 44000000 		.4byte	.LFE79-.LFB79
 9162 0070 00000000 		.4byte	.LFB80
 9163 0074 A0000000 		.4byte	.LFE80-.LFB80
 9164 0078 00000000 		.4byte	.LFB81
 9165 007c C0000000 		.4byte	.LFE81-.LFB81
 9166 0080 00000000 		.4byte	.LFB82
 9167 0084 6C000000 		.4byte	.LFE82-.LFB82
 9168 0088 00000000 		.4byte	.LFB83
 9169 008c 30000000 		.4byte	.LFE83-.LFB83
 9170 0090 00000000 		.4byte	.LFB84
 9171 0094 1C000000 		.4byte	.LFE84-.LFB84
 9172 0098 00000000 		.4byte	.LFB85
 9173 009c 1C010000 		.4byte	.LFE85-.LFB85
 9174 00a0 00000000 		.4byte	.LFB86
 9175 00a4 1C000000 		.4byte	.LFE86-.LFB86
 9176 00a8 00000000 		.4byte	.LFB87
 9177 00ac 20000000 		.4byte	.LFE87-.LFB87
 9178 00b0 00000000 		.4byte	.LFB88
 9179 00b4 14000000 		.4byte	.LFE88-.LFB88
 9180 00b8 00000000 		.4byte	.LFB89
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 260


 9181 00bc 2C000000 		.4byte	.LFE89-.LFB89
 9182 00c0 00000000 		.4byte	.LFB90
 9183 00c4 30000000 		.4byte	.LFE90-.LFB90
 9184 00c8 00000000 		.4byte	.LFB91
 9185 00cc 50010000 		.4byte	.LFE91-.LFB91
 9186 00d0 00000000 		.4byte	.LFB92
 9187 00d4 D8000000 		.4byte	.LFE92-.LFB92
 9188 00d8 00000000 		.4byte	.LFB93
 9189 00dc 2C000000 		.4byte	.LFE93-.LFB93
 9190 00e0 00000000 		.4byte	.LFB94
 9191 00e4 3C000000 		.4byte	.LFE94-.LFB94
 9192 00e8 00000000 		.4byte	.LFB95
 9193 00ec A8000000 		.4byte	.LFE95-.LFB95
 9194 00f0 00000000 		.4byte	.LFB96
 9195 00f4 84000000 		.4byte	.LFE96-.LFB96
 9196 00f8 00000000 		.4byte	.LFB97
 9197 00fc 30000000 		.4byte	.LFE97-.LFB97
 9198 0100 00000000 		.4byte	.LFB98
 9199 0104 2C000000 		.4byte	.LFE98-.LFB98
 9200 0108 00000000 		.4byte	.LFB99
 9201 010c 8C000000 		.4byte	.LFE99-.LFB99
 9202 0110 00000000 		.4byte	.LFB100
 9203 0114 18000000 		.4byte	.LFE100-.LFB100
 9204 0118 00000000 		.4byte	.LFB101
 9205 011c 0E000000 		.4byte	.LFE101-.LFB101
 9206 0120 00000000 		.4byte	.LFB102
 9207 0124 80000000 		.4byte	.LFE102-.LFB102
 9208 0128 00000000 		.4byte	.LFB103
 9209 012c 58000000 		.4byte	.LFE103-.LFB103
 9210 0130 00000000 		.4byte	.LFB104
 9211 0134 36000000 		.4byte	.LFE104-.LFB104
 9212 0138 00000000 		.4byte	.LFB105
 9213 013c 38000000 		.4byte	.LFE105-.LFB105
 9214 0140 00000000 		.4byte	.LFB106
 9215 0144 20000000 		.4byte	.LFE106-.LFB106
 9216 0148 00000000 		.4byte	.LFB107
 9217 014c 40000000 		.4byte	.LFE107-.LFB107
 9218 0150 00000000 		.4byte	.LFB108
 9219 0154 1C000000 		.4byte	.LFE108-.LFB108
 9220 0158 00000000 		.4byte	.LFB109
 9221 015c EC000000 		.4byte	.LFE109-.LFB109
 9222 0160 00000000 		.4byte	.LFB110
 9223 0164 C8000000 		.4byte	.LFE110-.LFB110
 9224 0168 00000000 		.4byte	.LFB111
 9225 016c DC000000 		.4byte	.LFE111-.LFB111
 9226 0170 00000000 		.4byte	.LFB112
 9227 0174 30000000 		.4byte	.LFE112-.LFB112
 9228 0178 00000000 		.4byte	.LFB113
 9229 017c 28000000 		.4byte	.LFE113-.LFB113
 9230 0180 00000000 		.4byte	.LFB114
 9231 0184 90000000 		.4byte	.LFE114-.LFB114
 9232 0188 00000000 		.4byte	.LFB115
 9233 018c B4000000 		.4byte	.LFE115-.LFB115
 9234 0190 00000000 		.4byte	.LFB116
 9235 0194 10010000 		.4byte	.LFE116-.LFB116
 9236 0198 00000000 		.4byte	.LFB117
 9237 019c 4C010000 		.4byte	.LFE117-.LFB117
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 261


 9238 01a0 00000000 		.4byte	.LFB118
 9239 01a4 E4000000 		.4byte	.LFE118-.LFB118
 9240 01a8 00000000 		.4byte	.LFB119
 9241 01ac 4C000000 		.4byte	.LFE119-.LFB119
 9242 01b0 00000000 		.4byte	.LFB120
 9243 01b4 48000000 		.4byte	.LFE120-.LFB120
 9244 01b8 00000000 		.4byte	.LFB121
 9245 01bc CC000000 		.4byte	.LFE121-.LFB121
 9246 01c0 00000000 		.4byte	0
 9247 01c4 00000000 		.4byte	0
 9248              		.section	.debug_ranges,"",%progbits
 9249              	.Ldebug_ranges0:
 9250 0000 00000000 		.4byte	.LFB68
 9251 0004 82000000 		.4byte	.LFE68
 9252 0008 00000000 		.4byte	.LFB69
 9253 000c FE000000 		.4byte	.LFE69
 9254 0010 00000000 		.4byte	.LFB70
 9255 0014 D4000000 		.4byte	.LFE70
 9256 0018 00000000 		.4byte	.LFB71
 9257 001c FC000000 		.4byte	.LFE71
 9258 0020 00000000 		.4byte	.LFB72
 9259 0024 A0000000 		.4byte	.LFE72
 9260 0028 00000000 		.4byte	.LFB73
 9261 002c 48000000 		.4byte	.LFE73
 9262 0030 00000000 		.4byte	.LFB74
 9263 0034 B0000000 		.4byte	.LFE74
 9264 0038 00000000 		.4byte	.LFB75
 9265 003c 34000000 		.4byte	.LFE75
 9266 0040 00000000 		.4byte	.LFB76
 9267 0044 54000000 		.4byte	.LFE76
 9268 0048 00000000 		.4byte	.LFB77
 9269 004c 38010000 		.4byte	.LFE77
 9270 0050 00000000 		.4byte	.LFB78
 9271 0054 04010000 		.4byte	.LFE78
 9272 0058 00000000 		.4byte	.LFB79
 9273 005c 44000000 		.4byte	.LFE79
 9274 0060 00000000 		.4byte	.LFB80
 9275 0064 A0000000 		.4byte	.LFE80
 9276 0068 00000000 		.4byte	.LFB81
 9277 006c C0000000 		.4byte	.LFE81
 9278 0070 00000000 		.4byte	.LFB82
 9279 0074 6C000000 		.4byte	.LFE82
 9280 0078 00000000 		.4byte	.LFB83
 9281 007c 30000000 		.4byte	.LFE83
 9282 0080 00000000 		.4byte	.LFB84
 9283 0084 1C000000 		.4byte	.LFE84
 9284 0088 00000000 		.4byte	.LFB85
 9285 008c 1C010000 		.4byte	.LFE85
 9286 0090 00000000 		.4byte	.LFB86
 9287 0094 1C000000 		.4byte	.LFE86
 9288 0098 00000000 		.4byte	.LFB87
 9289 009c 20000000 		.4byte	.LFE87
 9290 00a0 00000000 		.4byte	.LFB88
 9291 00a4 14000000 		.4byte	.LFE88
 9292 00a8 00000000 		.4byte	.LFB89
 9293 00ac 2C000000 		.4byte	.LFE89
 9294 00b0 00000000 		.4byte	.LFB90
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 262


 9295 00b4 30000000 		.4byte	.LFE90
 9296 00b8 00000000 		.4byte	.LFB91
 9297 00bc 50010000 		.4byte	.LFE91
 9298 00c0 00000000 		.4byte	.LFB92
 9299 00c4 D8000000 		.4byte	.LFE92
 9300 00c8 00000000 		.4byte	.LFB93
 9301 00cc 2C000000 		.4byte	.LFE93
 9302 00d0 00000000 		.4byte	.LFB94
 9303 00d4 3C000000 		.4byte	.LFE94
 9304 00d8 00000000 		.4byte	.LFB95
 9305 00dc A8000000 		.4byte	.LFE95
 9306 00e0 00000000 		.4byte	.LFB96
 9307 00e4 84000000 		.4byte	.LFE96
 9308 00e8 00000000 		.4byte	.LFB97
 9309 00ec 30000000 		.4byte	.LFE97
 9310 00f0 00000000 		.4byte	.LFB98
 9311 00f4 2C000000 		.4byte	.LFE98
 9312 00f8 00000000 		.4byte	.LFB99
 9313 00fc 8C000000 		.4byte	.LFE99
 9314 0100 00000000 		.4byte	.LFB100
 9315 0104 18000000 		.4byte	.LFE100
 9316 0108 00000000 		.4byte	.LFB101
 9317 010c 0E000000 		.4byte	.LFE101
 9318 0110 00000000 		.4byte	.LFB102
 9319 0114 80000000 		.4byte	.LFE102
 9320 0118 00000000 		.4byte	.LFB103
 9321 011c 58000000 		.4byte	.LFE103
 9322 0120 00000000 		.4byte	.LFB104
 9323 0124 36000000 		.4byte	.LFE104
 9324 0128 00000000 		.4byte	.LFB105
 9325 012c 38000000 		.4byte	.LFE105
 9326 0130 00000000 		.4byte	.LFB106
 9327 0134 20000000 		.4byte	.LFE106
 9328 0138 00000000 		.4byte	.LFB107
 9329 013c 40000000 		.4byte	.LFE107
 9330 0140 00000000 		.4byte	.LFB108
 9331 0144 1C000000 		.4byte	.LFE108
 9332 0148 00000000 		.4byte	.LFB109
 9333 014c EC000000 		.4byte	.LFE109
 9334 0150 00000000 		.4byte	.LFB110
 9335 0154 C8000000 		.4byte	.LFE110
 9336 0158 00000000 		.4byte	.LFB111
 9337 015c DC000000 		.4byte	.LFE111
 9338 0160 00000000 		.4byte	.LFB112
 9339 0164 30000000 		.4byte	.LFE112
 9340 0168 00000000 		.4byte	.LFB113
 9341 016c 28000000 		.4byte	.LFE113
 9342 0170 00000000 		.4byte	.LFB114
 9343 0174 90000000 		.4byte	.LFE114
 9344 0178 00000000 		.4byte	.LFB115
 9345 017c B4000000 		.4byte	.LFE115
 9346 0180 00000000 		.4byte	.LFB116
 9347 0184 10010000 		.4byte	.LFE116
 9348 0188 00000000 		.4byte	.LFB117
 9349 018c 4C010000 		.4byte	.LFE117
 9350 0190 00000000 		.4byte	.LFB118
 9351 0194 E4000000 		.4byte	.LFE118
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 263


 9352 0198 00000000 		.4byte	.LFB119
 9353 019c 4C000000 		.4byte	.LFE119
 9354 01a0 00000000 		.4byte	.LFB120
 9355 01a4 48000000 		.4byte	.LFE120
 9356 01a8 00000000 		.4byte	.LFB121
 9357 01ac CC000000 		.4byte	.LFE121
 9358 01b0 00000000 		.4byte	0
 9359 01b4 00000000 		.4byte	0
 9360              		.section	.debug_line,"",%progbits
 9361              	.Ldebug_line0:
 9362 0000 D00A0000 		.section	.debug_str,"MS",%progbits,1
 9362      02002902 
 9362      00000201 
 9362      FB0E0D00 
 9362      01010101 
 9363              	.LASF49:
 9364 0000 70635461 		.ascii	"pcTaskName\000"
 9364      736B4E61 
 9364      6D6500
 9365              	.LASF35:
 9366 000b 75784E75 		.ascii	"uxNumberOfItems\000"
 9366      6D626572 
 9366      4F664974 
 9366      656D7300 
 9367              	.LASF47:
 9368 001b 75785072 		.ascii	"uxPriority\000"
 9368      696F7269 
 9368      747900
 9369              	.LASF150:
 9370 0026 7078436F 		.ascii	"pxConstList\000"
 9370      6E73744C 
 9370      69737400 
 9371              	.LASF114:
 9372 0032 70785374 		.ascii	"pxStateList\000"
 9372      6174654C 
 9372      69737400 
 9373              	.LASF57:
 9374 003e 65537573 		.ascii	"eSuspended\000"
 9374      70656E64 
 9374      656400
 9375              	.LASF43:
 9376 0049 74736B54 		.ascii	"tskTaskControlBlock\000"
 9376      61736B43 
 9376      6F6E7472 
 9376      6F6C426C 
 9376      6F636B00 
 9377              	.LASF186:
 9378 005d 75784F6E 		.ascii	"uxOnlyOneMutexHeld\000"
 9378      6C794F6E 
 9378      654D7574 
 9378      65784865 
 9378      6C6400
 9379              	.LASF195:
 9380 0070 756C4269 		.ascii	"ulBitsToClearOnExit\000"
 9380      7473546F 
 9380      436C6561 
 9380      724F6E45 
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 264


 9380      78697400 
 9381              	.LASF96:
 9382 0084 70727649 		.ascii	"prvInitialiseNewTask\000"
 9382      6E697469 
 9382      616C6973 
 9382      654E6577 
 9382      5461736B 
 9383              	.LASF204:
 9384 0099 70784869 		.ascii	"pxHigherPriorityTaskWoken\000"
 9384      67686572 
 9384      5072696F 
 9384      72697479 
 9384      5461736B 
 9385              	.LASF61:
 9386 00b3 654E6F41 		.ascii	"eNoAction\000"
 9386      6374696F 
 9386      6E00
 9387              	.LASF222:
 9388 00bd 7578546F 		.ascii	"uxTopReadyPriority\000"
 9388      70526561 
 9388      64795072 
 9388      696F7269 
 9388      747900
 9389              	.LASF115:
 9390 00d0 70784465 		.ascii	"pxDelayedList\000"
 9390      6C617965 
 9390      644C6973 
 9390      7400
 9391              	.LASF0:
 9392 00de 756E7369 		.ascii	"unsigned int\000"
 9392      676E6564 
 9392      20696E74 
 9392      00
 9393              	.LASF152:
 9394 00eb 70784576 		.ascii	"pxEventList\000"
 9394      656E744C 
 9394      69737400 
 9395              	.LASF223:
 9396 00f7 78536368 		.ascii	"xSchedulerRunning\000"
 9396      6564756C 
 9396      65725275 
 9396      6E6E696E 
 9396      6700
 9397              	.LASF36:
 9398 0109 7078496E 		.ascii	"pxIndex\000"
 9398      64657800 
 9399              	.LASF24:
 9400 0111 53746163 		.ascii	"StackType_t\000"
 9400      6B547970 
 9400      655F7400 
 9401              	.LASF67:
 9402 011d 7854494D 		.ascii	"xTIME_OUT\000"
 9402      455F4F55 
 9402      5400
 9403              	.LASF208:
 9404 0127 756C4269 		.ascii	"ulBitsToClear\000"
 9404      7473546F 
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 265


 9404      436C6561 
 9404      7200
 9405              	.LASF218:
 9406 0135 75784465 		.ascii	"uxDeletedTasksWaitingCleanUp\000"
 9406      6C657465 
 9406      64546173 
 9406      6B735761 
 9406      6974696E 
 9407              	.LASF10:
 9408 0152 5F5F696E 		.ascii	"__int32_t\000"
 9408      7433325F 
 9408      7400
 9409              	.LASF135:
 9410 015c 7850656E 		.ascii	"xPendedCounts\000"
 9410      64656443 
 9410      6F756E74 
 9410      7300
 9411              	.LASF33:
 9412 016a 784C4953 		.ascii	"xLIST_ITEM\000"
 9412      545F4954 
 9412      454D00
 9413              	.LASF211:
 9414 0175 70785265 		.ascii	"pxReadyTasksLists\000"
 9414      61647954 
 9414      61736B73 
 9414      4C697374 
 9414      7300
 9415              	.LASF233:
 9416 0187 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 9416      43313120 
 9416      352E342E 
 9416      31203230 
 9416      31363036 
 9417 01ba 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 9417      20726576 
 9417      6973696F 
 9417      6E203233 
 9417      37373135 
 9418 01ed 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 9418      66756E63 
 9418      74696F6E 
 9418      2D736563 
 9418      74696F6E 
 9419              	.LASF202:
 9420 0215 75634F72 		.ascii	"ucOriginalNotifyState\000"
 9420      6967696E 
 9420      616C4E6F 
 9420      74696679 
 9420      53746174 
 9421              	.LASF159:
 9422 022b 76546173 		.ascii	"vTaskSetTimeOutState\000"
 9422      6B536574 
 9422      54696D65 
 9422      4F757453 
 9422      74617465 
 9423              	.LASF203:
 9424 0240 78546173 		.ascii	"xTaskGenericNotifyFromISR\000"
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 266


 9424      6B47656E 
 9424      65726963 
 9424      4E6F7469 
 9424      66794672 
 9425              	.LASF143:
 9426 025a 78546173 		.ascii	"xTaskIncrementTick\000"
 9426      6B496E63 
 9426      72656D65 
 9426      6E745469 
 9426      636B00
 9427              	.LASF85:
 9428 026d 756C4269 		.ascii	"ulBitmap\000"
 9428      746D6170 
 9428      00
 9429              	.LASF212:
 9430 0276 7844656C 		.ascii	"xDelayedTaskList1\000"
 9430      61796564 
 9430      5461736B 
 9430      4C697374 
 9430      3100
 9431              	.LASF213:
 9432 0288 7844656C 		.ascii	"xDelayedTaskList2\000"
 9432      61796564 
 9432      5461736B 
 9432      4C697374 
 9432      3200
 9433              	.LASF68:
 9434 029a 784F7665 		.ascii	"xOverflowCount\000"
 9434      72666C6F 
 9434      77436F75 
 9434      6E7400
 9435              	.LASF116:
 9436 02a9 70784F76 		.ascii	"pxOverflowedDelayedList\000"
 9436      6572666C 
 9436      6F776564 
 9436      44656C61 
 9436      7965644C 
 9437              	.LASF141:
 9438 02c1 78546173 		.ascii	"xTaskCatchUpTicks\000"
 9438      6B436174 
 9438      63685570 
 9438      5469636B 
 9438      7300
 9439              	.LASF74:
 9440 02d3 756C5061 		.ascii	"ulParameters\000"
 9440      72616D65 
 9440      74657273 
 9440      00
 9441              	.LASF113:
 9442 02e0 65526574 		.ascii	"eReturn\000"
 9442      75726E00 
 9443              	.LASF129:
 9444 02e8 78546173 		.ascii	"xTaskToResume\000"
 9444      6B546F52 
 9444      6573756D 
 9444      6500
 9445              	.LASF118:
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 267


 9446 02f6 75785265 		.ascii	"uxReturn\000"
 9446      7475726E 
 9446      00
 9447              	.LASF188:
 9448 02ff 75785461 		.ascii	"uxTaskGetNumberOfTasks\000"
 9448      736B4765 
 9448      744E756D 
 9448      6265724F 
 9448      66546173 
 9449              	.LASF235:
 9450 0316 433A5C43 		.ascii	"C:\\Code\\P4\\P4_Vertical_farm\\RTOS_TEMPLATE-maste"
 9450      6F64655C 
 9450      50345C50 
 9450      345F5665 
 9450      72746963 
 9451 0345 725C506C 		.ascii	"r\\PlanteModul.cydsn\000"
 9451      616E7465 
 9451      4D6F6475 
 9451      6C2E6379 
 9451      64736E00 
 9452              	.LASF88:
 9453 0359 70634E61 		.ascii	"pcName\000"
 9453      6D6500
 9454              	.LASF76:
 9455 0360 74736B54 		.ascii	"tskTCB\000"
 9455      434200
 9456              	.LASF131:
 9457 0367 75785361 		.ascii	"uxSavedInterruptStatus\000"
 9457      76656449 
 9457      6E746572 
 9457      72757074 
 9457      53746174 
 9458              	.LASF20:
 9459 037e 75696E74 		.ascii	"uint32_t\000"
 9459      33325F74 
 9459      00
 9460              	.LASF53:
 9461 0387 75634E6F 		.ascii	"ucNotifyState\000"
 9461      74696679 
 9461      53746174 
 9461      6500
 9462              	.LASF125:
 9463 0395 78596965 		.ascii	"xYieldRequired\000"
 9463      6C645265 
 9463      71756972 
 9463      656400
 9464              	.LASF78:
 9465 03a4 756C4F72 		.ascii	"ulOriginalBASEPRI\000"
 9465      6967696E 
 9465      616C4241 
 9465      53455052 
 9465      4900
 9466              	.LASF197:
 9467 03b6 78546173 		.ascii	"xTaskGenericNotify\000"
 9467      6B47656E 
 9467      65726963 
 9467      4E6F7469 
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 268


 9467      667900
 9468              	.LASF21:
 9469 03c9 666C6F61 		.ascii	"float\000"
 9469      7400
 9470              	.LASF156:
 9471 03cf 7078556E 		.ascii	"pxUnblockedTCB\000"
 9471      626C6F63 
 9471      6B656454 
 9471      434200
 9472              	.LASF89:
 9473 03de 75735374 		.ascii	"usStackDepth\000"
 9473      61636B44 
 9473      65707468 
 9473      00
 9474              	.LASF191:
 9475 03eb 78436C65 		.ascii	"xClearCountOnExit\000"
 9475      6172436F 
 9475      756E744F 
 9475      6E457869 
 9475      7400
 9476              	.LASF164:
 9477 03fd 78456C61 		.ascii	"xElapsedTime\000"
 9477      70736564 
 9477      54696D65 
 9477      00
 9478              	.LASF64:
 9479 040a 65536574 		.ascii	"eSetValueWithOverwrite\000"
 9479      56616C75 
 9479      65576974 
 9479      684F7665 
 9479      72777269 
 9480              	.LASF14:
 9481 0421 6C6F6E67 		.ascii	"long long unsigned int\000"
 9481      206C6F6E 
 9481      6720756E 
 9481      7369676E 
 9481      65642069 
 9482              	.LASF138:
 9483 0438 78546173 		.ascii	"xTaskGetTickCountFromISR\000"
 9483      6B476574 
 9483      5469636B 
 9483      436F756E 
 9483      7446726F 
 9484              	.LASF120:
 9485 0451 75785361 		.ascii	"uxSavedInterruptState\000"
 9485      76656449 
 9485      6E746572 
 9485      72757074 
 9485      53746174 
 9486              	.LASF194:
 9487 0467 756C4269 		.ascii	"ulBitsToClearOnEntry\000"
 9487      7473546F 
 9487      436C6561 
 9487      724F6E45 
 9487      6E747279 
 9488              	.LASF216:
 9489 047c 7850656E 		.ascii	"xPendingReadyList\000"
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 269


 9489      64696E67 
 9489      52656164 
 9489      794C6973 
 9489      7400
 9490              	.LASF146:
 9491 048e 76546173 		.ascii	"vTaskSwitchContext\000"
 9491      6B537769 
 9491      74636843 
 9491      6F6E7465 
 9491      787400
 9492              	.LASF30:
 9493 04a1 70785072 		.ascii	"pxPrevious\000"
 9493      6576696F 
 9493      757300
 9494              	.LASF217:
 9495 04ac 78546173 		.ascii	"xTasksWaitingTermination\000"
 9495      6B735761 
 9495      6974696E 
 9495      67546572 
 9495      6D696E61 
 9496              	.LASF8:
 9497 04c5 5F5F7569 		.ascii	"__uint16_t\000"
 9497      6E743136 
 9497      5F7400
 9498              	.LASF183:
 9499 04d0 76546173 		.ascii	"vTaskPriorityDisinheritAfterTimeout\000"
 9499      6B507269 
 9499      6F726974 
 9499      79446973 
 9499      696E6865 
 9500              	.LASF130:
 9501 04f4 78546173 		.ascii	"xTaskResumeFromISR\000"
 9501      6B526573 
 9501      756D6546 
 9501      726F6D49 
 9501      535200
 9502              	.LASF165:
 9503 0507 76546173 		.ascii	"vTaskSuspendAll\000"
 9503      6B537573 
 9503      70656E64 
 9503      416C6C00 
 9504              	.LASF174:
 9505 0517 75785461 		.ascii	"uxTaskGetStackHighWaterMark\000"
 9505      736B4765 
 9505      74537461 
 9505      636B4869 
 9505      67685761 
 9506              	.LASF66:
 9507 0533 654E6F74 		.ascii	"eNotifyAction\000"
 9507      69667941 
 9507      6374696F 
 9507      6E00
 9508              	.LASF4:
 9509 0541 73697A65 		.ascii	"size_t\000"
 9509      5F7400
 9510              	.LASF63:
 9511 0548 65496E63 		.ascii	"eIncrement\000"
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 270


 9511      72656D65 
 9511      6E7400
 9512              	.LASF39:
 9513 0553 784D494E 		.ascii	"xMINI_LIST_ITEM\000"
 9513      495F4C49 
 9513      53545F49 
 9513      54454D00 
 9514              	.LASF172:
 9515 0563 70756353 		.ascii	"pucStackByte\000"
 9515      7461636B 
 9515      42797465 
 9515      00
 9516              	.LASF34:
 9517 0570 784C4953 		.ascii	"xLIST\000"
 9517      5400
 9518              	.LASF133:
 9519 0576 76546173 		.ascii	"vTaskEndScheduler\000"
 9519      6B456E64 
 9519      53636865 
 9519      64756C65 
 9519      7200
 9520              	.LASF117:
 9521 0588 75785461 		.ascii	"uxTaskPriorityGet\000"
 9521      736B5072 
 9521      696F7269 
 9521      74794765 
 9521      7400
 9522              	.LASF107:
 9523 059a 78436F6E 		.ascii	"xConstTickCount\000"
 9523      73745469 
 9523      636B436F 
 9523      756E7400 
 9524              	.LASF219:
 9525 05aa 78537573 		.ascii	"xSuspendedTaskList\000"
 9525      70656E64 
 9525      65645461 
 9525      736B4C69 
 9525      737400
 9526              	.LASF80:
 9527 05bd 76506F72 		.ascii	"vPortSetBASEPRI\000"
 9527      74536574 
 9527      42415345 
 9527      50524900 
 9528              	.LASF173:
 9529 05cd 756C436F 		.ascii	"ulCount\000"
 9529      756E7400 
 9530              	.LASF215:
 9531 05d5 70784F76 		.ascii	"pxOverflowDelayedTaskList\000"
 9531      6572666C 
 9531      6F774465 
 9531      6C617965 
 9531      64546173 
 9532              	.LASF145:
 9533 05ef 70785465 		.ascii	"pxTemp\000"
 9533      6D7000
 9534              	.LASF151:
 9535 05f6 76546173 		.ascii	"vTaskPlaceOnEventList\000"
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 271


 9535      6B506C61 
 9535      63654F6E 
 9535      4576656E 
 9535      744C6973 
 9536              	.LASF108:
 9537 060c 76546173 		.ascii	"vTaskDelay\000"
 9537      6B44656C 
 9537      617900
 9538              	.LASF189:
 9539 0617 70765461 		.ascii	"pvTaskIncrementMutexHeldCount\000"
 9539      736B496E 
 9539      6372656D 
 9539      656E744D 
 9539      75746578 
 9540              	.LASF52:
 9541 0635 756C4E6F 		.ascii	"ulNotifiedValue\000"
 9541      74696669 
 9541      65645661 
 9541      6C756500 
 9542              	.LASF157:
 9543 0645 76546173 		.ascii	"vTaskRemoveFromUnorderedEventList\000"
 9543      6B52656D 
 9543      6F766546 
 9543      726F6D55 
 9543      6E6F7264 
 9544              	.LASF51:
 9545 0667 75784D75 		.ascii	"uxMutexesHeld\000"
 9545      74657865 
 9545      7348656C 
 9545      6400
 9546              	.LASF182:
 9547 0675 78546173 		.ascii	"xTaskPriorityDisinherit\000"
 9547      6B507269 
 9547      6F726974 
 9547      79446973 
 9547      696E6865 
 9548              	.LASF155:
 9549 068d 78546173 		.ascii	"xTaskRemoveFromEventList\000"
 9549      6B52656D 
 9549      6F766546 
 9549      726F6D45 
 9549      76656E74 
 9550              	.LASF16:
 9551 06a6 63686172 		.ascii	"char\000"
 9551      00
 9552              	.LASF38:
 9553 06ab 4C697374 		.ascii	"ListItem_t\000"
 9553      4974656D 
 9553      5F7400
 9554              	.LASF65:
 9555 06b6 65536574 		.ascii	"eSetValueWithoutOverwrite\000"
 9555      56616C75 
 9555      65576974 
 9555      686F7574 
 9555      4F766572 
 9556              	.LASF79:
 9557 06d0 756C4E65 		.ascii	"ulNewBASEPRI\000"
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 272


 9557      77424153 
 9557      45505249 
 9557      00
 9558              	.LASF26:
 9559 06dd 55426173 		.ascii	"UBaseType_t\000"
 9559      65547970 
 9559      655F7400 
 9560              	.LASF94:
 9561 06e9 756C5374 		.ascii	"ulStackDepth\000"
 9561      61636B44 
 9561      65707468 
 9561      00
 9562              	.LASF106:
 9563 06f6 7853686F 		.ascii	"xShouldDelay\000"
 9563      756C6444 
 9563      656C6179 
 9563      00
 9564              	.LASF167:
 9565 0703 70727649 		.ascii	"prvIdleTask\000"
 9565      646C6554 
 9565      61736B00 
 9566              	.LASF37:
 9567 070f 784C6973 		.ascii	"xListEnd\000"
 9567      74456E64 
 9567      00
 9568              	.LASF190:
 9569 0718 756C5461 		.ascii	"ulTaskNotifyTake\000"
 9569      736B4E6F 
 9569      74696679 
 9569      54616B65 
 9569      00
 9570              	.LASF40:
 9571 0729 4D696E69 		.ascii	"MiniListItem_t\000"
 9571      4C697374 
 9571      4974656D 
 9571      5F7400
 9572              	.LASF193:
 9573 0738 78546173 		.ascii	"xTaskNotifyWait\000"
 9573      6B4E6F74 
 9573      69667957 
 9573      61697400 
 9574              	.LASF110:
 9575 0748 78546173 		.ascii	"xTaskCreate\000"
 9575      6B437265 
 9575      61746500 
 9576              	.LASF97:
 9577 0754 70727641 		.ascii	"prvAddNewTaskToReadyList\000"
 9577      64644E65 
 9577      77546173 
 9577      6B546F52 
 9577      65616479 
 9578              	.LASF17:
 9579 076d 75696E74 		.ascii	"uint8_t\000"
 9579      385F7400 
 9580              	.LASF55:
 9581 0775 65526561 		.ascii	"eReady\000"
 9581      647900
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 273


 9582              	.LASF111:
 9583 077c 65546173 		.ascii	"eTaskGetState\000"
 9583      6B476574 
 9583      53746174 
 9583      6500
 9584              	.LASF92:
 9585 078a 70784E65 		.ascii	"pxNewTCB\000"
 9585      77544342 
 9585      00
 9586              	.LASF87:
 9587 0793 70785461 		.ascii	"pxTaskCode\000"
 9587      736B436F 
 9587      646500
 9588              	.LASF75:
 9589 079e 4D656D6F 		.ascii	"MemoryRegion_t\000"
 9589      72795265 
 9589      67696F6E 
 9589      5F7400
 9590              	.LASF228:
 9591 07ad 784E6578 		.ascii	"xNextTaskUnblockTime\000"
 9591      74546173 
 9591      6B556E62 
 9591      6C6F636B 
 9591      54696D65 
 9592              	.LASF82:
 9593 07c2 756C506F 		.ascii	"ulPortRaiseBASEPRI\000"
 9593      72745261 
 9593      69736542 
 9593      41534550 
 9593      524900
 9594              	.LASF221:
 9595 07d5 78546963 		.ascii	"xTickCount\000"
 9595      6B436F75 
 9595      6E7400
 9596              	.LASF1:
 9597 07e0 6C6F6E67 		.ascii	"long long int\000"
 9597      206C6F6E 
 9597      6720696E 
 9597      7400
 9598              	.LASF58:
 9599 07ee 6544656C 		.ascii	"eDeleted\000"
 9599      65746564 
 9599      00
 9600              	.LASF83:
 9601 07f7 7563506F 		.ascii	"ucPortCountLeadingZeros\000"
 9601      7274436F 
 9601      756E744C 
 9601      65616469 
 9601      6E675A65 
 9602              	.LASF73:
 9603 080f 756C4C65 		.ascii	"ulLengthInBytes\000"
 9603      6E677468 
 9603      496E4279 
 9603      74657300 
 9604              	.LASF25:
 9605 081f 42617365 		.ascii	"BaseType_t\000"
 9605      54797065 
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 274


 9605      5F7400
 9606              	.LASF148:
 9607 082a 756C4368 		.ascii	"ulCheckValue\000"
 9607      65636B56 
 9607      616C7565 
 9607      00
 9608              	.LASF177:
 9609 0837 70727652 		.ascii	"prvResetNextTaskUnblockTime\000"
 9609      65736574 
 9609      4E657874 
 9609      5461736B 
 9609      556E626C 
 9610              	.LASF69:
 9611 0853 7854696D 		.ascii	"xTimeOnEntering\000"
 9611      654F6E45 
 9611      6E746572 
 9611      696E6700 
 9612              	.LASF122:
 9613 0863 75784E65 		.ascii	"uxNewPriority\000"
 9613      77507269 
 9613      6F726974 
 9613      7900
 9614              	.LASF23:
 9615 0871 5461736B 		.ascii	"TaskFunction_t\000"
 9615      46756E63 
 9615      74696F6E 
 9615      5F7400
 9616              	.LASF29:
 9617 0880 70784E65 		.ascii	"pxNext\000"
 9617      787400
 9618              	.LASF201:
 9619 0887 70756C50 		.ascii	"pulPreviousNotificationValue\000"
 9619      72657669 
 9619      6F75734E 
 9619      6F746966 
 9619      69636174 
 9620              	.LASF160:
 9621 08a4 70785469 		.ascii	"pxTimeOut\000"
 9621      6D654F75 
 9621      7400
 9622              	.LASF119:
 9623 08ae 75785461 		.ascii	"uxTaskPriorityGetFromISR\000"
 9623      736B5072 
 9623      696F7269 
 9623      74794765 
 9623      7446726F 
 9624              	.LASF136:
 9625 08c7 78546173 		.ascii	"xTaskGetTickCount\000"
 9625      6B476574 
 9625      5469636B 
 9625      436F756E 
 9625      7400
 9626              	.LASF70:
 9627 08d9 54696D65 		.ascii	"TimeOut_t\000"
 9627      4F75745F 
 9627      7400
 9628              	.LASF161:
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 275


 9629 08e3 76546173 		.ascii	"vTaskInternalSetTimeOutState\000"
 9629      6B496E74 
 9629      65726E61 
 9629      6C536574 
 9629      54696D65 
 9630              	.LASF227:
 9631 0900 75785461 		.ascii	"uxTaskNumber\000"
 9631      736B4E75 
 9631      6D626572 
 9631      00
 9632              	.LASF42:
 9633 090d 5461736B 		.ascii	"TaskHandle_t\000"
 9633      48616E64 
 9633      6C655F74 
 9633      00
 9634              	.LASF200:
 9635 091a 65416374 		.ascii	"eAction\000"
 9635      696F6E00 
 9636              	.LASF84:
 9637 0922 756C4E65 		.ascii	"ulNewMaskValue\000"
 9637      774D6173 
 9637      6B56616C 
 9637      756500
 9638              	.LASF187:
 9639 0931 75785461 		.ascii	"uxTaskResetEventItemValue\000"
 9639      736B5265 
 9639      73657445 
 9639      76656E74 
 9639      4974656D 
 9640              	.LASF121:
 9641 094b 76546173 		.ascii	"vTaskPrioritySet\000"
 9641      6B507269 
 9641      6F726974 
 9641      79536574 
 9641      00
 9642              	.LASF60:
 9643 095c 65546173 		.ascii	"eTaskState\000"
 9643      6B537461 
 9643      746500
 9644              	.LASF41:
 9645 0967 4C697374 		.ascii	"List_t\000"
 9645      5F7400
 9646              	.LASF140:
 9647 096e 78546173 		.ascii	"xTaskToQuery\000"
 9647      6B546F51 
 9647      75657279 
 9647      00
 9648              	.LASF27:
 9649 097b 5469636B 		.ascii	"TickType_t\000"
 9649      54797065 
 9649      5F7400
 9650              	.LASF198:
 9651 0986 78546173 		.ascii	"xTaskToNotify\000"
 9651      6B546F4E 
 9651      6F746966 
 9651      7900
 9652              	.LASF112:
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 276


 9653 0994 78546173 		.ascii	"xTask\000"
 9653      6B00
 9654              	.LASF62:
 9655 099a 65536574 		.ascii	"eSetBits\000"
 9655      42697473 
 9655      00
 9656              	.LASF2:
 9657 09a3 6C6F6E67 		.ascii	"long double\000"
 9657      20646F75 
 9657      626C6500 
 9658              	.LASF71:
 9659 09af 784D454D 		.ascii	"xMEMORY_REGION\000"
 9659      4F52595F 
 9659      52454749 
 9659      4F4E00
 9660              	.LASF18:
 9661 09be 75696E74 		.ascii	"uint16_t\000"
 9661      31365F74 
 9661      00
 9662              	.LASF100:
 9663 09c7 76546173 		.ascii	"vTaskDelete\000"
 9663      6B44656C 
 9663      65746500 
 9664              	.LASF185:
 9665 09d3 75785072 		.ascii	"uxPriorityToUse\000"
 9665      696F7269 
 9665      7479546F 
 9665      55736500 
 9666              	.LASF234:
 9667 09e3 536F7572 		.ascii	"Source\\tasks.c\000"
 9667      63655C74 
 9667      61736B73 
 9667      2E6300
 9668              	.LASF226:
 9669 09f2 784E756D 		.ascii	"xNumOfOverflows\000"
 9669      4F664F76 
 9669      6572666C 
 9669      6F777300 
 9670              	.LASF32:
 9671 0a02 7076436F 		.ascii	"pvContainer\000"
 9671      6E746169 
 9671      6E657200 
 9672              	.LASF229:
 9673 0a0e 7849646C 		.ascii	"xIdleTaskHandle\000"
 9673      65546173 
 9673      6B48616E 
 9673      646C6500 
 9674              	.LASF184:
 9675 0a1e 75784869 		.ascii	"uxHighestPriorityWaitingTask\000"
 9675      67686573 
 9675      74507269 
 9675      6F726974 
 9675      79576169 
 9676              	.LASF7:
 9677 0a3b 73686F72 		.ascii	"short int\000"
 9677      7420696E 
 9677      7400
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 277


 9678              	.LASF90:
 9679 0a45 70765061 		.ascii	"pvParameters\000"
 9679      72616D65 
 9679      74657273 
 9679      00
 9680              	.LASF28:
 9681 0a52 78497465 		.ascii	"xItemValue\000"
 9681      6D56616C 
 9681      756500
 9682              	.LASF11:
 9683 0a5d 6C6F6E67 		.ascii	"long int\000"
 9683      20696E74 
 9683      00
 9684              	.LASF231:
 9685 0a66 49544D5F 		.ascii	"ITM_RxBuffer\000"
 9685      52784275 
 9685      66666572 
 9685      00
 9686              	.LASF134:
 9687 0a73 78546173 		.ascii	"xTaskResumeAll\000"
 9687      6B526573 
 9687      756D6541 
 9687      6C6C00
 9688              	.LASF205:
 9689 0a82 76546173 		.ascii	"vTaskNotifyGiveFromISR\000"
 9689      6B4E6F74 
 9689      69667947 
 9689      69766546 
 9689      726F6D49 
 9690              	.LASF214:
 9691 0a99 70784465 		.ascii	"pxDelayedTaskList\000"
 9691      6C617965 
 9691      64546173 
 9691      6B4C6973 
 9691      7400
 9692              	.LASF170:
 9693 0aab 70727654 		.ascii	"prvTaskIsTaskSuspended\000"
 9693      61736B49 
 9693      73546173 
 9693      6B537573 
 9693      70656E64 
 9694              	.LASF144:
 9695 0ac2 78537769 		.ascii	"xSwitchRequired\000"
 9695      74636852 
 9695      65717569 
 9695      72656400 
 9696              	.LASF180:
 9697 0ad2 70784D75 		.ascii	"pxMutexHolder\000"
 9697      74657848 
 9697      6F6C6465 
 9697      7200
 9698              	.LASF48:
 9699 0ae0 70785374 		.ascii	"pxStack\000"
 9699      61636B00 
 9700              	.LASF98:
 9701 0ae8 78546173 		.ascii	"xTaskToDelete\000"
 9701      6B546F44 
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 278


 9701      656C6574 
 9701      6500
 9702              	.LASF199:
 9703 0af6 756C5661 		.ascii	"ulValue\000"
 9703      6C756500 
 9704              	.LASF127:
 9705 0afe 78546173 		.ascii	"xTaskToSuspend\000"
 9705      6B546F53 
 9705      75737065 
 9705      6E6400
 9706              	.LASF162:
 9707 0b0d 78546173 		.ascii	"xTaskCheckForTimeOut\000"
 9707      6B436865 
 9707      636B466F 
 9707      7254696D 
 9707      654F7574 
 9708              	.LASF102:
 9709 0b22 70785072 		.ascii	"pxPreviousWakeTime\000"
 9709      6576696F 
 9709      75735761 
 9709      6B655469 
 9709      6D6500
 9710              	.LASF5:
 9711 0b35 5F5F7569 		.ascii	"__uint8_t\000"
 9711      6E74385F 
 9711      7400
 9712              	.LASF86:
 9713 0b3f 75635265 		.ascii	"ucReturn\000"
 9713      7475726E 
 9713      00
 9714              	.LASF196:
 9715 0b48 70756C4E 		.ascii	"pulNotificationValue\000"
 9715      6F746966 
 9715      69636174 
 9715      696F6E56 
 9715      616C7565 
 9716              	.LASF93:
 9717 0b5d 78526574 		.ascii	"xReturn\000"
 9717      75726E00 
 9718              	.LASF15:
 9719 0b65 73697A65 		.ascii	"sizetype\000"
 9719      74797065 
 9719      00
 9720              	.LASF166:
 9721 0b6e 76546173 		.ascii	"vTaskMissedYield\000"
 9721      6B4D6973 
 9721      73656459 
 9721      69656C64 
 9721      00
 9722              	.LASF13:
 9723 0b7f 6C6F6E67 		.ascii	"long unsigned int\000"
 9723      20756E73 
 9723      69676E65 
 9723      6420696E 
 9723      7400
 9724              	.LASF81:
 9725 0b91 76506F72 		.ascii	"vPortRaiseBASEPRI\000"
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 279


 9725      74526169 
 9725      73654241 
 9725      53455052 
 9725      4900
 9726              	.LASF179:
 9727 0ba3 78546173 		.ascii	"xTaskPriorityInherit\000"
 9727      6B507269 
 9727      6F726974 
 9727      79496E68 
 9727      65726974 
 9728              	.LASF175:
 9729 0bb8 70756345 		.ascii	"pucEndOfStack\000"
 9729      6E644F66 
 9729      53746163 
 9729      6B00
 9730              	.LASF181:
 9731 0bc6 70784D75 		.ascii	"pxMutexHolderTCB\000"
 9731      74657848 
 9731      6F6C6465 
 9731      72544342 
 9731      00
 9732              	.LASF139:
 9733 0bd7 70635461 		.ascii	"pcTaskGetName\000"
 9733      736B4765 
 9733      744E616D 
 9733      6500
 9734              	.LASF19:
 9735 0be5 696E7433 		.ascii	"int32_t\000"
 9735      325F7400 
 9736              	.LASF137:
 9737 0bed 78546963 		.ascii	"xTicks\000"
 9737      6B7300
 9738              	.LASF132:
 9739 0bf4 76546173 		.ascii	"vTaskStartScheduler\000"
 9739      6B537461 
 9739      72745363 
 9739      68656475 
 9739      6C657200 
 9740              	.LASF210:
 9741 0c08 7843616E 		.ascii	"xCanBlockIndefinitely\000"
 9741      426C6F63 
 9741      6B496E64 
 9741      6566696E 
 9741      6974656C 
 9742              	.LASF54:
 9743 0c1e 6552756E 		.ascii	"eRunning\000"
 9743      6E696E67 
 9743      00
 9744              	.LASF147:
 9745 0c27 70756C53 		.ascii	"pulStack\000"
 9745      7461636B 
 9745      00
 9746              	.LASF72:
 9747 0c30 70764261 		.ascii	"pvBaseAddress\000"
 9747      73654164 
 9747      64726573 
 9747      7300
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 280


 9748              	.LASF109:
 9749 0c3e 78546963 		.ascii	"xTicksToDelay\000"
 9749      6B73546F 
 9749      44656C61 
 9749      7900
 9750              	.LASF6:
 9751 0c4c 756E7369 		.ascii	"unsigned char\000"
 9751      676E6564 
 9751      20636861 
 9751      7200
 9752              	.LASF154:
 9753 0c5a 76546173 		.ascii	"vTaskPlaceOnUnorderedEventList\000"
 9753      6B506C61 
 9753      63654F6E 
 9753      556E6F72 
 9753      64657265 
 9754              	.LASF12:
 9755 0c79 5F5F7569 		.ascii	"__uint32_t\000"
 9755      6E743332 
 9755      5F7400
 9756              	.LASF206:
 9757 0c84 78546173 		.ascii	"xTaskNotifyStateClear\000"
 9757      6B4E6F74 
 9757      69667953 
 9757      74617465 
 9757      436C6561 
 9758              	.LASF163:
 9759 0c9a 70785469 		.ascii	"pxTicksToWait\000"
 9759      636B7354 
 9759      6F576169 
 9759      7400
 9760              	.LASF59:
 9761 0ca8 65496E76 		.ascii	"eInvalid\000"
 9761      616C6964 
 9761      00
 9762              	.LASF149:
 9763 0cb1 7578546F 		.ascii	"uxTopPriority\000"
 9763      70507269 
 9763      6F726974 
 9763      7900
 9764              	.LASF50:
 9765 0cbf 75784261 		.ascii	"uxBasePriority\000"
 9765      73655072 
 9765      696F7269 
 9765      747900
 9766              	.LASF101:
 9767 0cce 76546173 		.ascii	"vTaskDelayUntil\000"
 9767      6B44656C 
 9767      6179556E 
 9767      74696C00 
 9768              	.LASF46:
 9769 0cde 78457665 		.ascii	"xEventListItem\000"
 9769      6E744C69 
 9769      73744974 
 9769      656D00
 9770              	.LASF124:
 9771 0ced 75785072 		.ascii	"uxPriorityUsedOnEntry\000"
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 281


 9771      696F7269 
 9771      74795573 
 9771      65644F6E 
 9771      456E7472 
 9772              	.LASF77:
 9773 0d03 5443425F 		.ascii	"TCB_t\000"
 9773      7400
 9774              	.LASF153:
 9775 0d09 78546963 		.ascii	"xTicksToWait\000"
 9775      6B73546F 
 9775      57616974 
 9775      00
 9776              	.LASF31:
 9777 0d16 70764F77 		.ascii	"pvOwner\000"
 9777      6E657200 
 9778              	.LASF176:
 9779 0d1e 70727644 		.ascii	"prvDeleteTCB\000"
 9779      656C6574 
 9779      65544342 
 9779      00
 9780              	.LASF56:
 9781 0d2b 65426C6F 		.ascii	"eBlocked\000"
 9781      636B6564 
 9781      00
 9782              	.LASF126:
 9783 0d34 76546173 		.ascii	"vTaskSuspend\000"
 9783      6B537573 
 9783      70656E64 
 9783      00
 9784              	.LASF105:
 9785 0d41 78416C72 		.ascii	"xAlreadyYielded\000"
 9785      65616479 
 9785      5969656C 
 9785      64656400 
 9786              	.LASF178:
 9787 0d51 78546173 		.ascii	"xTaskGetCurrentTaskHandle\000"
 9787      6B476574 
 9787      43757272 
 9787      656E7454 
 9787      61736B48 
 9788              	.LASF224:
 9789 0d6b 7850656E 		.ascii	"xPendedTicks\000"
 9789      64656454 
 9789      69636B73 
 9789      00
 9790              	.LASF171:
 9791 0d78 70727654 		.ascii	"prvTaskCheckFreeStackSpace\000"
 9791      61736B43 
 9791      6865636B 
 9791      46726565 
 9791      53746163 
 9792              	.LASF142:
 9793 0d93 78546963 		.ascii	"xTicksToCatchUp\000"
 9793      6B73546F 
 9793      43617463 
 9793      68557000 
 9794              	.LASF95:
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 282


 9795 0da3 78526567 		.ascii	"xRegions\000"
 9795      696F6E73 
 9795      00
 9796              	.LASF209:
 9797 0dac 70727641 		.ascii	"prvAddCurrentTaskToDelayedList\000"
 9797      64644375 
 9797      7272656E 
 9797      74546173 
 9797      6B546F44 
 9798              	.LASF232:
 9799 0dcb 70784375 		.ascii	"pxCurrentTCB\000"
 9799      7272656E 
 9799      74544342 
 9799      00
 9800              	.LASF220:
 9801 0dd8 75784375 		.ascii	"uxCurrentNumberOfTasks\000"
 9801      7272656E 
 9801      744E756D 
 9801      6265724F 
 9801      66546173 
 9802              	.LASF103:
 9803 0def 7854696D 		.ascii	"xTimeIncrement\000"
 9803      65496E63 
 9803      72656D65 
 9803      6E7400
 9804              	.LASF3:
 9805 0dfe 7369676E 		.ascii	"signed char\000"
 9805      65642063 
 9805      68617200 
 9806              	.LASF207:
 9807 0e0a 756C5461 		.ascii	"ulTaskNotifyValueClear\000"
 9807      736B4E6F 
 9807      74696679 
 9807      56616C75 
 9807      65436C65 
 9808              	.LASF9:
 9809 0e21 73686F72 		.ascii	"short unsigned int\000"
 9809      7420756E 
 9809      7369676E 
 9809      65642069 
 9809      6E7400
 9810              	.LASF104:
 9811 0e34 7854696D 		.ascii	"xTimeToWake\000"
 9811      65546F57 
 9811      616B6500 
 9812              	.LASF45:
 9813 0e40 78537461 		.ascii	"xStateListItem\000"
 9813      74654C69 
 9813      73744974 
 9813      656D00
 9814              	.LASF99:
 9815 0e4f 70785443 		.ascii	"pxTCB\000"
 9815      4200
 9816              	.LASF22:
 9817 0e55 646F7562 		.ascii	"double\000"
 9817      6C6500
 9818              	.LASF230:
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccPaWPV3.s 			page 283


 9819 0e5c 75785363 		.ascii	"uxSchedulerSuspended\000"
 9819      68656475 
 9819      6C657253 
 9819      75737065 
 9819      6E646564 
 9820              	.LASF44:
 9821 0e71 7078546F 		.ascii	"pxTopOfStack\000"
 9821      704F6653 
 9821      7461636B 
 9821      00
 9822              	.LASF128:
 9823 0e7e 76546173 		.ascii	"vTaskResume\000"
 9823      6B526573 
 9823      756D6500 
 9824              	.LASF168:
 9825 0e8a 70727649 		.ascii	"prvInitialiseTaskLists\000"
 9825      6E697469 
 9825      616C6973 
 9825      65546173 
 9825      6B4C6973 
 9826              	.LASF158:
 9827 0ea1 70784576 		.ascii	"pxEventListItem\000"
 9827      656E744C 
 9827      69737449 
 9827      74656D00 
 9828              	.LASF91:
 9829 0eb1 70784372 		.ascii	"pxCreatedTask\000"
 9829      65617465 
 9829      64546173 
 9829      6B00
 9830              	.LASF169:
 9831 0ebf 70727643 		.ascii	"prvCheckTasksWaitingTermination\000"
 9831      6865636B 
 9831      5461736B 
 9831      73576169 
 9831      74696E67 
 9832              	.LASF192:
 9833 0edf 756C5265 		.ascii	"ulReturn\000"
 9833      7475726E 
 9833      00
 9834              	.LASF123:
 9835 0ee8 75784375 		.ascii	"uxCurrentBasePriority\000"
 9835      7272656E 
 9835      74426173 
 9835      65507269 
 9835      6F726974 
 9836              	.LASF225:
 9837 0efe 78596965 		.ascii	"xYieldPending\000"
 9837      6C645065 
 9837      6E64696E 
 9837      6700
 9838              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
