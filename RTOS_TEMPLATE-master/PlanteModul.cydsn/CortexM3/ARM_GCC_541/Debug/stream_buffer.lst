ARM GAS  C:\Users\Gusta\AppData\Local\Temp\ccugn2Vx.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"stream_buffer.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.comm	DS18x8_Sensor,32,4
  20              		.comm	DS18x8_DataReady,1,1
  21              		.section	.text.xStreamBufferGenericCreate,"ax",%progbits
  22              		.align	2
  23              		.global	xStreamBufferGenericCreate
  24              		.thumb
  25              		.thumb_func
  26              		.type	xStreamBufferGenericCreate, %function
  27              	xStreamBufferGenericCreate:
  28              	.LFB68:
  29              		.file 1 "Source\\stream_buffer.c"
   1:Source/stream_buffer.c **** /*
   2:Source/stream_buffer.c ****  * FreeRTOS Kernel V10.3.1
   3:Source/stream_buffer.c ****  * Copyright (C) 2020 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:Source/stream_buffer.c ****  *
   5:Source/stream_buffer.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:Source/stream_buffer.c ****  * this software and associated documentation files (the "Software"), to deal in
   7:Source/stream_buffer.c ****  * the Software without restriction, including without limitation the rights to
   8:Source/stream_buffer.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:Source/stream_buffer.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:Source/stream_buffer.c ****  * subject to the following conditions:
  11:Source/stream_buffer.c ****  *
  12:Source/stream_buffer.c ****  * The above copyright notice and this permission notice shall be included in all
  13:Source/stream_buffer.c ****  * copies or substantial portions of the Software.
  14:Source/stream_buffer.c ****  *
  15:Source/stream_buffer.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:Source/stream_buffer.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:Source/stream_buffer.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:Source/stream_buffer.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:Source/stream_buffer.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:Source/stream_buffer.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:Source/stream_buffer.c ****  *
  22:Source/stream_buffer.c ****  * http://www.FreeRTOS.org
  23:Source/stream_buffer.c ****  * http://aws.amazon.com/freertos
  24:Source/stream_buffer.c ****  *
  25:Source/stream_buffer.c ****  * 1 tab == 4 spaces!
  26:Source/stream_buffer.c ****  */
  27:Source/stream_buffer.c **** 
  28:Source/stream_buffer.c **** /* Standard includes. */
ARM GAS  C:\Users\Gusta\AppData\Local\Temp\ccugn2Vx.s 			page 2


  29:Source/stream_buffer.c **** #include <stdint.h>
  30:Source/stream_buffer.c **** #include <string.h>
  31:Source/stream_buffer.c **** 
  32:Source/stream_buffer.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  33:Source/stream_buffer.c **** all the API functions to use the MPU wrappers.  That should only be done when
  34:Source/stream_buffer.c **** task.h is included from an application file. */
  35:Source/stream_buffer.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  36:Source/stream_buffer.c **** 
  37:Source/stream_buffer.c **** /* FreeRTOS includes. */
  38:Source/stream_buffer.c **** #include "FreeRTOS.h"
  39:Source/stream_buffer.c **** #include "task.h"
  40:Source/stream_buffer.c **** #include "stream_buffer.h"
  41:Source/stream_buffer.c **** 
  42:Source/stream_buffer.c **** #if( configUSE_TASK_NOTIFICATIONS != 1 )
  43:Source/stream_buffer.c **** 	#error configUSE_TASK_NOTIFICATIONS must be set to 1 to build stream_buffer.c
  44:Source/stream_buffer.c **** #endif
  45:Source/stream_buffer.c **** 
  46:Source/stream_buffer.c **** /* Lint e961, e9021 and e750 are suppressed as a MISRA exception justified
  47:Source/stream_buffer.c **** because the MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined
  48:Source/stream_buffer.c **** for the header files above, but not in this file, in order to generate the
  49:Source/stream_buffer.c **** correct privileged Vs unprivileged linkage and placement. */
  50:Source/stream_buffer.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750 !e9021. */
  51:Source/stream_buffer.c **** 
  52:Source/stream_buffer.c **** /* If the user has not provided application specific Rx notification macros,
  53:Source/stream_buffer.c **** or #defined the notification macros away, them provide default implementations
  54:Source/stream_buffer.c **** that uses task notifications. */
  55:Source/stream_buffer.c **** /*lint -save -e9026 Function like macros allowed and needed here so they can be overidden. */
  56:Source/stream_buffer.c **** #ifndef sbRECEIVE_COMPLETED
  57:Source/stream_buffer.c **** 	#define sbRECEIVE_COMPLETED( pxStreamBuffer )										\
  58:Source/stream_buffer.c **** 		vTaskSuspendAll();																\
  59:Source/stream_buffer.c **** 		{																				\
  60:Source/stream_buffer.c **** 			if( ( pxStreamBuffer )->xTaskWaitingToSend != NULL )						\
  61:Source/stream_buffer.c **** 			{																			\
  62:Source/stream_buffer.c **** 				( void ) xTaskNotify( ( pxStreamBuffer )->xTaskWaitingToSend,			\
  63:Source/stream_buffer.c **** 									  ( uint32_t ) 0,									\
  64:Source/stream_buffer.c **** 									  eNoAction );										\
  65:Source/stream_buffer.c **** 				( pxStreamBuffer )->xTaskWaitingToSend = NULL;							\
  66:Source/stream_buffer.c **** 			}																			\
  67:Source/stream_buffer.c **** 		}																				\
  68:Source/stream_buffer.c **** 		( void ) xTaskResumeAll();
  69:Source/stream_buffer.c **** #endif /* sbRECEIVE_COMPLETED */
  70:Source/stream_buffer.c **** 
  71:Source/stream_buffer.c **** #ifndef sbRECEIVE_COMPLETED_FROM_ISR
  72:Source/stream_buffer.c **** 	#define sbRECEIVE_COMPLETED_FROM_ISR( pxStreamBuffer,								\
  73:Source/stream_buffer.c **** 										  pxHigherPriorityTaskWoken )					\
  74:Source/stream_buffer.c **** 	{																					\
  75:Source/stream_buffer.c **** 	UBaseType_t uxSavedInterruptStatus;													\
  76:Source/stream_buffer.c **** 																						\
  77:Source/stream_buffer.c **** 		uxSavedInterruptStatus = ( UBaseType_t ) portSET_INTERRUPT_MASK_FROM_ISR();		\
  78:Source/stream_buffer.c **** 		{																				\
  79:Source/stream_buffer.c **** 			if( ( pxStreamBuffer )->xTaskWaitingToSend != NULL )						\
  80:Source/stream_buffer.c **** 			{																			\
  81:Source/stream_buffer.c **** 				( void ) xTaskNotifyFromISR( ( pxStreamBuffer )->xTaskWaitingToSend,	\
  82:Source/stream_buffer.c **** 											 ( uint32_t ) 0,							\
  83:Source/stream_buffer.c **** 											 eNoAction,									\
  84:Source/stream_buffer.c **** 											 pxHigherPriorityTaskWoken );				\
  85:Source/stream_buffer.c **** 				( pxStreamBuffer )->xTaskWaitingToSend = NULL;							\
ARM GAS  C:\Users\Gusta\AppData\Local\Temp\ccugn2Vx.s 			page 3


  86:Source/stream_buffer.c **** 			}																			\
  87:Source/stream_buffer.c **** 		}																				\
  88:Source/stream_buffer.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );					\
  89:Source/stream_buffer.c **** 	}
  90:Source/stream_buffer.c **** #endif /* sbRECEIVE_COMPLETED_FROM_ISR */
  91:Source/stream_buffer.c **** 
  92:Source/stream_buffer.c **** /* If the user has not provided an application specific Tx notification macro,
  93:Source/stream_buffer.c **** or #defined the notification macro away, them provide a default implementation
  94:Source/stream_buffer.c **** that uses task notifications. */
  95:Source/stream_buffer.c **** #ifndef sbSEND_COMPLETED
  96:Source/stream_buffer.c **** 	#define sbSEND_COMPLETED( pxStreamBuffer )											\
  97:Source/stream_buffer.c **** 		vTaskSuspendAll();																\
  98:Source/stream_buffer.c **** 		{																				\
  99:Source/stream_buffer.c **** 			if( ( pxStreamBuffer )->xTaskWaitingToReceive != NULL )						\
 100:Source/stream_buffer.c **** 			{																			\
 101:Source/stream_buffer.c **** 				( void ) xTaskNotify( ( pxStreamBuffer )->xTaskWaitingToReceive,		\
 102:Source/stream_buffer.c **** 									  ( uint32_t ) 0,									\
 103:Source/stream_buffer.c **** 									  eNoAction );										\
 104:Source/stream_buffer.c **** 				( pxStreamBuffer )->xTaskWaitingToReceive = NULL;						\
 105:Source/stream_buffer.c **** 			}																			\
 106:Source/stream_buffer.c **** 		}																				\
 107:Source/stream_buffer.c **** 		( void ) xTaskResumeAll();
 108:Source/stream_buffer.c **** #endif /* sbSEND_COMPLETED */
 109:Source/stream_buffer.c **** 
 110:Source/stream_buffer.c **** #ifndef sbSEND_COMPLETE_FROM_ISR
 111:Source/stream_buffer.c **** 	#define sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken )		\
 112:Source/stream_buffer.c **** 	{																					\
 113:Source/stream_buffer.c **** 	UBaseType_t uxSavedInterruptStatus;													\
 114:Source/stream_buffer.c **** 																						\
 115:Source/stream_buffer.c **** 		uxSavedInterruptStatus = ( UBaseType_t ) portSET_INTERRUPT_MASK_FROM_ISR();		\
 116:Source/stream_buffer.c **** 		{																				\
 117:Source/stream_buffer.c **** 			if( ( pxStreamBuffer )->xTaskWaitingToReceive != NULL )						\
 118:Source/stream_buffer.c **** 			{																			\
 119:Source/stream_buffer.c **** 				( void ) xTaskNotifyFromISR( ( pxStreamBuffer )->xTaskWaitingToReceive,	\
 120:Source/stream_buffer.c **** 											 ( uint32_t ) 0,							\
 121:Source/stream_buffer.c **** 											 eNoAction,									\
 122:Source/stream_buffer.c **** 											 pxHigherPriorityTaskWoken );				\
 123:Source/stream_buffer.c **** 				( pxStreamBuffer )->xTaskWaitingToReceive = NULL;						\
 124:Source/stream_buffer.c **** 			}																			\
 125:Source/stream_buffer.c **** 		}																				\
 126:Source/stream_buffer.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );					\
 127:Source/stream_buffer.c **** 	}
 128:Source/stream_buffer.c **** #endif /* sbSEND_COMPLETE_FROM_ISR */
 129:Source/stream_buffer.c **** /*lint -restore (9026) */
 130:Source/stream_buffer.c **** 
 131:Source/stream_buffer.c **** /* The number of bytes used to hold the length of a message in the buffer. */
 132:Source/stream_buffer.c **** #define sbBYTES_TO_STORE_MESSAGE_LENGTH ( sizeof( configMESSAGE_BUFFER_LENGTH_TYPE ) )
 133:Source/stream_buffer.c **** 
 134:Source/stream_buffer.c **** /* Bits stored in the ucFlags field of the stream buffer. */
 135:Source/stream_buffer.c **** #define sbFLAGS_IS_MESSAGE_BUFFER		( ( uint8_t ) 1 ) /* Set if the stream buffer was created as a m
 136:Source/stream_buffer.c **** #define sbFLAGS_IS_STATICALLY_ALLOCATED ( ( uint8_t ) 2 ) /* Set if the stream buffer was created u
 137:Source/stream_buffer.c **** 
 138:Source/stream_buffer.c **** /*-----------------------------------------------------------*/
 139:Source/stream_buffer.c **** 
 140:Source/stream_buffer.c **** /* Structure that hold state information on the buffer. */
 141:Source/stream_buffer.c **** typedef struct StreamBufferDef_t /*lint !e9058 Style convention uses tag. */
 142:Source/stream_buffer.c **** {
ARM GAS  C:\Users\Gusta\AppData\Local\Temp\ccugn2Vx.s 			page 4


 143:Source/stream_buffer.c **** 	volatile size_t xTail;				/* Index to the next item to read within the buffer. */
 144:Source/stream_buffer.c **** 	volatile size_t xHead;				/* Index to the next item to write within the buffer. */
 145:Source/stream_buffer.c **** 	size_t xLength;						/* The length of the buffer pointed to by pucBuffer. */
 146:Source/stream_buffer.c **** 	size_t xTriggerLevelBytes;			/* The number of bytes that must be in the stream buffer before a tas
 147:Source/stream_buffer.c **** 	volatile TaskHandle_t xTaskWaitingToReceive; /* Holds the handle of a task waiting for data, or NU
 148:Source/stream_buffer.c **** 	volatile TaskHandle_t xTaskWaitingToSend;	/* Holds the handle of a task waiting to send data to a 
 149:Source/stream_buffer.c **** 	uint8_t *pucBuffer;					/* Points to the buffer itself - that is - the RAM that stores the data pa
 150:Source/stream_buffer.c **** 	uint8_t ucFlags;
 151:Source/stream_buffer.c **** 
 152:Source/stream_buffer.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 153:Source/stream_buffer.c **** 		UBaseType_t uxStreamBufferNumber;		/* Used for tracing purposes. */
 154:Source/stream_buffer.c **** 	#endif
 155:Source/stream_buffer.c **** } StreamBuffer_t;
 156:Source/stream_buffer.c **** 
 157:Source/stream_buffer.c **** /*
 158:Source/stream_buffer.c ****  * The number of bytes available to be read from the buffer.
 159:Source/stream_buffer.c ****  */
 160:Source/stream_buffer.c **** static size_t prvBytesInBuffer( const StreamBuffer_t * const pxStreamBuffer ) PRIVILEGED_FUNCTION;
 161:Source/stream_buffer.c **** 
 162:Source/stream_buffer.c **** /*
 163:Source/stream_buffer.c ****  * Add xCount bytes from pucData into the pxStreamBuffer message buffer.
 164:Source/stream_buffer.c ****  * Returns the number of bytes written, which will either equal xCount in the
 165:Source/stream_buffer.c ****  * success case, or 0 if there was not enough space in the buffer (in which case
 166:Source/stream_buffer.c ****  * no data is written into the buffer).
 167:Source/stream_buffer.c ****  */
 168:Source/stream_buffer.c **** static size_t prvWriteBytesToBuffer( StreamBuffer_t * const pxStreamBuffer, const uint8_t *pucData,
 169:Source/stream_buffer.c **** 
 170:Source/stream_buffer.c **** /*
 171:Source/stream_buffer.c ****  * If the stream buffer is being used as a message buffer, then reads an entire
 172:Source/stream_buffer.c ****  * message out of the buffer.  If the stream buffer is being used as a stream
 173:Source/stream_buffer.c ****  * buffer then read as many bytes as possible from the buffer.
 174:Source/stream_buffer.c ****  * prvReadBytesFromBuffer() is called to actually extract the bytes from the
 175:Source/stream_buffer.c ****  * buffer's data storage area.
 176:Source/stream_buffer.c ****  */
 177:Source/stream_buffer.c **** static size_t prvReadMessageFromBuffer( StreamBuffer_t *pxStreamBuffer,
 178:Source/stream_buffer.c **** 										void *pvRxData,
 179:Source/stream_buffer.c **** 										size_t xBufferLengthBytes,
 180:Source/stream_buffer.c **** 										size_t xBytesAvailable,
 181:Source/stream_buffer.c **** 										size_t xBytesToStoreMessageLength ) PRIVILEGED_FUNCTION;
 182:Source/stream_buffer.c **** 
 183:Source/stream_buffer.c **** /*
 184:Source/stream_buffer.c ****  * If the stream buffer is being used as a message buffer, then writes an entire
 185:Source/stream_buffer.c ****  * message to the buffer.  If the stream buffer is being used as a stream
 186:Source/stream_buffer.c ****  * buffer then write as many bytes as possible to the buffer.
 187:Source/stream_buffer.c ****  * prvWriteBytestoBuffer() is called to actually send the bytes to the buffer's
 188:Source/stream_buffer.c ****  * data storage area.
 189:Source/stream_buffer.c ****  */
 190:Source/stream_buffer.c **** static size_t prvWriteMessageToBuffer(  StreamBuffer_t * const pxStreamBuffer,
 191:Source/stream_buffer.c **** 										const void * pvTxData,
 192:Source/stream_buffer.c **** 										size_t xDataLengthBytes,
 193:Source/stream_buffer.c **** 										size_t xSpace,
 194:Source/stream_buffer.c **** 										size_t xRequiredSpace ) PRIVILEGED_FUNCTION;
 195:Source/stream_buffer.c **** 
 196:Source/stream_buffer.c **** /*
 197:Source/stream_buffer.c ****  * Read xMaxCount bytes from the pxStreamBuffer message buffer and write them
 198:Source/stream_buffer.c ****  * to pucData.
 199:Source/stream_buffer.c ****  */
ARM GAS  C:\Users\Gusta\AppData\Local\Temp\ccugn2Vx.s 			page 5


 200:Source/stream_buffer.c **** static size_t prvReadBytesFromBuffer( StreamBuffer_t *pxStreamBuffer,
 201:Source/stream_buffer.c **** 									  uint8_t *pucData,
 202:Source/stream_buffer.c **** 									  size_t xMaxCount,
 203:Source/stream_buffer.c **** 									  size_t xBytesAvailable ) PRIVILEGED_FUNCTION;
 204:Source/stream_buffer.c **** 
 205:Source/stream_buffer.c **** /*
 206:Source/stream_buffer.c ****  * Called by both pxStreamBufferCreate() and pxStreamBufferCreateStatic() to
 207:Source/stream_buffer.c ****  * initialise the members of the newly created stream buffer structure.
 208:Source/stream_buffer.c ****  */
 209:Source/stream_buffer.c **** static void prvInitialiseNewStreamBuffer( StreamBuffer_t * const pxStreamBuffer,
 210:Source/stream_buffer.c **** 										  uint8_t * const pucBuffer,
 211:Source/stream_buffer.c **** 										  size_t xBufferSizeBytes,
 212:Source/stream_buffer.c **** 										  size_t xTriggerLevelBytes,
 213:Source/stream_buffer.c **** 										  uint8_t ucFlags ) PRIVILEGED_FUNCTION;
 214:Source/stream_buffer.c **** 
 215:Source/stream_buffer.c **** /*-----------------------------------------------------------*/
 216:Source/stream_buffer.c **** 
 217:Source/stream_buffer.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 218:Source/stream_buffer.c **** 
 219:Source/stream_buffer.c **** 	StreamBufferHandle_t xStreamBufferGenericCreate( size_t xBufferSizeBytes, size_t xTriggerLevelByte
 220:Source/stream_buffer.c **** 	{
  30              		.loc 1 220 0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 24
  33              		@ frame_needed = 1, uses_anonymous_args = 0
  34 0000 80B5     		push	{r7, lr}
  35              		.cfi_def_cfa_offset 8
  36              		.cfi_offset 7, -8
  37              		.cfi_offset 14, -4
  38 0002 88B0     		sub	sp, sp, #32
  39              		.cfi_def_cfa_offset 40
  40 0004 02AF     		add	r7, sp, #8
  41              		.cfi_def_cfa 7, 32
  42 0006 F860     		str	r0, [r7, #12]
  43 0008 B960     		str	r1, [r7, #8]
  44 000a 7A60     		str	r2, [r7, #4]
 221:Source/stream_buffer.c **** 	uint8_t *pucAllocatedMemory;
 222:Source/stream_buffer.c **** 	uint8_t ucFlags;
 223:Source/stream_buffer.c **** 
 224:Source/stream_buffer.c **** 		/* In case the stream buffer is going to be used as a message buffer
 225:Source/stream_buffer.c **** 		(that is, it will hold discrete messages with a little meta data that
 226:Source/stream_buffer.c **** 		says how big the next message is) check the buffer will be large enough
 227:Source/stream_buffer.c **** 		to hold at least one message. */
 228:Source/stream_buffer.c **** 		if( xIsMessageBuffer == pdTRUE )
  45              		.loc 1 228 0
  46 000c 7B68     		ldr	r3, [r7, #4]
  47 000e 012B     		cmp	r3, #1
  48 0010 02D1     		bne	.L2
 229:Source/stream_buffer.c **** 		{
 230:Source/stream_buffer.c **** 			/* Is a message buffer but not statically allocated. */
 231:Source/stream_buffer.c **** 			ucFlags = sbFLAGS_IS_MESSAGE_BUFFER;
  49              		.loc 1 231 0
  50 0012 0123     		movs	r3, #1
  51 0014 FB75     		strb	r3, [r7, #23]
  52 0016 01E0     		b	.L3
  53              	.L2:
 232:Source/stream_buffer.c **** 			configASSERT( xBufferSizeBytes > sbBYTES_TO_STORE_MESSAGE_LENGTH );
ARM GAS  C:\Users\Gusta\AppData\Local\Temp\ccugn2Vx.s 			page 6


 233:Source/stream_buffer.c **** 		}
 234:Source/stream_buffer.c **** 		else
 235:Source/stream_buffer.c **** 		{
 236:Source/stream_buffer.c **** 			/* Not a message buffer and not statically allocated. */
 237:Source/stream_buffer.c **** 			ucFlags = 0;
  54              		.loc 1 237 0
  55 0018 0023     		movs	r3, #0
  56 001a FB75     		strb	r3, [r7, #23]
  57              	.L3:
 238:Source/stream_buffer.c **** 			configASSERT( xBufferSizeBytes > 0 );
 239:Source/stream_buffer.c **** 		}
 240:Source/stream_buffer.c **** 		configASSERT( xTriggerLevelBytes <= xBufferSizeBytes );
 241:Source/stream_buffer.c **** 
 242:Source/stream_buffer.c **** 		/* A trigger level of 0 would cause a waiting task to unblock even when
 243:Source/stream_buffer.c **** 		the buffer was empty. */
 244:Source/stream_buffer.c **** 		if( xTriggerLevelBytes == ( size_t ) 0 )
  58              		.loc 1 244 0
  59 001c BB68     		ldr	r3, [r7, #8]
  60 001e 002B     		cmp	r3, #0
  61 0020 01D1     		bne	.L4
 245:Source/stream_buffer.c **** 		{
 246:Source/stream_buffer.c **** 			xTriggerLevelBytes = ( size_t ) 1;
  62              		.loc 1 246 0
  63 0022 0123     		movs	r3, #1
  64 0024 BB60     		str	r3, [r7, #8]
  65              	.L4:
 247:Source/stream_buffer.c **** 		}
 248:Source/stream_buffer.c **** 
 249:Source/stream_buffer.c **** 		/* A stream buffer requires a StreamBuffer_t structure and a buffer.
 250:Source/stream_buffer.c **** 		Both are allocated in a single call to pvPortMalloc().  The
 251:Source/stream_buffer.c **** 		StreamBuffer_t structure is placed at the start of the allocated memory
 252:Source/stream_buffer.c **** 		and the buffer follows immediately after.  The requested size is
 253:Source/stream_buffer.c **** 		incremented so the free space is returned as the user would expect -
 254:Source/stream_buffer.c **** 		this is a quirk of the implementation that means otherwise the free
 255:Source/stream_buffer.c **** 		space would be reported as one byte smaller than would be logically
 256:Source/stream_buffer.c **** 		expected. */
 257:Source/stream_buffer.c **** 		xBufferSizeBytes++;
  66              		.loc 1 257 0
  67 0026 FB68     		ldr	r3, [r7, #12]
  68 0028 0133     		adds	r3, r3, #1
  69 002a FB60     		str	r3, [r7, #12]
 258:Source/stream_buffer.c **** 		pucAllocatedMemory = ( uint8_t * ) pvPortMalloc( xBufferSizeBytes + sizeof( StreamBuffer_t ) ); /
  70              		.loc 1 258 0
  71 002c FB68     		ldr	r3, [r7, #12]
  72 002e 2033     		adds	r3, r3, #32
  73 0030 1846     		mov	r0, r3
  74 0032 FFF7FEFF 		bl	pvPortMalloc
  75 0036 3861     		str	r0, [r7, #16]
 259:Source/stream_buffer.c **** 
 260:Source/stream_buffer.c **** 		if( pucAllocatedMemory != NULL )
  76              		.loc 1 260 0
  77 0038 3B69     		ldr	r3, [r7, #16]
  78 003a 002B     		cmp	r3, #0
  79 003c 09D0     		beq	.L5
 261:Source/stream_buffer.c **** 		{
 262:Source/stream_buffer.c **** 			prvInitialiseNewStreamBuffer( ( StreamBuffer_t * ) pucAllocatedMemory, /* Structure at the start
  80              		.loc 1 262 0
ARM GAS  C:\Users\Gusta\AppData\Local\Temp\ccugn2Vx.s 			page 7


  81 003e 3B69     		ldr	r3, [r7, #16]
  82 0040 03F12001 		add	r1, r3, #32
  83 0044 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
  84 0046 0093     		str	r3, [sp]
  85 0048 BB68     		ldr	r3, [r7, #8]
  86 004a FA68     		ldr	r2, [r7, #12]
  87 004c 3869     		ldr	r0, [r7, #16]
  88 004e FFF7FEFF 		bl	prvInitialiseNewStreamBuffer
  89              	.L5:
 263:Source/stream_buffer.c **** 										   pucAllocatedMemory + sizeof( StreamBuffer_t ),  /* Storage area follows. */ /*lint !e9
 264:Source/stream_buffer.c **** 										   xBufferSizeBytes,
 265:Source/stream_buffer.c **** 										   xTriggerLevelBytes,
 266:Source/stream_buffer.c **** 										   ucFlags );
 267:Source/stream_buffer.c **** 
 268:Source/stream_buffer.c **** 			traceSTREAM_BUFFER_CREATE( ( ( StreamBuffer_t * ) pucAllocatedMemory ), xIsMessageBuffer );
 269:Source/stream_buffer.c **** 		}
 270:Source/stream_buffer.c **** 		else
 271:Source/stream_buffer.c **** 		{
 272:Source/stream_buffer.c **** 			traceSTREAM_BUFFER_CREATE_FAILED( xIsMessageBuffer );
 273:Source/stream_buffer.c **** 		}
 274:Source/stream_buffer.c **** 
 275:Source/stream_buffer.c **** 		return ( StreamBufferHandle_t ) pucAllocatedMemory; /*lint !e9087 !e826 Safe cast as allocated me
  90              		.loc 1 275 0
  91 0052 3B69     		ldr	r3, [r7, #16]
 276:Source/stream_buffer.c **** 	}
  92              		.loc 1 276 0
  93 0054 1846     		mov	r0, r3
  94 0056 1837     		adds	r7, r7, #24
  95              		.cfi_def_cfa_offset 8
  96 0058 BD46     		mov	sp, r7
  97              		.cfi_def_cfa_register 13
  98              		@ sp needed
  99 005a 80BD     		pop	{r7, pc}
 100              		.cfi_endproc
 101              	.LFE68:
 102              		.size	xStreamBufferGenericCreate, .-xStreamBufferGenericCreate
 103              		.section	.text.vStreamBufferDelete,"ax",%progbits
 104              		.align	2
 105              		.global	vStreamBufferDelete
 106              		.thumb
 107              		.thumb_func
 108              		.type	vStreamBufferDelete, %function
 109              	vStreamBufferDelete:
 110              	.LFB69:
 277:Source/stream_buffer.c **** 
 278:Source/stream_buffer.c **** #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 279:Source/stream_buffer.c **** /*-----------------------------------------------------------*/
 280:Source/stream_buffer.c **** 
 281:Source/stream_buffer.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 282:Source/stream_buffer.c **** 
 283:Source/stream_buffer.c **** 	StreamBufferHandle_t xStreamBufferGenericCreateStatic( size_t xBufferSizeBytes,
 284:Source/stream_buffer.c **** 														   size_t xTriggerLevelBytes,
 285:Source/stream_buffer.c **** 														   BaseType_t xIsMessageBuffer,
 286:Source/stream_buffer.c **** 														   uint8_t * const pucStreamBufferStorageArea,
 287:Source/stream_buffer.c **** 														   StaticStreamBuffer_t * const pxStaticStreamBuffer )
 288:Source/stream_buffer.c **** 	{
 289:Source/stream_buffer.c **** 	StreamBuffer_t * const pxStreamBuffer = ( StreamBuffer_t * ) pxStaticStreamBuffer; /*lint !e740 !e
ARM GAS  C:\Users\Gusta\AppData\Local\Temp\ccugn2Vx.s 			page 8


 290:Source/stream_buffer.c **** 	StreamBufferHandle_t xReturn;
 291:Source/stream_buffer.c **** 	uint8_t ucFlags;
 292:Source/stream_buffer.c **** 
 293:Source/stream_buffer.c **** 		configASSERT( pucStreamBufferStorageArea );
 294:Source/stream_buffer.c **** 		configASSERT( pxStaticStreamBuffer );
 295:Source/stream_buffer.c **** 		configASSERT( xTriggerLevelBytes <= xBufferSizeBytes );
 296:Source/stream_buffer.c **** 
 297:Source/stream_buffer.c **** 		/* A trigger level of 0 would cause a waiting task to unblock even when
 298:Source/stream_buffer.c **** 		the buffer was empty. */
 299:Source/stream_buffer.c **** 		if( xTriggerLevelBytes == ( size_t ) 0 )
 300:Source/stream_buffer.c **** 		{
 301:Source/stream_buffer.c **** 			xTriggerLevelBytes = ( size_t ) 1;
 302:Source/stream_buffer.c **** 		}
 303:Source/stream_buffer.c **** 
 304:Source/stream_buffer.c **** 		if( xIsMessageBuffer != pdFALSE )
 305:Source/stream_buffer.c **** 		{
 306:Source/stream_buffer.c **** 			/* Statically allocated message buffer. */
 307:Source/stream_buffer.c **** 			ucFlags = sbFLAGS_IS_MESSAGE_BUFFER | sbFLAGS_IS_STATICALLY_ALLOCATED;
 308:Source/stream_buffer.c **** 		}
 309:Source/stream_buffer.c **** 		else
 310:Source/stream_buffer.c **** 		{
 311:Source/stream_buffer.c **** 			/* Statically allocated stream buffer. */
 312:Source/stream_buffer.c **** 			ucFlags = sbFLAGS_IS_STATICALLY_ALLOCATED;
 313:Source/stream_buffer.c **** 		}
 314:Source/stream_buffer.c **** 
 315:Source/stream_buffer.c **** 		/* In case the stream buffer is going to be used as a message buffer
 316:Source/stream_buffer.c **** 		(that is, it will hold discrete messages with a little meta data that
 317:Source/stream_buffer.c **** 		says how big the next message is) check the buffer will be large enough
 318:Source/stream_buffer.c **** 		to hold at least one message. */
 319:Source/stream_buffer.c **** 		configASSERT( xBufferSizeBytes > sbBYTES_TO_STORE_MESSAGE_LENGTH );
 320:Source/stream_buffer.c **** 
 321:Source/stream_buffer.c **** 		#if( configASSERT_DEFINED == 1 )
 322:Source/stream_buffer.c **** 		{
 323:Source/stream_buffer.c **** 			/* Sanity check that the size of the structure used to declare a
 324:Source/stream_buffer.c **** 			variable of type StaticStreamBuffer_t equals the size of the real
 325:Source/stream_buffer.c **** 			message buffer structure. */
 326:Source/stream_buffer.c **** 			volatile size_t xSize = sizeof( StaticStreamBuffer_t );
 327:Source/stream_buffer.c **** 			configASSERT( xSize == sizeof( StreamBuffer_t ) );
 328:Source/stream_buffer.c **** 		} /*lint !e529 xSize is referenced is configASSERT() is defined. */
 329:Source/stream_buffer.c **** 		#endif /* configASSERT_DEFINED */
 330:Source/stream_buffer.c **** 
 331:Source/stream_buffer.c **** 		if( ( pucStreamBufferStorageArea != NULL ) && ( pxStaticStreamBuffer != NULL ) )
 332:Source/stream_buffer.c **** 		{
 333:Source/stream_buffer.c **** 			prvInitialiseNewStreamBuffer( pxStreamBuffer,
 334:Source/stream_buffer.c **** 										  pucStreamBufferStorageArea,
 335:Source/stream_buffer.c **** 										  xBufferSizeBytes,
 336:Source/stream_buffer.c **** 										  xTriggerLevelBytes,
 337:Source/stream_buffer.c **** 										  ucFlags );
 338:Source/stream_buffer.c **** 
 339:Source/stream_buffer.c **** 			/* Remember this was statically allocated in case it is ever deleted
 340:Source/stream_buffer.c **** 			again. */
 341:Source/stream_buffer.c **** 			pxStreamBuffer->ucFlags |= sbFLAGS_IS_STATICALLY_ALLOCATED;
 342:Source/stream_buffer.c **** 
 343:Source/stream_buffer.c **** 			traceSTREAM_BUFFER_CREATE( pxStreamBuffer, xIsMessageBuffer );
 344:Source/stream_buffer.c **** 
 345:Source/stream_buffer.c **** 			xReturn = ( StreamBufferHandle_t ) pxStaticStreamBuffer; /*lint !e9087 Data hiding requires cast
 346:Source/stream_buffer.c **** 		}
ARM GAS  C:\Users\Gusta\AppData\Local\Temp\ccugn2Vx.s 			page 9


 347:Source/stream_buffer.c **** 		else
 348:Source/stream_buffer.c **** 		{
 349:Source/stream_buffer.c **** 			xReturn = NULL;
 350:Source/stream_buffer.c **** 			traceSTREAM_BUFFER_CREATE_STATIC_FAILED( xReturn, xIsMessageBuffer );
 351:Source/stream_buffer.c **** 		}
 352:Source/stream_buffer.c **** 
 353:Source/stream_buffer.c **** 		return xReturn;
 354:Source/stream_buffer.c **** 	}
 355:Source/stream_buffer.c **** 
 356:Source/stream_buffer.c **** #endif /* ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
 357:Source/stream_buffer.c **** /*-----------------------------------------------------------*/
 358:Source/stream_buffer.c **** 
 359:Source/stream_buffer.c **** void vStreamBufferDelete( StreamBufferHandle_t xStreamBuffer )
 360:Source/stream_buffer.c **** {
 111              		.loc 1 360 0
 112              		.cfi_startproc
 113              		@ args = 0, pretend = 0, frame = 16
 114              		@ frame_needed = 1, uses_anonymous_args = 0
 115 0000 80B5     		push	{r7, lr}
 116              		.cfi_def_cfa_offset 8
 117              		.cfi_offset 7, -8
 118              		.cfi_offset 14, -4
 119 0002 84B0     		sub	sp, sp, #16
 120              		.cfi_def_cfa_offset 24
 121 0004 00AF     		add	r7, sp, #0
 122              		.cfi_def_cfa_register 7
 123 0006 7860     		str	r0, [r7, #4]
 361:Source/stream_buffer.c **** StreamBuffer_t * pxStreamBuffer = xStreamBuffer;
 124              		.loc 1 361 0
 125 0008 7B68     		ldr	r3, [r7, #4]
 126 000a FB60     		str	r3, [r7, #12]
 362:Source/stream_buffer.c **** 
 363:Source/stream_buffer.c **** 	configASSERT( pxStreamBuffer );
 364:Source/stream_buffer.c **** 
 365:Source/stream_buffer.c **** 	traceSTREAM_BUFFER_DELETE( xStreamBuffer );
 366:Source/stream_buffer.c **** 
 367:Source/stream_buffer.c **** 	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) pdFALSE )
 127              		.loc 1 367 0
 128 000c FB68     		ldr	r3, [r7, #12]
 129 000e 1B7F     		ldrb	r3, [r3, #28]	@ zero_extendqisi2
 130 0010 03F00203 		and	r3, r3, #2
 131 0014 002B     		cmp	r3, #0
 132 0016 03D1     		bne	.L8
 368:Source/stream_buffer.c **** 	{
 369:Source/stream_buffer.c **** 		#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 370:Source/stream_buffer.c **** 		{
 371:Source/stream_buffer.c **** 			/* Both the structure and the buffer were allocated using a single call
 372:Source/stream_buffer.c **** 			to pvPortMalloc(), hence only one call to vPortFree() is required. */
 373:Source/stream_buffer.c **** 			vPortFree( ( void * ) pxStreamBuffer ); /*lint !e9087 Standard free() semantics require void *, 
 133              		.loc 1 373 0
 134 0018 F868     		ldr	r0, [r7, #12]
 135 001a FFF7FEFF 		bl	vPortFree
 374:Source/stream_buffer.c **** 		}
 375:Source/stream_buffer.c **** 		#else
 376:Source/stream_buffer.c **** 		{
 377:Source/stream_buffer.c **** 			/* Should not be possible to get here, ucFlags must be corrupt.
 378:Source/stream_buffer.c **** 			Force an assert. */
ARM GAS  C:\Users\Gusta\AppData\Local\Temp\ccugn2Vx.s 			page 10


 379:Source/stream_buffer.c **** 			configASSERT( xStreamBuffer == ( StreamBufferHandle_t ) ~0 );
 380:Source/stream_buffer.c **** 		}
 381:Source/stream_buffer.c **** 		#endif
 382:Source/stream_buffer.c **** 	}
 383:Source/stream_buffer.c **** 	else
 384:Source/stream_buffer.c **** 	{
 385:Source/stream_buffer.c **** 		/* The structure and buffer were not allocated dynamically and cannot be
 386:Source/stream_buffer.c **** 		freed - just scrub the structure so future use will assert. */
 387:Source/stream_buffer.c **** 		( void ) memset( pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) );
 388:Source/stream_buffer.c **** 	}
 389:Source/stream_buffer.c **** }
 136              		.loc 1 389 0
 137 001e 04E0     		b	.L10
 138              	.L8:
 387:Source/stream_buffer.c **** 	}
 139              		.loc 1 387 0
 140 0020 2022     		movs	r2, #32
 141 0022 0021     		movs	r1, #0
 142 0024 F868     		ldr	r0, [r7, #12]
 143 0026 FFF7FEFF 		bl	memset
 144              	.L10:
 145              		.loc 1 389 0
 146 002a 00BF     		nop
 147 002c 1037     		adds	r7, r7, #16
 148              		.cfi_def_cfa_offset 8
 149 002e BD46     		mov	sp, r7
 150              		.cfi_def_cfa_register 13
 151              		@ sp needed
 152 0030 80BD     		pop	{r7, pc}
 153              		.cfi_endproc
 154              	.LFE69:
 155              		.size	vStreamBufferDelete, .-vStreamBufferDelete
 156 0032 00BF     		.section	.text.xStreamBufferReset,"ax",%progbits
 157              		.align	2
 158              		.global	xStreamBufferReset
 159              		.thumb
 160              		.thumb_func
 161              		.type	xStreamBufferReset, %function
 162              	xStreamBufferReset:
 163              	.LFB70:
 390:Source/stream_buffer.c **** /*-----------------------------------------------------------*/
 391:Source/stream_buffer.c **** 
 392:Source/stream_buffer.c **** BaseType_t xStreamBufferReset( StreamBufferHandle_t xStreamBuffer )
 393:Source/stream_buffer.c **** {
 164              		.loc 1 393 0
 165              		.cfi_startproc
 166              		@ args = 0, pretend = 0, frame = 16
 167              		@ frame_needed = 1, uses_anonymous_args = 0
 168 0000 80B5     		push	{r7, lr}
 169              		.cfi_def_cfa_offset 8
 170              		.cfi_offset 7, -8
 171              		.cfi_offset 14, -4
 172 0002 86B0     		sub	sp, sp, #24
 173              		.cfi_def_cfa_offset 32
 174 0004 02AF     		add	r7, sp, #8
 175              		.cfi_def_cfa 7, 24
 176 0006 7860     		str	r0, [r7, #4]
ARM GAS  C:\Users\Gusta\AppData\Local\Temp\ccugn2Vx.s 			page 11


 394:Source/stream_buffer.c **** StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 177              		.loc 1 394 0
 178 0008 7B68     		ldr	r3, [r7, #4]
 179 000a BB60     		str	r3, [r7, #8]
 395:Source/stream_buffer.c **** BaseType_t xReturn = pdFAIL;
 180              		.loc 1 395 0
 181 000c 0023     		movs	r3, #0
 182 000e FB60     		str	r3, [r7, #12]
 396:Source/stream_buffer.c **** 
 397:Source/stream_buffer.c **** #if( configUSE_TRACE_FACILITY == 1 )
 398:Source/stream_buffer.c **** 	UBaseType_t uxStreamBufferNumber;
 399:Source/stream_buffer.c **** #endif
 400:Source/stream_buffer.c **** 
 401:Source/stream_buffer.c **** 	configASSERT( pxStreamBuffer );
 402:Source/stream_buffer.c **** 
 403:Source/stream_buffer.c **** 	#if( configUSE_TRACE_FACILITY == 1 )
 404:Source/stream_buffer.c **** 	{
 405:Source/stream_buffer.c **** 		/* Store the stream buffer number so it can be restored after the
 406:Source/stream_buffer.c **** 		reset. */
 407:Source/stream_buffer.c **** 		uxStreamBufferNumber = pxStreamBuffer->uxStreamBufferNumber;
 408:Source/stream_buffer.c **** 	}
 409:Source/stream_buffer.c **** 	#endif
 410:Source/stream_buffer.c **** 
 411:Source/stream_buffer.c **** 	/* Can only reset a message buffer if there are no tasks blocked on it. */
 412:Source/stream_buffer.c **** 	taskENTER_CRITICAL();
 183              		.loc 1 412 0
 184 0010 FFF7FEFF 		bl	vPortEnterCritical
 413:Source/stream_buffer.c **** 	{
 414:Source/stream_buffer.c **** 		if( pxStreamBuffer->xTaskWaitingToReceive == NULL )
 185              		.loc 1 414 0
 186 0014 BB68     		ldr	r3, [r7, #8]
 187 0016 1B69     		ldr	r3, [r3, #16]
 188 0018 002B     		cmp	r3, #0
 189 001a 12D1     		bne	.L12
 415:Source/stream_buffer.c **** 		{
 416:Source/stream_buffer.c **** 			if( pxStreamBuffer->xTaskWaitingToSend == NULL )
 190              		.loc 1 416 0
 191 001c BB68     		ldr	r3, [r7, #8]
 192 001e 5B69     		ldr	r3, [r3, #20]
 193 0020 002B     		cmp	r3, #0
 194 0022 0ED1     		bne	.L12
 417:Source/stream_buffer.c **** 			{
 418:Source/stream_buffer.c **** 				prvInitialiseNewStreamBuffer( pxStreamBuffer,
 195              		.loc 1 418 0
 196 0024 BB68     		ldr	r3, [r7, #8]
 197 0026 9969     		ldr	r1, [r3, #24]
 198 0028 BB68     		ldr	r3, [r7, #8]
 199 002a 9A68     		ldr	r2, [r3, #8]
 200 002c BB68     		ldr	r3, [r7, #8]
 201 002e D868     		ldr	r0, [r3, #12]
 202 0030 BB68     		ldr	r3, [r7, #8]
 203 0032 1B7F     		ldrb	r3, [r3, #28]	@ zero_extendqisi2
 204 0034 0093     		str	r3, [sp]
 205 0036 0346     		mov	r3, r0
 206 0038 B868     		ldr	r0, [r7, #8]
 207 003a FFF7FEFF 		bl	prvInitialiseNewStreamBuffer
 419:Source/stream_buffer.c **** 											  pxStreamBuffer->pucBuffer,
ARM GAS  C:\Users\Gusta\AppData\Local\Temp\ccugn2Vx.s 			page 12


 420:Source/stream_buffer.c **** 											  pxStreamBuffer->xLength,
 421:Source/stream_buffer.c **** 											  pxStreamBuffer->xTriggerLevelBytes,
 422:Source/stream_buffer.c **** 											  pxStreamBuffer->ucFlags );
 423:Source/stream_buffer.c **** 				xReturn = pdPASS;
 208              		.loc 1 423 0
 209 003e 0123     		movs	r3, #1
 210 0040 FB60     		str	r3, [r7, #12]
 211              	.L12:
 424:Source/stream_buffer.c **** 
 425:Source/stream_buffer.c **** 				#if( configUSE_TRACE_FACILITY == 1 )
 426:Source/stream_buffer.c **** 				{
 427:Source/stream_buffer.c **** 					pxStreamBuffer->uxStreamBufferNumber = uxStreamBufferNumber;
 428:Source/stream_buffer.c **** 				}
 429:Source/stream_buffer.c **** 				#endif
 430:Source/stream_buffer.c **** 
 431:Source/stream_buffer.c **** 				traceSTREAM_BUFFER_RESET( xStreamBuffer );
 432:Source/stream_buffer.c **** 			}
 433:Source/stream_buffer.c **** 		}
 434:Source/stream_buffer.c **** 	}
 435:Source/stream_buffer.c **** 	taskEXIT_CRITICAL();
 212              		.loc 1 435 0
 213 0042 FFF7FEFF 		bl	vPortExitCritical
 436:Source/stream_buffer.c **** 
 437:Source/stream_buffer.c **** 	return xReturn;
 214              		.loc 1 437 0
 215 0046 FB68     		ldr	r3, [r7, #12]
 438:Source/stream_buffer.c **** }
 216              		.loc 1 438 0
 217 0048 1846     		mov	r0, r3
 218 004a 1037     		adds	r7, r7, #16
 219              		.cfi_def_cfa_offset 8
 220 004c BD46     		mov	sp, r7
 221              		.cfi_def_cfa_register 13
 222              		@ sp needed
 223 004e 80BD     		pop	{r7, pc}
 224              		.cfi_endproc
 225              	.LFE70:
 226              		.size	xStreamBufferReset, .-xStreamBufferReset
 227              		.section	.text.xStreamBufferSetTriggerLevel,"ax",%progbits
 228              		.align	2
 229              		.global	xStreamBufferSetTriggerLevel
 230              		.thumb
 231              		.thumb_func
 232              		.type	xStreamBufferSetTriggerLevel, %function
 233              	xStreamBufferSetTriggerLevel:
 234              	.LFB71:
 439:Source/stream_buffer.c **** /*-----------------------------------------------------------*/
 440:Source/stream_buffer.c **** 
 441:Source/stream_buffer.c **** BaseType_t xStreamBufferSetTriggerLevel( StreamBufferHandle_t xStreamBuffer, size_t xTriggerLevel )
 442:Source/stream_buffer.c **** {
 235              		.loc 1 442 0
 236              		.cfi_startproc
 237              		@ args = 0, pretend = 0, frame = 16
 238              		@ frame_needed = 1, uses_anonymous_args = 0
 239              		@ link register save eliminated.
 240 0000 80B4     		push	{r7}
 241              		.cfi_def_cfa_offset 4
ARM GAS  C:\Users\Gusta\AppData\Local\Temp\ccugn2Vx.s 			page 13


 242              		.cfi_offset 7, -4
 243 0002 85B0     		sub	sp, sp, #20
 244              		.cfi_def_cfa_offset 24
 245 0004 00AF     		add	r7, sp, #0
 246              		.cfi_def_cfa_register 7
 247 0006 7860     		str	r0, [r7, #4]
 248 0008 3960     		str	r1, [r7]
 443:Source/stream_buffer.c **** StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 249              		.loc 1 443 0
 250 000a 7B68     		ldr	r3, [r7, #4]
 251 000c BB60     		str	r3, [r7, #8]
 444:Source/stream_buffer.c **** BaseType_t xReturn;
 445:Source/stream_buffer.c **** 
 446:Source/stream_buffer.c **** 	configASSERT( pxStreamBuffer );
 447:Source/stream_buffer.c **** 
 448:Source/stream_buffer.c **** 	/* It is not valid for the trigger level to be 0. */
 449:Source/stream_buffer.c **** 	if( xTriggerLevel == ( size_t ) 0 )
 252              		.loc 1 449 0
 253 000e 3B68     		ldr	r3, [r7]
 254 0010 002B     		cmp	r3, #0
 255 0012 01D1     		bne	.L15
 450:Source/stream_buffer.c **** 	{
 451:Source/stream_buffer.c **** 		xTriggerLevel = ( size_t ) 1;
 256              		.loc 1 451 0
 257 0014 0123     		movs	r3, #1
 258 0016 3B60     		str	r3, [r7]
 259              	.L15:
 452:Source/stream_buffer.c **** 	}
 453:Source/stream_buffer.c **** 
 454:Source/stream_buffer.c **** 	/* The trigger level is the number of bytes that must be in the stream
 455:Source/stream_buffer.c **** 	buffer before a task that is waiting for data is unblocked. */
 456:Source/stream_buffer.c **** 	if( xTriggerLevel <= pxStreamBuffer->xLength )
 260              		.loc 1 456 0
 261 0018 BB68     		ldr	r3, [r7, #8]
 262 001a 9A68     		ldr	r2, [r3, #8]
 263 001c 3B68     		ldr	r3, [r7]
 264 001e 9A42     		cmp	r2, r3
 265 0020 05D3     		bcc	.L16
 457:Source/stream_buffer.c **** 	{
 458:Source/stream_buffer.c **** 		pxStreamBuffer->xTriggerLevelBytes = xTriggerLevel;
 266              		.loc 1 458 0
 267 0022 BB68     		ldr	r3, [r7, #8]
 268 0024 3A68     		ldr	r2, [r7]
 269 0026 DA60     		str	r2, [r3, #12]
 459:Source/stream_buffer.c **** 		xReturn = pdPASS;
 270              		.loc 1 459 0
 271 0028 0123     		movs	r3, #1
 272 002a FB60     		str	r3, [r7, #12]
 273 002c 01E0     		b	.L17
 274              	.L16:
 460:Source/stream_buffer.c **** 	}
 461:Source/stream_buffer.c **** 	else
 462:Source/stream_buffer.c **** 	{
 463:Source/stream_buffer.c **** 		xReturn = pdFALSE;
 275              		.loc 1 463 0
 276 002e 0023     		movs	r3, #0
 277 0030 FB60     		str	r3, [r7, #12]
ARM GAS  C:\Users\Gusta\AppData\Local\Temp\ccugn2Vx.s 			page 14


 278              	.L17:
 464:Source/stream_buffer.c **** 	}
 465:Source/stream_buffer.c **** 
 466:Source/stream_buffer.c **** 	return xReturn;
 279              		.loc 1 466 0
 280 0032 FB68     		ldr	r3, [r7, #12]
 467:Source/stream_buffer.c **** }
 281              		.loc 1 467 0
 282 0034 1846     		mov	r0, r3
 283 0036 1437     		adds	r7, r7, #20
 284              		.cfi_def_cfa_offset 4
 285 0038 BD46     		mov	sp, r7
 286              		.cfi_def_cfa_register 13
 287              		@ sp needed
 288 003a 80BC     		pop	{r7}
 289              		.cfi_restore 7
 290              		.cfi_def_cfa_offset 0
 291 003c 7047     		bx	lr
 292              		.cfi_endproc
 293              	.LFE71:
 294              		.size	xStreamBufferSetTriggerLevel, .-xStreamBufferSetTriggerLevel
 295 003e 00BF     		.section	.text.xStreamBufferSpacesAvailable,"ax",%progbits
 296              		.align	2
 297              		.global	xStreamBufferSpacesAvailable
 298              		.thumb
 299              		.thumb_func
 300              		.type	xStreamBufferSpacesAvailable, %function
 301              	xStreamBufferSpacesAvailable:
 302              	.LFB72:
 468:Source/stream_buffer.c **** /*-----------------------------------------------------------*/
 469:Source/stream_buffer.c **** 
 470:Source/stream_buffer.c **** size_t xStreamBufferSpacesAvailable( StreamBufferHandle_t xStreamBuffer )
 471:Source/stream_buffer.c **** {
 303              		.loc 1 471 0
 304              		.cfi_startproc
 305              		@ args = 0, pretend = 0, frame = 16
 306              		@ frame_needed = 1, uses_anonymous_args = 0
 307              		@ link register save eliminated.
 308 0000 80B4     		push	{r7}
 309              		.cfi_def_cfa_offset 4
 310              		.cfi_offset 7, -4
 311 0002 85B0     		sub	sp, sp, #20
 312              		.cfi_def_cfa_offset 24
 313 0004 00AF     		add	r7, sp, #0
 314              		.cfi_def_cfa_register 7
 315 0006 7860     		str	r0, [r7, #4]
 472:Source/stream_buffer.c **** const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 316              		.loc 1 472 0
 317 0008 7B68     		ldr	r3, [r7, #4]
 318 000a BB60     		str	r3, [r7, #8]
 473:Source/stream_buffer.c **** size_t xSpace;
 474:Source/stream_buffer.c **** 
 475:Source/stream_buffer.c **** 	configASSERT( pxStreamBuffer );
 476:Source/stream_buffer.c **** 
 477:Source/stream_buffer.c **** 	xSpace = pxStreamBuffer->xLength + pxStreamBuffer->xTail;
 319              		.loc 1 477 0
 320 000c BB68     		ldr	r3, [r7, #8]
ARM GAS  C:\Users\Gusta\AppData\Local\Temp\ccugn2Vx.s 			page 15


 321 000e 9A68     		ldr	r2, [r3, #8]
 322 0010 BB68     		ldr	r3, [r7, #8]
 323 0012 1B68     		ldr	r3, [r3]
 324 0014 1344     		add	r3, r3, r2
 325 0016 FB60     		str	r3, [r7, #12]
 478:Source/stream_buffer.c **** 	xSpace -= pxStreamBuffer->xHead;
 326              		.loc 1 478 0
 327 0018 BB68     		ldr	r3, [r7, #8]
 328 001a 5B68     		ldr	r3, [r3, #4]
 329 001c FA68     		ldr	r2, [r7, #12]
 330 001e D31A     		subs	r3, r2, r3
 331 0020 FB60     		str	r3, [r7, #12]
 479:Source/stream_buffer.c **** 	xSpace -= ( size_t ) 1;
 332              		.loc 1 479 0
 333 0022 FB68     		ldr	r3, [r7, #12]
 334 0024 013B     		subs	r3, r3, #1
 335 0026 FB60     		str	r3, [r7, #12]
 480:Source/stream_buffer.c **** 
 481:Source/stream_buffer.c **** 	if( xSpace >= pxStreamBuffer->xLength )
 336              		.loc 1 481 0
 337 0028 BB68     		ldr	r3, [r7, #8]
 338 002a 9A68     		ldr	r2, [r3, #8]
 339 002c FB68     		ldr	r3, [r7, #12]
 340 002e 9A42     		cmp	r2, r3
 341 0030 04D8     		bhi	.L20
 482:Source/stream_buffer.c **** 	{
 483:Source/stream_buffer.c **** 		xSpace -= pxStreamBuffer->xLength;
 342              		.loc 1 483 0
 343 0032 BB68     		ldr	r3, [r7, #8]
 344 0034 9B68     		ldr	r3, [r3, #8]
 345 0036 FA68     		ldr	r2, [r7, #12]
 346 0038 D31A     		subs	r3, r2, r3
 347 003a FB60     		str	r3, [r7, #12]
 348              	.L20:
 484:Source/stream_buffer.c **** 	}
 485:Source/stream_buffer.c **** 	else
 486:Source/stream_buffer.c **** 	{
 487:Source/stream_buffer.c **** 		mtCOVERAGE_TEST_MARKER();
 488:Source/stream_buffer.c **** 	}
 489:Source/stream_buffer.c **** 
 490:Source/stream_buffer.c **** 	return xSpace;
 349              		.loc 1 490 0
 350 003c FB68     		ldr	r3, [r7, #12]
 491:Source/stream_buffer.c **** }
 351              		.loc 1 491 0
 352 003e 1846     		mov	r0, r3
 353 0040 1437     		adds	r7, r7, #20
 354              		.cfi_def_cfa_offset 4
 355 0042 BD46     		mov	sp, r7
 356              		.cfi_def_cfa_register 13
 357              		@ sp needed
 358 0044 80BC     		pop	{r7}
 359              		.cfi_restore 7
 360              		.cfi_def_cfa_offset 0
 361 0046 7047     		bx	lr
 362              		.cfi_endproc
 363              	.LFE72:
ARM GAS  C:\Users\Gusta\AppData\Local\Temp\ccugn2Vx.s 			page 16


 364              		.size	xStreamBufferSpacesAvailable, .-xStreamBufferSpacesAvailable
 365              		.section	.text.xStreamBufferBytesAvailable,"ax",%progbits
 366              		.align	2
 367              		.global	xStreamBufferBytesAvailable
 368              		.thumb
 369              		.thumb_func
 370              		.type	xStreamBufferBytesAvailable, %function
 371              	xStreamBufferBytesAvailable:
 372              	.LFB73:
 492:Source/stream_buffer.c **** /*-----------------------------------------------------------*/
 493:Source/stream_buffer.c **** 
 494:Source/stream_buffer.c **** size_t xStreamBufferBytesAvailable( StreamBufferHandle_t xStreamBuffer )
 495:Source/stream_buffer.c **** {
 373              		.loc 1 495 0
 374              		.cfi_startproc
 375              		@ args = 0, pretend = 0, frame = 16
 376              		@ frame_needed = 1, uses_anonymous_args = 0
 377 0000 80B5     		push	{r7, lr}
 378              		.cfi_def_cfa_offset 8
 379              		.cfi_offset 7, -8
 380              		.cfi_offset 14, -4
 381 0002 84B0     		sub	sp, sp, #16
 382              		.cfi_def_cfa_offset 24
 383 0004 00AF     		add	r7, sp, #0
 384              		.cfi_def_cfa_register 7
 385 0006 7860     		str	r0, [r7, #4]
 496:Source/stream_buffer.c **** const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 386              		.loc 1 496 0
 387 0008 7B68     		ldr	r3, [r7, #4]
 388 000a FB60     		str	r3, [r7, #12]
 497:Source/stream_buffer.c **** size_t xReturn;
 498:Source/stream_buffer.c **** 
 499:Source/stream_buffer.c **** 	configASSERT( pxStreamBuffer );
 500:Source/stream_buffer.c **** 
 501:Source/stream_buffer.c **** 	xReturn = prvBytesInBuffer( pxStreamBuffer );
 389              		.loc 1 501 0
 390 000c F868     		ldr	r0, [r7, #12]
 391 000e FFF7FEFF 		bl	prvBytesInBuffer
 392 0012 B860     		str	r0, [r7, #8]
 502:Source/stream_buffer.c **** 	return xReturn;
 393              		.loc 1 502 0
 394 0014 BB68     		ldr	r3, [r7, #8]
 503:Source/stream_buffer.c **** }
 395              		.loc 1 503 0
 396 0016 1846     		mov	r0, r3
 397 0018 1037     		adds	r7, r7, #16
 398              		.cfi_def_cfa_offset 8
 399 001a BD46     		mov	sp, r7
 400              		.cfi_def_cfa_register 13
 401              		@ sp needed
 402 001c 80BD     		pop	{r7, pc}
 403              		.cfi_endproc
 404              	.LFE73:
 405              		.size	xStreamBufferBytesAvailable, .-xStreamBufferBytesAvailable
 406 001e 00BF     		.section	.text.xStreamBufferSend,"ax",%progbits
 407              		.align	2
 408              		.global	xStreamBufferSend
ARM GAS  C:\Users\Gusta\AppData\Local\Temp\ccugn2Vx.s 			page 17


 409              		.thumb
 410              		.thumb_func
 411              		.type	xStreamBufferSend, %function
 412              	xStreamBufferSend:
 413              	.LFB74:
 504:Source/stream_buffer.c **** /*-----------------------------------------------------------*/
 505:Source/stream_buffer.c **** 
 506:Source/stream_buffer.c **** size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
 507:Source/stream_buffer.c **** 						  const void *pvTxData,
 508:Source/stream_buffer.c **** 						  size_t xDataLengthBytes,
 509:Source/stream_buffer.c **** 						  TickType_t xTicksToWait )
 510:Source/stream_buffer.c **** {
 414              		.loc 1 510 0
 415              		.cfi_startproc
 416              		@ args = 0, pretend = 0, frame = 40
 417              		@ frame_needed = 1, uses_anonymous_args = 0
 418 0000 80B5     		push	{r7, lr}
 419              		.cfi_def_cfa_offset 8
 420              		.cfi_offset 7, -8
 421              		.cfi_offset 14, -4
 422 0002 8CB0     		sub	sp, sp, #48
 423              		.cfi_def_cfa_offset 56
 424 0004 02AF     		add	r7, sp, #8
 425              		.cfi_def_cfa 7, 48
 426 0006 F860     		str	r0, [r7, #12]
 427 0008 B960     		str	r1, [r7, #8]
 428 000a 7A60     		str	r2, [r7, #4]
 429 000c 3B60     		str	r3, [r7]
 511:Source/stream_buffer.c **** StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 430              		.loc 1 511 0
 431 000e FB68     		ldr	r3, [r7, #12]
 432 0010 FB61     		str	r3, [r7, #28]
 512:Source/stream_buffer.c **** size_t xReturn, xSpace = 0;
 433              		.loc 1 512 0
 434 0012 0023     		movs	r3, #0
 435 0014 7B62     		str	r3, [r7, #36]
 513:Source/stream_buffer.c **** size_t xRequiredSpace = xDataLengthBytes;
 436              		.loc 1 513 0
 437 0016 7B68     		ldr	r3, [r7, #4]
 438 0018 3B62     		str	r3, [r7, #32]
 514:Source/stream_buffer.c **** TimeOut_t xTimeOut;
 515:Source/stream_buffer.c **** 
 516:Source/stream_buffer.c **** 	configASSERT( pvTxData );
 517:Source/stream_buffer.c **** 	configASSERT( pxStreamBuffer );
 518:Source/stream_buffer.c **** 
 519:Source/stream_buffer.c **** 	/* This send function is used to write to both message buffers and stream
 520:Source/stream_buffer.c **** 	buffers.  If this is a message buffer then the space needed must be
 521:Source/stream_buffer.c **** 	increased by the amount of bytes needed to store the length of the
 522:Source/stream_buffer.c **** 	message. */
 523:Source/stream_buffer.c **** 	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 439              		.loc 1 523 0
 440 001a FB69     		ldr	r3, [r7, #28]
 441 001c 1B7F     		ldrb	r3, [r3, #28]	@ zero_extendqisi2
 442 001e 03F00103 		and	r3, r3, #1
 443 0022 002B     		cmp	r3, #0
 444 0024 02D0     		beq	.L25
 524:Source/stream_buffer.c **** 	{
ARM GAS  C:\Users\Gusta\AppData\Local\Temp\ccugn2Vx.s 			page 18


 525:Source/stream_buffer.c **** 		xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
 445              		.loc 1 525 0
 446 0026 3B6A     		ldr	r3, [r7, #32]
 447 0028 0433     		adds	r3, r3, #4
 448 002a 3B62     		str	r3, [r7, #32]
 449              	.L25:
 526:Source/stream_buffer.c **** 
 527:Source/stream_buffer.c **** 		/* Overflow? */
 528:Source/stream_buffer.c **** 		configASSERT( xRequiredSpace > xDataLengthBytes );
 529:Source/stream_buffer.c **** 	}
 530:Source/stream_buffer.c **** 	else
 531:Source/stream_buffer.c **** 	{
 532:Source/stream_buffer.c **** 		mtCOVERAGE_TEST_MARKER();
 533:Source/stream_buffer.c **** 	}
 534:Source/stream_buffer.c **** 
 535:Source/stream_buffer.c **** 	if( xTicksToWait != ( TickType_t ) 0 )
 450              		.loc 1 535 0
 451 002c 3B68     		ldr	r3, [r7]
 452 002e 002B     		cmp	r3, #0
 453 0030 2FD0     		beq	.L26
 536:Source/stream_buffer.c **** 	{
 537:Source/stream_buffer.c **** 		vTaskSetTimeOutState( &xTimeOut );
 454              		.loc 1 537 0
 455 0032 07F11003 		add	r3, r7, #16
 456 0036 1846     		mov	r0, r3
 457 0038 FFF7FEFF 		bl	vTaskSetTimeOutState
 458              	.L30:
 538:Source/stream_buffer.c **** 
 539:Source/stream_buffer.c **** 		do
 540:Source/stream_buffer.c **** 		{
 541:Source/stream_buffer.c **** 			/* Wait until the required number of bytes are free in the message
 542:Source/stream_buffer.c **** 			buffer. */
 543:Source/stream_buffer.c **** 			taskENTER_CRITICAL();
 459              		.loc 1 543 0
 460 003c FFF7FEFF 		bl	vPortEnterCritical
 544:Source/stream_buffer.c **** 			{
 545:Source/stream_buffer.c **** 				xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 461              		.loc 1 545 0
 462 0040 F869     		ldr	r0, [r7, #28]
 463 0042 FFF7FEFF 		bl	xStreamBufferSpacesAvailable
 464 0046 7862     		str	r0, [r7, #36]
 546:Source/stream_buffer.c **** 
 547:Source/stream_buffer.c **** 				if( xSpace < xRequiredSpace )
 465              		.loc 1 547 0
 466 0048 7A6A     		ldr	r2, [r7, #36]
 467 004a 3B6A     		ldr	r3, [r7, #32]
 468 004c 9A42     		cmp	r2, r3
 469 004e 08D2     		bcs	.L27
 548:Source/stream_buffer.c **** 				{
 549:Source/stream_buffer.c **** 					/* Clear notification state as going to wait for space. */
 550:Source/stream_buffer.c **** 					( void ) xTaskNotifyStateClear( NULL );
 470              		.loc 1 550 0
 471 0050 0020     		movs	r0, #0
 472 0052 FFF7FEFF 		bl	xTaskNotifyStateClear
 551:Source/stream_buffer.c **** 
 552:Source/stream_buffer.c **** 					/* Should only be one writer. */
 553:Source/stream_buffer.c **** 					configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
ARM GAS  C:\Users\Gusta\AppData\Local\Temp\ccugn2Vx.s 			page 19


 554:Source/stream_buffer.c **** 					pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
 473              		.loc 1 554 0
 474 0056 FFF7FEFF 		bl	xTaskGetCurrentTaskHandle
 475 005a 0246     		mov	r2, r0
 476 005c FB69     		ldr	r3, [r7, #28]
 477 005e 5A61     		str	r2, [r3, #20]
 478 0060 02E0     		b	.L35
 479              	.L27:
 555:Source/stream_buffer.c **** 				}
 556:Source/stream_buffer.c **** 				else
 557:Source/stream_buffer.c **** 				{
 558:Source/stream_buffer.c **** 					taskEXIT_CRITICAL();
 480              		.loc 1 558 0
 481 0062 FFF7FEFF 		bl	vPortExitCritical
 559:Source/stream_buffer.c **** 					break;
 482              		.loc 1 559 0
 483 0066 14E0     		b	.L26
 484              	.L35:
 560:Source/stream_buffer.c **** 				}
 561:Source/stream_buffer.c **** 			}
 562:Source/stream_buffer.c **** 			taskEXIT_CRITICAL();
 485              		.loc 1 562 0
 486 0068 FFF7FEFF 		bl	vPortExitCritical
 563:Source/stream_buffer.c **** 
 564:Source/stream_buffer.c **** 			traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
 565:Source/stream_buffer.c **** 			( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 487              		.loc 1 565 0
 488 006c 3B68     		ldr	r3, [r7]
 489 006e 0022     		movs	r2, #0
 490 0070 0021     		movs	r1, #0
 491 0072 0020     		movs	r0, #0
 492 0074 FFF7FEFF 		bl	xTaskNotifyWait
 566:Source/stream_buffer.c **** 			pxStreamBuffer->xTaskWaitingToSend = NULL;
 493              		.loc 1 566 0
 494 0078 FB69     		ldr	r3, [r7, #28]
 495 007a 0022     		movs	r2, #0
 496 007c 5A61     		str	r2, [r3, #20]
 567:Source/stream_buffer.c **** 
 568:Source/stream_buffer.c **** 		} while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
 497              		.loc 1 568 0
 498 007e 3A46     		mov	r2, r7
 499 0080 07F11003 		add	r3, r7, #16
 500 0084 1146     		mov	r1, r2
 501 0086 1846     		mov	r0, r3
 502 0088 FFF7FEFF 		bl	xTaskCheckForTimeOut
 503 008c 0346     		mov	r3, r0
 504 008e 002B     		cmp	r3, #0
 505 0090 D4D0     		beq	.L30
 506              	.L26:
 569:Source/stream_buffer.c **** 	}
 570:Source/stream_buffer.c **** 	else
 571:Source/stream_buffer.c **** 	{
 572:Source/stream_buffer.c **** 		mtCOVERAGE_TEST_MARKER();
 573:Source/stream_buffer.c **** 	}
 574:Source/stream_buffer.c **** 
 575:Source/stream_buffer.c **** 	if( xSpace == ( size_t ) 0 )
 507              		.loc 1 575 0
ARM GAS  C:\Users\Gusta\AppData\Local\Temp\ccugn2Vx.s 			page 20


 508 0092 7B6A     		ldr	r3, [r7, #36]
 509 0094 002B     		cmp	r3, #0
 510 0096 03D1     		bne	.L31
 576:Source/stream_buffer.c **** 	{
 577:Source/stream_buffer.c **** 		xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 511              		.loc 1 577 0
 512 0098 F869     		ldr	r0, [r7, #28]
 513 009a FFF7FEFF 		bl	xStreamBufferSpacesAvailable
 514 009e 7862     		str	r0, [r7, #36]
 515              	.L31:
 578:Source/stream_buffer.c **** 	}
 579:Source/stream_buffer.c **** 	else
 580:Source/stream_buffer.c **** 	{
 581:Source/stream_buffer.c **** 		mtCOVERAGE_TEST_MARKER();
 582:Source/stream_buffer.c **** 	}
 583:Source/stream_buffer.c **** 
 584:Source/stream_buffer.c **** 	xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSp
 516              		.loc 1 584 0
 517 00a0 3B6A     		ldr	r3, [r7, #32]
 518 00a2 0093     		str	r3, [sp]
 519 00a4 7B6A     		ldr	r3, [r7, #36]
 520 00a6 7A68     		ldr	r2, [r7, #4]
 521 00a8 B968     		ldr	r1, [r7, #8]
 522 00aa F869     		ldr	r0, [r7, #28]
 523 00ac FFF7FEFF 		bl	prvWriteMessageToBuffer
 524 00b0 B861     		str	r0, [r7, #24]
 585:Source/stream_buffer.c **** 
 586:Source/stream_buffer.c **** 	if( xReturn > ( size_t ) 0 )
 525              		.loc 1 586 0
 526 00b2 BB69     		ldr	r3, [r7, #24]
 527 00b4 002B     		cmp	r3, #0
 528 00b6 19D0     		beq	.L32
 587:Source/stream_buffer.c **** 	{
 588:Source/stream_buffer.c **** 		traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );
 589:Source/stream_buffer.c **** 
 590:Source/stream_buffer.c **** 		/* Was a task waiting for the data? */
 591:Source/stream_buffer.c **** 		if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
 529              		.loc 1 591 0
 530 00b8 F869     		ldr	r0, [r7, #28]
 531 00ba FFF7FEFF 		bl	prvBytesInBuffer
 532 00be 0246     		mov	r2, r0
 533 00c0 FB69     		ldr	r3, [r7, #28]
 534 00c2 DB68     		ldr	r3, [r3, #12]
 535 00c4 9A42     		cmp	r2, r3
 536 00c6 11D3     		bcc	.L32
 592:Source/stream_buffer.c **** 		{
 593:Source/stream_buffer.c **** 			sbSEND_COMPLETED( pxStreamBuffer );
 537              		.loc 1 593 0
 538 00c8 FFF7FEFF 		bl	vTaskSuspendAll
 539 00cc FB69     		ldr	r3, [r7, #28]
 540 00ce 1B69     		ldr	r3, [r3, #16]
 541 00d0 002B     		cmp	r3, #0
 542 00d2 09D0     		beq	.L33
 543              		.loc 1 593 0 is_stmt 0 discriminator 1
 544 00d4 FB69     		ldr	r3, [r7, #28]
 545 00d6 1869     		ldr	r0, [r3, #16]
 546 00d8 0023     		movs	r3, #0
ARM GAS  C:\Users\Gusta\AppData\Local\Temp\ccugn2Vx.s 			page 21


 547 00da 0022     		movs	r2, #0
 548 00dc 0021     		movs	r1, #0
 549 00de FFF7FEFF 		bl	xTaskGenericNotify
 550 00e2 FB69     		ldr	r3, [r7, #28]
 551 00e4 0022     		movs	r2, #0
 552 00e6 1A61     		str	r2, [r3, #16]
 553              	.L33:
 554              		.loc 1 593 0 discriminator 3
 555 00e8 FFF7FEFF 		bl	xTaskResumeAll
 556              	.L32:
 594:Source/stream_buffer.c **** 		}
 595:Source/stream_buffer.c **** 		else
 596:Source/stream_buffer.c **** 		{
 597:Source/stream_buffer.c **** 			mtCOVERAGE_TEST_MARKER();
 598:Source/stream_buffer.c **** 		}
 599:Source/stream_buffer.c **** 	}
 600:Source/stream_buffer.c **** 	else
 601:Source/stream_buffer.c **** 	{
 602:Source/stream_buffer.c **** 		mtCOVERAGE_TEST_MARKER();
 603:Source/stream_buffer.c **** 		traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
 604:Source/stream_buffer.c **** 	}
 605:Source/stream_buffer.c **** 
 606:Source/stream_buffer.c **** 	return xReturn;
 557              		.loc 1 606 0 is_stmt 1
 558 00ec BB69     		ldr	r3, [r7, #24]
 607:Source/stream_buffer.c **** }
 559              		.loc 1 607 0
 560 00ee 1846     		mov	r0, r3
 561 00f0 2837     		adds	r7, r7, #40
 562              		.cfi_def_cfa_offset 8
 563 00f2 BD46     		mov	sp, r7
 564              		.cfi_def_cfa_register 13
 565              		@ sp needed
 566 00f4 80BD     		pop	{r7, pc}
 567              		.cfi_endproc
 568              	.LFE74:
 569              		.size	xStreamBufferSend, .-xStreamBufferSend
 570 00f6 00BF     		.section	.text.xStreamBufferSendFromISR,"ax",%progbits
 571              		.align	2
 572              		.global	xStreamBufferSendFromISR
 573              		.thumb
 574              		.thumb_func
 575              		.type	xStreamBufferSendFromISR, %function
 576              	xStreamBufferSendFromISR:
 577              	.LFB75:
 608:Source/stream_buffer.c **** /*-----------------------------------------------------------*/
 609:Source/stream_buffer.c **** 
 610:Source/stream_buffer.c **** size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
 611:Source/stream_buffer.c **** 								 const void *pvTxData,
 612:Source/stream_buffer.c **** 								 size_t xDataLengthBytes,
 613:Source/stream_buffer.c **** 								 BaseType_t * const pxHigherPriorityTaskWoken )
 614:Source/stream_buffer.c **** {
 578              		.loc 1 614 0
 579              		.cfi_startproc
 580              		@ args = 0, pretend = 0, frame = 48
 581              		@ frame_needed = 1, uses_anonymous_args = 0
 582 0000 80B5     		push	{r7, lr}
ARM GAS  C:\Users\Gusta\AppData\Local\Temp\ccugn2Vx.s 			page 22


 583              		.cfi_def_cfa_offset 8
 584              		.cfi_offset 7, -8
 585              		.cfi_offset 14, -4
 586 0002 8EB0     		sub	sp, sp, #56
 587              		.cfi_def_cfa_offset 64
 588 0004 02AF     		add	r7, sp, #8
 589              		.cfi_def_cfa 7, 56
 590 0006 F860     		str	r0, [r7, #12]
 591 0008 B960     		str	r1, [r7, #8]
 592 000a 7A60     		str	r2, [r7, #4]
 593 000c 3B60     		str	r3, [r7]
 615:Source/stream_buffer.c **** StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 594              		.loc 1 615 0
 595 000e FB68     		ldr	r3, [r7, #12]
 596 0010 BB62     		str	r3, [r7, #40]
 616:Source/stream_buffer.c **** size_t xReturn, xSpace;
 617:Source/stream_buffer.c **** size_t xRequiredSpace = xDataLengthBytes;
 597              		.loc 1 617 0
 598 0012 7B68     		ldr	r3, [r7, #4]
 599 0014 FB62     		str	r3, [r7, #44]
 618:Source/stream_buffer.c **** 
 619:Source/stream_buffer.c **** 	configASSERT( pvTxData );
 620:Source/stream_buffer.c **** 	configASSERT( pxStreamBuffer );
 621:Source/stream_buffer.c **** 
 622:Source/stream_buffer.c **** 	/* This send function is used to write to both message buffers and stream
 623:Source/stream_buffer.c **** 	buffers.  If this is a message buffer then the space needed must be
 624:Source/stream_buffer.c **** 	increased by the amount of bytes needed to store the length of the
 625:Source/stream_buffer.c **** 	message. */
 626:Source/stream_buffer.c **** 	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 600              		.loc 1 626 0
 601 0016 BB6A     		ldr	r3, [r7, #40]
 602 0018 1B7F     		ldrb	r3, [r3, #28]	@ zero_extendqisi2
 603 001a 03F00103 		and	r3, r3, #1
 604 001e 002B     		cmp	r3, #0
 605 0020 02D0     		beq	.L37
 627:Source/stream_buffer.c **** 	{
 628:Source/stream_buffer.c **** 		xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
 606              		.loc 1 628 0
 607 0022 FB6A     		ldr	r3, [r7, #44]
 608 0024 0433     		adds	r3, r3, #4
 609 0026 FB62     		str	r3, [r7, #44]
 610              	.L37:
 629:Source/stream_buffer.c **** 	}
 630:Source/stream_buffer.c **** 	else
 631:Source/stream_buffer.c **** 	{
 632:Source/stream_buffer.c **** 		mtCOVERAGE_TEST_MARKER();
 633:Source/stream_buffer.c **** 	}
 634:Source/stream_buffer.c **** 
 635:Source/stream_buffer.c **** 	xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 611              		.loc 1 635 0
 612 0028 B86A     		ldr	r0, [r7, #40]
 613 002a FFF7FEFF 		bl	xStreamBufferSpacesAvailable
 614 002e 7862     		str	r0, [r7, #36]
 636:Source/stream_buffer.c **** 	xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSp
 615              		.loc 1 636 0
 616 0030 FB6A     		ldr	r3, [r7, #44]
 617 0032 0093     		str	r3, [sp]
ARM GAS  C:\Users\Gusta\AppData\Local\Temp\ccugn2Vx.s 			page 23


 618 0034 7B6A     		ldr	r3, [r7, #36]
 619 0036 7A68     		ldr	r2, [r7, #4]
 620 0038 B968     		ldr	r1, [r7, #8]
 621 003a B86A     		ldr	r0, [r7, #40]
 622 003c FFF7FEFF 		bl	prvWriteMessageToBuffer
 623 0040 3862     		str	r0, [r7, #32]
 637:Source/stream_buffer.c **** 
 638:Source/stream_buffer.c **** 	if( xReturn > ( size_t ) 0 )
 624              		.loc 1 638 0
 625 0042 3B6A     		ldr	r3, [r7, #32]
 626 0044 002B     		cmp	r3, #0
 627 0046 2AD0     		beq	.L38
 639:Source/stream_buffer.c **** 	{
 640:Source/stream_buffer.c **** 		/* Was a task waiting for the data? */
 641:Source/stream_buffer.c **** 		if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
 628              		.loc 1 641 0
 629 0048 B86A     		ldr	r0, [r7, #40]
 630 004a FFF7FEFF 		bl	prvBytesInBuffer
 631 004e 0246     		mov	r2, r0
 632 0050 BB6A     		ldr	r3, [r7, #40]
 633 0052 DB68     		ldr	r3, [r3, #12]
 634 0054 9A42     		cmp	r2, r3
 635 0056 22D3     		bcc	.L38
 636              	.LBB20:
 637              	.LBB21:
 638              	.LBB22:
 639              		.file 2 ".\\Source\\portable\\GCC\\ARM_CM3/portmacro.h"
   1:.\Source\portable\GCC\ARM_CM3/portmacro.h **** /*
   2:.\Source\portable\GCC\ARM_CM3/portmacro.h ****  * FreeRTOS Kernel V10.3.1
   3:.\Source\portable\GCC\ARM_CM3/portmacro.h ****  * Copyright (C) 2020 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:.\Source\portable\GCC\ARM_CM3/portmacro.h ****  *
   5:.\Source\portable\GCC\ARM_CM3/portmacro.h ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:.\Source\portable\GCC\ARM_CM3/portmacro.h ****  * this software and associated documentation files (the "Software"), to deal in
   7:.\Source\portable\GCC\ARM_CM3/portmacro.h ****  * the Software without restriction, including without limitation the rights to
   8:.\Source\portable\GCC\ARM_CM3/portmacro.h ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:.\Source\portable\GCC\ARM_CM3/portmacro.h ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:.\Source\portable\GCC\ARM_CM3/portmacro.h ****  * subject to the following conditions:
  11:.\Source\portable\GCC\ARM_CM3/portmacro.h ****  *
  12:.\Source\portable\GCC\ARM_CM3/portmacro.h ****  * The above copyright notice and this permission notice shall be included in all
  13:.\Source\portable\GCC\ARM_CM3/portmacro.h ****  * copies or substantial portions of the Software.
  14:.\Source\portable\GCC\ARM_CM3/portmacro.h ****  *
  15:.\Source\portable\GCC\ARM_CM3/portmacro.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:.\Source\portable\GCC\ARM_CM3/portmacro.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:.\Source\portable\GCC\ARM_CM3/portmacro.h ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:.\Source\portable\GCC\ARM_CM3/portmacro.h ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:.\Source\portable\GCC\ARM_CM3/portmacro.h ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:.\Source\portable\GCC\ARM_CM3/portmacro.h ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:.\Source\portable\GCC\ARM_CM3/portmacro.h ****  *
  22:.\Source\portable\GCC\ARM_CM3/portmacro.h ****  * http://www.FreeRTOS.org
  23:.\Source\portable\GCC\ARM_CM3/portmacro.h ****  * http://aws.amazon.com/freertos
  24:.\Source\portable\GCC\ARM_CM3/portmacro.h ****  *
  25:.\Source\portable\GCC\ARM_CM3/portmacro.h ****  * 1 tab == 4 spaces!
  26:.\Source\portable\GCC\ARM_CM3/portmacro.h ****  */
  27:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 
  28:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 
  29:.\Source\portable\GCC\ARM_CM3/portmacro.h **** #ifndef PORTMACRO_H
  30:.\Source\portable\GCC\ARM_CM3/portmacro.h **** #define PORTMACRO_H
ARM GAS  C:\Users\Gusta\AppData\Local\Temp\ccugn2Vx.s 			page 24


  31:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 
  32:.\Source\portable\GCC\ARM_CM3/portmacro.h **** #ifdef __cplusplus
  33:.\Source\portable\GCC\ARM_CM3/portmacro.h **** extern "C" {
  34:.\Source\portable\GCC\ARM_CM3/portmacro.h **** #endif
  35:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 
  36:.\Source\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------
  37:.\Source\portable\GCC\ARM_CM3/portmacro.h ****  * Port specific definitions.
  38:.\Source\portable\GCC\ARM_CM3/portmacro.h ****  *
  39:.\Source\portable\GCC\ARM_CM3/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  40:.\Source\portable\GCC\ARM_CM3/portmacro.h ****  * given hardware and compiler.
  41:.\Source\portable\GCC\ARM_CM3/portmacro.h ****  *
  42:.\Source\portable\GCC\ARM_CM3/portmacro.h ****  * These settings should not be altered.
  43:.\Source\portable\GCC\ARM_CM3/portmacro.h ****  *-----------------------------------------------------------
  44:.\Source\portable\GCC\ARM_CM3/portmacro.h ****  */
  45:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 
  46:.\Source\portable\GCC\ARM_CM3/portmacro.h **** /* Type definitions. */
  47:.\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portCHAR		char
  48:.\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portFLOAT		float
  49:.\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portDOUBLE		double
  50:.\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portLONG		long
  51:.\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portSHORT		short
  52:.\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portSTACK_TYPE	uint32_t
  53:.\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portBASE_TYPE	long
  54:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 
  55:.\Source\portable\GCC\ARM_CM3/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  56:.\Source\portable\GCC\ARM_CM3/portmacro.h **** typedef long BaseType_t;
  57:.\Source\portable\GCC\ARM_CM3/portmacro.h **** typedef unsigned long UBaseType_t;
  58:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 
  59:.\Source\portable\GCC\ARM_CM3/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
  60:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	typedef uint16_t TickType_t;
  61:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
  62:.\Source\portable\GCC\ARM_CM3/portmacro.h **** #else
  63:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	typedef uint32_t TickType_t;
  64:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
  65:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 
  66:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
  67:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	not need to be guarded with a critical section. */
  68:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
  69:.\Source\portable\GCC\ARM_CM3/portmacro.h **** #endif
  70:.\Source\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
  71:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 
  72:.\Source\portable\GCC\ARM_CM3/portmacro.h **** /* Architecture specifics. */
  73:.\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portSTACK_GROWTH			( -1 )
  74:.\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
  75:.\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portBYTE_ALIGNMENT			8
  76:.\Source\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
  77:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 
  78:.\Source\portable\GCC\ARM_CM3/portmacro.h **** /* Scheduler utilities. */
  79:.\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portYIELD() 															\
  80:.\Source\portable\GCC\ARM_CM3/portmacro.h **** {																				\
  81:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	/* Set a PendSV to request a context switch. */								\
  82:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\
  83:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 																				\
  84:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	/* Barriers are normally not required but do ensure the code is completely	\
  85:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	within the specified behaviour for the architecture. */						\
  86:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	__asm volatile( "dsb" ::: "memory" );										\
  87:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	__asm volatile( "isb" );													\
ARM GAS  C:\Users\Gusta\AppData\Local\Temp\ccugn2Vx.s 			page 25


  88:.\Source\portable\GCC\ARM_CM3/portmacro.h **** }
  89:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 
  90:.\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
  91:.\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
  92:.\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) if( xSwitchRequired != pdFALSE ) portYIELD()
  93:.\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
  94:.\Source\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
  95:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 
  96:.\Source\portable\GCC\ARM_CM3/portmacro.h **** /* Critical section management. */
  97:.\Source\portable\GCC\ARM_CM3/portmacro.h **** extern void vPortEnterCritical( void );
  98:.\Source\portable\GCC\ARM_CM3/portmacro.h **** extern void vPortExitCritical( void );
  99:.\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortRaiseBASEPRI()
 100:.\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortSetBASEPRI(x)
 101:.\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portDISABLE_INTERRUPTS()				vPortRaiseBASEPRI()
 102:.\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortSetBASEPRI(0)
 103:.\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 104:.\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 105:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 106:.\Source\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 107:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 108:.\Source\portable\GCC\ARM_CM3/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 109:.\Source\portable\GCC\ARM_CM3/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 110:.\Source\portable\GCC\ARM_CM3/portmacro.h **** (which build with all the ports) will build. */
 111:.\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 112:.\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 113:.\Source\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 114:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 115:.\Source\portable\GCC\ARM_CM3/portmacro.h **** /* Tickless idle/low power functionality. */
 116:.\Source\portable\GCC\ARM_CM3/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 117:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 118:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 119:.\Source\portable\GCC\ARM_CM3/portmacro.h **** #endif
 120:.\Source\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 121:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 122:.\Source\portable\GCC\ARM_CM3/portmacro.h **** /* Architecture specific optimisations. */
 123:.\Source\portable\GCC\ARM_CM3/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 124:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 125:.\Source\portable\GCC\ARM_CM3/portmacro.h **** #endif
 126:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 127:.\Source\portable\GCC\ARM_CM3/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 128:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 129:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	/* Generic helper function. */
 130:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 131:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	{
 132:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	uint8_t ucReturn;
 133:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 134:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 135:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 		return ucReturn;
 136:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	}
 137:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 138:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	/* Check the configuration. */
 139:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	#if( configMAX_PRIORITIES > 32 )
 140:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is 
 141:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	#endif
 142:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 143:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	/* Store/clear the ready priorities in a bit map. */
 144:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) |= ( 1UL 
ARM GAS  C:\Users\Gusta\AppData\Local\Temp\ccugn2Vx.s 			page 26


 145:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) &= ~( 1UL 
 146:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 147:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	/*-----------------------------------------------------------*/
 148:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 149:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities ) uxTopPriority = ( 31UL - ( ui
 150:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 151:.\Source\portable\GCC\ARM_CM3/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 152:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 153:.\Source\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 154:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 155:.\Source\portable\GCC\ARM_CM3/portmacro.h **** #ifdef configASSERT
 156:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	void vPortValidateInterruptPriority( void );
 157:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
 158:.\Source\portable\GCC\ARM_CM3/portmacro.h **** #endif
 159:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 160:.\Source\portable\GCC\ARM_CM3/portmacro.h **** /* portNOP() is not required by this port. */
 161:.\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portNOP()
 162:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 163:.\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portINLINE	__inline
 164:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 165:.\Source\portable\GCC\ARM_CM3/portmacro.h **** #ifndef portFORCE_INLINE
 166:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	#define portFORCE_INLINE inline __attribute__(( always_inline))
 167:.\Source\portable\GCC\ARM_CM3/portmacro.h **** #endif
 168:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 169:.\Source\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 170:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 171:.\Source\portable\GCC\ARM_CM3/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 172:.\Source\portable\GCC\ARM_CM3/portmacro.h **** {
 173:.\Source\portable\GCC\ARM_CM3/portmacro.h **** uint32_t ulCurrentInterrupt;
 174:.\Source\portable\GCC\ARM_CM3/portmacro.h **** BaseType_t xReturn;
 175:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 176:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	/* Obtain the number of the currently executing interrupt. */
 177:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 178:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 179:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	if( ulCurrentInterrupt == 0 )
 180:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	{
 181:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 		xReturn = pdFALSE;
 182:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	}
 183:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	else
 184:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	{
 185:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 		xReturn = pdTRUE;
 186:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	}
 187:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 188:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	return xReturn;
 189:.\Source\portable\GCC\ARM_CM3/portmacro.h **** }
 190:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 191:.\Source\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 192:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 193:.\Source\portable\GCC\ARM_CM3/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 194:.\Source\portable\GCC\ARM_CM3/portmacro.h **** {
 195:.\Source\portable\GCC\ARM_CM3/portmacro.h **** uint32_t ulNewBASEPRI;
 196:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 197:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	__asm volatile
 198:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	(
 199:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 		"	mov %0, %1												\n" \
 200:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 		"	msr basepri, %0											\n" \
 201:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 		"	isb														\n" \
ARM GAS  C:\Users\Gusta\AppData\Local\Temp\ccugn2Vx.s 			page 27


 202:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 		"	dsb														\n" \
 203:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
 204:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	);
 205:.\Source\portable\GCC\ARM_CM3/portmacro.h **** }
 206:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 207:.\Source\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 208:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 209:.\Source\portable\GCC\ARM_CM3/portmacro.h **** portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 210:.\Source\portable\GCC\ARM_CM3/portmacro.h **** {
 211:.\Source\portable\GCC\ARM_CM3/portmacro.h **** uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 212:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 213:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	__asm volatile
 640              		.loc 2 213 0
 641              		.syntax unified
 642              	@ 213 ".\Source\portable\GCC\ARM_CM3/portmacro.h" 1
 643 0058 EFF31182 			mrs r2, basepri											
 644 005c 4FF0A003 		mov r3, #160												
 645 0060 83F31188 		msr basepri, r3											
 646 0064 BFF36F8F 		isb														
 647 0068 BFF34F8F 		dsb														
 648              	
 649              	@ 0 "" 2
 650              		.thumb
 651              		.syntax unified
 652 006c 7A61     		str	r2, [r7, #20]
 653 006e 3B61     		str	r3, [r7, #16]
 214:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	(
 215:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 		"	mrs %0, basepri											\n" \
 216:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 		"	mov %1, %2												\n" \
 217:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 		"	msr basepri, %1											\n" \
 218:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 		"	isb														\n" \
 219:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 		"	dsb														\n" \
 220:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "
 221:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	);
 222:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 223:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	/* This return will not be reached but is necessary to prevent compiler
 224:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	warnings. */
 225:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	return ulOriginalBASEPRI;
 654              		.loc 2 225 0
 655 0070 7B69     		ldr	r3, [r7, #20]
 656              	.LBE22:
 657              	.LBE21:
 642:Source/stream_buffer.c **** 		{
 643:Source/stream_buffer.c **** 			sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
 658              		.loc 1 643 0
 659 0072 BB61     		str	r3, [r7, #24]
 660 0074 BB6A     		ldr	r3, [r7, #40]
 661 0076 1B69     		ldr	r3, [r3, #16]
 662 0078 002B     		cmp	r3, #0
 663 007a 0BD0     		beq	.L40
 664              		.loc 1 643 0 is_stmt 0 discriminator 1
 665 007c BB6A     		ldr	r3, [r7, #40]
 666 007e 1869     		ldr	r0, [r3, #16]
 667 0080 3B68     		ldr	r3, [r7]
 668 0082 0093     		str	r3, [sp]
 669 0084 0023     		movs	r3, #0
 670 0086 0022     		movs	r2, #0
ARM GAS  C:\Users\Gusta\AppData\Local\Temp\ccugn2Vx.s 			page 28


 671 0088 0021     		movs	r1, #0
 672 008a FFF7FEFF 		bl	xTaskGenericNotifyFromISR
 673 008e BB6A     		ldr	r3, [r7, #40]
 674 0090 0022     		movs	r2, #0
 675 0092 1A61     		str	r2, [r3, #16]
 676              	.L40:
 677 0094 BB69     		ldr	r3, [r7, #24]
 678 0096 FB61     		str	r3, [r7, #28]
 679              	.LBB23:
 680              	.LBB24:
 226:.\Source\portable\GCC\ARM_CM3/portmacro.h **** }
 227:.\Source\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 228:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 229:.\Source\portable\GCC\ARM_CM3/portmacro.h **** portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 230:.\Source\portable\GCC\ARM_CM3/portmacro.h **** {
 231:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	__asm volatile
 681              		.loc 2 231 0 is_stmt 1 discriminator 3
 682 0098 FB69     		ldr	r3, [r7, #28]
 683              		.syntax unified
 684              	@ 231 ".\Source\portable\GCC\ARM_CM3/portmacro.h" 1
 685 009a 83F31188 			msr basepri, r3	
 686              	@ 0 "" 2
 687              		.thumb
 688              		.syntax unified
 689              	.L38:
 690              	.LBE24:
 691              	.LBE23:
 692              	.LBE20:
 644:Source/stream_buffer.c **** 		}
 645:Source/stream_buffer.c **** 		else
 646:Source/stream_buffer.c **** 		{
 647:Source/stream_buffer.c **** 			mtCOVERAGE_TEST_MARKER();
 648:Source/stream_buffer.c **** 		}
 649:Source/stream_buffer.c **** 	}
 650:Source/stream_buffer.c **** 	else
 651:Source/stream_buffer.c **** 	{
 652:Source/stream_buffer.c **** 		mtCOVERAGE_TEST_MARKER();
 653:Source/stream_buffer.c **** 	}
 654:Source/stream_buffer.c **** 
 655:Source/stream_buffer.c **** 	traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );
 656:Source/stream_buffer.c **** 
 657:Source/stream_buffer.c **** 	return xReturn;
 693              		.loc 1 657 0
 694 009e 3B6A     		ldr	r3, [r7, #32]
 658:Source/stream_buffer.c **** }
 695              		.loc 1 658 0
 696 00a0 1846     		mov	r0, r3
 697 00a2 3037     		adds	r7, r7, #48
 698              		.cfi_def_cfa_offset 8
 699 00a4 BD46     		mov	sp, r7
 700              		.cfi_def_cfa_register 13
 701              		@ sp needed
 702 00a6 80BD     		pop	{r7, pc}
 703              		.cfi_endproc
 704              	.LFE75:
 705              		.size	xStreamBufferSendFromISR, .-xStreamBufferSendFromISR
 706              		.section	.text.prvWriteMessageToBuffer,"ax",%progbits
ARM GAS  C:\Users\Gusta\AppData\Local\Temp\ccugn2Vx.s 			page 29


 707              		.align	2
 708              		.thumb
 709              		.thumb_func
 710              		.type	prvWriteMessageToBuffer, %function
 711              	prvWriteMessageToBuffer:
 712              	.LFB76:
 659:Source/stream_buffer.c **** /*-----------------------------------------------------------*/
 660:Source/stream_buffer.c **** 
 661:Source/stream_buffer.c **** static size_t prvWriteMessageToBuffer( StreamBuffer_t * const pxStreamBuffer,
 662:Source/stream_buffer.c **** 									   const void * pvTxData,
 663:Source/stream_buffer.c **** 									   size_t xDataLengthBytes,
 664:Source/stream_buffer.c **** 									   size_t xSpace,
 665:Source/stream_buffer.c **** 									   size_t xRequiredSpace )
 666:Source/stream_buffer.c **** {
 713              		.loc 1 666 0
 714              		.cfi_startproc
 715              		@ args = 4, pretend = 0, frame = 24
 716              		@ frame_needed = 1, uses_anonymous_args = 0
 717 0000 80B5     		push	{r7, lr}
 718              		.cfi_def_cfa_offset 8
 719              		.cfi_offset 7, -8
 720              		.cfi_offset 14, -4
 721 0002 86B0     		sub	sp, sp, #24
 722              		.cfi_def_cfa_offset 32
 723 0004 00AF     		add	r7, sp, #0
 724              		.cfi_def_cfa_register 7
 725 0006 F860     		str	r0, [r7, #12]
 726 0008 B960     		str	r1, [r7, #8]
 727 000a 7A60     		str	r2, [r7, #4]
 728 000c 3B60     		str	r3, [r7]
 667:Source/stream_buffer.c **** 	BaseType_t xShouldWrite;
 668:Source/stream_buffer.c **** 	size_t xReturn;
 669:Source/stream_buffer.c **** 
 670:Source/stream_buffer.c **** 	if( xSpace == ( size_t ) 0 )
 729              		.loc 1 670 0
 730 000e 3B68     		ldr	r3, [r7]
 731 0010 002B     		cmp	r3, #0
 732 0012 02D1     		bne	.L43
 671:Source/stream_buffer.c **** 	{
 672:Source/stream_buffer.c **** 		/* Doesn't matter if this is a stream buffer or a message buffer, there
 673:Source/stream_buffer.c **** 		is no space to write. */
 674:Source/stream_buffer.c **** 		xShouldWrite = pdFALSE;
 733              		.loc 1 674 0
 734 0014 0023     		movs	r3, #0
 735 0016 7B61     		str	r3, [r7, #20]
 736 0018 1DE0     		b	.L44
 737              	.L43:
 675:Source/stream_buffer.c **** 	}
 676:Source/stream_buffer.c **** 	else if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) == ( uint8_t ) 0 )
 738              		.loc 1 676 0
 739 001a FB68     		ldr	r3, [r7, #12]
 740 001c 1B7F     		ldrb	r3, [r3, #28]	@ zero_extendqisi2
 741 001e 03F00103 		and	r3, r3, #1
 742 0022 002B     		cmp	r3, #0
 743 0024 08D1     		bne	.L45
 677:Source/stream_buffer.c **** 	{
 678:Source/stream_buffer.c **** 		/* This is a stream buffer, as opposed to a message buffer, so writing a
ARM GAS  C:\Users\Gusta\AppData\Local\Temp\ccugn2Vx.s 			page 30


 679:Source/stream_buffer.c **** 		stream of bytes rather than discrete messages.  Write as many bytes as
 680:Source/stream_buffer.c **** 		possible. */
 681:Source/stream_buffer.c **** 		xShouldWrite = pdTRUE;
 744              		.loc 1 681 0
 745 0026 0123     		movs	r3, #1
 746 0028 7B61     		str	r3, [r7, #20]
 682:Source/stream_buffer.c **** 		xDataLengthBytes = configMIN( xDataLengthBytes, xSpace );
 747              		.loc 1 682 0
 748 002a 7A68     		ldr	r2, [r7, #4]
 749 002c 3B68     		ldr	r3, [r7]
 750 002e 9342     		cmp	r3, r2
 751 0030 28BF     		it	cs
 752 0032 1346     		movcs	r3, r2
 753 0034 7B60     		str	r3, [r7, #4]
 754 0036 0EE0     		b	.L44
 755              	.L45:
 683:Source/stream_buffer.c **** 	}
 684:Source/stream_buffer.c **** 	else if( xSpace >= xRequiredSpace )
 756              		.loc 1 684 0
 757 0038 3A68     		ldr	r2, [r7]
 758 003a 3B6A     		ldr	r3, [r7, #32]
 759 003c 9A42     		cmp	r2, r3
 760 003e 08D3     		bcc	.L46
 685:Source/stream_buffer.c **** 	{
 686:Source/stream_buffer.c **** 		/* This is a message buffer, as opposed to a stream buffer, and there
 687:Source/stream_buffer.c **** 		is enough space to write both the message length and the message itself
 688:Source/stream_buffer.c **** 		into the buffer.  Start by writing the length of the data, the data
 689:Source/stream_buffer.c **** 		itself will be written later in this function. */
 690:Source/stream_buffer.c **** 		xShouldWrite = pdTRUE;
 761              		.loc 1 690 0
 762 0040 0123     		movs	r3, #1
 763 0042 7B61     		str	r3, [r7, #20]
 691:Source/stream_buffer.c **** 		( void ) prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) &( xDataLengthBytes ), sbBYTE
 764              		.loc 1 691 0
 765 0044 3B1D     		adds	r3, r7, #4
 766 0046 0422     		movs	r2, #4
 767 0048 1946     		mov	r1, r3
 768 004a F868     		ldr	r0, [r7, #12]
 769 004c FFF7FEFF 		bl	prvWriteBytesToBuffer
 770 0050 01E0     		b	.L44
 771              	.L46:
 692:Source/stream_buffer.c **** 	}
 693:Source/stream_buffer.c **** 	else
 694:Source/stream_buffer.c **** 	{
 695:Source/stream_buffer.c **** 		/* There is space available, but not enough space. */
 696:Source/stream_buffer.c **** 		xShouldWrite = pdFALSE;
 772              		.loc 1 696 0
 773 0052 0023     		movs	r3, #0
 774 0054 7B61     		str	r3, [r7, #20]
 775              	.L44:
 697:Source/stream_buffer.c **** 	}
 698:Source/stream_buffer.c **** 
 699:Source/stream_buffer.c **** 	if( xShouldWrite != pdFALSE )
 776              		.loc 1 699 0
 777 0056 7B69     		ldr	r3, [r7, #20]
 778 0058 002B     		cmp	r3, #0
 779 005a 07D0     		beq	.L47
ARM GAS  C:\Users\Gusta\AppData\Local\Temp\ccugn2Vx.s 			page 31


 700:Source/stream_buffer.c **** 	{
 701:Source/stream_buffer.c **** 		/* Writes the data itself. */
 702:Source/stream_buffer.c **** 		xReturn = prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) pvTxData, xDataLengthBytes )
 780              		.loc 1 702 0
 781 005c 7B68     		ldr	r3, [r7, #4]
 782 005e 1A46     		mov	r2, r3
 783 0060 B968     		ldr	r1, [r7, #8]
 784 0062 F868     		ldr	r0, [r7, #12]
 785 0064 FFF7FEFF 		bl	prvWriteBytesToBuffer
 786 0068 3861     		str	r0, [r7, #16]
 787 006a 01E0     		b	.L48
 788              	.L47:
 703:Source/stream_buffer.c **** 	}
 704:Source/stream_buffer.c **** 	else
 705:Source/stream_buffer.c **** 	{
 706:Source/stream_buffer.c **** 		xReturn = 0;
 789              		.loc 1 706 0
 790 006c 0023     		movs	r3, #0
 791 006e 3B61     		str	r3, [r7, #16]
 792              	.L48:
 707:Source/stream_buffer.c **** 	}
 708:Source/stream_buffer.c **** 
 709:Source/stream_buffer.c **** 	return xReturn;
 793              		.loc 1 709 0
 794 0070 3B69     		ldr	r3, [r7, #16]
 710:Source/stream_buffer.c **** }
 795              		.loc 1 710 0
 796 0072 1846     		mov	r0, r3
 797 0074 1837     		adds	r7, r7, #24
 798              		.cfi_def_cfa_offset 8
 799 0076 BD46     		mov	sp, r7
 800              		.cfi_def_cfa_register 13
 801              		@ sp needed
 802 0078 80BD     		pop	{r7, pc}
 803              		.cfi_endproc
 804              	.LFE76:
 805              		.size	prvWriteMessageToBuffer, .-prvWriteMessageToBuffer
 806 007a 00BF     		.section	.text.xStreamBufferReceive,"ax",%progbits
 807              		.align	2
 808              		.global	xStreamBufferReceive
 809              		.thumb
 810              		.thumb_func
 811              		.type	xStreamBufferReceive, %function
 812              	xStreamBufferReceive:
 813              	.LFB77:
 711:Source/stream_buffer.c **** /*-----------------------------------------------------------*/
 712:Source/stream_buffer.c **** 
 713:Source/stream_buffer.c **** size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
 714:Source/stream_buffer.c **** 							 void *pvRxData,
 715:Source/stream_buffer.c **** 							 size_t xBufferLengthBytes,
 716:Source/stream_buffer.c **** 							 TickType_t xTicksToWait )
 717:Source/stream_buffer.c **** {
 814              		.loc 1 717 0
 815              		.cfi_startproc
 816              		@ args = 0, pretend = 0, frame = 32
 817              		@ frame_needed = 1, uses_anonymous_args = 0
 818 0000 80B5     		push	{r7, lr}
ARM GAS  C:\Users\Gusta\AppData\Local\Temp\ccugn2Vx.s 			page 32


 819              		.cfi_def_cfa_offset 8
 820              		.cfi_offset 7, -8
 821              		.cfi_offset 14, -4
 822 0002 8AB0     		sub	sp, sp, #40
 823              		.cfi_def_cfa_offset 48
 824 0004 02AF     		add	r7, sp, #8
 825              		.cfi_def_cfa 7, 40
 826 0006 F860     		str	r0, [r7, #12]
 827 0008 B960     		str	r1, [r7, #8]
 828 000a 7A60     		str	r2, [r7, #4]
 829 000c 3B60     		str	r3, [r7]
 718:Source/stream_buffer.c **** StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 830              		.loc 1 718 0
 831 000e FB68     		ldr	r3, [r7, #12]
 832 0010 3B61     		str	r3, [r7, #16]
 719:Source/stream_buffer.c **** size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
 833              		.loc 1 719 0
 834 0012 0023     		movs	r3, #0
 835 0014 FB61     		str	r3, [r7, #28]
 720:Source/stream_buffer.c **** 
 721:Source/stream_buffer.c **** 	configASSERT( pvRxData );
 722:Source/stream_buffer.c **** 	configASSERT( pxStreamBuffer );
 723:Source/stream_buffer.c **** 
 724:Source/stream_buffer.c **** 	/* This receive function is used by both message buffers, which store
 725:Source/stream_buffer.c **** 	discrete messages, and stream buffers, which store a continuous stream of
 726:Source/stream_buffer.c **** 	bytes.  Discrete messages include an additional
 727:Source/stream_buffer.c **** 	sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
 728:Source/stream_buffer.c **** 	message. */
 729:Source/stream_buffer.c **** 	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 836              		.loc 1 729 0
 837 0016 3B69     		ldr	r3, [r7, #16]
 838 0018 1B7F     		ldrb	r3, [r3, #28]	@ zero_extendqisi2
 839 001a 03F00103 		and	r3, r3, #1
 840 001e 002B     		cmp	r3, #0
 841 0020 02D0     		beq	.L51
 730:Source/stream_buffer.c **** 	{
 731:Source/stream_buffer.c **** 		xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
 842              		.loc 1 731 0
 843 0022 0423     		movs	r3, #4
 844 0024 7B61     		str	r3, [r7, #20]
 845 0026 01E0     		b	.L52
 846              	.L51:
 732:Source/stream_buffer.c **** 	}
 733:Source/stream_buffer.c **** 	else
 734:Source/stream_buffer.c **** 	{
 735:Source/stream_buffer.c **** 		xBytesToStoreMessageLength = 0;
 847              		.loc 1 735 0
 848 0028 0023     		movs	r3, #0
 849 002a 7B61     		str	r3, [r7, #20]
 850              	.L52:
 736:Source/stream_buffer.c **** 	}
 737:Source/stream_buffer.c **** 
 738:Source/stream_buffer.c **** 	if( xTicksToWait != ( TickType_t ) 0 )
 851              		.loc 1 738 0
 852 002c 3B68     		ldr	r3, [r7]
 853 002e 002B     		cmp	r3, #0
 854 0030 25D0     		beq	.L53
ARM GAS  C:\Users\Gusta\AppData\Local\Temp\ccugn2Vx.s 			page 33


 739:Source/stream_buffer.c **** 	{
 740:Source/stream_buffer.c **** 		/* Checking if there is data and clearing the notification state must be
 741:Source/stream_buffer.c **** 		performed atomically. */
 742:Source/stream_buffer.c **** 		taskENTER_CRITICAL();
 855              		.loc 1 742 0
 856 0032 FFF7FEFF 		bl	vPortEnterCritical
 743:Source/stream_buffer.c **** 		{
 744:Source/stream_buffer.c **** 			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 857              		.loc 1 744 0
 858 0036 3869     		ldr	r0, [r7, #16]
 859 0038 FFF7FEFF 		bl	prvBytesInBuffer
 860 003c B861     		str	r0, [r7, #24]
 745:Source/stream_buffer.c **** 
 746:Source/stream_buffer.c **** 			/* If this function was invoked by a message buffer read then
 747:Source/stream_buffer.c **** 			xBytesToStoreMessageLength holds the number of bytes used to hold
 748:Source/stream_buffer.c **** 			the length of the next discrete message.  If this function was
 749:Source/stream_buffer.c **** 			invoked by a stream buffer read then xBytesToStoreMessageLength will
 750:Source/stream_buffer.c **** 			be 0. */
 751:Source/stream_buffer.c **** 			if( xBytesAvailable <= xBytesToStoreMessageLength )
 861              		.loc 1 751 0
 862 003e BA69     		ldr	r2, [r7, #24]
 863 0040 7B69     		ldr	r3, [r7, #20]
 864 0042 9A42     		cmp	r2, r3
 865 0044 07D8     		bhi	.L54
 752:Source/stream_buffer.c **** 			{
 753:Source/stream_buffer.c **** 				/* Clear notification state as going to wait for data. */
 754:Source/stream_buffer.c **** 				( void ) xTaskNotifyStateClear( NULL );
 866              		.loc 1 754 0
 867 0046 0020     		movs	r0, #0
 868 0048 FFF7FEFF 		bl	xTaskNotifyStateClear
 755:Source/stream_buffer.c **** 
 756:Source/stream_buffer.c **** 				/* Should only be one reader. */
 757:Source/stream_buffer.c **** 				configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
 758:Source/stream_buffer.c **** 				pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
 869              		.loc 1 758 0
 870 004c FFF7FEFF 		bl	xTaskGetCurrentTaskHandle
 871 0050 0246     		mov	r2, r0
 872 0052 3B69     		ldr	r3, [r7, #16]
 873 0054 1A61     		str	r2, [r3, #16]
 874              	.L54:
 759:Source/stream_buffer.c **** 			}
 760:Source/stream_buffer.c **** 			else
 761:Source/stream_buffer.c **** 			{
 762:Source/stream_buffer.c **** 				mtCOVERAGE_TEST_MARKER();
 763:Source/stream_buffer.c **** 			}
 764:Source/stream_buffer.c **** 		}
 765:Source/stream_buffer.c **** 		taskEXIT_CRITICAL();
 875              		.loc 1 765 0
 876 0056 FFF7FEFF 		bl	vPortExitCritical
 766:Source/stream_buffer.c **** 
 767:Source/stream_buffer.c **** 		if( xBytesAvailable <= xBytesToStoreMessageLength )
 877              		.loc 1 767 0
 878 005a BA69     		ldr	r2, [r7, #24]
 879 005c 7B69     		ldr	r3, [r7, #20]
 880 005e 9A42     		cmp	r2, r3
 881 0060 11D8     		bhi	.L55
 768:Source/stream_buffer.c **** 		{
ARM GAS  C:\Users\Gusta\AppData\Local\Temp\ccugn2Vx.s 			page 34


 769:Source/stream_buffer.c **** 			/* Wait for data to be available. */
 770:Source/stream_buffer.c **** 			traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
 771:Source/stream_buffer.c **** 			( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 882              		.loc 1 771 0
 883 0062 3B68     		ldr	r3, [r7]
 884 0064 0022     		movs	r2, #0
 885 0066 0021     		movs	r1, #0
 886 0068 0020     		movs	r0, #0
 887 006a FFF7FEFF 		bl	xTaskNotifyWait
 772:Source/stream_buffer.c **** 			pxStreamBuffer->xTaskWaitingToReceive = NULL;
 888              		.loc 1 772 0
 889 006e 3B69     		ldr	r3, [r7, #16]
 890 0070 0022     		movs	r2, #0
 891 0072 1A61     		str	r2, [r3, #16]
 773:Source/stream_buffer.c **** 
 774:Source/stream_buffer.c **** 			/* Recheck the data available after blocking. */
 775:Source/stream_buffer.c **** 			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 892              		.loc 1 775 0
 893 0074 3869     		ldr	r0, [r7, #16]
 894 0076 FFF7FEFF 		bl	prvBytesInBuffer
 895 007a B861     		str	r0, [r7, #24]
 896 007c 03E0     		b	.L55
 897              	.L53:
 776:Source/stream_buffer.c **** 		}
 777:Source/stream_buffer.c **** 		else
 778:Source/stream_buffer.c **** 		{
 779:Source/stream_buffer.c **** 			mtCOVERAGE_TEST_MARKER();
 780:Source/stream_buffer.c **** 		}
 781:Source/stream_buffer.c **** 	}
 782:Source/stream_buffer.c **** 	else
 783:Source/stream_buffer.c **** 	{
 784:Source/stream_buffer.c **** 		xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 898              		.loc 1 784 0
 899 007e 3869     		ldr	r0, [r7, #16]
 900 0080 FFF7FEFF 		bl	prvBytesInBuffer
 901 0084 B861     		str	r0, [r7, #24]
 902              	.L55:
 785:Source/stream_buffer.c **** 	}
 786:Source/stream_buffer.c **** 
 787:Source/stream_buffer.c **** 	/* Whether receiving a discrete message (where xBytesToStoreMessageLength
 788:Source/stream_buffer.c **** 	holds the number of bytes used to store the message length) or a stream of
 789:Source/stream_buffer.c **** 	bytes (where xBytesToStoreMessageLength is zero), the number of bytes
 790:Source/stream_buffer.c **** 	available must be greater than xBytesToStoreMessageLength to be able to
 791:Source/stream_buffer.c **** 	read bytes from the buffer. */
 792:Source/stream_buffer.c **** 	if( xBytesAvailable > xBytesToStoreMessageLength )
 903              		.loc 1 792 0
 904 0086 BA69     		ldr	r2, [r7, #24]
 905 0088 7B69     		ldr	r3, [r7, #20]
 906 008a 9A42     		cmp	r2, r3
 907 008c 1DD9     		bls	.L56
 793:Source/stream_buffer.c **** 	{
 794:Source/stream_buffer.c **** 		xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesA
 908              		.loc 1 794 0
 909 008e 7B69     		ldr	r3, [r7, #20]
 910 0090 0093     		str	r3, [sp]
 911 0092 BB69     		ldr	r3, [r7, #24]
 912 0094 7A68     		ldr	r2, [r7, #4]
ARM GAS  C:\Users\Gusta\AppData\Local\Temp\ccugn2Vx.s 			page 35


 913 0096 B968     		ldr	r1, [r7, #8]
 914 0098 3869     		ldr	r0, [r7, #16]
 915 009a FFF7FEFF 		bl	prvReadMessageFromBuffer
 916 009e F861     		str	r0, [r7, #28]
 795:Source/stream_buffer.c **** 
 796:Source/stream_buffer.c **** 		/* Was a task waiting for space in the buffer? */
 797:Source/stream_buffer.c **** 		if( xReceivedLength != ( size_t ) 0 )
 917              		.loc 1 797 0
 918 00a0 FB69     		ldr	r3, [r7, #28]
 919 00a2 002B     		cmp	r3, #0
 920 00a4 11D0     		beq	.L56
 798:Source/stream_buffer.c **** 		{
 799:Source/stream_buffer.c **** 			traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
 800:Source/stream_buffer.c **** 			sbRECEIVE_COMPLETED( pxStreamBuffer );
 921              		.loc 1 800 0
 922 00a6 FFF7FEFF 		bl	vTaskSuspendAll
 923 00aa 3B69     		ldr	r3, [r7, #16]
 924 00ac 5B69     		ldr	r3, [r3, #20]
 925 00ae 002B     		cmp	r3, #0
 926 00b0 09D0     		beq	.L57
 927              		.loc 1 800 0 is_stmt 0 discriminator 1
 928 00b2 3B69     		ldr	r3, [r7, #16]
 929 00b4 5869     		ldr	r0, [r3, #20]
 930 00b6 0023     		movs	r3, #0
 931 00b8 0022     		movs	r2, #0
 932 00ba 0021     		movs	r1, #0
 933 00bc FFF7FEFF 		bl	xTaskGenericNotify
 934 00c0 3B69     		ldr	r3, [r7, #16]
 935 00c2 0022     		movs	r2, #0
 936 00c4 5A61     		str	r2, [r3, #20]
 937              	.L57:
 938              		.loc 1 800 0 discriminator 3
 939 00c6 FFF7FEFF 		bl	xTaskResumeAll
 940              	.L56:
 801:Source/stream_buffer.c **** 		}
 802:Source/stream_buffer.c **** 		else
 803:Source/stream_buffer.c **** 		{
 804:Source/stream_buffer.c **** 			mtCOVERAGE_TEST_MARKER();
 805:Source/stream_buffer.c **** 		}
 806:Source/stream_buffer.c **** 	}
 807:Source/stream_buffer.c **** 	else
 808:Source/stream_buffer.c **** 	{
 809:Source/stream_buffer.c **** 		traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
 810:Source/stream_buffer.c **** 		mtCOVERAGE_TEST_MARKER();
 811:Source/stream_buffer.c **** 	}
 812:Source/stream_buffer.c **** 
 813:Source/stream_buffer.c **** 	return xReceivedLength;
 941              		.loc 1 813 0 is_stmt 1
 942 00ca FB69     		ldr	r3, [r7, #28]
 814:Source/stream_buffer.c **** }
 943              		.loc 1 814 0
 944 00cc 1846     		mov	r0, r3
 945 00ce 2037     		adds	r7, r7, #32
 946              		.cfi_def_cfa_offset 8
 947 00d0 BD46     		mov	sp, r7
 948              		.cfi_def_cfa_register 13
 949              		@ sp needed
ARM GAS  C:\Users\Gusta\AppData\Local\Temp\ccugn2Vx.s 			page 36


 950 00d2 80BD     		pop	{r7, pc}
 951              		.cfi_endproc
 952              	.LFE77:
 953              		.size	xStreamBufferReceive, .-xStreamBufferReceive
 954              		.section	.text.xStreamBufferNextMessageLengthBytes,"ax",%progbits
 955              		.align	2
 956              		.global	xStreamBufferNextMessageLengthBytes
 957              		.thumb
 958              		.thumb_func
 959              		.type	xStreamBufferNextMessageLengthBytes, %function
 960              	xStreamBufferNextMessageLengthBytes:
 961              	.LFB78:
 815:Source/stream_buffer.c **** /*-----------------------------------------------------------*/
 816:Source/stream_buffer.c **** 
 817:Source/stream_buffer.c **** size_t xStreamBufferNextMessageLengthBytes( StreamBufferHandle_t xStreamBuffer )
 818:Source/stream_buffer.c **** {
 962              		.loc 1 818 0
 963              		.cfi_startproc
 964              		@ args = 0, pretend = 0, frame = 32
 965              		@ frame_needed = 1, uses_anonymous_args = 0
 966 0000 80B5     		push	{r7, lr}
 967              		.cfi_def_cfa_offset 8
 968              		.cfi_offset 7, -8
 969              		.cfi_offset 14, -4
 970 0002 88B0     		sub	sp, sp, #32
 971              		.cfi_def_cfa_offset 40
 972 0004 00AF     		add	r7, sp, #0
 973              		.cfi_def_cfa_register 7
 974 0006 7860     		str	r0, [r7, #4]
 819:Source/stream_buffer.c **** StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 975              		.loc 1 819 0
 976 0008 7B68     		ldr	r3, [r7, #4]
 977 000a BB61     		str	r3, [r7, #24]
 820:Source/stream_buffer.c **** size_t xReturn, xBytesAvailable, xOriginalTail;
 821:Source/stream_buffer.c **** configMESSAGE_BUFFER_LENGTH_TYPE xTempReturn;
 822:Source/stream_buffer.c **** 
 823:Source/stream_buffer.c **** 	configASSERT( pxStreamBuffer );
 824:Source/stream_buffer.c **** 
 825:Source/stream_buffer.c **** 	/* Ensure the stream buffer is being used as a message buffer. */
 826:Source/stream_buffer.c **** 	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 978              		.loc 1 826 0
 979 000c BB69     		ldr	r3, [r7, #24]
 980 000e 1B7F     		ldrb	r3, [r3, #28]	@ zero_extendqisi2
 981 0010 03F00103 		and	r3, r3, #1
 982 0014 002B     		cmp	r3, #0
 983 0016 19D0     		beq	.L60
 827:Source/stream_buffer.c **** 	{
 828:Source/stream_buffer.c **** 		xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 984              		.loc 1 828 0
 985 0018 B869     		ldr	r0, [r7, #24]
 986 001a FFF7FEFF 		bl	prvBytesInBuffer
 987 001e 7861     		str	r0, [r7, #20]
 829:Source/stream_buffer.c **** 		if( xBytesAvailable > sbBYTES_TO_STORE_MESSAGE_LENGTH )
 988              		.loc 1 829 0
 989 0020 7B69     		ldr	r3, [r7, #20]
 990 0022 042B     		cmp	r3, #4
 991 0024 0FD9     		bls	.L61
ARM GAS  C:\Users\Gusta\AppData\Local\Temp\ccugn2Vx.s 			page 37


 830:Source/stream_buffer.c **** 		{
 831:Source/stream_buffer.c **** 			/* The number of bytes available is greater than the number of bytes
 832:Source/stream_buffer.c **** 			required to hold the length of the next message, so another message
 833:Source/stream_buffer.c **** 			is available.  Return its length without removing the length bytes
 834:Source/stream_buffer.c **** 			from the buffer.  A copy of the tail is stored so the buffer can be
 835:Source/stream_buffer.c **** 			returned to its prior state as the message is not actually being
 836:Source/stream_buffer.c **** 			removed from the buffer. */
 837:Source/stream_buffer.c **** 			xOriginalTail = pxStreamBuffer->xTail;
 992              		.loc 1 837 0
 993 0026 BB69     		ldr	r3, [r7, #24]
 994 0028 1B68     		ldr	r3, [r3]
 995 002a 3B61     		str	r3, [r7, #16]
 838:Source/stream_buffer.c **** 			( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempReturn, sbBYTES_TO_STORE_ME
 996              		.loc 1 838 0
 997 002c 07F10C01 		add	r1, r7, #12
 998 0030 7B69     		ldr	r3, [r7, #20]
 999 0032 0422     		movs	r2, #4
 1000 0034 B869     		ldr	r0, [r7, #24]
 1001 0036 FFF7FEFF 		bl	prvReadBytesFromBuffer
 839:Source/stream_buffer.c **** 			xReturn = ( size_t ) xTempReturn;
 1002              		.loc 1 839 0
 1003 003a FB68     		ldr	r3, [r7, #12]
 1004 003c FB61     		str	r3, [r7, #28]
 840:Source/stream_buffer.c **** 			pxStreamBuffer->xTail = xOriginalTail;
 1005              		.loc 1 840 0
 1006 003e BB69     		ldr	r3, [r7, #24]
 1007 0040 3A69     		ldr	r2, [r7, #16]
 1008 0042 1A60     		str	r2, [r3]
 1009 0044 04E0     		b	.L63
 1010              	.L61:
 841:Source/stream_buffer.c **** 		}
 842:Source/stream_buffer.c **** 		else
 843:Source/stream_buffer.c **** 		{
 844:Source/stream_buffer.c **** 			/* The minimum amount of bytes in a message buffer is
 845:Source/stream_buffer.c **** 			( sbBYTES_TO_STORE_MESSAGE_LENGTH + 1 ), so if xBytesAvailable is
 846:Source/stream_buffer.c **** 			less than sbBYTES_TO_STORE_MESSAGE_LENGTH the only other valid
 847:Source/stream_buffer.c **** 			value is 0. */
 848:Source/stream_buffer.c **** 			configASSERT( xBytesAvailable == 0 );
 849:Source/stream_buffer.c **** 			xReturn = 0;
 1011              		.loc 1 849 0
 1012 0046 0023     		movs	r3, #0
 1013 0048 FB61     		str	r3, [r7, #28]
 1014 004a 01E0     		b	.L63
 1015              	.L60:
 850:Source/stream_buffer.c **** 		}
 851:Source/stream_buffer.c **** 	}
 852:Source/stream_buffer.c **** 	else
 853:Source/stream_buffer.c **** 	{
 854:Source/stream_buffer.c **** 		xReturn = 0;
 1016              		.loc 1 854 0
 1017 004c 0023     		movs	r3, #0
 1018 004e FB61     		str	r3, [r7, #28]
 1019              	.L63:
 855:Source/stream_buffer.c **** 	}
 856:Source/stream_buffer.c **** 
 857:Source/stream_buffer.c **** 	return xReturn;
 1020              		.loc 1 857 0
ARM GAS  C:\Users\Gusta\AppData\Local\Temp\ccugn2Vx.s 			page 38


 1021 0050 FB69     		ldr	r3, [r7, #28]
 858:Source/stream_buffer.c **** }
 1022              		.loc 1 858 0
 1023 0052 1846     		mov	r0, r3
 1024 0054 2037     		adds	r7, r7, #32
 1025              		.cfi_def_cfa_offset 8
 1026 0056 BD46     		mov	sp, r7
 1027              		.cfi_def_cfa_register 13
 1028              		@ sp needed
 1029 0058 80BD     		pop	{r7, pc}
 1030              		.cfi_endproc
 1031              	.LFE78:
 1032              		.size	xStreamBufferNextMessageLengthBytes, .-xStreamBufferNextMessageLengthBytes
 1033 005a 00BF     		.section	.text.xStreamBufferReceiveFromISR,"ax",%progbits
 1034              		.align	2
 1035              		.global	xStreamBufferReceiveFromISR
 1036              		.thumb
 1037              		.thumb_func
 1038              		.type	xStreamBufferReceiveFromISR, %function
 1039              	xStreamBufferReceiveFromISR:
 1040              	.LFB79:
 859:Source/stream_buffer.c **** /*-----------------------------------------------------------*/
 860:Source/stream_buffer.c **** 
 861:Source/stream_buffer.c **** size_t xStreamBufferReceiveFromISR( StreamBufferHandle_t xStreamBuffer,
 862:Source/stream_buffer.c **** 									void *pvRxData,
 863:Source/stream_buffer.c **** 									size_t xBufferLengthBytes,
 864:Source/stream_buffer.c **** 									BaseType_t * const pxHigherPriorityTaskWoken )
 865:Source/stream_buffer.c **** {
 1041              		.loc 1 865 0
 1042              		.cfi_startproc
 1043              		@ args = 0, pretend = 0, frame = 48
 1044              		@ frame_needed = 1, uses_anonymous_args = 0
 1045 0000 80B5     		push	{r7, lr}
 1046              		.cfi_def_cfa_offset 8
 1047              		.cfi_offset 7, -8
 1048              		.cfi_offset 14, -4
 1049 0002 8EB0     		sub	sp, sp, #56
 1050              		.cfi_def_cfa_offset 64
 1051 0004 02AF     		add	r7, sp, #8
 1052              		.cfi_def_cfa 7, 56
 1053 0006 F860     		str	r0, [r7, #12]
 1054 0008 B960     		str	r1, [r7, #8]
 1055 000a 7A60     		str	r2, [r7, #4]
 1056 000c 3B60     		str	r3, [r7]
 866:Source/stream_buffer.c **** StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 1057              		.loc 1 866 0
 1058 000e FB68     		ldr	r3, [r7, #12]
 1059 0010 7B62     		str	r3, [r7, #36]
 867:Source/stream_buffer.c **** size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
 1060              		.loc 1 867 0
 1061 0012 0023     		movs	r3, #0
 1062 0014 FB62     		str	r3, [r7, #44]
 868:Source/stream_buffer.c **** 
 869:Source/stream_buffer.c **** 	configASSERT( pvRxData );
 870:Source/stream_buffer.c **** 	configASSERT( pxStreamBuffer );
 871:Source/stream_buffer.c **** 
 872:Source/stream_buffer.c **** 	/* This receive function is used by both message buffers, which store
ARM GAS  C:\Users\Gusta\AppData\Local\Temp\ccugn2Vx.s 			page 39


 873:Source/stream_buffer.c **** 	discrete messages, and stream buffers, which store a continuous stream of
 874:Source/stream_buffer.c **** 	bytes.  Discrete messages include an additional
 875:Source/stream_buffer.c **** 	sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
 876:Source/stream_buffer.c **** 	message. */
 877:Source/stream_buffer.c **** 	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 1063              		.loc 1 877 0
 1064 0016 7B6A     		ldr	r3, [r7, #36]
 1065 0018 1B7F     		ldrb	r3, [r3, #28]	@ zero_extendqisi2
 1066 001a 03F00103 		and	r3, r3, #1
 1067 001e 002B     		cmp	r3, #0
 1068 0020 02D0     		beq	.L66
 878:Source/stream_buffer.c **** 	{
 879:Source/stream_buffer.c **** 		xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
 1069              		.loc 1 879 0
 1070 0022 0423     		movs	r3, #4
 1071 0024 BB62     		str	r3, [r7, #40]
 1072 0026 01E0     		b	.L67
 1073              	.L66:
 880:Source/stream_buffer.c **** 	}
 881:Source/stream_buffer.c **** 	else
 882:Source/stream_buffer.c **** 	{
 883:Source/stream_buffer.c **** 		xBytesToStoreMessageLength = 0;
 1074              		.loc 1 883 0
 1075 0028 0023     		movs	r3, #0
 1076 002a BB62     		str	r3, [r7, #40]
 1077              	.L67:
 884:Source/stream_buffer.c **** 	}
 885:Source/stream_buffer.c **** 
 886:Source/stream_buffer.c **** 	xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 1078              		.loc 1 886 0
 1079 002c 786A     		ldr	r0, [r7, #36]
 1080 002e FFF7FEFF 		bl	prvBytesInBuffer
 1081 0032 3862     		str	r0, [r7, #32]
 887:Source/stream_buffer.c **** 
 888:Source/stream_buffer.c **** 	/* Whether receiving a discrete message (where xBytesToStoreMessageLength
 889:Source/stream_buffer.c **** 	holds the number of bytes used to store the message length) or a stream of
 890:Source/stream_buffer.c **** 	bytes (where xBytesToStoreMessageLength is zero), the number of bytes
 891:Source/stream_buffer.c **** 	available must be greater than xBytesToStoreMessageLength to be able to
 892:Source/stream_buffer.c **** 	read bytes from the buffer. */
 893:Source/stream_buffer.c **** 	if( xBytesAvailable > xBytesToStoreMessageLength )
 1082              		.loc 1 893 0
 1083 0034 3A6A     		ldr	r2, [r7, #32]
 1084 0036 BB6A     		ldr	r3, [r7, #40]
 1085 0038 9A42     		cmp	r2, r3
 1086 003a 2ED9     		bls	.L68
 894:Source/stream_buffer.c **** 	{
 895:Source/stream_buffer.c **** 		xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesA
 1087              		.loc 1 895 0
 1088 003c BB6A     		ldr	r3, [r7, #40]
 1089 003e 0093     		str	r3, [sp]
 1090 0040 3B6A     		ldr	r3, [r7, #32]
 1091 0042 7A68     		ldr	r2, [r7, #4]
 1092 0044 B968     		ldr	r1, [r7, #8]
 1093 0046 786A     		ldr	r0, [r7, #36]
 1094 0048 FFF7FEFF 		bl	prvReadMessageFromBuffer
 1095 004c F862     		str	r0, [r7, #44]
 896:Source/stream_buffer.c **** 
ARM GAS  C:\Users\Gusta\AppData\Local\Temp\ccugn2Vx.s 			page 40


 897:Source/stream_buffer.c **** 		/* Was a task waiting for space in the buffer? */
 898:Source/stream_buffer.c **** 		if( xReceivedLength != ( size_t ) 0 )
 1096              		.loc 1 898 0
 1097 004e FB6A     		ldr	r3, [r7, #44]
 1098 0050 002B     		cmp	r3, #0
 1099 0052 22D0     		beq	.L68
 1100              	.LBB25:
 1101              	.LBB26:
 1102              	.LBB27:
 213:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	(
 1103              		.loc 2 213 0
 1104              		.syntax unified
 1105              	@ 213 ".\Source\portable\GCC\ARM_CM3/portmacro.h" 1
 1106 0054 EFF31182 			mrs r2, basepri											
 1107 0058 4FF0A003 		mov r3, #160												
 1108 005c 83F31188 		msr basepri, r3											
 1109 0060 BFF36F8F 		isb														
 1110 0064 BFF34F8F 		dsb														
 1111              	
 1112              	@ 0 "" 2
 1113              		.thumb
 1114              		.syntax unified
 1115 0068 7A61     		str	r2, [r7, #20]
 1116 006a 3B61     		str	r3, [r7, #16]
 225:.\Source\portable\GCC\ARM_CM3/portmacro.h **** }
 1117              		.loc 2 225 0
 1118 006c 7B69     		ldr	r3, [r7, #20]
 1119              	.LBE27:
 1120              	.LBE26:
 899:Source/stream_buffer.c **** 		{
 900:Source/stream_buffer.c **** 			sbRECEIVE_COMPLETED_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
 1121              		.loc 1 900 0
 1122 006e BB61     		str	r3, [r7, #24]
 1123 0070 7B6A     		ldr	r3, [r7, #36]
 1124 0072 5B69     		ldr	r3, [r3, #20]
 1125 0074 002B     		cmp	r3, #0
 1126 0076 0BD0     		beq	.L70
 1127              		.loc 1 900 0 is_stmt 0 discriminator 1
 1128 0078 7B6A     		ldr	r3, [r7, #36]
 1129 007a 5869     		ldr	r0, [r3, #20]
 1130 007c 3B68     		ldr	r3, [r7]
 1131 007e 0093     		str	r3, [sp]
 1132 0080 0023     		movs	r3, #0
 1133 0082 0022     		movs	r2, #0
 1134 0084 0021     		movs	r1, #0
 1135 0086 FFF7FEFF 		bl	xTaskGenericNotifyFromISR
 1136 008a 7B6A     		ldr	r3, [r7, #36]
 1137 008c 0022     		movs	r2, #0
 1138 008e 5A61     		str	r2, [r3, #20]
 1139              	.L70:
 1140 0090 BB69     		ldr	r3, [r7, #24]
 1141 0092 FB61     		str	r3, [r7, #28]
 1142              	.LBB28:
 1143              	.LBB29:
 1144              		.loc 2 231 0 is_stmt 1 discriminator 3
 1145 0094 FB69     		ldr	r3, [r7, #28]
 1146              		.syntax unified
ARM GAS  C:\Users\Gusta\AppData\Local\Temp\ccugn2Vx.s 			page 41


 1147              	@ 231 ".\Source\portable\GCC\ARM_CM3/portmacro.h" 1
 1148 0096 83F31188 			msr basepri, r3	
 1149              	@ 0 "" 2
 1150              		.thumb
 1151              		.syntax unified
 1152              	.L68:
 1153              	.LBE29:
 1154              	.LBE28:
 1155              	.LBE25:
 901:Source/stream_buffer.c **** 		}
 902:Source/stream_buffer.c **** 		else
 903:Source/stream_buffer.c **** 		{
 904:Source/stream_buffer.c **** 			mtCOVERAGE_TEST_MARKER();
 905:Source/stream_buffer.c **** 		}
 906:Source/stream_buffer.c **** 	}
 907:Source/stream_buffer.c **** 	else
 908:Source/stream_buffer.c **** 	{
 909:Source/stream_buffer.c **** 		mtCOVERAGE_TEST_MARKER();
 910:Source/stream_buffer.c **** 	}
 911:Source/stream_buffer.c **** 
 912:Source/stream_buffer.c **** 	traceSTREAM_BUFFER_RECEIVE_FROM_ISR( xStreamBuffer, xReceivedLength );
 913:Source/stream_buffer.c **** 
 914:Source/stream_buffer.c **** 	return xReceivedLength;
 1156              		.loc 1 914 0
 1157 009a FB6A     		ldr	r3, [r7, #44]
 915:Source/stream_buffer.c **** }
 1158              		.loc 1 915 0
 1159 009c 1846     		mov	r0, r3
 1160 009e 3037     		adds	r7, r7, #48
 1161              		.cfi_def_cfa_offset 8
 1162 00a0 BD46     		mov	sp, r7
 1163              		.cfi_def_cfa_register 13
 1164              		@ sp needed
 1165 00a2 80BD     		pop	{r7, pc}
 1166              		.cfi_endproc
 1167              	.LFE79:
 1168              		.size	xStreamBufferReceiveFromISR, .-xStreamBufferReceiveFromISR
 1169              		.section	.text.prvReadMessageFromBuffer,"ax",%progbits
 1170              		.align	2
 1171              		.thumb
 1172              		.thumb_func
 1173              		.type	prvReadMessageFromBuffer, %function
 1174              	prvReadMessageFromBuffer:
 1175              	.LFB80:
 916:Source/stream_buffer.c **** /*-----------------------------------------------------------*/
 917:Source/stream_buffer.c **** 
 918:Source/stream_buffer.c **** static size_t prvReadMessageFromBuffer( StreamBuffer_t *pxStreamBuffer,
 919:Source/stream_buffer.c **** 										void *pvRxData,
 920:Source/stream_buffer.c **** 										size_t xBufferLengthBytes,
 921:Source/stream_buffer.c **** 										size_t xBytesAvailable,
 922:Source/stream_buffer.c **** 										size_t xBytesToStoreMessageLength )
 923:Source/stream_buffer.c **** {
 1176              		.loc 1 923 0
 1177              		.cfi_startproc
 1178              		@ args = 4, pretend = 0, frame = 32
 1179              		@ frame_needed = 1, uses_anonymous_args = 0
 1180 0000 80B5     		push	{r7, lr}
ARM GAS  C:\Users\Gusta\AppData\Local\Temp\ccugn2Vx.s 			page 42


 1181              		.cfi_def_cfa_offset 8
 1182              		.cfi_offset 7, -8
 1183              		.cfi_offset 14, -4
 1184 0002 88B0     		sub	sp, sp, #32
 1185              		.cfi_def_cfa_offset 40
 1186 0004 00AF     		add	r7, sp, #0
 1187              		.cfi_def_cfa_register 7
 1188 0006 F860     		str	r0, [r7, #12]
 1189 0008 B960     		str	r1, [r7, #8]
 1190 000a 7A60     		str	r2, [r7, #4]
 1191 000c 3B60     		str	r3, [r7]
 924:Source/stream_buffer.c **** size_t xOriginalTail, xReceivedLength, xNextMessageLength;
 925:Source/stream_buffer.c **** configMESSAGE_BUFFER_LENGTH_TYPE xTempNextMessageLength;
 926:Source/stream_buffer.c **** 
 927:Source/stream_buffer.c **** 	if( xBytesToStoreMessageLength != ( size_t ) 0 )
 1192              		.loc 1 927 0
 1193 000e BB6A     		ldr	r3, [r7, #40]
 1194 0010 002B     		cmp	r3, #0
 1195 0012 19D0     		beq	.L73
 928:Source/stream_buffer.c **** 	{
 929:Source/stream_buffer.c **** 		/* A discrete message is being received.  First receive the length
 930:Source/stream_buffer.c **** 		of the message.  A copy of the tail is stored so the buffer can be
 931:Source/stream_buffer.c **** 		returned to its prior state if the length of the message is too
 932:Source/stream_buffer.c **** 		large for the provided buffer. */
 933:Source/stream_buffer.c **** 		xOriginalTail = pxStreamBuffer->xTail;
 1196              		.loc 1 933 0
 1197 0014 FB68     		ldr	r3, [r7, #12]
 1198 0016 1B68     		ldr	r3, [r3]
 1199 0018 BB61     		str	r3, [r7, #24]
 934:Source/stream_buffer.c **** 		( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToS
 1200              		.loc 1 934 0
 1201 001a 07F11001 		add	r1, r7, #16
 1202 001e 3B68     		ldr	r3, [r7]
 1203 0020 BA6A     		ldr	r2, [r7, #40]
 1204 0022 F868     		ldr	r0, [r7, #12]
 1205 0024 FFF7FEFF 		bl	prvReadBytesFromBuffer
 935:Source/stream_buffer.c **** 		xNextMessageLength = ( size_t ) xTempNextMessageLength;
 1206              		.loc 1 935 0
 1207 0028 3B69     		ldr	r3, [r7, #16]
 1208 002a FB61     		str	r3, [r7, #28]
 936:Source/stream_buffer.c **** 
 937:Source/stream_buffer.c **** 		/* Reduce the number of bytes available by the number of bytes just
 938:Source/stream_buffer.c **** 		read out. */
 939:Source/stream_buffer.c **** 		xBytesAvailable -= xBytesToStoreMessageLength;
 1209              		.loc 1 939 0
 1210 002c 3A68     		ldr	r2, [r7]
 1211 002e BB6A     		ldr	r3, [r7, #40]
 1212 0030 D31A     		subs	r3, r2, r3
 1213 0032 3B60     		str	r3, [r7]
 940:Source/stream_buffer.c **** 
 941:Source/stream_buffer.c **** 		/* Check there is enough space in the buffer provided by the
 942:Source/stream_buffer.c **** 		user. */
 943:Source/stream_buffer.c **** 		if( xNextMessageLength > xBufferLengthBytes )
 1214              		.loc 1 943 0
 1215 0034 FA69     		ldr	r2, [r7, #28]
 1216 0036 7B68     		ldr	r3, [r7, #4]
 1217 0038 9A42     		cmp	r2, r3
ARM GAS  C:\Users\Gusta\AppData\Local\Temp\ccugn2Vx.s 			page 43


 1218 003a 07D9     		bls	.L74
 944:Source/stream_buffer.c **** 		{
 945:Source/stream_buffer.c **** 			/* The user has provided insufficient space to read the message
 946:Source/stream_buffer.c **** 			so return the buffer to its previous state (so the length of
 947:Source/stream_buffer.c **** 			the message is in the buffer again). */
 948:Source/stream_buffer.c **** 			pxStreamBuffer->xTail = xOriginalTail;
 1219              		.loc 1 948 0
 1220 003c FB68     		ldr	r3, [r7, #12]
 1221 003e BA69     		ldr	r2, [r7, #24]
 1222 0040 1A60     		str	r2, [r3]
 949:Source/stream_buffer.c **** 			xNextMessageLength = 0;
 1223              		.loc 1 949 0
 1224 0042 0023     		movs	r3, #0
 1225 0044 FB61     		str	r3, [r7, #28]
 1226 0046 01E0     		b	.L74
 1227              	.L73:
 950:Source/stream_buffer.c **** 		}
 951:Source/stream_buffer.c **** 		else
 952:Source/stream_buffer.c **** 		{
 953:Source/stream_buffer.c **** 			mtCOVERAGE_TEST_MARKER();
 954:Source/stream_buffer.c **** 		}
 955:Source/stream_buffer.c **** 	}
 956:Source/stream_buffer.c **** 	else
 957:Source/stream_buffer.c **** 	{
 958:Source/stream_buffer.c **** 		/* A stream of bytes is being received (as opposed to a discrete
 959:Source/stream_buffer.c **** 		message), so read as many bytes as possible. */
 960:Source/stream_buffer.c **** 		xNextMessageLength = xBufferLengthBytes;
 1228              		.loc 1 960 0
 1229 0048 7B68     		ldr	r3, [r7, #4]
 1230 004a FB61     		str	r3, [r7, #28]
 1231              	.L74:
 961:Source/stream_buffer.c **** 	}
 962:Source/stream_buffer.c **** 
 963:Source/stream_buffer.c **** 	/* Read the actual data. */
 964:Source/stream_buffer.c **** 	xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLeng
 1232              		.loc 1 964 0
 1233 004c 3B68     		ldr	r3, [r7]
 1234 004e FA69     		ldr	r2, [r7, #28]
 1235 0050 B968     		ldr	r1, [r7, #8]
 1236 0052 F868     		ldr	r0, [r7, #12]
 1237 0054 FFF7FEFF 		bl	prvReadBytesFromBuffer
 1238 0058 7861     		str	r0, [r7, #20]
 965:Source/stream_buffer.c **** 
 966:Source/stream_buffer.c **** 	return xReceivedLength;
 1239              		.loc 1 966 0
 1240 005a 7B69     		ldr	r3, [r7, #20]
 967:Source/stream_buffer.c **** }
 1241              		.loc 1 967 0
 1242 005c 1846     		mov	r0, r3
 1243 005e 2037     		adds	r7, r7, #32
 1244              		.cfi_def_cfa_offset 8
 1245 0060 BD46     		mov	sp, r7
 1246              		.cfi_def_cfa_register 13
 1247              		@ sp needed
 1248 0062 80BD     		pop	{r7, pc}
 1249              		.cfi_endproc
 1250              	.LFE80:
ARM GAS  C:\Users\Gusta\AppData\Local\Temp\ccugn2Vx.s 			page 44


 1251              		.size	prvReadMessageFromBuffer, .-prvReadMessageFromBuffer
 1252              		.section	.text.xStreamBufferIsEmpty,"ax",%progbits
 1253              		.align	2
 1254              		.global	xStreamBufferIsEmpty
 1255              		.thumb
 1256              		.thumb_func
 1257              		.type	xStreamBufferIsEmpty, %function
 1258              	xStreamBufferIsEmpty:
 1259              	.LFB81:
 968:Source/stream_buffer.c **** /*-----------------------------------------------------------*/
 969:Source/stream_buffer.c **** 
 970:Source/stream_buffer.c **** BaseType_t xStreamBufferIsEmpty( StreamBufferHandle_t xStreamBuffer )
 971:Source/stream_buffer.c **** {
 1260              		.loc 1 971 0
 1261              		.cfi_startproc
 1262              		@ args = 0, pretend = 0, frame = 24
 1263              		@ frame_needed = 1, uses_anonymous_args = 0
 1264              		@ link register save eliminated.
 1265 0000 80B4     		push	{r7}
 1266              		.cfi_def_cfa_offset 4
 1267              		.cfi_offset 7, -4
 1268 0002 87B0     		sub	sp, sp, #28
 1269              		.cfi_def_cfa_offset 32
 1270 0004 00AF     		add	r7, sp, #0
 1271              		.cfi_def_cfa_register 7
 1272 0006 7860     		str	r0, [r7, #4]
 972:Source/stream_buffer.c **** const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 1273              		.loc 1 972 0
 1274 0008 7B68     		ldr	r3, [r7, #4]
 1275 000a 3B61     		str	r3, [r7, #16]
 973:Source/stream_buffer.c **** BaseType_t xReturn;
 974:Source/stream_buffer.c **** size_t xTail;
 975:Source/stream_buffer.c **** 
 976:Source/stream_buffer.c **** 	configASSERT( pxStreamBuffer );
 977:Source/stream_buffer.c **** 
 978:Source/stream_buffer.c **** 	/* True if no bytes are available. */
 979:Source/stream_buffer.c **** 	xTail = pxStreamBuffer->xTail;
 1276              		.loc 1 979 0
 1277 000c 3B69     		ldr	r3, [r7, #16]
 1278 000e 1B68     		ldr	r3, [r3]
 1279 0010 FB60     		str	r3, [r7, #12]
 980:Source/stream_buffer.c **** 	if( pxStreamBuffer->xHead == xTail )
 1280              		.loc 1 980 0
 1281 0012 3B69     		ldr	r3, [r7, #16]
 1282 0014 5A68     		ldr	r2, [r3, #4]
 1283 0016 FB68     		ldr	r3, [r7, #12]
 1284 0018 9A42     		cmp	r2, r3
 1285 001a 02D1     		bne	.L77
 981:Source/stream_buffer.c **** 	{
 982:Source/stream_buffer.c **** 		xReturn = pdTRUE;
 1286              		.loc 1 982 0
 1287 001c 0123     		movs	r3, #1
 1288 001e 7B61     		str	r3, [r7, #20]
 1289 0020 01E0     		b	.L78
 1290              	.L77:
 983:Source/stream_buffer.c **** 	}
 984:Source/stream_buffer.c **** 	else
ARM GAS  C:\Users\Gusta\AppData\Local\Temp\ccugn2Vx.s 			page 45


 985:Source/stream_buffer.c **** 	{
 986:Source/stream_buffer.c **** 		xReturn = pdFALSE;
 1291              		.loc 1 986 0
 1292 0022 0023     		movs	r3, #0
 1293 0024 7B61     		str	r3, [r7, #20]
 1294              	.L78:
 987:Source/stream_buffer.c **** 	}
 988:Source/stream_buffer.c **** 
 989:Source/stream_buffer.c **** 	return xReturn;
 1295              		.loc 1 989 0
 1296 0026 7B69     		ldr	r3, [r7, #20]
 990:Source/stream_buffer.c **** }
 1297              		.loc 1 990 0
 1298 0028 1846     		mov	r0, r3
 1299 002a 1C37     		adds	r7, r7, #28
 1300              		.cfi_def_cfa_offset 4
 1301 002c BD46     		mov	sp, r7
 1302              		.cfi_def_cfa_register 13
 1303              		@ sp needed
 1304 002e 80BC     		pop	{r7}
 1305              		.cfi_restore 7
 1306              		.cfi_def_cfa_offset 0
 1307 0030 7047     		bx	lr
 1308              		.cfi_endproc
 1309              	.LFE81:
 1310              		.size	xStreamBufferIsEmpty, .-xStreamBufferIsEmpty
 1311 0032 00BF     		.section	.text.xStreamBufferIsFull,"ax",%progbits
 1312              		.align	2
 1313              		.global	xStreamBufferIsFull
 1314              		.thumb
 1315              		.thumb_func
 1316              		.type	xStreamBufferIsFull, %function
 1317              	xStreamBufferIsFull:
 1318              	.LFB82:
 991:Source/stream_buffer.c **** /*-----------------------------------------------------------*/
 992:Source/stream_buffer.c **** 
 993:Source/stream_buffer.c **** BaseType_t xStreamBufferIsFull( StreamBufferHandle_t xStreamBuffer )
 994:Source/stream_buffer.c **** {
 1319              		.loc 1 994 0
 1320              		.cfi_startproc
 1321              		@ args = 0, pretend = 0, frame = 24
 1322              		@ frame_needed = 1, uses_anonymous_args = 0
 1323 0000 80B5     		push	{r7, lr}
 1324              		.cfi_def_cfa_offset 8
 1325              		.cfi_offset 7, -8
 1326              		.cfi_offset 14, -4
 1327 0002 86B0     		sub	sp, sp, #24
 1328              		.cfi_def_cfa_offset 32
 1329 0004 00AF     		add	r7, sp, #0
 1330              		.cfi_def_cfa_register 7
 1331 0006 7860     		str	r0, [r7, #4]
 995:Source/stream_buffer.c **** BaseType_t xReturn;
 996:Source/stream_buffer.c **** size_t xBytesToStoreMessageLength;
 997:Source/stream_buffer.c **** const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 1332              		.loc 1 997 0
 1333 0008 7B68     		ldr	r3, [r7, #4]
 1334 000a FB60     		str	r3, [r7, #12]
ARM GAS  C:\Users\Gusta\AppData\Local\Temp\ccugn2Vx.s 			page 46


 998:Source/stream_buffer.c **** 
 999:Source/stream_buffer.c **** 	configASSERT( pxStreamBuffer );
1000:Source/stream_buffer.c **** 
1001:Source/stream_buffer.c **** 	/* This generic version of the receive function is used by both message
1002:Source/stream_buffer.c **** 	buffers, which store discrete messages, and stream buffers, which store a
1003:Source/stream_buffer.c **** 	continuous stream of bytes.  Discrete messages include an additional
1004:Source/stream_buffer.c **** 	sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the message. */
1005:Source/stream_buffer.c **** 	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 1335              		.loc 1 1005 0
 1336 000c FB68     		ldr	r3, [r7, #12]
 1337 000e 1B7F     		ldrb	r3, [r3, #28]	@ zero_extendqisi2
 1338 0010 03F00103 		and	r3, r3, #1
 1339 0014 002B     		cmp	r3, #0
 1340 0016 02D0     		beq	.L81
1006:Source/stream_buffer.c **** 	{
1007:Source/stream_buffer.c **** 		xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
 1341              		.loc 1 1007 0
 1342 0018 0423     		movs	r3, #4
 1343 001a 3B61     		str	r3, [r7, #16]
 1344 001c 01E0     		b	.L82
 1345              	.L81:
1008:Source/stream_buffer.c **** 	}
1009:Source/stream_buffer.c **** 	else
1010:Source/stream_buffer.c **** 	{
1011:Source/stream_buffer.c **** 		xBytesToStoreMessageLength = 0;
 1346              		.loc 1 1011 0
 1347 001e 0023     		movs	r3, #0
 1348 0020 3B61     		str	r3, [r7, #16]
 1349              	.L82:
1012:Source/stream_buffer.c **** 	}
1013:Source/stream_buffer.c **** 
1014:Source/stream_buffer.c **** 	/* True if the available space equals zero. */
1015:Source/stream_buffer.c **** 	if( xStreamBufferSpacesAvailable( xStreamBuffer ) <= xBytesToStoreMessageLength )
 1350              		.loc 1 1015 0
 1351 0022 7868     		ldr	r0, [r7, #4]
 1352 0024 FFF7FEFF 		bl	xStreamBufferSpacesAvailable
 1353 0028 0246     		mov	r2, r0
 1354 002a 3B69     		ldr	r3, [r7, #16]
 1355 002c 9A42     		cmp	r2, r3
 1356 002e 02D8     		bhi	.L83
1016:Source/stream_buffer.c **** 	{
1017:Source/stream_buffer.c **** 		xReturn = pdTRUE;
 1357              		.loc 1 1017 0
 1358 0030 0123     		movs	r3, #1
 1359 0032 7B61     		str	r3, [r7, #20]
 1360 0034 01E0     		b	.L84
 1361              	.L83:
1018:Source/stream_buffer.c **** 	}
1019:Source/stream_buffer.c **** 	else
1020:Source/stream_buffer.c **** 	{
1021:Source/stream_buffer.c **** 		xReturn = pdFALSE;
 1362              		.loc 1 1021 0
 1363 0036 0023     		movs	r3, #0
 1364 0038 7B61     		str	r3, [r7, #20]
 1365              	.L84:
1022:Source/stream_buffer.c **** 	}
1023:Source/stream_buffer.c **** 
ARM GAS  C:\Users\Gusta\AppData\Local\Temp\ccugn2Vx.s 			page 47


1024:Source/stream_buffer.c **** 	return xReturn;
 1366              		.loc 1 1024 0
 1367 003a 7B69     		ldr	r3, [r7, #20]
1025:Source/stream_buffer.c **** }
 1368              		.loc 1 1025 0
 1369 003c 1846     		mov	r0, r3
 1370 003e 1837     		adds	r7, r7, #24
 1371              		.cfi_def_cfa_offset 8
 1372 0040 BD46     		mov	sp, r7
 1373              		.cfi_def_cfa_register 13
 1374              		@ sp needed
 1375 0042 80BD     		pop	{r7, pc}
 1376              		.cfi_endproc
 1377              	.LFE82:
 1378              		.size	xStreamBufferIsFull, .-xStreamBufferIsFull
 1379              		.section	.text.xStreamBufferSendCompletedFromISR,"ax",%progbits
 1380              		.align	2
 1381              		.global	xStreamBufferSendCompletedFromISR
 1382              		.thumb
 1383              		.thumb_func
 1384              		.type	xStreamBufferSendCompletedFromISR, %function
 1385              	xStreamBufferSendCompletedFromISR:
 1386              	.LFB83:
1026:Source/stream_buffer.c **** /*-----------------------------------------------------------*/
1027:Source/stream_buffer.c **** 
1028:Source/stream_buffer.c **** BaseType_t xStreamBufferSendCompletedFromISR( StreamBufferHandle_t xStreamBuffer, BaseType_t *pxHig
1029:Source/stream_buffer.c **** {
 1387              		.loc 1 1029 0
 1388              		.cfi_startproc
 1389              		@ args = 0, pretend = 0, frame = 32
 1390              		@ frame_needed = 1, uses_anonymous_args = 0
 1391 0000 80B5     		push	{r7, lr}
 1392              		.cfi_def_cfa_offset 8
 1393              		.cfi_offset 7, -8
 1394              		.cfi_offset 14, -4
 1395 0002 8AB0     		sub	sp, sp, #40
 1396              		.cfi_def_cfa_offset 48
 1397 0004 02AF     		add	r7, sp, #8
 1398              		.cfi_def_cfa 7, 40
 1399 0006 7860     		str	r0, [r7, #4]
 1400 0008 3960     		str	r1, [r7]
1030:Source/stream_buffer.c **** StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 1401              		.loc 1 1030 0
 1402 000a 7B68     		ldr	r3, [r7, #4]
 1403 000c BB61     		str	r3, [r7, #24]
 1404              	.LBB30:
 1405              	.LBB31:
 213:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	(
 1406              		.loc 2 213 0
 1407              		.syntax unified
 1408              	@ 213 ".\Source\portable\GCC\ARM_CM3/portmacro.h" 1
 1409 000e EFF31182 			mrs r2, basepri											
 1410 0012 4FF0A003 		mov r3, #160												
 1411 0016 83F31188 		msr basepri, r3											
 1412 001a BFF36F8F 		isb														
 1413 001e BFF34F8F 		dsb														
 1414              	
ARM GAS  C:\Users\Gusta\AppData\Local\Temp\ccugn2Vx.s 			page 48


 1415              	@ 0 "" 2
 1416              		.thumb
 1417              		.syntax unified
 1418 0022 FA60     		str	r2, [r7, #12]
 1419 0024 BB60     		str	r3, [r7, #8]
 225:.\Source\portable\GCC\ARM_CM3/portmacro.h **** }
 1420              		.loc 2 225 0
 1421 0026 FB68     		ldr	r3, [r7, #12]
 1422              	.LBE31:
 1423              	.LBE30:
1031:Source/stream_buffer.c **** BaseType_t xReturn;
1032:Source/stream_buffer.c **** UBaseType_t uxSavedInterruptStatus;
1033:Source/stream_buffer.c **** 
1034:Source/stream_buffer.c **** 	configASSERT( pxStreamBuffer );
1035:Source/stream_buffer.c **** 
1036:Source/stream_buffer.c **** 	uxSavedInterruptStatus = ( UBaseType_t ) portSET_INTERRUPT_MASK_FROM_ISR();
 1424              		.loc 1 1036 0
 1425 0028 3B61     		str	r3, [r7, #16]
1037:Source/stream_buffer.c **** 	{
1038:Source/stream_buffer.c **** 		if( ( pxStreamBuffer )->xTaskWaitingToReceive != NULL )
 1426              		.loc 1 1038 0
 1427 002a BB69     		ldr	r3, [r7, #24]
 1428 002c 1B69     		ldr	r3, [r3, #16]
 1429 002e 002B     		cmp	r3, #0
 1430 0030 0ED0     		beq	.L88
1039:Source/stream_buffer.c **** 		{
1040:Source/stream_buffer.c **** 			( void ) xTaskNotifyFromISR( ( pxStreamBuffer )->xTaskWaitingToReceive,
 1431              		.loc 1 1040 0
 1432 0032 BB69     		ldr	r3, [r7, #24]
 1433 0034 1869     		ldr	r0, [r3, #16]
 1434 0036 3B68     		ldr	r3, [r7]
 1435 0038 0093     		str	r3, [sp]
 1436 003a 0023     		movs	r3, #0
 1437 003c 0022     		movs	r2, #0
 1438 003e 0021     		movs	r1, #0
 1439 0040 FFF7FEFF 		bl	xTaskGenericNotifyFromISR
1041:Source/stream_buffer.c **** 										 ( uint32_t ) 0,
1042:Source/stream_buffer.c **** 										 eNoAction,
1043:Source/stream_buffer.c **** 										 pxHigherPriorityTaskWoken );
1044:Source/stream_buffer.c **** 			( pxStreamBuffer )->xTaskWaitingToReceive = NULL;
 1440              		.loc 1 1044 0
 1441 0044 BB69     		ldr	r3, [r7, #24]
 1442 0046 0022     		movs	r2, #0
 1443 0048 1A61     		str	r2, [r3, #16]
1045:Source/stream_buffer.c **** 			xReturn = pdTRUE;
 1444              		.loc 1 1045 0
 1445 004a 0123     		movs	r3, #1
 1446 004c FB61     		str	r3, [r7, #28]
 1447 004e 01E0     		b	.L89
 1448              	.L88:
1046:Source/stream_buffer.c **** 		}
1047:Source/stream_buffer.c **** 		else
1048:Source/stream_buffer.c **** 		{
1049:Source/stream_buffer.c **** 			xReturn = pdFALSE;
 1449              		.loc 1 1049 0
 1450 0050 0023     		movs	r3, #0
 1451 0052 FB61     		str	r3, [r7, #28]
ARM GAS  C:\Users\Gusta\AppData\Local\Temp\ccugn2Vx.s 			page 49


 1452              	.L89:
 1453 0054 3B69     		ldr	r3, [r7, #16]
 1454 0056 7B61     		str	r3, [r7, #20]
 1455              	.LBB32:
 1456              	.LBB33:
 1457              		.loc 2 231 0
 1458 0058 7B69     		ldr	r3, [r7, #20]
 1459              		.syntax unified
 1460              	@ 231 ".\Source\portable\GCC\ARM_CM3/portmacro.h" 1
 1461 005a 83F31188 			msr basepri, r3	
 1462              	@ 0 "" 2
 1463              		.thumb
 1464              		.syntax unified
 1465              	.LBE33:
 1466              	.LBE32:
1050:Source/stream_buffer.c **** 		}
1051:Source/stream_buffer.c **** 	}
1052:Source/stream_buffer.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1053:Source/stream_buffer.c **** 
1054:Source/stream_buffer.c **** 	return xReturn;
 1467              		.loc 1 1054 0
 1468 005e FB69     		ldr	r3, [r7, #28]
1055:Source/stream_buffer.c **** }
 1469              		.loc 1 1055 0
 1470 0060 1846     		mov	r0, r3
 1471 0062 2037     		adds	r7, r7, #32
 1472              		.cfi_def_cfa_offset 8
 1473 0064 BD46     		mov	sp, r7
 1474              		.cfi_def_cfa_register 13
 1475              		@ sp needed
 1476 0066 80BD     		pop	{r7, pc}
 1477              		.cfi_endproc
 1478              	.LFE83:
 1479              		.size	xStreamBufferSendCompletedFromISR, .-xStreamBufferSendCompletedFromISR
 1480              		.section	.text.xStreamBufferReceiveCompletedFromISR,"ax",%progbits
 1481              		.align	2
 1482              		.global	xStreamBufferReceiveCompletedFromISR
 1483              		.thumb
 1484              		.thumb_func
 1485              		.type	xStreamBufferReceiveCompletedFromISR, %function
 1486              	xStreamBufferReceiveCompletedFromISR:
 1487              	.LFB84:
1056:Source/stream_buffer.c **** /*-----------------------------------------------------------*/
1057:Source/stream_buffer.c **** 
1058:Source/stream_buffer.c **** BaseType_t xStreamBufferReceiveCompletedFromISR( StreamBufferHandle_t xStreamBuffer, BaseType_t *px
1059:Source/stream_buffer.c **** {
 1488              		.loc 1 1059 0
 1489              		.cfi_startproc
 1490              		@ args = 0, pretend = 0, frame = 32
 1491              		@ frame_needed = 1, uses_anonymous_args = 0
 1492 0000 80B5     		push	{r7, lr}
 1493              		.cfi_def_cfa_offset 8
 1494              		.cfi_offset 7, -8
 1495              		.cfi_offset 14, -4
 1496 0002 8AB0     		sub	sp, sp, #40
 1497              		.cfi_def_cfa_offset 48
 1498 0004 02AF     		add	r7, sp, #8
ARM GAS  C:\Users\Gusta\AppData\Local\Temp\ccugn2Vx.s 			page 50


 1499              		.cfi_def_cfa 7, 40
 1500 0006 7860     		str	r0, [r7, #4]
 1501 0008 3960     		str	r1, [r7]
1060:Source/stream_buffer.c **** StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 1502              		.loc 1 1060 0
 1503 000a 7B68     		ldr	r3, [r7, #4]
 1504 000c BB61     		str	r3, [r7, #24]
 1505              	.LBB34:
 1506              	.LBB35:
 213:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	(
 1507              		.loc 2 213 0
 1508              		.syntax unified
 1509              	@ 213 ".\Source\portable\GCC\ARM_CM3/portmacro.h" 1
 1510 000e EFF31182 			mrs r2, basepri											
 1511 0012 4FF0A003 		mov r3, #160												
 1512 0016 83F31188 		msr basepri, r3											
 1513 001a BFF36F8F 		isb														
 1514 001e BFF34F8F 		dsb														
 1515              	
 1516              	@ 0 "" 2
 1517              		.thumb
 1518              		.syntax unified
 1519 0022 FA60     		str	r2, [r7, #12]
 1520 0024 BB60     		str	r3, [r7, #8]
 225:.\Source\portable\GCC\ARM_CM3/portmacro.h **** }
 1521              		.loc 2 225 0
 1522 0026 FB68     		ldr	r3, [r7, #12]
 1523              	.LBE35:
 1524              	.LBE34:
1061:Source/stream_buffer.c **** BaseType_t xReturn;
1062:Source/stream_buffer.c **** UBaseType_t uxSavedInterruptStatus;
1063:Source/stream_buffer.c **** 
1064:Source/stream_buffer.c **** 	configASSERT( pxStreamBuffer );
1065:Source/stream_buffer.c **** 
1066:Source/stream_buffer.c **** 	uxSavedInterruptStatus = ( UBaseType_t ) portSET_INTERRUPT_MASK_FROM_ISR();
 1525              		.loc 1 1066 0
 1526 0028 3B61     		str	r3, [r7, #16]
1067:Source/stream_buffer.c **** 	{
1068:Source/stream_buffer.c **** 		if( ( pxStreamBuffer )->xTaskWaitingToSend != NULL )
 1527              		.loc 1 1068 0
 1528 002a BB69     		ldr	r3, [r7, #24]
 1529 002c 5B69     		ldr	r3, [r3, #20]
 1530 002e 002B     		cmp	r3, #0
 1531 0030 0ED0     		beq	.L93
1069:Source/stream_buffer.c **** 		{
1070:Source/stream_buffer.c **** 			( void ) xTaskNotifyFromISR( ( pxStreamBuffer )->xTaskWaitingToSend,
 1532              		.loc 1 1070 0
 1533 0032 BB69     		ldr	r3, [r7, #24]
 1534 0034 5869     		ldr	r0, [r3, #20]
 1535 0036 3B68     		ldr	r3, [r7]
 1536 0038 0093     		str	r3, [sp]
 1537 003a 0023     		movs	r3, #0
 1538 003c 0022     		movs	r2, #0
 1539 003e 0021     		movs	r1, #0
 1540 0040 FFF7FEFF 		bl	xTaskGenericNotifyFromISR
1071:Source/stream_buffer.c **** 										 ( uint32_t ) 0,
1072:Source/stream_buffer.c **** 										 eNoAction,
ARM GAS  C:\Users\Gusta\AppData\Local\Temp\ccugn2Vx.s 			page 51


1073:Source/stream_buffer.c **** 										 pxHigherPriorityTaskWoken );
1074:Source/stream_buffer.c **** 			( pxStreamBuffer )->xTaskWaitingToSend = NULL;
 1541              		.loc 1 1074 0
 1542 0044 BB69     		ldr	r3, [r7, #24]
 1543 0046 0022     		movs	r2, #0
 1544 0048 5A61     		str	r2, [r3, #20]
1075:Source/stream_buffer.c **** 			xReturn = pdTRUE;
 1545              		.loc 1 1075 0
 1546 004a 0123     		movs	r3, #1
 1547 004c FB61     		str	r3, [r7, #28]
 1548 004e 01E0     		b	.L94
 1549              	.L93:
1076:Source/stream_buffer.c **** 		}
1077:Source/stream_buffer.c **** 		else
1078:Source/stream_buffer.c **** 		{
1079:Source/stream_buffer.c **** 			xReturn = pdFALSE;
 1550              		.loc 1 1079 0
 1551 0050 0023     		movs	r3, #0
 1552 0052 FB61     		str	r3, [r7, #28]
 1553              	.L94:
 1554 0054 3B69     		ldr	r3, [r7, #16]
 1555 0056 7B61     		str	r3, [r7, #20]
 1556              	.LBB36:
 1557              	.LBB37:
 1558              		.loc 2 231 0
 1559 0058 7B69     		ldr	r3, [r7, #20]
 1560              		.syntax unified
 1561              	@ 231 ".\Source\portable\GCC\ARM_CM3/portmacro.h" 1
 1562 005a 83F31188 			msr basepri, r3	
 1563              	@ 0 "" 2
 1564              		.thumb
 1565              		.syntax unified
 1566              	.LBE37:
 1567              	.LBE36:
1080:Source/stream_buffer.c **** 		}
1081:Source/stream_buffer.c **** 	}
1082:Source/stream_buffer.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1083:Source/stream_buffer.c **** 
1084:Source/stream_buffer.c **** 	return xReturn;
 1568              		.loc 1 1084 0
 1569 005e FB69     		ldr	r3, [r7, #28]
1085:Source/stream_buffer.c **** }
 1570              		.loc 1 1085 0
 1571 0060 1846     		mov	r0, r3
 1572 0062 2037     		adds	r7, r7, #32
 1573              		.cfi_def_cfa_offset 8
 1574 0064 BD46     		mov	sp, r7
 1575              		.cfi_def_cfa_register 13
 1576              		@ sp needed
 1577 0066 80BD     		pop	{r7, pc}
 1578              		.cfi_endproc
 1579              	.LFE84:
 1580              		.size	xStreamBufferReceiveCompletedFromISR, .-xStreamBufferReceiveCompletedFromISR
 1581              		.section	.text.prvWriteBytesToBuffer,"ax",%progbits
 1582              		.align	2
 1583              		.thumb
 1584              		.thumb_func
ARM GAS  C:\Users\Gusta\AppData\Local\Temp\ccugn2Vx.s 			page 52


 1585              		.type	prvWriteBytesToBuffer, %function
 1586              	prvWriteBytesToBuffer:
 1587              	.LFB85:
1086:Source/stream_buffer.c **** /*-----------------------------------------------------------*/
1087:Source/stream_buffer.c **** 
1088:Source/stream_buffer.c **** static size_t prvWriteBytesToBuffer( StreamBuffer_t * const pxStreamBuffer, const uint8_t *pucData,
1089:Source/stream_buffer.c **** {
 1588              		.loc 1 1089 0
 1589              		.cfi_startproc
 1590              		@ args = 0, pretend = 0, frame = 24
 1591              		@ frame_needed = 1, uses_anonymous_args = 0
 1592 0000 80B5     		push	{r7, lr}
 1593              		.cfi_def_cfa_offset 8
 1594              		.cfi_offset 7, -8
 1595              		.cfi_offset 14, -4
 1596 0002 86B0     		sub	sp, sp, #24
 1597              		.cfi_def_cfa_offset 32
 1598 0004 00AF     		add	r7, sp, #0
 1599              		.cfi_def_cfa_register 7
 1600 0006 F860     		str	r0, [r7, #12]
 1601 0008 B960     		str	r1, [r7, #8]
 1602 000a 7A60     		str	r2, [r7, #4]
1090:Source/stream_buffer.c **** size_t xNextHead, xFirstLength;
1091:Source/stream_buffer.c **** 
1092:Source/stream_buffer.c **** 	configASSERT( xCount > ( size_t ) 0 );
1093:Source/stream_buffer.c **** 
1094:Source/stream_buffer.c **** 	xNextHead = pxStreamBuffer->xHead;
 1603              		.loc 1 1094 0
 1604 000c FB68     		ldr	r3, [r7, #12]
 1605 000e 5B68     		ldr	r3, [r3, #4]
 1606 0010 7B61     		str	r3, [r7, #20]
1095:Source/stream_buffer.c **** 
1096:Source/stream_buffer.c **** 	/* Calculate the number of bytes that can be added in the first write -
1097:Source/stream_buffer.c **** 	which may be less than the total number of bytes that need to be added if
1098:Source/stream_buffer.c **** 	the buffer will wrap back to the beginning. */
1099:Source/stream_buffer.c **** 	xFirstLength = configMIN( pxStreamBuffer->xLength - xNextHead, xCount );
 1607              		.loc 1 1099 0
 1608 0012 FB68     		ldr	r3, [r7, #12]
 1609 0014 9A68     		ldr	r2, [r3, #8]
 1610 0016 7B69     		ldr	r3, [r7, #20]
 1611 0018 D21A     		subs	r2, r2, r3
 1612 001a 7B68     		ldr	r3, [r7, #4]
 1613 001c 9342     		cmp	r3, r2
 1614 001e 28BF     		it	cs
 1615 0020 1346     		movcs	r3, r2
 1616 0022 3B61     		str	r3, [r7, #16]
1100:Source/stream_buffer.c **** 
1101:Source/stream_buffer.c **** 	/* Write as many bytes as can be written in the first write. */
1102:Source/stream_buffer.c **** 	configASSERT( ( xNextHead + xFirstLength ) <= pxStreamBuffer->xLength );
1103:Source/stream_buffer.c **** 	( void ) memcpy( ( void* ) ( &( pxStreamBuffer->pucBuffer[ xNextHead ] ) ), ( const void * ) pucDa
 1617              		.loc 1 1103 0
 1618 0024 FB68     		ldr	r3, [r7, #12]
 1619 0026 9A69     		ldr	r2, [r3, #24]
 1620 0028 7B69     		ldr	r3, [r7, #20]
 1621 002a 1344     		add	r3, r3, r2
 1622 002c 3A69     		ldr	r2, [r7, #16]
 1623 002e B968     		ldr	r1, [r7, #8]
ARM GAS  C:\Users\Gusta\AppData\Local\Temp\ccugn2Vx.s 			page 53


 1624 0030 1846     		mov	r0, r3
 1625 0032 FFF7FEFF 		bl	memcpy
1104:Source/stream_buffer.c **** 
1105:Source/stream_buffer.c **** 	/* If the number of bytes written was less than the number that could be
1106:Source/stream_buffer.c **** 	written in the first write... */
1107:Source/stream_buffer.c **** 	if( xCount > xFirstLength )
 1626              		.loc 1 1107 0
 1627 0036 7A68     		ldr	r2, [r7, #4]
 1628 0038 3B69     		ldr	r3, [r7, #16]
 1629 003a 9A42     		cmp	r2, r3
 1630 003c 0AD9     		bls	.L97
1108:Source/stream_buffer.c **** 	{
1109:Source/stream_buffer.c **** 		/* ...then write the remaining bytes to the start of the buffer. */
1110:Source/stream_buffer.c **** 		configASSERT( ( xCount - xFirstLength ) <= pxStreamBuffer->xLength );
1111:Source/stream_buffer.c **** 		( void ) memcpy( ( void * ) pxStreamBuffer->pucBuffer, ( const void * ) &( pucData[ xFirstLength 
 1631              		.loc 1 1111 0
 1632 003e FB68     		ldr	r3, [r7, #12]
 1633 0040 9869     		ldr	r0, [r3, #24]
 1634 0042 BA68     		ldr	r2, [r7, #8]
 1635 0044 3B69     		ldr	r3, [r7, #16]
 1636 0046 D118     		adds	r1, r2, r3
 1637 0048 7A68     		ldr	r2, [r7, #4]
 1638 004a 3B69     		ldr	r3, [r7, #16]
 1639 004c D31A     		subs	r3, r2, r3
 1640 004e 1A46     		mov	r2, r3
 1641 0050 FFF7FEFF 		bl	memcpy
 1642              	.L97:
1112:Source/stream_buffer.c **** 	}
1113:Source/stream_buffer.c **** 	else
1114:Source/stream_buffer.c **** 	{
1115:Source/stream_buffer.c **** 		mtCOVERAGE_TEST_MARKER();
1116:Source/stream_buffer.c **** 	}
1117:Source/stream_buffer.c **** 
1118:Source/stream_buffer.c **** 	xNextHead += xCount;
 1643              		.loc 1 1118 0
 1644 0054 7A69     		ldr	r2, [r7, #20]
 1645 0056 7B68     		ldr	r3, [r7, #4]
 1646 0058 1344     		add	r3, r3, r2
 1647 005a 7B61     		str	r3, [r7, #20]
1119:Source/stream_buffer.c **** 	if( xNextHead >= pxStreamBuffer->xLength )
 1648              		.loc 1 1119 0
 1649 005c FB68     		ldr	r3, [r7, #12]
 1650 005e 9A68     		ldr	r2, [r3, #8]
 1651 0060 7B69     		ldr	r3, [r7, #20]
 1652 0062 9A42     		cmp	r2, r3
 1653 0064 04D8     		bhi	.L98
1120:Source/stream_buffer.c **** 	{
1121:Source/stream_buffer.c **** 		xNextHead -= pxStreamBuffer->xLength;
 1654              		.loc 1 1121 0
 1655 0066 FB68     		ldr	r3, [r7, #12]
 1656 0068 9B68     		ldr	r3, [r3, #8]
 1657 006a 7A69     		ldr	r2, [r7, #20]
 1658 006c D31A     		subs	r3, r2, r3
 1659 006e 7B61     		str	r3, [r7, #20]
 1660              	.L98:
1122:Source/stream_buffer.c **** 	}
1123:Source/stream_buffer.c **** 	else
ARM GAS  C:\Users\Gusta\AppData\Local\Temp\ccugn2Vx.s 			page 54


1124:Source/stream_buffer.c **** 	{
1125:Source/stream_buffer.c **** 		mtCOVERAGE_TEST_MARKER();
1126:Source/stream_buffer.c **** 	}
1127:Source/stream_buffer.c **** 
1128:Source/stream_buffer.c **** 	pxStreamBuffer->xHead = xNextHead;
 1661              		.loc 1 1128 0
 1662 0070 FB68     		ldr	r3, [r7, #12]
 1663 0072 7A69     		ldr	r2, [r7, #20]
 1664 0074 5A60     		str	r2, [r3, #4]
1129:Source/stream_buffer.c **** 
1130:Source/stream_buffer.c **** 	return xCount;
 1665              		.loc 1 1130 0
 1666 0076 7B68     		ldr	r3, [r7, #4]
1131:Source/stream_buffer.c **** }
 1667              		.loc 1 1131 0
 1668 0078 1846     		mov	r0, r3
 1669 007a 1837     		adds	r7, r7, #24
 1670              		.cfi_def_cfa_offset 8
 1671 007c BD46     		mov	sp, r7
 1672              		.cfi_def_cfa_register 13
 1673              		@ sp needed
 1674 007e 80BD     		pop	{r7, pc}
 1675              		.cfi_endproc
 1676              	.LFE85:
 1677              		.size	prvWriteBytesToBuffer, .-prvWriteBytesToBuffer
 1678              		.section	.text.prvReadBytesFromBuffer,"ax",%progbits
 1679              		.align	2
 1680              		.thumb
 1681              		.thumb_func
 1682              		.type	prvReadBytesFromBuffer, %function
 1683              	prvReadBytesFromBuffer:
 1684              	.LFB86:
1132:Source/stream_buffer.c **** /*-----------------------------------------------------------*/
1133:Source/stream_buffer.c **** 
1134:Source/stream_buffer.c **** static size_t prvReadBytesFromBuffer( StreamBuffer_t *pxStreamBuffer, uint8_t *pucData, size_t xMax
1135:Source/stream_buffer.c **** {
 1685              		.loc 1 1135 0
 1686              		.cfi_startproc
 1687              		@ args = 0, pretend = 0, frame = 32
 1688              		@ frame_needed = 1, uses_anonymous_args = 0
 1689 0000 80B5     		push	{r7, lr}
 1690              		.cfi_def_cfa_offset 8
 1691              		.cfi_offset 7, -8
 1692              		.cfi_offset 14, -4
 1693 0002 88B0     		sub	sp, sp, #32
 1694              		.cfi_def_cfa_offset 40
 1695 0004 00AF     		add	r7, sp, #0
 1696              		.cfi_def_cfa_register 7
 1697 0006 F860     		str	r0, [r7, #12]
 1698 0008 B960     		str	r1, [r7, #8]
 1699 000a 7A60     		str	r2, [r7, #4]
 1700 000c 3B60     		str	r3, [r7]
1136:Source/stream_buffer.c **** size_t xCount, xFirstLength, xNextTail;
1137:Source/stream_buffer.c **** 
1138:Source/stream_buffer.c **** 	/* Use the minimum of the wanted bytes and the available bytes. */
1139:Source/stream_buffer.c **** 	xCount = configMIN( xBytesAvailable, xMaxCount );
 1701              		.loc 1 1139 0
ARM GAS  C:\Users\Gusta\AppData\Local\Temp\ccugn2Vx.s 			page 55


 1702 000e 7A68     		ldr	r2, [r7, #4]
 1703 0010 3B68     		ldr	r3, [r7]
 1704 0012 9342     		cmp	r3, r2
 1705 0014 28BF     		it	cs
 1706 0016 1346     		movcs	r3, r2
 1707 0018 BB61     		str	r3, [r7, #24]
1140:Source/stream_buffer.c **** 
1141:Source/stream_buffer.c **** 	if( xCount > ( size_t ) 0 )
 1708              		.loc 1 1141 0
 1709 001a BB69     		ldr	r3, [r7, #24]
 1710 001c 002B     		cmp	r3, #0
 1711 001e 34D0     		beq	.L101
1142:Source/stream_buffer.c **** 	{
1143:Source/stream_buffer.c **** 		xNextTail = pxStreamBuffer->xTail;
 1712              		.loc 1 1143 0
 1713 0020 FB68     		ldr	r3, [r7, #12]
 1714 0022 1B68     		ldr	r3, [r3]
 1715 0024 FB61     		str	r3, [r7, #28]
1144:Source/stream_buffer.c **** 
1145:Source/stream_buffer.c **** 		/* Calculate the number of bytes that can be read - which may be
1146:Source/stream_buffer.c **** 		less than the number wanted if the data wraps around to the start of
1147:Source/stream_buffer.c **** 		the buffer. */
1148:Source/stream_buffer.c **** 		xFirstLength = configMIN( pxStreamBuffer->xLength - xNextTail, xCount );
 1716              		.loc 1 1148 0
 1717 0026 FB68     		ldr	r3, [r7, #12]
 1718 0028 9A68     		ldr	r2, [r3, #8]
 1719 002a FB69     		ldr	r3, [r7, #28]
 1720 002c D21A     		subs	r2, r2, r3
 1721 002e BB69     		ldr	r3, [r7, #24]
 1722 0030 9342     		cmp	r3, r2
 1723 0032 28BF     		it	cs
 1724 0034 1346     		movcs	r3, r2
 1725 0036 7B61     		str	r3, [r7, #20]
1149:Source/stream_buffer.c **** 
1150:Source/stream_buffer.c **** 		/* Obtain the number of bytes it is possible to obtain in the first
1151:Source/stream_buffer.c **** 		read.  Asserts check bounds of read and write. */
1152:Source/stream_buffer.c **** 		configASSERT( xFirstLength <= xMaxCount );
1153:Source/stream_buffer.c **** 		configASSERT( ( xNextTail + xFirstLength ) <= pxStreamBuffer->xLength );
1154:Source/stream_buffer.c **** 		( void ) memcpy( ( void * ) pucData, ( const void * ) &( pxStreamBuffer->pucBuffer[ xNextTail ] )
 1726              		.loc 1 1154 0
 1727 0038 FB68     		ldr	r3, [r7, #12]
 1728 003a 9A69     		ldr	r2, [r3, #24]
 1729 003c FB69     		ldr	r3, [r7, #28]
 1730 003e 1344     		add	r3, r3, r2
 1731 0040 7A69     		ldr	r2, [r7, #20]
 1732 0042 1946     		mov	r1, r3
 1733 0044 B868     		ldr	r0, [r7, #8]
 1734 0046 FFF7FEFF 		bl	memcpy
1155:Source/stream_buffer.c **** 
1156:Source/stream_buffer.c **** 		/* If the total number of wanted bytes is greater than the number
1157:Source/stream_buffer.c **** 		that could be read in the first read... */
1158:Source/stream_buffer.c **** 		if( xCount > xFirstLength )
 1735              		.loc 1 1158 0
 1736 004a BA69     		ldr	r2, [r7, #24]
 1737 004c 7B69     		ldr	r3, [r7, #20]
 1738 004e 9A42     		cmp	r2, r3
 1739 0050 0AD9     		bls	.L102
ARM GAS  C:\Users\Gusta\AppData\Local\Temp\ccugn2Vx.s 			page 56


1159:Source/stream_buffer.c **** 		{
1160:Source/stream_buffer.c **** 			/*...then read the remaining bytes from the start of the buffer. */
1161:Source/stream_buffer.c **** 			configASSERT( xCount <= xMaxCount );
1162:Source/stream_buffer.c **** 			( void ) memcpy( ( void * ) &( pucData[ xFirstLength ] ), ( void * ) ( pxStreamBuffer->pucBuffer
 1740              		.loc 1 1162 0
 1741 0052 BA68     		ldr	r2, [r7, #8]
 1742 0054 7B69     		ldr	r3, [r7, #20]
 1743 0056 D018     		adds	r0, r2, r3
 1744 0058 FB68     		ldr	r3, [r7, #12]
 1745 005a 9969     		ldr	r1, [r3, #24]
 1746 005c BA69     		ldr	r2, [r7, #24]
 1747 005e 7B69     		ldr	r3, [r7, #20]
 1748 0060 D31A     		subs	r3, r2, r3
 1749 0062 1A46     		mov	r2, r3
 1750 0064 FFF7FEFF 		bl	memcpy
 1751              	.L102:
1163:Source/stream_buffer.c **** 		}
1164:Source/stream_buffer.c **** 		else
1165:Source/stream_buffer.c **** 		{
1166:Source/stream_buffer.c **** 			mtCOVERAGE_TEST_MARKER();
1167:Source/stream_buffer.c **** 		}
1168:Source/stream_buffer.c **** 
1169:Source/stream_buffer.c **** 		/* Move the tail pointer to effectively remove the data read from
1170:Source/stream_buffer.c **** 		the buffer. */
1171:Source/stream_buffer.c **** 		xNextTail += xCount;
 1752              		.loc 1 1171 0
 1753 0068 FA69     		ldr	r2, [r7, #28]
 1754 006a BB69     		ldr	r3, [r7, #24]
 1755 006c 1344     		add	r3, r3, r2
 1756 006e FB61     		str	r3, [r7, #28]
1172:Source/stream_buffer.c **** 
1173:Source/stream_buffer.c **** 		if( xNextTail >= pxStreamBuffer->xLength )
 1757              		.loc 1 1173 0
 1758 0070 FB68     		ldr	r3, [r7, #12]
 1759 0072 9A68     		ldr	r2, [r3, #8]
 1760 0074 FB69     		ldr	r3, [r7, #28]
 1761 0076 9A42     		cmp	r2, r3
 1762 0078 04D8     		bhi	.L103
1174:Source/stream_buffer.c **** 		{
1175:Source/stream_buffer.c **** 			xNextTail -= pxStreamBuffer->xLength;
 1763              		.loc 1 1175 0
 1764 007a FB68     		ldr	r3, [r7, #12]
 1765 007c 9B68     		ldr	r3, [r3, #8]
 1766 007e FA69     		ldr	r2, [r7, #28]
 1767 0080 D31A     		subs	r3, r2, r3
 1768 0082 FB61     		str	r3, [r7, #28]
 1769              	.L103:
1176:Source/stream_buffer.c **** 		}
1177:Source/stream_buffer.c **** 
1178:Source/stream_buffer.c **** 		pxStreamBuffer->xTail = xNextTail;
 1770              		.loc 1 1178 0
 1771 0084 FB68     		ldr	r3, [r7, #12]
 1772 0086 FA69     		ldr	r2, [r7, #28]
 1773 0088 1A60     		str	r2, [r3]
 1774              	.L101:
1179:Source/stream_buffer.c **** 	}
1180:Source/stream_buffer.c **** 	else
ARM GAS  C:\Users\Gusta\AppData\Local\Temp\ccugn2Vx.s 			page 57


1181:Source/stream_buffer.c **** 	{
1182:Source/stream_buffer.c **** 		mtCOVERAGE_TEST_MARKER();
1183:Source/stream_buffer.c **** 	}
1184:Source/stream_buffer.c **** 
1185:Source/stream_buffer.c **** 	return xCount;
 1775              		.loc 1 1185 0
 1776 008a BB69     		ldr	r3, [r7, #24]
1186:Source/stream_buffer.c **** }
 1777              		.loc 1 1186 0
 1778 008c 1846     		mov	r0, r3
 1779 008e 2037     		adds	r7, r7, #32
 1780              		.cfi_def_cfa_offset 8
 1781 0090 BD46     		mov	sp, r7
 1782              		.cfi_def_cfa_register 13
 1783              		@ sp needed
 1784 0092 80BD     		pop	{r7, pc}
 1785              		.cfi_endproc
 1786              	.LFE86:
 1787              		.size	prvReadBytesFromBuffer, .-prvReadBytesFromBuffer
 1788              		.section	.text.prvBytesInBuffer,"ax",%progbits
 1789              		.align	2
 1790              		.thumb
 1791              		.thumb_func
 1792              		.type	prvBytesInBuffer, %function
 1793              	prvBytesInBuffer:
 1794              	.LFB87:
1187:Source/stream_buffer.c **** /*-----------------------------------------------------------*/
1188:Source/stream_buffer.c **** 
1189:Source/stream_buffer.c **** static size_t prvBytesInBuffer( const StreamBuffer_t * const pxStreamBuffer )
1190:Source/stream_buffer.c **** {
 1795              		.loc 1 1190 0
 1796              		.cfi_startproc
 1797              		@ args = 0, pretend = 0, frame = 16
 1798              		@ frame_needed = 1, uses_anonymous_args = 0
 1799              		@ link register save eliminated.
 1800 0000 80B4     		push	{r7}
 1801              		.cfi_def_cfa_offset 4
 1802              		.cfi_offset 7, -4
 1803 0002 85B0     		sub	sp, sp, #20
 1804              		.cfi_def_cfa_offset 24
 1805 0004 00AF     		add	r7, sp, #0
 1806              		.cfi_def_cfa_register 7
 1807 0006 7860     		str	r0, [r7, #4]
1191:Source/stream_buffer.c **** /* Returns the distance between xTail and xHead. */
1192:Source/stream_buffer.c **** size_t xCount;
1193:Source/stream_buffer.c **** 
1194:Source/stream_buffer.c **** 	xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
 1808              		.loc 1 1194 0
 1809 0008 7B68     		ldr	r3, [r7, #4]
 1810 000a 9A68     		ldr	r2, [r3, #8]
 1811 000c 7B68     		ldr	r3, [r7, #4]
 1812 000e 5B68     		ldr	r3, [r3, #4]
 1813 0010 1344     		add	r3, r3, r2
 1814 0012 FB60     		str	r3, [r7, #12]
1195:Source/stream_buffer.c **** 	xCount -= pxStreamBuffer->xTail;
 1815              		.loc 1 1195 0
 1816 0014 7B68     		ldr	r3, [r7, #4]
ARM GAS  C:\Users\Gusta\AppData\Local\Temp\ccugn2Vx.s 			page 58


 1817 0016 1B68     		ldr	r3, [r3]
 1818 0018 FA68     		ldr	r2, [r7, #12]
 1819 001a D31A     		subs	r3, r2, r3
 1820 001c FB60     		str	r3, [r7, #12]
1196:Source/stream_buffer.c **** 	if ( xCount >= pxStreamBuffer->xLength )
 1821              		.loc 1 1196 0
 1822 001e 7B68     		ldr	r3, [r7, #4]
 1823 0020 9A68     		ldr	r2, [r3, #8]
 1824 0022 FB68     		ldr	r3, [r7, #12]
 1825 0024 9A42     		cmp	r2, r3
 1826 0026 04D8     		bhi	.L106
1197:Source/stream_buffer.c **** 	{
1198:Source/stream_buffer.c **** 		xCount -= pxStreamBuffer->xLength;
 1827              		.loc 1 1198 0
 1828 0028 7B68     		ldr	r3, [r7, #4]
 1829 002a 9B68     		ldr	r3, [r3, #8]
 1830 002c FA68     		ldr	r2, [r7, #12]
 1831 002e D31A     		subs	r3, r2, r3
 1832 0030 FB60     		str	r3, [r7, #12]
 1833              	.L106:
1199:Source/stream_buffer.c **** 	}
1200:Source/stream_buffer.c **** 	else
1201:Source/stream_buffer.c **** 	{
1202:Source/stream_buffer.c **** 		mtCOVERAGE_TEST_MARKER();
1203:Source/stream_buffer.c **** 	}
1204:Source/stream_buffer.c **** 
1205:Source/stream_buffer.c **** 	return xCount;
 1834              		.loc 1 1205 0
 1835 0032 FB68     		ldr	r3, [r7, #12]
1206:Source/stream_buffer.c **** }
 1836              		.loc 1 1206 0
 1837 0034 1846     		mov	r0, r3
 1838 0036 1437     		adds	r7, r7, #20
 1839              		.cfi_def_cfa_offset 4
 1840 0038 BD46     		mov	sp, r7
 1841              		.cfi_def_cfa_register 13
 1842              		@ sp needed
 1843 003a 80BC     		pop	{r7}
 1844              		.cfi_restore 7
 1845              		.cfi_def_cfa_offset 0
 1846 003c 7047     		bx	lr
 1847              		.cfi_endproc
 1848              	.LFE87:
 1849              		.size	prvBytesInBuffer, .-prvBytesInBuffer
 1850 003e 00BF     		.section	.text.prvInitialiseNewStreamBuffer,"ax",%progbits
 1851              		.align	2
 1852              		.thumb
 1853              		.thumb_func
 1854              		.type	prvInitialiseNewStreamBuffer, %function
 1855              	prvInitialiseNewStreamBuffer:
 1856              	.LFB88:
1207:Source/stream_buffer.c **** /*-----------------------------------------------------------*/
1208:Source/stream_buffer.c **** 
1209:Source/stream_buffer.c **** static void prvInitialiseNewStreamBuffer( StreamBuffer_t * const pxStreamBuffer,
1210:Source/stream_buffer.c **** 										  uint8_t * const pucBuffer,
1211:Source/stream_buffer.c **** 										  size_t xBufferSizeBytes,
1212:Source/stream_buffer.c **** 										  size_t xTriggerLevelBytes,
ARM GAS  C:\Users\Gusta\AppData\Local\Temp\ccugn2Vx.s 			page 59


1213:Source/stream_buffer.c **** 										  uint8_t ucFlags )
1214:Source/stream_buffer.c **** {
 1857              		.loc 1 1214 0
 1858              		.cfi_startproc
 1859              		@ args = 4, pretend = 0, frame = 16
 1860              		@ frame_needed = 1, uses_anonymous_args = 0
 1861 0000 80B5     		push	{r7, lr}
 1862              		.cfi_def_cfa_offset 8
 1863              		.cfi_offset 7, -8
 1864              		.cfi_offset 14, -4
 1865 0002 84B0     		sub	sp, sp, #16
 1866              		.cfi_def_cfa_offset 24
 1867 0004 00AF     		add	r7, sp, #0
 1868              		.cfi_def_cfa_register 7
 1869 0006 F860     		str	r0, [r7, #12]
 1870 0008 B960     		str	r1, [r7, #8]
 1871 000a 7A60     		str	r2, [r7, #4]
 1872 000c 3B60     		str	r3, [r7]
1215:Source/stream_buffer.c **** 	/* Assert here is deliberately writing to the entire buffer to ensure it can
1216:Source/stream_buffer.c **** 	be written to without generating exceptions, and is setting the buffer to a
1217:Source/stream_buffer.c **** 	known value to assist in development/debugging. */
1218:Source/stream_buffer.c **** 	#if( configASSERT_DEFINED == 1 )
1219:Source/stream_buffer.c **** 	{
1220:Source/stream_buffer.c **** 		/* The value written just has to be identifiable when looking at the
1221:Source/stream_buffer.c **** 		memory.  Don't use 0xA5 as that is the stack fill value and could
1222:Source/stream_buffer.c **** 		result in confusion as to what is actually being observed. */
1223:Source/stream_buffer.c **** 		const BaseType_t xWriteValue = 0x55;
1224:Source/stream_buffer.c **** 		configASSERT( memset( pucBuffer, ( int ) xWriteValue, xBufferSizeBytes ) == pucBuffer );
1225:Source/stream_buffer.c **** 	} /*lint !e529 !e438 xWriteValue is only used if configASSERT() is defined. */
1226:Source/stream_buffer.c **** 	#endif
1227:Source/stream_buffer.c **** 
1228:Source/stream_buffer.c **** 	( void ) memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) ); /*lint !e9087 memset
 1873              		.loc 1 1228 0
 1874 000e 2022     		movs	r2, #32
 1875 0010 0021     		movs	r1, #0
 1876 0012 F868     		ldr	r0, [r7, #12]
 1877 0014 FFF7FEFF 		bl	memset
1229:Source/stream_buffer.c **** 	pxStreamBuffer->pucBuffer = pucBuffer;
 1878              		.loc 1 1229 0
 1879 0018 FB68     		ldr	r3, [r7, #12]
 1880 001a BA68     		ldr	r2, [r7, #8]
 1881 001c 9A61     		str	r2, [r3, #24]
1230:Source/stream_buffer.c **** 	pxStreamBuffer->xLength = xBufferSizeBytes;
 1882              		.loc 1 1230 0
 1883 001e FB68     		ldr	r3, [r7, #12]
 1884 0020 7A68     		ldr	r2, [r7, #4]
 1885 0022 9A60     		str	r2, [r3, #8]
1231:Source/stream_buffer.c **** 	pxStreamBuffer->xTriggerLevelBytes = xTriggerLevelBytes;
 1886              		.loc 1 1231 0
 1887 0024 FB68     		ldr	r3, [r7, #12]
 1888 0026 3A68     		ldr	r2, [r7]
 1889 0028 DA60     		str	r2, [r3, #12]
1232:Source/stream_buffer.c **** 	pxStreamBuffer->ucFlags = ucFlags;
 1890              		.loc 1 1232 0
 1891 002a FB68     		ldr	r3, [r7, #12]
 1892 002c 3A7E     		ldrb	r2, [r7, #24]
 1893 002e 1A77     		strb	r2, [r3, #28]
ARM GAS  C:\Users\Gusta\AppData\Local\Temp\ccugn2Vx.s 			page 60


1233:Source/stream_buffer.c **** }
 1894              		.loc 1 1233 0
 1895 0030 00BF     		nop
 1896 0032 1037     		adds	r7, r7, #16
 1897              		.cfi_def_cfa_offset 8
 1898 0034 BD46     		mov	sp, r7
 1899              		.cfi_def_cfa_register 13
 1900              		@ sp needed
 1901 0036 80BD     		pop	{r7, pc}
 1902              		.cfi_endproc
 1903              	.LFE88:
 1904              		.size	prvInitialiseNewStreamBuffer, .-prvInitialiseNewStreamBuffer
 1905              		.text
 1906              	.Letext0:
 1907              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.3\\psoc creator\\import\\gnu\\arm\\5.4.
 1908              		.file 4 "c:\\program files (x86)\\cypress\\psoc creator\\4.3\\psoc creator\\import\\gnu\\arm\\5.4.
 1909              		.file 5 "c:\\program files (x86)\\cypress\\psoc creator\\4.3\\psoc creator\\import\\gnu\\arm\\5.4.
 1910              		.file 6 "Generated_Source\\PSoC5/cytypes.h"
 1911              		.file 7 "Generated_Source\\PSoC5/DS18x8.h"
 1912              		.file 8 ".\\Source\\include/task.h"
 1913              		.file 9 ".\\Source\\include/stream_buffer.h"
 1914              		.file 10 "Generated_Source\\PSoC5/core_cm3.h"
 1915              		.section	.debug_info,"",%progbits
 1916              	.Ldebug_info0:
 1917 0000 110D0000 		.4byte	0xd11
 1918 0004 0400     		.2byte	0x4
 1919 0006 00000000 		.4byte	.Ldebug_abbrev0
 1920 000a 04       		.byte	0x4
 1921 000b 01       		.uleb128 0x1
 1922 000c 3B010000 		.4byte	.LASF105
 1923 0010 0C       		.byte	0xc
 1924 0011 24010000 		.4byte	.LASF106
 1925 0015 F3060000 		.4byte	.LASF107
 1926 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1927 001d 00000000 		.4byte	0
 1928 0021 00000000 		.4byte	.Ldebug_line0
 1929 0025 02       		.uleb128 0x2
 1930 0026 01       		.byte	0x1
 1931 0027 06       		.byte	0x6
 1932 0028 E2030000 		.4byte	.LASF0
 1933 002c 03       		.uleb128 0x3
 1934 002d B7070000 		.4byte	.LASF4
 1935 0031 03       		.byte	0x3
 1936 0032 1D       		.byte	0x1d
 1937 0033 37000000 		.4byte	0x37
 1938 0037 02       		.uleb128 0x2
 1939 0038 01       		.byte	0x1
 1940 0039 08       		.byte	0x8
 1941 003a 71030000 		.4byte	.LASF1
 1942 003e 02       		.uleb128 0x2
 1943 003f 02       		.byte	0x2
 1944 0040 05       		.byte	0x5
 1945 0041 BA000000 		.4byte	.LASF2
 1946 0045 02       		.uleb128 0x2
 1947 0046 02       		.byte	0x2
 1948 0047 07       		.byte	0x7
 1949 0048 AB040000 		.4byte	.LASF3
ARM GAS  C:\Users\Gusta\AppData\Local\Temp\ccugn2Vx.s 			page 61


 1950 004c 03       		.uleb128 0x3
 1951 004d 38060000 		.4byte	.LASF5
 1952 0051 03       		.byte	0x3
 1953 0052 3F       		.byte	0x3f
 1954 0053 57000000 		.4byte	0x57
 1955 0057 02       		.uleb128 0x2
 1956 0058 04       		.byte	0x4
 1957 0059 05       		.byte	0x5
 1958 005a CE020000 		.4byte	.LASF6
 1959 005e 03       		.uleb128 0x3
 1960 005f E6010000 		.4byte	.LASF7
 1961 0063 03       		.byte	0x3
 1962 0064 41       		.byte	0x41
 1963 0065 69000000 		.4byte	0x69
 1964 0069 02       		.uleb128 0x2
 1965 006a 04       		.byte	0x4
 1966 006b 07       		.byte	0x7
 1967 006c 83050000 		.4byte	.LASF8
 1968 0070 02       		.uleb128 0x2
 1969 0071 08       		.byte	0x8
 1970 0072 05       		.byte	0x5
 1971 0073 81020000 		.4byte	.LASF9
 1972 0077 02       		.uleb128 0x2
 1973 0078 08       		.byte	0x8
 1974 0079 07       		.byte	0x7
 1975 007a 0B040000 		.4byte	.LASF10
 1976 007e 04       		.uleb128 0x4
 1977 007f 04       		.byte	0x4
 1978 0080 05       		.byte	0x5
 1979 0081 696E7400 		.ascii	"int\000"
 1980 0085 02       		.uleb128 0x2
 1981 0086 04       		.byte	0x4
 1982 0087 07       		.byte	0x7
 1983 0088 5D040000 		.4byte	.LASF11
 1984 008c 03       		.uleb128 0x3
 1985 008d 22020000 		.4byte	.LASF12
 1986 0091 04       		.byte	0x4
 1987 0092 18       		.byte	0x18
 1988 0093 2C000000 		.4byte	0x2c
 1989 0097 03       		.uleb128 0x3
 1990 0098 F9040000 		.4byte	.LASF13
 1991 009c 04       		.byte	0x4
 1992 009d 2C       		.byte	0x2c
 1993 009e 4C000000 		.4byte	0x4c
 1994 00a2 03       		.uleb128 0x3
 1995 00a3 3B040000 		.4byte	.LASF14
 1996 00a7 04       		.byte	0x4
 1997 00a8 30       		.byte	0x30
 1998 00a9 5E000000 		.4byte	0x5e
 1999 00ad 03       		.uleb128 0x3
 2000 00ae C4000000 		.4byte	.LASF15
 2001 00b2 05       		.byte	0x5
 2002 00b3 D8       		.byte	0xd8
 2003 00b4 85000000 		.4byte	0x85
 2004 00b8 02       		.uleb128 0x2
 2005 00b9 08       		.byte	0x8
 2006 00ba 04       		.byte	0x4
ARM GAS  C:\Users\Gusta\AppData\Local\Temp\ccugn2Vx.s 			page 62


 2007 00bb 5D030000 		.4byte	.LASF16
 2008 00bf 02       		.uleb128 0x2
 2009 00c0 04       		.byte	0x4
 2010 00c1 07       		.byte	0x7
 2011 00c2 CB000000 		.4byte	.LASF17
 2012 00c6 05       		.uleb128 0x5
 2013 00c7 04       		.byte	0x4
 2014 00c8 02       		.uleb128 0x2
 2015 00c9 01       		.byte	0x1
 2016 00ca 08       		.byte	0x8
 2017 00cb DD040000 		.4byte	.LASF18
 2018 00cf 06       		.uleb128 0x6
 2019 00d0 29050000 		.4byte	.LASF19
 2020 00d4 06       		.byte	0x6
 2021 00d5 E401     		.2byte	0x1e4
 2022 00d7 37000000 		.4byte	0x37
 2023 00db 06       		.uleb128 0x6
 2024 00dc 62050000 		.4byte	.LASF20
 2025 00e0 06       		.byte	0x6
 2026 00e1 E501     		.2byte	0x1e5
 2027 00e3 45000000 		.4byte	0x45
 2028 00e7 02       		.uleb128 0x2
 2029 00e8 04       		.byte	0x4
 2030 00e9 04       		.byte	0x4
 2031 00ea 6E020000 		.4byte	.LASF21
 2032 00ee 02       		.uleb128 0x2
 2033 00ef 08       		.byte	0x8
 2034 00f0 04       		.byte	0x4
 2035 00f1 C7060000 		.4byte	.LASF22
 2036 00f5 07       		.uleb128 0x7
 2037 00f6 CF000000 		.4byte	0xcf
 2038 00fa 08       		.uleb128 0x8
 2039 00fb 2F050000 		.4byte	.LASF34
 2040 00ff 04       		.byte	0x4
 2041 0100 07       		.byte	0x7
 2042 0101 30       		.byte	0x30
 2043 0102 1F010000 		.4byte	0x11f
 2044 0106 09       		.uleb128 0x9
 2045 0107 B5060000 		.4byte	.LASF23
 2046 010b 07       		.byte	0x7
 2047 010c 31       		.byte	0x31
 2048 010d DB000000 		.4byte	0xdb
 2049 0111 00       		.byte	0
 2050 0112 09       		.uleb128 0x9
 2051 0113 81060000 		.4byte	.LASF24
 2052 0117 07       		.byte	0x7
 2053 0118 32       		.byte	0x32
 2054 0119 CF000000 		.4byte	0xcf
 2055 011d 02       		.byte	0x2
 2056 011e 00       		.byte	0
 2057 011f 03       		.uleb128 0x3
 2058 0120 6A040000 		.4byte	.LASF25
 2059 0124 02       		.byte	0x2
 2060 0125 38       		.byte	0x38
 2061 0126 57000000 		.4byte	0x57
 2062 012a 03       		.uleb128 0x3
 2063 012b B0050000 		.4byte	.LASF26
ARM GAS  C:\Users\Gusta\AppData\Local\Temp\ccugn2Vx.s 			page 63


 2064 012f 02       		.byte	0x2
 2065 0130 39       		.byte	0x39
 2066 0131 69000000 		.4byte	0x69
 2067 0135 03       		.uleb128 0x3
 2068 0136 A0040000 		.4byte	.LASF27
 2069 013a 02       		.byte	0x2
 2070 013b 3F       		.byte	0x3f
 2071 013c A2000000 		.4byte	0xa2
 2072 0140 0A       		.uleb128 0xa
 2073 0141 04       		.byte	0x4
 2074 0142 8C000000 		.4byte	0x8c
 2075 0146 03       		.uleb128 0x3
 2076 0147 E2000000 		.4byte	.LASF28
 2077 014b 08       		.byte	0x8
 2078 014c 46       		.byte	0x46
 2079 014d 51010000 		.4byte	0x151
 2080 0151 0A       		.uleb128 0xa
 2081 0152 04       		.byte	0x4
 2082 0153 57010000 		.4byte	0x157
 2083 0157 0B       		.uleb128 0xb
 2084 0158 FA020000 		.4byte	.LASF108
 2085 015c 0C       		.uleb128 0xc
 2086 015d 01       		.byte	0x1
 2087 015e 37000000 		.4byte	0x37
 2088 0162 08       		.byte	0x8
 2089 0163 5B       		.byte	0x5b
 2090 0164 87010000 		.4byte	0x187
 2091 0168 0D       		.uleb128 0xd
 2092 0169 32000000 		.4byte	.LASF29
 2093 016d 00       		.byte	0
 2094 016e 0D       		.uleb128 0xd
 2095 016f 57020000 		.4byte	.LASF30
 2096 0173 01       		.byte	0x1
 2097 0174 0D       		.uleb128 0xd
 2098 0175 AC070000 		.4byte	.LASF31
 2099 0179 02       		.byte	0x2
 2100 017a 0D       		.uleb128 0xd
 2101 017b E2040000 		.4byte	.LASF32
 2102 017f 03       		.byte	0x3
 2103 0180 0D       		.uleb128 0xd
 2104 0181 1E060000 		.4byte	.LASF33
 2105 0185 04       		.byte	0x4
 2106 0186 00       		.byte	0
 2107 0187 08       		.uleb128 0x8
 2108 0188 7F000000 		.4byte	.LASF35
 2109 018c 08       		.byte	0x8
 2110 018d 08       		.byte	0x8
 2111 018e 66       		.byte	0x66
 2112 018f AC010000 		.4byte	0x1ac
 2113 0193 09       		.uleb128 0x9
 2114 0194 A0030000 		.4byte	.LASF36
 2115 0198 08       		.byte	0x8
 2116 0199 68       		.byte	0x68
 2117 019a 1F010000 		.4byte	0x11f
 2118 019e 00       		.byte	0
 2119 019f 09       		.uleb128 0x9
 2120 01a0 7F030000 		.4byte	.LASF37
ARM GAS  C:\Users\Gusta\AppData\Local\Temp\ccugn2Vx.s 			page 64


 2121 01a4 08       		.byte	0x8
 2122 01a5 69       		.byte	0x69
 2123 01a6 35010000 		.4byte	0x135
 2124 01aa 04       		.byte	0x4
 2125 01ab 00       		.byte	0
 2126 01ac 03       		.uleb128 0x3
 2127 01ad B0000000 		.4byte	.LASF38
 2128 01b1 08       		.byte	0x8
 2129 01b2 6A       		.byte	0x6a
 2130 01b3 87010000 		.4byte	0x187
 2131 01b7 03       		.uleb128 0x3
 2132 01b8 55060000 		.4byte	.LASF39
 2133 01bc 09       		.byte	0x9
 2134 01bd 45       		.byte	0x45
 2135 01be C2010000 		.4byte	0x1c2
 2136 01c2 0A       		.uleb128 0xa
 2137 01c3 04       		.byte	0x4
 2138 01c4 C8010000 		.4byte	0x1c8
 2139 01c8 08       		.uleb128 0x8
 2140 01c9 9E000000 		.4byte	.LASF40
 2141 01cd 20       		.byte	0x20
 2142 01ce 01       		.byte	0x1
 2143 01cf 8D       		.byte	0x8d
 2144 01d0 35020000 		.4byte	0x235
 2145 01d4 09       		.uleb128 0x9
 2146 01d5 D2050000 		.4byte	.LASF41
 2147 01d9 01       		.byte	0x1
 2148 01da 8F       		.byte	0x8f
 2149 01db 35020000 		.4byte	0x235
 2150 01df 00       		.byte	0
 2151 01e0 09       		.uleb128 0x9
 2152 01e1 C1060000 		.4byte	.LASF42
 2153 01e5 01       		.byte	0x1
 2154 01e6 90       		.byte	0x90
 2155 01e7 35020000 		.4byte	0x235
 2156 01eb 04       		.byte	0x4
 2157 01ec 09       		.uleb128 0x9
 2158 01ed 69030000 		.4byte	.LASF43
 2159 01f1 01       		.byte	0x1
 2160 01f2 91       		.byte	0x91
 2161 01f3 AD000000 		.4byte	0xad
 2162 01f7 08       		.byte	0x8
 2163 01f8 09       		.uleb128 0x9
 2164 01f9 4F050000 		.4byte	.LASF44
 2165 01fd 01       		.byte	0x1
 2166 01fe 92       		.byte	0x92
 2167 01ff AD000000 		.4byte	0xad
 2168 0203 0C       		.byte	0xc
 2169 0204 09       		.uleb128 0x9
 2170 0205 CC030000 		.4byte	.LASF45
 2171 0209 01       		.byte	0x1
 2172 020a 93       		.byte	0x93
 2173 020b 3A020000 		.4byte	0x23a
 2174 020f 10       		.byte	0x10
 2175 0210 09       		.uleb128 0x9
 2176 0211 42060000 		.4byte	.LASF46
 2177 0215 01       		.byte	0x1
ARM GAS  C:\Users\Gusta\AppData\Local\Temp\ccugn2Vx.s 			page 65


 2178 0216 94       		.byte	0x94
 2179 0217 3A020000 		.4byte	0x23a
 2180 021b 14       		.byte	0x14
 2181 021c 09       		.uleb128 0x9
 2182 021d 02020000 		.4byte	.LASF47
 2183 0221 01       		.byte	0x1
 2184 0222 95       		.byte	0x95
 2185 0223 40010000 		.4byte	0x140
 2186 0227 18       		.byte	0x18
 2187 0228 09       		.uleb128 0x9
 2188 0229 75040000 		.4byte	.LASF48
 2189 022d 01       		.byte	0x1
 2190 022e 96       		.byte	0x96
 2191 022f 8C000000 		.4byte	0x8c
 2192 0233 1C       		.byte	0x1c
 2193 0234 00       		.byte	0
 2194 0235 07       		.uleb128 0x7
 2195 0236 AD000000 		.4byte	0xad
 2196 023a 07       		.uleb128 0x7
 2197 023b 46010000 		.4byte	0x146
 2198 023f 03       		.uleb128 0x3
 2199 0240 C1070000 		.4byte	.LASF49
 2200 0244 01       		.byte	0x1
 2201 0245 9B       		.byte	0x9b
 2202 0246 C8010000 		.4byte	0x1c8
 2203 024a 0E       		.uleb128 0xe
 2204 024b 44020000 		.4byte	.LASF109
 2205 024f 02       		.byte	0x2
 2206 0250 D1       		.byte	0xd1
 2207 0251 A2000000 		.4byte	0xa2
 2208 0255 03       		.byte	0x3
 2209 0256 71020000 		.4byte	0x271
 2210 025a 0F       		.uleb128 0xf
 2211 025b 20000000 		.4byte	.LASF50
 2212 025f 02       		.byte	0x2
 2213 0260 D3       		.byte	0xd3
 2214 0261 A2000000 		.4byte	0xa2
 2215 0265 0F       		.uleb128 0xf
 2216 0266 57000000 		.4byte	.LASF51
 2217 026a 02       		.byte	0x2
 2218 026b D3       		.byte	0xd3
 2219 026c A2000000 		.4byte	0xa2
 2220 0270 00       		.byte	0
 2221 0271 10       		.uleb128 0x10
 2222 0272 CD040000 		.4byte	.LASF110
 2223 0276 02       		.byte	0x2
 2224 0277 E5       		.byte	0xe5
 2225 0278 03       		.byte	0x3
 2226 0279 89020000 		.4byte	0x289
 2227 027d 11       		.uleb128 0x11
 2228 027e BE040000 		.4byte	.LASF111
 2229 0282 02       		.byte	0x2
 2230 0283 E5       		.byte	0xe5
 2231 0284 A2000000 		.4byte	0xa2
 2232 0288 00       		.byte	0
 2233 0289 12       		.uleb128 0x12
 2234 028a 3C000000 		.4byte	.LASF57
ARM GAS  C:\Users\Gusta\AppData\Local\Temp\ccugn2Vx.s 			page 66


 2235 028e 01       		.byte	0x1
 2236 028f DB       		.byte	0xdb
 2237 0290 B7010000 		.4byte	0x1b7
 2238 0294 00000000 		.4byte	.LFB68
 2239 0298 5C000000 		.4byte	.LFE68-.LFB68
 2240 029c 01       		.uleb128 0x1
 2241 029d 9C       		.byte	0x9c
 2242 029e E9020000 		.4byte	0x2e9
 2243 02a2 13       		.uleb128 0x13
 2244 02a3 8F030000 		.4byte	.LASF52
 2245 02a7 01       		.byte	0x1
 2246 02a8 DB       		.byte	0xdb
 2247 02a9 AD000000 		.4byte	0xad
 2248 02ad 02       		.uleb128 0x2
 2249 02ae 91       		.byte	0x91
 2250 02af 6C       		.sleb128 -20
 2251 02b0 13       		.uleb128 0x13
 2252 02b1 4F050000 		.4byte	.LASF44
 2253 02b5 01       		.byte	0x1
 2254 02b6 DB       		.byte	0xdb
 2255 02b7 AD000000 		.4byte	0xad
 2256 02bb 02       		.uleb128 0x2
 2257 02bc 91       		.byte	0x91
 2258 02bd 68       		.sleb128 -24
 2259 02be 13       		.uleb128 0x13
 2260 02bf 01050000 		.4byte	.LASF53
 2261 02c3 01       		.byte	0x1
 2262 02c4 DB       		.byte	0xdb
 2263 02c5 1F010000 		.4byte	0x11f
 2264 02c9 02       		.uleb128 0x2
 2265 02ca 91       		.byte	0x91
 2266 02cb 64       		.sleb128 -28
 2267 02cc 14       		.uleb128 0x14
 2268 02cd 1A030000 		.4byte	.LASF54
 2269 02d1 01       		.byte	0x1
 2270 02d2 DD       		.byte	0xdd
 2271 02d3 40010000 		.4byte	0x140
 2272 02d7 02       		.uleb128 0x2
 2273 02d8 91       		.byte	0x91
 2274 02d9 70       		.sleb128 -16
 2275 02da 14       		.uleb128 0x14
 2276 02db 75040000 		.4byte	.LASF48
 2277 02df 01       		.byte	0x1
 2278 02e0 DE       		.byte	0xde
 2279 02e1 8C000000 		.4byte	0x8c
 2280 02e5 02       		.uleb128 0x2
 2281 02e6 91       		.byte	0x91
 2282 02e7 77       		.sleb128 -9
 2283 02e8 00       		.byte	0
 2284 02e9 15       		.uleb128 0x15
 2285 02ea 6B000000 		.4byte	.LASF112
 2286 02ee 01       		.byte	0x1
 2287 02ef 6701     		.2byte	0x167
 2288 02f1 00000000 		.4byte	.LFB69
 2289 02f5 32000000 		.4byte	.LFE69-.LFB69
 2290 02f9 01       		.uleb128 0x1
 2291 02fa 9C       		.byte	0x9c
ARM GAS  C:\Users\Gusta\AppData\Local\Temp\ccugn2Vx.s 			page 67


 2292 02fb 1E030000 		.4byte	0x31e
 2293 02ff 16       		.uleb128 0x16
 2294 0300 60020000 		.4byte	.LASF55
 2295 0304 01       		.byte	0x1
 2296 0305 6701     		.2byte	0x167
 2297 0307 B7010000 		.4byte	0x1b7
 2298 030b 02       		.uleb128 0x2
 2299 030c 91       		.byte	0x91
 2300 030d 6C       		.sleb128 -20
 2301 030e 17       		.uleb128 0x17
 2302 030f 2D030000 		.4byte	.LASF56
 2303 0313 01       		.byte	0x1
 2304 0314 6901     		.2byte	0x169
 2305 0316 1E030000 		.4byte	0x31e
 2306 031a 02       		.uleb128 0x2
 2307 031b 91       		.byte	0x91
 2308 031c 74       		.sleb128 -12
 2309 031d 00       		.byte	0
 2310 031e 0A       		.uleb128 0xa
 2311 031f 04       		.byte	0x4
 2312 0320 3F020000 		.4byte	0x23f
 2313 0324 18       		.uleb128 0x18
 2314 0325 70050000 		.4byte	.LASF58
 2315 0329 01       		.byte	0x1
 2316 032a 8801     		.2byte	0x188
 2317 032c 1F010000 		.4byte	0x11f
 2318 0330 00000000 		.4byte	.LFB70
 2319 0334 50000000 		.4byte	.LFE70-.LFB70
 2320 0338 01       		.uleb128 0x1
 2321 0339 9C       		.byte	0x9c
 2322 033a 6C030000 		.4byte	0x36c
 2323 033e 16       		.uleb128 0x16
 2324 033f 60020000 		.4byte	.LASF55
 2325 0343 01       		.byte	0x1
 2326 0344 8801     		.2byte	0x188
 2327 0346 B7010000 		.4byte	0x1b7
 2328 034a 02       		.uleb128 0x2
 2329 034b 91       		.byte	0x91
 2330 034c 6C       		.sleb128 -20
 2331 034d 17       		.uleb128 0x17
 2332 034e 2D030000 		.4byte	.LASF56
 2333 0352 01       		.byte	0x1
 2334 0353 8A01     		.2byte	0x18a
 2335 0355 6C030000 		.4byte	0x36c
 2336 0359 02       		.uleb128 0x2
 2337 035a 91       		.byte	0x91
 2338 035b 70       		.sleb128 -16
 2339 035c 17       		.uleb128 0x17
 2340 035d 89060000 		.4byte	.LASF59
 2341 0361 01       		.byte	0x1
 2342 0362 8B01     		.2byte	0x18b
 2343 0364 1F010000 		.4byte	0x11f
 2344 0368 02       		.uleb128 0x2
 2345 0369 91       		.byte	0x91
 2346 036a 74       		.sleb128 -12
 2347 036b 00       		.byte	0
 2348 036c 19       		.uleb128 0x19
ARM GAS  C:\Users\Gusta\AppData\Local\Temp\ccugn2Vx.s 			page 68


 2349 036d 1E030000 		.4byte	0x31e
 2350 0371 1A       		.uleb128 0x1a
 2351 0372 AF030000 		.4byte	.LASF60
 2352 0376 01       		.byte	0x1
 2353 0377 B901     		.2byte	0x1b9
 2354 0379 1F010000 		.4byte	0x11f
 2355 037d 00000000 		.4byte	.LFB71
 2356 0381 3E000000 		.4byte	.LFE71-.LFB71
 2357 0385 01       		.uleb128 0x1
 2358 0386 9C       		.byte	0x9c
 2359 0387 C8030000 		.4byte	0x3c8
 2360 038b 16       		.uleb128 0x16
 2361 038c 60020000 		.4byte	.LASF55
 2362 0390 01       		.byte	0x1
 2363 0391 B901     		.2byte	0x1b9
 2364 0393 B7010000 		.4byte	0x1b7
 2365 0397 02       		.uleb128 0x2
 2366 0398 91       		.byte	0x91
 2367 0399 6C       		.sleb128 -20
 2368 039a 16       		.uleb128 0x16
 2369 039b D7020000 		.4byte	.LASF61
 2370 039f 01       		.byte	0x1
 2371 03a0 B901     		.2byte	0x1b9
 2372 03a2 AD000000 		.4byte	0xad
 2373 03a6 02       		.uleb128 0x2
 2374 03a7 91       		.byte	0x91
 2375 03a8 68       		.sleb128 -24
 2376 03a9 17       		.uleb128 0x17
 2377 03aa 2D030000 		.4byte	.LASF56
 2378 03ae 01       		.byte	0x1
 2379 03af BB01     		.2byte	0x1bb
 2380 03b1 6C030000 		.4byte	0x36c
 2381 03b5 02       		.uleb128 0x2
 2382 03b6 91       		.byte	0x91
 2383 03b7 70       		.sleb128 -16
 2384 03b8 17       		.uleb128 0x17
 2385 03b9 89060000 		.4byte	.LASF59
 2386 03bd 01       		.byte	0x1
 2387 03be BC01     		.2byte	0x1bc
 2388 03c0 1F010000 		.4byte	0x11f
 2389 03c4 02       		.uleb128 0x2
 2390 03c5 91       		.byte	0x91
 2391 03c6 74       		.sleb128 -12
 2392 03c7 00       		.byte	0
 2393 03c8 1A       		.uleb128 0x1a
 2394 03c9 EE030000 		.4byte	.LASF62
 2395 03cd 01       		.byte	0x1
 2396 03ce D601     		.2byte	0x1d6
 2397 03d0 AD000000 		.4byte	0xad
 2398 03d4 00000000 		.4byte	.LFB72
 2399 03d8 48000000 		.4byte	.LFE72-.LFB72
 2400 03dc 01       		.uleb128 0x1
 2401 03dd 9C       		.byte	0x9c
 2402 03de 10040000 		.4byte	0x410
 2403 03e2 16       		.uleb128 0x16
 2404 03e3 60020000 		.4byte	.LASF55
 2405 03e7 01       		.byte	0x1
ARM GAS  C:\Users\Gusta\AppData\Local\Temp\ccugn2Vx.s 			page 69


 2406 03e8 D601     		.2byte	0x1d6
 2407 03ea B7010000 		.4byte	0x1b7
 2408 03ee 02       		.uleb128 0x2
 2409 03ef 91       		.byte	0x91
 2410 03f0 6C       		.sleb128 -20
 2411 03f1 17       		.uleb128 0x17
 2412 03f2 2D030000 		.4byte	.LASF56
 2413 03f6 01       		.byte	0x1
 2414 03f7 D801     		.2byte	0x1d8
 2415 03f9 1B040000 		.4byte	0x41b
 2416 03fd 02       		.uleb128 0x2
 2417 03fe 91       		.byte	0x91
 2418 03ff 70       		.sleb128 -16
 2419 0400 17       		.uleb128 0x17
 2420 0401 69050000 		.4byte	.LASF63
 2421 0405 01       		.byte	0x1
 2422 0406 D901     		.2byte	0x1d9
 2423 0408 AD000000 		.4byte	0xad
 2424 040c 02       		.uleb128 0x2
 2425 040d 91       		.byte	0x91
 2426 040e 74       		.sleb128 -12
 2427 040f 00       		.byte	0
 2428 0410 0A       		.uleb128 0xa
 2429 0411 04       		.byte	0x4
 2430 0412 16040000 		.4byte	0x416
 2431 0416 19       		.uleb128 0x19
 2432 0417 3F020000 		.4byte	0x23f
 2433 041b 19       		.uleb128 0x19
 2434 041c 10040000 		.4byte	0x410
 2435 0420 18       		.uleb128 0x18
 2436 0421 87070000 		.4byte	.LASF64
 2437 0425 01       		.byte	0x1
 2438 0426 EE01     		.2byte	0x1ee
 2439 0428 AD000000 		.4byte	0xad
 2440 042c 00000000 		.4byte	.LFB73
 2441 0430 1E000000 		.4byte	.LFE73-.LFB73
 2442 0434 01       		.uleb128 0x1
 2443 0435 9C       		.byte	0x9c
 2444 0436 68040000 		.4byte	0x468
 2445 043a 16       		.uleb128 0x16
 2446 043b 60020000 		.4byte	.LASF55
 2447 043f 01       		.byte	0x1
 2448 0440 EE01     		.2byte	0x1ee
 2449 0442 B7010000 		.4byte	0x1b7
 2450 0446 02       		.uleb128 0x2
 2451 0447 91       		.byte	0x91
 2452 0448 6C       		.sleb128 -20
 2453 0449 17       		.uleb128 0x17
 2454 044a 2D030000 		.4byte	.LASF56
 2455 044e 01       		.byte	0x1
 2456 044f F001     		.2byte	0x1f0
 2457 0451 1B040000 		.4byte	0x41b
 2458 0455 02       		.uleb128 0x2
 2459 0456 91       		.byte	0x91
 2460 0457 74       		.sleb128 -12
 2461 0458 17       		.uleb128 0x17
 2462 0459 89060000 		.4byte	.LASF59
ARM GAS  C:\Users\Gusta\AppData\Local\Temp\ccugn2Vx.s 			page 70


 2463 045d 01       		.byte	0x1
 2464 045e F101     		.2byte	0x1f1
 2465 0460 AD000000 		.4byte	0xad
 2466 0464 02       		.uleb128 0x2
 2467 0465 91       		.byte	0x91
 2468 0466 70       		.sleb128 -16
 2469 0467 00       		.byte	0
 2470 0468 18       		.uleb128 0x18
 2471 0469 7D040000 		.4byte	.LASF65
 2472 046d 01       		.byte	0x1
 2473 046e FA01     		.2byte	0x1fa
 2474 0470 AD000000 		.4byte	0xad
 2475 0474 00000000 		.4byte	.LFB74
 2476 0478 F6000000 		.4byte	.LFE74-.LFB74
 2477 047c 01       		.uleb128 0x1
 2478 047d 9C       		.byte	0x9c
 2479 047e 0A050000 		.4byte	0x50a
 2480 0482 16       		.uleb128 0x16
 2481 0483 60020000 		.4byte	.LASF55
 2482 0487 01       		.byte	0x1
 2483 0488 FA01     		.2byte	0x1fa
 2484 048a B7010000 		.4byte	0x1b7
 2485 048e 02       		.uleb128 0x2
 2486 048f 91       		.byte	0x91
 2487 0490 5C       		.sleb128 -36
 2488 0491 16       		.uleb128 0x16
 2489 0492 A3070000 		.4byte	.LASF66
 2490 0496 01       		.byte	0x1
 2491 0497 FB01     		.2byte	0x1fb
 2492 0499 0A050000 		.4byte	0x50a
 2493 049d 02       		.uleb128 0x2
 2494 049e 91       		.byte	0x91
 2495 049f 58       		.sleb128 -40
 2496 04a0 16       		.uleb128 0x16
 2497 04a1 F1010000 		.4byte	.LASF67
 2498 04a5 01       		.byte	0x1
 2499 04a6 FC01     		.2byte	0x1fc
 2500 04a8 AD000000 		.4byte	0xad
 2501 04ac 02       		.uleb128 0x2
 2502 04ad 91       		.byte	0x91
 2503 04ae 54       		.sleb128 -44
 2504 04af 16       		.uleb128 0x16
 2505 04b0 74020000 		.4byte	.LASF68
 2506 04b4 01       		.byte	0x1
 2507 04b5 FD01     		.2byte	0x1fd
 2508 04b7 35010000 		.4byte	0x135
 2509 04bb 02       		.uleb128 0x2
 2510 04bc 91       		.byte	0x91
 2511 04bd 50       		.sleb128 -48
 2512 04be 17       		.uleb128 0x17
 2513 04bf 2D030000 		.4byte	.LASF56
 2514 04c3 01       		.byte	0x1
 2515 04c4 FF01     		.2byte	0x1ff
 2516 04c6 6C030000 		.4byte	0x36c
 2517 04ca 02       		.uleb128 0x2
 2518 04cb 91       		.byte	0x91
 2519 04cc 6C       		.sleb128 -20
ARM GAS  C:\Users\Gusta\AppData\Local\Temp\ccugn2Vx.s 			page 71


 2520 04cd 17       		.uleb128 0x17
 2521 04ce 89060000 		.4byte	.LASF59
 2522 04d2 01       		.byte	0x1
 2523 04d3 0002     		.2byte	0x200
 2524 04d5 AD000000 		.4byte	0xad
 2525 04d9 02       		.uleb128 0x2
 2526 04da 91       		.byte	0x91
 2527 04db 68       		.sleb128 -24
 2528 04dc 17       		.uleb128 0x17
 2529 04dd 69050000 		.4byte	.LASF63
 2530 04e1 01       		.byte	0x1
 2531 04e2 0002     		.2byte	0x200
 2532 04e4 AD000000 		.4byte	0xad
 2533 04e8 02       		.uleb128 0x2
 2534 04e9 91       		.byte	0x91
 2535 04ea 74       		.sleb128 -12
 2536 04eb 17       		.uleb128 0x17
 2537 04ec 8F020000 		.4byte	.LASF69
 2538 04f0 01       		.byte	0x1
 2539 04f1 0102     		.2byte	0x201
 2540 04f3 AD000000 		.4byte	0xad
 2541 04f7 02       		.uleb128 0x2
 2542 04f8 91       		.byte	0x91
 2543 04f9 70       		.sleb128 -16
 2544 04fa 17       		.uleb128 0x17
 2545 04fb 19020000 		.4byte	.LASF70
 2546 04ff 01       		.byte	0x1
 2547 0500 0202     		.2byte	0x202
 2548 0502 AC010000 		.4byte	0x1ac
 2549 0506 02       		.uleb128 0x2
 2550 0507 91       		.byte	0x91
 2551 0508 60       		.sleb128 -32
 2552 0509 00       		.byte	0
 2553 050a 0A       		.uleb128 0xa
 2554 050b 04       		.byte	0x4
 2555 050c 10050000 		.4byte	0x510
 2556 0510 1B       		.uleb128 0x1b
 2557 0511 18       		.uleb128 0x18
 2558 0512 44040000 		.4byte	.LASF71
 2559 0516 01       		.byte	0x1
 2560 0517 6202     		.2byte	0x262
 2561 0519 AD000000 		.4byte	0xad
 2562 051d 00000000 		.4byte	.LFB75
 2563 0521 A8000000 		.4byte	.LFE75-.LFB75
 2564 0525 01       		.uleb128 0x1
 2565 0526 9C       		.byte	0x9c
 2566 0527 05060000 		.4byte	0x605
 2567 052b 16       		.uleb128 0x16
 2568 052c 60020000 		.4byte	.LASF55
 2569 0530 01       		.byte	0x1
 2570 0531 6202     		.2byte	0x262
 2571 0533 B7010000 		.4byte	0x1b7
 2572 0537 02       		.uleb128 0x2
 2573 0538 91       		.byte	0x91
 2574 0539 54       		.sleb128 -44
 2575 053a 16       		.uleb128 0x16
 2576 053b A3070000 		.4byte	.LASF66
ARM GAS  C:\Users\Gusta\AppData\Local\Temp\ccugn2Vx.s 			page 72


 2577 053f 01       		.byte	0x1
 2578 0540 6302     		.2byte	0x263
 2579 0542 0A050000 		.4byte	0x50a
 2580 0546 02       		.uleb128 0x2
 2581 0547 91       		.byte	0x91
 2582 0548 50       		.sleb128 -48
 2583 0549 16       		.uleb128 0x16
 2584 054a F1010000 		.4byte	.LASF67
 2585 054e 01       		.byte	0x1
 2586 054f 6402     		.2byte	0x264
 2587 0551 AD000000 		.4byte	0xad
 2588 0555 02       		.uleb128 0x2
 2589 0556 91       		.byte	0x91
 2590 0557 4C       		.sleb128 -52
 2591 0558 16       		.uleb128 0x16
 2592 0559 91060000 		.4byte	.LASF72
 2593 055d 01       		.byte	0x1
 2594 055e 6502     		.2byte	0x265
 2595 0560 0B060000 		.4byte	0x60b
 2596 0564 02       		.uleb128 0x2
 2597 0565 91       		.byte	0x91
 2598 0566 48       		.sleb128 -56
 2599 0567 17       		.uleb128 0x17
 2600 0568 2D030000 		.4byte	.LASF56
 2601 056c 01       		.byte	0x1
 2602 056d 6702     		.2byte	0x267
 2603 056f 6C030000 		.4byte	0x36c
 2604 0573 02       		.uleb128 0x2
 2605 0574 91       		.byte	0x91
 2606 0575 70       		.sleb128 -16
 2607 0576 17       		.uleb128 0x17
 2608 0577 89060000 		.4byte	.LASF59
 2609 057b 01       		.byte	0x1
 2610 057c 6802     		.2byte	0x268
 2611 057e AD000000 		.4byte	0xad
 2612 0582 02       		.uleb128 0x2
 2613 0583 91       		.byte	0x91
 2614 0584 68       		.sleb128 -24
 2615 0585 17       		.uleb128 0x17
 2616 0586 69050000 		.4byte	.LASF63
 2617 058a 01       		.byte	0x1
 2618 058b 6802     		.2byte	0x268
 2619 058d AD000000 		.4byte	0xad
 2620 0591 02       		.uleb128 0x2
 2621 0592 91       		.byte	0x91
 2622 0593 6C       		.sleb128 -20
 2623 0594 17       		.uleb128 0x17
 2624 0595 8F020000 		.4byte	.LASF69
 2625 0599 01       		.byte	0x1
 2626 059a 6902     		.2byte	0x269
 2627 059c AD000000 		.4byte	0xad
 2628 05a0 02       		.uleb128 0x2
 2629 05a1 91       		.byte	0x91
 2630 05a2 74       		.sleb128 -12
 2631 05a3 1C       		.uleb128 0x1c
 2632 05a4 58000000 		.4byte	.LBB20
 2633 05a8 46000000 		.4byte	.LBE20-.LBB20
ARM GAS  C:\Users\Gusta\AppData\Local\Temp\ccugn2Vx.s 			page 73


 2634 05ac 17       		.uleb128 0x17
 2635 05ad 6A060000 		.4byte	.LASF73
 2636 05b1 01       		.byte	0x1
 2637 05b2 8302     		.2byte	0x283
 2638 05b4 2A010000 		.4byte	0x12a
 2639 05b8 02       		.uleb128 0x2
 2640 05b9 91       		.byte	0x91
 2641 05ba 60       		.sleb128 -32
 2642 05bb 1D       		.uleb128 0x1d
 2643 05bc 4A020000 		.4byte	0x24a
 2644 05c0 58000000 		.4byte	.LBB21
 2645 05c4 1A000000 		.4byte	.LBE21-.LBB21
 2646 05c8 01       		.byte	0x1
 2647 05c9 8302     		.2byte	0x283
 2648 05cb EA050000 		.4byte	0x5ea
 2649 05cf 1C       		.uleb128 0x1c
 2650 05d0 58000000 		.4byte	.LBB22
 2651 05d4 1A000000 		.4byte	.LBE22-.LBB22
 2652 05d8 1E       		.uleb128 0x1e
 2653 05d9 5A020000 		.4byte	0x25a
 2654 05dd 02       		.uleb128 0x2
 2655 05de 91       		.byte	0x91
 2656 05df 5C       		.sleb128 -36
 2657 05e0 1E       		.uleb128 0x1e
 2658 05e1 65020000 		.4byte	0x265
 2659 05e5 02       		.uleb128 0x2
 2660 05e6 91       		.byte	0x91
 2661 05e7 58       		.sleb128 -40
 2662 05e8 00       		.byte	0
 2663 05e9 00       		.byte	0
 2664 05ea 1F       		.uleb128 0x1f
 2665 05eb 71020000 		.4byte	0x271
 2666 05ef 98000000 		.4byte	.LBB23
 2667 05f3 06000000 		.4byte	.LBE23-.LBB23
 2668 05f7 01       		.byte	0x1
 2669 05f8 8302     		.2byte	0x283
 2670 05fa 20       		.uleb128 0x20
 2671 05fb 7D020000 		.4byte	0x27d
 2672 05ff 02       		.uleb128 0x2
 2673 0600 91       		.byte	0x91
 2674 0601 64       		.sleb128 -28
 2675 0602 00       		.byte	0
 2676 0603 00       		.byte	0
 2677 0604 00       		.byte	0
 2678 0605 0A       		.uleb128 0xa
 2679 0606 04       		.byte	0x4
 2680 0607 1F010000 		.4byte	0x11f
 2681 060b 19       		.uleb128 0x19
 2682 060c 05060000 		.4byte	0x605
 2683 0610 21       		.uleb128 0x21
 2684 0611 3C030000 		.4byte	.LASF85
 2685 0615 01       		.byte	0x1
 2686 0616 9502     		.2byte	0x295
 2687 0618 AD000000 		.4byte	0xad
 2688 061c 00000000 		.4byte	.LFB76
 2689 0620 7A000000 		.4byte	.LFE76-.LFB76
 2690 0624 01       		.uleb128 0x1
ARM GAS  C:\Users\Gusta\AppData\Local\Temp\ccugn2Vx.s 			page 74


 2691 0625 9C       		.byte	0x9c
 2692 0626 94060000 		.4byte	0x694
 2693 062a 16       		.uleb128 0x16
 2694 062b 2D030000 		.4byte	.LASF56
 2695 062f 01       		.byte	0x1
 2696 0630 9502     		.2byte	0x295
 2697 0632 6C030000 		.4byte	0x36c
 2698 0636 02       		.uleb128 0x2
 2699 0637 91       		.byte	0x91
 2700 0638 6C       		.sleb128 -20
 2701 0639 16       		.uleb128 0x16
 2702 063a A3070000 		.4byte	.LASF66
 2703 063e 01       		.byte	0x1
 2704 063f 9602     		.2byte	0x296
 2705 0641 0A050000 		.4byte	0x50a
 2706 0645 02       		.uleb128 0x2
 2707 0646 91       		.byte	0x91
 2708 0647 68       		.sleb128 -24
 2709 0648 16       		.uleb128 0x16
 2710 0649 F1010000 		.4byte	.LASF67
 2711 064d 01       		.byte	0x1
 2712 064e 9702     		.2byte	0x297
 2713 0650 AD000000 		.4byte	0xad
 2714 0654 02       		.uleb128 0x2
 2715 0655 91       		.byte	0x91
 2716 0656 64       		.sleb128 -28
 2717 0657 16       		.uleb128 0x16
 2718 0658 69050000 		.4byte	.LASF63
 2719 065c 01       		.byte	0x1
 2720 065d 9802     		.2byte	0x298
 2721 065f AD000000 		.4byte	0xad
 2722 0663 02       		.uleb128 0x2
 2723 0664 91       		.byte	0x91
 2724 0665 60       		.sleb128 -32
 2725 0666 16       		.uleb128 0x16
 2726 0667 8F020000 		.4byte	.LASF69
 2727 066b 01       		.byte	0x1
 2728 066c 9902     		.2byte	0x299
 2729 066e AD000000 		.4byte	0xad
 2730 0672 02       		.uleb128 0x2
 2731 0673 91       		.byte	0x91
 2732 0674 00       		.sleb128 0
 2733 0675 17       		.uleb128 0x17
 2734 0676 00000000 		.4byte	.LASF74
 2735 067a 01       		.byte	0x1
 2736 067b 9B02     		.2byte	0x29b
 2737 067d 1F010000 		.4byte	0x11f
 2738 0681 02       		.uleb128 0x2
 2739 0682 91       		.byte	0x91
 2740 0683 74       		.sleb128 -12
 2741 0684 17       		.uleb128 0x17
 2742 0685 89060000 		.4byte	.LASF59
 2743 0689 01       		.byte	0x1
 2744 068a 9C02     		.2byte	0x29c
 2745 068c AD000000 		.4byte	0xad
 2746 0690 02       		.uleb128 0x2
 2747 0691 91       		.byte	0x91
ARM GAS  C:\Users\Gusta\AppData\Local\Temp\ccugn2Vx.s 			page 75


 2748 0692 70       		.sleb128 -16
 2749 0693 00       		.byte	0
 2750 0694 18       		.uleb128 0x18
 2751 0695 89000000 		.4byte	.LASF75
 2752 0699 01       		.byte	0x1
 2753 069a C902     		.2byte	0x2c9
 2754 069c AD000000 		.4byte	0xad
 2755 06a0 00000000 		.4byte	.LFB77
 2756 06a4 D4000000 		.4byte	.LFE77-.LFB77
 2757 06a8 01       		.uleb128 0x1
 2758 06a9 9C       		.byte	0x9c
 2759 06aa 27070000 		.4byte	0x727
 2760 06ae 16       		.uleb128 0x16
 2761 06af 60020000 		.4byte	.LASF55
 2762 06b3 01       		.byte	0x1
 2763 06b4 C902     		.2byte	0x2c9
 2764 06b6 B7010000 		.4byte	0x1b7
 2765 06ba 02       		.uleb128 0x2
 2766 06bb 91       		.byte	0x91
 2767 06bc 64       		.sleb128 -28
 2768 06bd 16       		.uleb128 0x16
 2769 06be 54030000 		.4byte	.LASF76
 2770 06c2 01       		.byte	0x1
 2771 06c3 CA02     		.2byte	0x2ca
 2772 06c5 C6000000 		.4byte	0xc6
 2773 06c9 02       		.uleb128 0x2
 2774 06ca 91       		.byte	0x91
 2775 06cb 60       		.sleb128 -32
 2776 06cc 16       		.uleb128 0x16
 2777 06cd 0D000000 		.4byte	.LASF77
 2778 06d1 01       		.byte	0x1
 2779 06d2 CB02     		.2byte	0x2cb
 2780 06d4 AD000000 		.4byte	0xad
 2781 06d8 02       		.uleb128 0x2
 2782 06d9 91       		.byte	0x91
 2783 06da 5C       		.sleb128 -36
 2784 06db 16       		.uleb128 0x16
 2785 06dc 74020000 		.4byte	.LASF68
 2786 06e0 01       		.byte	0x1
 2787 06e1 CC02     		.2byte	0x2cc
 2788 06e3 35010000 		.4byte	0x135
 2789 06e7 02       		.uleb128 0x2
 2790 06e8 91       		.byte	0x91
 2791 06e9 58       		.sleb128 -40
 2792 06ea 17       		.uleb128 0x17
 2793 06eb 2D030000 		.4byte	.LASF56
 2794 06ef 01       		.byte	0x1
 2795 06f0 CE02     		.2byte	0x2ce
 2796 06f2 6C030000 		.4byte	0x36c
 2797 06f6 02       		.uleb128 0x2
 2798 06f7 91       		.byte	0x91
 2799 06f8 68       		.sleb128 -24
 2800 06f9 17       		.uleb128 0x17
 2801 06fa 2A020000 		.4byte	.LASF78
 2802 06fe 01       		.byte	0x1
 2803 06ff CF02     		.2byte	0x2cf
 2804 0701 AD000000 		.4byte	0xad
ARM GAS  C:\Users\Gusta\AppData\Local\Temp\ccugn2Vx.s 			page 76


 2805 0705 02       		.uleb128 0x2
 2806 0706 91       		.byte	0x91
 2807 0707 74       		.sleb128 -12
 2808 0708 17       		.uleb128 0x17
 2809 0709 14010000 		.4byte	.LASF79
 2810 070d 01       		.byte	0x1
 2811 070e CF02     		.2byte	0x2cf
 2812 0710 AD000000 		.4byte	0xad
 2813 0714 02       		.uleb128 0x2
 2814 0715 91       		.byte	0x91
 2815 0716 70       		.sleb128 -16
 2816 0717 17       		.uleb128 0x17
 2817 0718 95050000 		.4byte	.LASF80
 2818 071c 01       		.byte	0x1
 2819 071d CF02     		.2byte	0x2cf
 2820 071f AD000000 		.4byte	0xad
 2821 0723 02       		.uleb128 0x2
 2822 0724 91       		.byte	0x91
 2823 0725 6C       		.sleb128 -20
 2824 0726 00       		.byte	0
 2825 0727 18       		.uleb128 0x18
 2826 0728 FA050000 		.4byte	.LASF81
 2827 072c 01       		.byte	0x1
 2828 072d 3103     		.2byte	0x331
 2829 072f AD000000 		.4byte	0xad
 2830 0733 00000000 		.4byte	.LFB78
 2831 0737 5A000000 		.4byte	.LFE78-.LFB78
 2832 073b 01       		.uleb128 0x1
 2833 073c 9C       		.byte	0x9c
 2834 073d 9C070000 		.4byte	0x79c
 2835 0741 16       		.uleb128 0x16
 2836 0742 60020000 		.4byte	.LASF55
 2837 0746 01       		.byte	0x1
 2838 0747 3103     		.2byte	0x331
 2839 0749 B7010000 		.4byte	0x1b7
 2840 074d 02       		.uleb128 0x2
 2841 074e 91       		.byte	0x91
 2842 074f 5C       		.sleb128 -36
 2843 0750 17       		.uleb128 0x17
 2844 0751 2D030000 		.4byte	.LASF56
 2845 0755 01       		.byte	0x1
 2846 0756 3303     		.2byte	0x333
 2847 0758 6C030000 		.4byte	0x36c
 2848 075c 02       		.uleb128 0x2
 2849 075d 91       		.byte	0x91
 2850 075e 70       		.sleb128 -16
 2851 075f 17       		.uleb128 0x17
 2852 0760 89060000 		.4byte	.LASF59
 2853 0764 01       		.byte	0x1
 2854 0765 3403     		.2byte	0x334
 2855 0767 AD000000 		.4byte	0xad
 2856 076b 02       		.uleb128 0x2
 2857 076c 91       		.byte	0x91
 2858 076d 74       		.sleb128 -12
 2859 076e 17       		.uleb128 0x17
 2860 076f 14010000 		.4byte	.LASF79
 2861 0773 01       		.byte	0x1
ARM GAS  C:\Users\Gusta\AppData\Local\Temp\ccugn2Vx.s 			page 77


 2862 0774 3403     		.2byte	0x334
 2863 0776 AD000000 		.4byte	0xad
 2864 077a 02       		.uleb128 0x2
 2865 077b 91       		.byte	0x91
 2866 077c 6C       		.sleb128 -20
 2867 077d 17       		.uleb128 0x17
 2868 077e E5060000 		.4byte	.LASF82
 2869 0782 01       		.byte	0x1
 2870 0783 3403     		.2byte	0x334
 2871 0785 AD000000 		.4byte	0xad
 2872 0789 02       		.uleb128 0x2
 2873 078a 91       		.byte	0x91
 2874 078b 68       		.sleb128 -24
 2875 078c 17       		.uleb128 0x17
 2876 078d 0E030000 		.4byte	.LASF83
 2877 0791 01       		.byte	0x1
 2878 0792 3503     		.2byte	0x335
 2879 0794 AD000000 		.4byte	0xad
 2880 0798 02       		.uleb128 0x2
 2881 0799 91       		.byte	0x91
 2882 079a 64       		.sleb128 -28
 2883 079b 00       		.byte	0
 2884 079c 18       		.uleb128 0x18
 2885 079d 9E020000 		.4byte	.LASF84
 2886 07a1 01       		.byte	0x1
 2887 07a2 5D03     		.2byte	0x35d
 2888 07a4 AD000000 		.4byte	0xad
 2889 07a8 00000000 		.4byte	.LFB79
 2890 07ac A4000000 		.4byte	.LFE79-.LFB79
 2891 07b0 01       		.uleb128 0x1
 2892 07b1 9C       		.byte	0x9c
 2893 07b2 90080000 		.4byte	0x890
 2894 07b6 16       		.uleb128 0x16
 2895 07b7 60020000 		.4byte	.LASF55
 2896 07bb 01       		.byte	0x1
 2897 07bc 5D03     		.2byte	0x35d
 2898 07be B7010000 		.4byte	0x1b7
 2899 07c2 02       		.uleb128 0x2
 2900 07c3 91       		.byte	0x91
 2901 07c4 54       		.sleb128 -44
 2902 07c5 16       		.uleb128 0x16
 2903 07c6 54030000 		.4byte	.LASF76
 2904 07ca 01       		.byte	0x1
 2905 07cb 5E03     		.2byte	0x35e
 2906 07cd C6000000 		.4byte	0xc6
 2907 07d1 02       		.uleb128 0x2
 2908 07d2 91       		.byte	0x91
 2909 07d3 50       		.sleb128 -48
 2910 07d4 16       		.uleb128 0x16
 2911 07d5 0D000000 		.4byte	.LASF77
 2912 07d9 01       		.byte	0x1
 2913 07da 5F03     		.2byte	0x35f
 2914 07dc AD000000 		.4byte	0xad
 2915 07e0 02       		.uleb128 0x2
 2916 07e1 91       		.byte	0x91
 2917 07e2 4C       		.sleb128 -52
 2918 07e3 16       		.uleb128 0x16
ARM GAS  C:\Users\Gusta\AppData\Local\Temp\ccugn2Vx.s 			page 78


 2919 07e4 91060000 		.4byte	.LASF72
 2920 07e8 01       		.byte	0x1
 2921 07e9 6003     		.2byte	0x360
 2922 07eb 0B060000 		.4byte	0x60b
 2923 07ef 02       		.uleb128 0x2
 2924 07f0 91       		.byte	0x91
 2925 07f1 48       		.sleb128 -56
 2926 07f2 17       		.uleb128 0x17
 2927 07f3 2D030000 		.4byte	.LASF56
 2928 07f7 01       		.byte	0x1
 2929 07f8 6203     		.2byte	0x362
 2930 07fa 6C030000 		.4byte	0x36c
 2931 07fe 02       		.uleb128 0x2
 2932 07ff 91       		.byte	0x91
 2933 0800 6C       		.sleb128 -20
 2934 0801 17       		.uleb128 0x17
 2935 0802 2A020000 		.4byte	.LASF78
 2936 0806 01       		.byte	0x1
 2937 0807 6303     		.2byte	0x363
 2938 0809 AD000000 		.4byte	0xad
 2939 080d 02       		.uleb128 0x2
 2940 080e 91       		.byte	0x91
 2941 080f 74       		.sleb128 -12
 2942 0810 17       		.uleb128 0x17
 2943 0811 14010000 		.4byte	.LASF79
 2944 0815 01       		.byte	0x1
 2945 0816 6303     		.2byte	0x363
 2946 0818 AD000000 		.4byte	0xad
 2947 081c 02       		.uleb128 0x2
 2948 081d 91       		.byte	0x91
 2949 081e 68       		.sleb128 -24
 2950 081f 17       		.uleb128 0x17
 2951 0820 95050000 		.4byte	.LASF80
 2952 0824 01       		.byte	0x1
 2953 0825 6303     		.2byte	0x363
 2954 0827 AD000000 		.4byte	0xad
 2955 082b 02       		.uleb128 0x2
 2956 082c 91       		.byte	0x91
 2957 082d 70       		.sleb128 -16
 2958 082e 1C       		.uleb128 0x1c
 2959 082f 54000000 		.4byte	.LBB25
 2960 0833 46000000 		.4byte	.LBE25-.LBB25
 2961 0837 17       		.uleb128 0x17
 2962 0838 6A060000 		.4byte	.LASF73
 2963 083c 01       		.byte	0x1
 2964 083d 8403     		.2byte	0x384
 2965 083f 2A010000 		.4byte	0x12a
 2966 0843 02       		.uleb128 0x2
 2967 0844 91       		.byte	0x91
 2968 0845 60       		.sleb128 -32
 2969 0846 1D       		.uleb128 0x1d
 2970 0847 4A020000 		.4byte	0x24a
 2971 084b 54000000 		.4byte	.LBB26
 2972 084f 1A000000 		.4byte	.LBE26-.LBB26
 2973 0853 01       		.byte	0x1
 2974 0854 8403     		.2byte	0x384
 2975 0856 75080000 		.4byte	0x875
ARM GAS  C:\Users\Gusta\AppData\Local\Temp\ccugn2Vx.s 			page 79


 2976 085a 1C       		.uleb128 0x1c
 2977 085b 54000000 		.4byte	.LBB27
 2978 085f 1A000000 		.4byte	.LBE27-.LBB27
 2979 0863 1E       		.uleb128 0x1e
 2980 0864 5A020000 		.4byte	0x25a
 2981 0868 02       		.uleb128 0x2
 2982 0869 91       		.byte	0x91
 2983 086a 5C       		.sleb128 -36
 2984 086b 1E       		.uleb128 0x1e
 2985 086c 65020000 		.4byte	0x265
 2986 0870 02       		.uleb128 0x2
 2987 0871 91       		.byte	0x91
 2988 0872 58       		.sleb128 -40
 2989 0873 00       		.byte	0
 2990 0874 00       		.byte	0
 2991 0875 1F       		.uleb128 0x1f
 2992 0876 71020000 		.4byte	0x271
 2993 087a 94000000 		.4byte	.LBB28
 2994 087e 06000000 		.4byte	.LBE28-.LBB28
 2995 0882 01       		.byte	0x1
 2996 0883 8403     		.2byte	0x384
 2997 0885 20       		.uleb128 0x20
 2998 0886 7D020000 		.4byte	0x27d
 2999 088a 02       		.uleb128 0x2
 3000 088b 91       		.byte	0x91
 3001 088c 64       		.sleb128 -28
 3002 088d 00       		.byte	0
 3003 088e 00       		.byte	0
 3004 088f 00       		.byte	0
 3005 0890 21       		.uleb128 0x21
 3006 0891 22040000 		.4byte	.LASF86
 3007 0895 01       		.byte	0x1
 3008 0896 9603     		.2byte	0x396
 3009 0898 AD000000 		.4byte	0xad
 3010 089c 00000000 		.4byte	.LFB80
 3011 08a0 64000000 		.4byte	.LFE80-.LFB80
 3012 08a4 01       		.uleb128 0x1
 3013 08a5 9C       		.byte	0x9c
 3014 08a6 32090000 		.4byte	0x932
 3015 08aa 16       		.uleb128 0x16
 3016 08ab 2D030000 		.4byte	.LASF56
 3017 08af 01       		.byte	0x1
 3018 08b0 9603     		.2byte	0x396
 3019 08b2 1E030000 		.4byte	0x31e
 3020 08b6 02       		.uleb128 0x2
 3021 08b7 91       		.byte	0x91
 3022 08b8 64       		.sleb128 -28
 3023 08b9 16       		.uleb128 0x16
 3024 08ba 54030000 		.4byte	.LASF76
 3025 08be 01       		.byte	0x1
 3026 08bf 9703     		.2byte	0x397
 3027 08c1 C6000000 		.4byte	0xc6
 3028 08c5 02       		.uleb128 0x2
 3029 08c6 91       		.byte	0x91
 3030 08c7 60       		.sleb128 -32
 3031 08c8 16       		.uleb128 0x16
 3032 08c9 0D000000 		.4byte	.LASF77
ARM GAS  C:\Users\Gusta\AppData\Local\Temp\ccugn2Vx.s 			page 80


 3033 08cd 01       		.byte	0x1
 3034 08ce 9803     		.2byte	0x398
 3035 08d0 AD000000 		.4byte	0xad
 3036 08d4 02       		.uleb128 0x2
 3037 08d5 91       		.byte	0x91
 3038 08d6 5C       		.sleb128 -36
 3039 08d7 16       		.uleb128 0x16
 3040 08d8 14010000 		.4byte	.LASF79
 3041 08dc 01       		.byte	0x1
 3042 08dd 9903     		.2byte	0x399
 3043 08df AD000000 		.4byte	0xad
 3044 08e3 02       		.uleb128 0x2
 3045 08e4 91       		.byte	0x91
 3046 08e5 58       		.sleb128 -40
 3047 08e6 16       		.uleb128 0x16
 3048 08e7 95050000 		.4byte	.LASF80
 3049 08eb 01       		.byte	0x1
 3050 08ec 9A03     		.2byte	0x39a
 3051 08ee AD000000 		.4byte	0xad
 3052 08f2 02       		.uleb128 0x2
 3053 08f3 91       		.byte	0x91
 3054 08f4 00       		.sleb128 0
 3055 08f5 17       		.uleb128 0x17
 3056 08f6 E5060000 		.4byte	.LASF82
 3057 08fa 01       		.byte	0x1
 3058 08fb 9C03     		.2byte	0x39c
 3059 08fd AD000000 		.4byte	0xad
 3060 0901 02       		.uleb128 0x2
 3061 0902 91       		.byte	0x91
 3062 0903 70       		.sleb128 -16
 3063 0904 17       		.uleb128 0x17
 3064 0905 2A020000 		.4byte	.LASF78
 3065 0909 01       		.byte	0x1
 3066 090a 9C03     		.2byte	0x39c
 3067 090c AD000000 		.4byte	0xad
 3068 0910 02       		.uleb128 0x2
 3069 0911 91       		.byte	0x91
 3070 0912 6C       		.sleb128 -20
 3071 0913 17       		.uleb128 0x17
 3072 0914 C9010000 		.4byte	.LASF87
 3073 0918 01       		.byte	0x1
 3074 0919 9C03     		.2byte	0x39c
 3075 091b AD000000 		.4byte	0xad
 3076 091f 02       		.uleb128 0x2
 3077 0920 91       		.byte	0x91
 3078 0921 74       		.sleb128 -12
 3079 0922 17       		.uleb128 0x17
 3080 0923 12050000 		.4byte	.LASF88
 3081 0927 01       		.byte	0x1
 3082 0928 9D03     		.2byte	0x39d
 3083 092a AD000000 		.4byte	0xad
 3084 092e 02       		.uleb128 0x2
 3085 092f 91       		.byte	0x91
 3086 0930 68       		.sleb128 -24
 3087 0931 00       		.byte	0
 3088 0932 1A       		.uleb128 0x1a
 3089 0933 E5020000 		.4byte	.LASF89
ARM GAS  C:\Users\Gusta\AppData\Local\Temp\ccugn2Vx.s 			page 81


 3090 0937 01       		.byte	0x1
 3091 0938 CA03     		.2byte	0x3ca
 3092 093a 1F010000 		.4byte	0x11f
 3093 093e 00000000 		.4byte	.LFB81
 3094 0942 32000000 		.4byte	.LFE81-.LFB81
 3095 0946 01       		.uleb128 0x1
 3096 0947 9C       		.byte	0x9c
 3097 0948 89090000 		.4byte	0x989
 3098 094c 16       		.uleb128 0x16
 3099 094d 60020000 		.4byte	.LASF55
 3100 0951 01       		.byte	0x1
 3101 0952 CA03     		.2byte	0x3ca
 3102 0954 B7010000 		.4byte	0x1b7
 3103 0958 02       		.uleb128 0x2
 3104 0959 91       		.byte	0x91
 3105 095a 64       		.sleb128 -28
 3106 095b 17       		.uleb128 0x17
 3107 095c 2D030000 		.4byte	.LASF56
 3108 0960 01       		.byte	0x1
 3109 0961 CC03     		.2byte	0x3cc
 3110 0963 1B040000 		.4byte	0x41b
 3111 0967 02       		.uleb128 0x2
 3112 0968 91       		.byte	0x91
 3113 0969 70       		.sleb128 -16
 3114 096a 17       		.uleb128 0x17
 3115 096b 89060000 		.4byte	.LASF59
 3116 096f 01       		.byte	0x1
 3117 0970 CD03     		.2byte	0x3cd
 3118 0972 1F010000 		.4byte	0x11f
 3119 0976 02       		.uleb128 0x2
 3120 0977 91       		.byte	0x91
 3121 0978 74       		.sleb128 -12
 3122 0979 17       		.uleb128 0x17
 3123 097a D2050000 		.4byte	.LASF41
 3124 097e 01       		.byte	0x1
 3125 097f CE03     		.2byte	0x3ce
 3126 0981 AD000000 		.4byte	0xad
 3127 0985 02       		.uleb128 0x2
 3128 0986 91       		.byte	0x91
 3129 0987 6C       		.sleb128 -20
 3130 0988 00       		.byte	0
 3131 0989 18       		.uleb128 0x18
 3132 098a BA020000 		.4byte	.LASF90
 3133 098e 01       		.byte	0x1
 3134 098f E103     		.2byte	0x3e1
 3135 0991 1F010000 		.4byte	0x11f
 3136 0995 00000000 		.4byte	.LFB82
 3137 0999 44000000 		.4byte	.LFE82-.LFB82
 3138 099d 01       		.uleb128 0x1
 3139 099e 9C       		.byte	0x9c
 3140 099f E0090000 		.4byte	0x9e0
 3141 09a3 16       		.uleb128 0x16
 3142 09a4 60020000 		.4byte	.LASF55
 3143 09a8 01       		.byte	0x1
 3144 09a9 E103     		.2byte	0x3e1
 3145 09ab B7010000 		.4byte	0x1b7
 3146 09af 02       		.uleb128 0x2
ARM GAS  C:\Users\Gusta\AppData\Local\Temp\ccugn2Vx.s 			page 82


 3147 09b0 91       		.byte	0x91
 3148 09b1 64       		.sleb128 -28
 3149 09b2 17       		.uleb128 0x17
 3150 09b3 89060000 		.4byte	.LASF59
 3151 09b7 01       		.byte	0x1
 3152 09b8 E303     		.2byte	0x3e3
 3153 09ba 1F010000 		.4byte	0x11f
 3154 09be 02       		.uleb128 0x2
 3155 09bf 91       		.byte	0x91
 3156 09c0 74       		.sleb128 -12
 3157 09c1 17       		.uleb128 0x17
 3158 09c2 95050000 		.4byte	.LASF80
 3159 09c6 01       		.byte	0x1
 3160 09c7 E403     		.2byte	0x3e4
 3161 09c9 AD000000 		.4byte	0xad
 3162 09cd 02       		.uleb128 0x2
 3163 09ce 91       		.byte	0x91
 3164 09cf 70       		.sleb128 -16
 3165 09d0 17       		.uleb128 0x17
 3166 09d1 2D030000 		.4byte	.LASF56
 3167 09d5 01       		.byte	0x1
 3168 09d6 E503     		.2byte	0x3e5
 3169 09d8 1B040000 		.4byte	0x41b
 3170 09dc 02       		.uleb128 0x2
 3171 09dd 91       		.byte	0x91
 3172 09de 6C       		.sleb128 -20
 3173 09df 00       		.byte	0
 3174 09e0 18       		.uleb128 0x18
 3175 09e1 D8050000 		.4byte	.LASF91
 3176 09e5 01       		.byte	0x1
 3177 09e6 0404     		.2byte	0x404
 3178 09e8 1F010000 		.4byte	0x11f
 3179 09ec 00000000 		.4byte	.LFB83
 3180 09f0 68000000 		.4byte	.LFE83-.LFB83
 3181 09f4 01       		.uleb128 0x1
 3182 09f5 9C       		.byte	0x9c
 3183 09f6 8E0A0000 		.4byte	0xa8e
 3184 09fa 16       		.uleb128 0x16
 3185 09fb 60020000 		.4byte	.LASF55
 3186 09ff 01       		.byte	0x1
 3187 0a00 0404     		.2byte	0x404
 3188 0a02 B7010000 		.4byte	0x1b7
 3189 0a06 02       		.uleb128 0x2
 3190 0a07 91       		.byte	0x91
 3191 0a08 5C       		.sleb128 -36
 3192 0a09 16       		.uleb128 0x16
 3193 0a0a 91060000 		.4byte	.LASF72
 3194 0a0e 01       		.byte	0x1
 3195 0a0f 0404     		.2byte	0x404
 3196 0a11 05060000 		.4byte	0x605
 3197 0a15 02       		.uleb128 0x2
 3198 0a16 91       		.byte	0x91
 3199 0a17 58       		.sleb128 -40
 3200 0a18 17       		.uleb128 0x17
 3201 0a19 2D030000 		.4byte	.LASF56
 3202 0a1d 01       		.byte	0x1
 3203 0a1e 0604     		.2byte	0x406
ARM GAS  C:\Users\Gusta\AppData\Local\Temp\ccugn2Vx.s 			page 83


 3204 0a20 6C030000 		.4byte	0x36c
 3205 0a24 02       		.uleb128 0x2
 3206 0a25 91       		.byte	0x91
 3207 0a26 70       		.sleb128 -16
 3208 0a27 17       		.uleb128 0x17
 3209 0a28 89060000 		.4byte	.LASF59
 3210 0a2c 01       		.byte	0x1
 3211 0a2d 0704     		.2byte	0x407
 3212 0a2f 1F010000 		.4byte	0x11f
 3213 0a33 02       		.uleb128 0x2
 3214 0a34 91       		.byte	0x91
 3215 0a35 74       		.sleb128 -12
 3216 0a36 17       		.uleb128 0x17
 3217 0a37 6A060000 		.4byte	.LASF73
 3218 0a3b 01       		.byte	0x1
 3219 0a3c 0804     		.2byte	0x408
 3220 0a3e 2A010000 		.4byte	0x12a
 3221 0a42 02       		.uleb128 0x2
 3222 0a43 91       		.byte	0x91
 3223 0a44 68       		.sleb128 -24
 3224 0a45 1D       		.uleb128 0x1d
 3225 0a46 4A020000 		.4byte	0x24a
 3226 0a4a 0E000000 		.4byte	.LBB30
 3227 0a4e 1A000000 		.4byte	.LBE30-.LBB30
 3228 0a52 01       		.byte	0x1
 3229 0a53 0C04     		.2byte	0x40c
 3230 0a55 740A0000 		.4byte	0xa74
 3231 0a59 1C       		.uleb128 0x1c
 3232 0a5a 0E000000 		.4byte	.LBB31
 3233 0a5e 1A000000 		.4byte	.LBE31-.LBB31
 3234 0a62 1E       		.uleb128 0x1e
 3235 0a63 5A020000 		.4byte	0x25a
 3236 0a67 02       		.uleb128 0x2
 3237 0a68 91       		.byte	0x91
 3238 0a69 64       		.sleb128 -28
 3239 0a6a 1E       		.uleb128 0x1e
 3240 0a6b 65020000 		.4byte	0x265
 3241 0a6f 02       		.uleb128 0x2
 3242 0a70 91       		.byte	0x91
 3243 0a71 60       		.sleb128 -32
 3244 0a72 00       		.byte	0
 3245 0a73 00       		.byte	0
 3246 0a74 1F       		.uleb128 0x1f
 3247 0a75 71020000 		.4byte	0x271
 3248 0a79 58000000 		.4byte	.LBB32
 3249 0a7d 06000000 		.4byte	.LBE32-.LBB32
 3250 0a81 01       		.byte	0x1
 3251 0a82 1C04     		.2byte	0x41c
 3252 0a84 20       		.uleb128 0x20
 3253 0a85 7D020000 		.4byte	0x27d
 3254 0a89 02       		.uleb128 0x2
 3255 0a8a 91       		.byte	0x91
 3256 0a8b 6C       		.sleb128 -20
 3257 0a8c 00       		.byte	0
 3258 0a8d 00       		.byte	0
 3259 0a8e 18       		.uleb128 0x18
 3260 0a8f EF000000 		.4byte	.LASF92
ARM GAS  C:\Users\Gusta\AppData\Local\Temp\ccugn2Vx.s 			page 84


 3261 0a93 01       		.byte	0x1
 3262 0a94 2204     		.2byte	0x422
 3263 0a96 1F010000 		.4byte	0x11f
 3264 0a9a 00000000 		.4byte	.LFB84
 3265 0a9e 68000000 		.4byte	.LFE84-.LFB84
 3266 0aa2 01       		.uleb128 0x1
 3267 0aa3 9C       		.byte	0x9c
 3268 0aa4 3C0B0000 		.4byte	0xb3c
 3269 0aa8 16       		.uleb128 0x16
 3270 0aa9 60020000 		.4byte	.LASF55
 3271 0aad 01       		.byte	0x1
 3272 0aae 2204     		.2byte	0x422
 3273 0ab0 B7010000 		.4byte	0x1b7
 3274 0ab4 02       		.uleb128 0x2
 3275 0ab5 91       		.byte	0x91
 3276 0ab6 5C       		.sleb128 -36
 3277 0ab7 16       		.uleb128 0x16
 3278 0ab8 91060000 		.4byte	.LASF72
 3279 0abc 01       		.byte	0x1
 3280 0abd 2204     		.2byte	0x422
 3281 0abf 05060000 		.4byte	0x605
 3282 0ac3 02       		.uleb128 0x2
 3283 0ac4 91       		.byte	0x91
 3284 0ac5 58       		.sleb128 -40
 3285 0ac6 17       		.uleb128 0x17
 3286 0ac7 2D030000 		.4byte	.LASF56
 3287 0acb 01       		.byte	0x1
 3288 0acc 2404     		.2byte	0x424
 3289 0ace 6C030000 		.4byte	0x36c
 3290 0ad2 02       		.uleb128 0x2
 3291 0ad3 91       		.byte	0x91
 3292 0ad4 70       		.sleb128 -16
 3293 0ad5 17       		.uleb128 0x17
 3294 0ad6 89060000 		.4byte	.LASF59
 3295 0ada 01       		.byte	0x1
 3296 0adb 2504     		.2byte	0x425
 3297 0add 1F010000 		.4byte	0x11f
 3298 0ae1 02       		.uleb128 0x2
 3299 0ae2 91       		.byte	0x91
 3300 0ae3 74       		.sleb128 -12
 3301 0ae4 17       		.uleb128 0x17
 3302 0ae5 6A060000 		.4byte	.LASF73
 3303 0ae9 01       		.byte	0x1
 3304 0aea 2604     		.2byte	0x426
 3305 0aec 2A010000 		.4byte	0x12a
 3306 0af0 02       		.uleb128 0x2
 3307 0af1 91       		.byte	0x91
 3308 0af2 68       		.sleb128 -24
 3309 0af3 1D       		.uleb128 0x1d
 3310 0af4 4A020000 		.4byte	0x24a
 3311 0af8 0E000000 		.4byte	.LBB34
 3312 0afc 1A000000 		.4byte	.LBE34-.LBB34
 3313 0b00 01       		.byte	0x1
 3314 0b01 2A04     		.2byte	0x42a
 3315 0b03 220B0000 		.4byte	0xb22
 3316 0b07 1C       		.uleb128 0x1c
 3317 0b08 0E000000 		.4byte	.LBB35
ARM GAS  C:\Users\Gusta\AppData\Local\Temp\ccugn2Vx.s 			page 85


 3318 0b0c 1A000000 		.4byte	.LBE35-.LBB35
 3319 0b10 1E       		.uleb128 0x1e
 3320 0b11 5A020000 		.4byte	0x25a
 3321 0b15 02       		.uleb128 0x2
 3322 0b16 91       		.byte	0x91
 3323 0b17 64       		.sleb128 -28
 3324 0b18 1E       		.uleb128 0x1e
 3325 0b19 65020000 		.4byte	0x265
 3326 0b1d 02       		.uleb128 0x2
 3327 0b1e 91       		.byte	0x91
 3328 0b1f 60       		.sleb128 -32
 3329 0b20 00       		.byte	0
 3330 0b21 00       		.byte	0
 3331 0b22 1F       		.uleb128 0x1f
 3332 0b23 71020000 		.4byte	0x271
 3333 0b27 58000000 		.4byte	.LBB36
 3334 0b2b 06000000 		.4byte	.LBE36-.LBB36
 3335 0b2f 01       		.byte	0x1
 3336 0b30 3A04     		.2byte	0x43a
 3337 0b32 20       		.uleb128 0x20
 3338 0b33 7D020000 		.4byte	0x27d
 3339 0b37 02       		.uleb128 0x2
 3340 0b38 91       		.byte	0x91
 3341 0b39 6C       		.sleb128 -20
 3342 0b3a 00       		.byte	0
 3343 0b3b 00       		.byte	0
 3344 0b3c 21       		.uleb128 0x21
 3345 0b3d BC050000 		.4byte	.LASF93
 3346 0b41 01       		.byte	0x1
 3347 0b42 4004     		.2byte	0x440
 3348 0b44 AD000000 		.4byte	0xad
 3349 0b48 00000000 		.4byte	.LFB85
 3350 0b4c 80000000 		.4byte	.LFE85-.LFB85
 3351 0b50 01       		.uleb128 0x1
 3352 0b51 9C       		.byte	0x9c
 3353 0b52 A20B0000 		.4byte	0xba2
 3354 0b56 16       		.uleb128 0x16
 3355 0b57 2D030000 		.4byte	.LASF56
 3356 0b5b 01       		.byte	0x1
 3357 0b5c 4004     		.2byte	0x440
 3358 0b5e 6C030000 		.4byte	0x36c
 3359 0b62 02       		.uleb128 0x2
 3360 0b63 91       		.byte	0x91
 3361 0b64 6C       		.sleb128 -20
 3362 0b65 16       		.uleb128 0x16
 3363 0b66 7F070000 		.4byte	.LASF94
 3364 0b6a 01       		.byte	0x1
 3365 0b6b 4004     		.2byte	0x440
 3366 0b6d A20B0000 		.4byte	0xba2
 3367 0b71 02       		.uleb128 0x2
 3368 0b72 91       		.byte	0x91
 3369 0b73 68       		.sleb128 -24
 3370 0b74 16       		.uleb128 0x16
 3371 0b75 64000000 		.4byte	.LASF95
 3372 0b79 01       		.byte	0x1
 3373 0b7a 4004     		.2byte	0x440
 3374 0b7c AD000000 		.4byte	0xad
ARM GAS  C:\Users\Gusta\AppData\Local\Temp\ccugn2Vx.s 			page 86


 3375 0b80 02       		.uleb128 0x2
 3376 0b81 91       		.byte	0x91
 3377 0b82 64       		.sleb128 -28
 3378 0b83 17       		.uleb128 0x17
 3379 0b84 DC010000 		.4byte	.LASF96
 3380 0b88 01       		.byte	0x1
 3381 0b89 4204     		.2byte	0x442
 3382 0b8b AD000000 		.4byte	0xad
 3383 0b8f 02       		.uleb128 0x2
 3384 0b90 91       		.byte	0x91
 3385 0b91 74       		.sleb128 -12
 3386 0b92 17       		.uleb128 0x17
 3387 0b93 0C020000 		.4byte	.LASF97
 3388 0b97 01       		.byte	0x1
 3389 0b98 4204     		.2byte	0x442
 3390 0b9a AD000000 		.4byte	0xad
 3391 0b9e 02       		.uleb128 0x2
 3392 0b9f 91       		.byte	0x91
 3393 0ba0 70       		.sleb128 -16
 3394 0ba1 00       		.byte	0
 3395 0ba2 0A       		.uleb128 0xa
 3396 0ba3 04       		.byte	0x4
 3397 0ba4 A80B0000 		.4byte	0xba8
 3398 0ba8 19       		.uleb128 0x19
 3399 0ba9 8C000000 		.4byte	0x8c
 3400 0bad 21       		.uleb128 0x21
 3401 0bae CE060000 		.4byte	.LASF98
 3402 0bb2 01       		.byte	0x1
 3403 0bb3 6E04     		.2byte	0x46e
 3404 0bb5 AD000000 		.4byte	0xad
 3405 0bb9 00000000 		.4byte	.LFB86
 3406 0bbd 94000000 		.4byte	.LFE86-.LFB86
 3407 0bc1 01       		.uleb128 0x1
 3408 0bc2 9C       		.byte	0x9c
 3409 0bc3 310C0000 		.4byte	0xc31
 3410 0bc7 16       		.uleb128 0x16
 3411 0bc8 2D030000 		.4byte	.LASF56
 3412 0bcc 01       		.byte	0x1
 3413 0bcd 6E04     		.2byte	0x46e
 3414 0bcf 1E030000 		.4byte	0x31e
 3415 0bd3 02       		.uleb128 0x2
 3416 0bd4 91       		.byte	0x91
 3417 0bd5 64       		.sleb128 -28
 3418 0bd6 16       		.uleb128 0x16
 3419 0bd7 7F070000 		.4byte	.LASF94
 3420 0bdb 01       		.byte	0x1
 3421 0bdc 6E04     		.2byte	0x46e
 3422 0bde 40010000 		.4byte	0x140
 3423 0be2 02       		.uleb128 0x2
 3424 0be3 91       		.byte	0x91
 3425 0be4 60       		.sleb128 -32
 3426 0be5 16       		.uleb128 0x16
 3427 0be6 3A020000 		.4byte	.LASF99
 3428 0bea 01       		.byte	0x1
 3429 0beb 6E04     		.2byte	0x46e
 3430 0bed AD000000 		.4byte	0xad
 3431 0bf1 02       		.uleb128 0x2
ARM GAS  C:\Users\Gusta\AppData\Local\Temp\ccugn2Vx.s 			page 87


 3432 0bf2 91       		.byte	0x91
 3433 0bf3 5C       		.sleb128 -36
 3434 0bf4 16       		.uleb128 0x16
 3435 0bf5 14010000 		.4byte	.LASF79
 3436 0bf9 01       		.byte	0x1
 3437 0bfa 6E04     		.2byte	0x46e
 3438 0bfc AD000000 		.4byte	0xad
 3439 0c00 02       		.uleb128 0x2
 3440 0c01 91       		.byte	0x91
 3441 0c02 58       		.sleb128 -40
 3442 0c03 17       		.uleb128 0x17
 3443 0c04 64000000 		.4byte	.LASF95
 3444 0c08 01       		.byte	0x1
 3445 0c09 7004     		.2byte	0x470
 3446 0c0b AD000000 		.4byte	0xad
 3447 0c0f 02       		.uleb128 0x2
 3448 0c10 91       		.byte	0x91
 3449 0c11 70       		.sleb128 -16
 3450 0c12 17       		.uleb128 0x17
 3451 0c13 0C020000 		.4byte	.LASF97
 3452 0c17 01       		.byte	0x1
 3453 0c18 7004     		.2byte	0x470
 3454 0c1a AD000000 		.4byte	0xad
 3455 0c1e 02       		.uleb128 0x2
 3456 0c1f 91       		.byte	0x91
 3457 0c20 6C       		.sleb128 -20
 3458 0c21 17       		.uleb128 0x17
 3459 0c22 AB060000 		.4byte	.LASF100
 3460 0c26 01       		.byte	0x1
 3461 0c27 7004     		.2byte	0x470
 3462 0c29 AD000000 		.4byte	0xad
 3463 0c2d 02       		.uleb128 0x2
 3464 0c2e 91       		.byte	0x91
 3465 0c2f 74       		.sleb128 -12
 3466 0c30 00       		.byte	0
 3467 0c31 22       		.uleb128 0x22
 3468 0c32 3E050000 		.4byte	.LASF101
 3469 0c36 01       		.byte	0x1
 3470 0c37 A504     		.2byte	0x4a5
 3471 0c39 AD000000 		.4byte	0xad
 3472 0c3d 00000000 		.4byte	.LFB87
 3473 0c41 3E000000 		.4byte	.LFE87-.LFB87
 3474 0c45 01       		.uleb128 0x1
 3475 0c46 9C       		.byte	0x9c
 3476 0c47 6A0C0000 		.4byte	0xc6a
 3477 0c4b 16       		.uleb128 0x16
 3478 0c4c 2D030000 		.4byte	.LASF56
 3479 0c50 01       		.byte	0x1
 3480 0c51 A504     		.2byte	0x4a5
 3481 0c53 1B040000 		.4byte	0x41b
 3482 0c57 02       		.uleb128 0x2
 3483 0c58 91       		.byte	0x91
 3484 0c59 6C       		.sleb128 -20
 3485 0c5a 17       		.uleb128 0x17
 3486 0c5b 64000000 		.4byte	.LASF95
 3487 0c5f 01       		.byte	0x1
 3488 0c60 A804     		.2byte	0x4a8
ARM GAS  C:\Users\Gusta\AppData\Local\Temp\ccugn2Vx.s 			page 88


 3489 0c62 AD000000 		.4byte	0xad
 3490 0c66 02       		.uleb128 0x2
 3491 0c67 91       		.byte	0x91
 3492 0c68 74       		.sleb128 -12
 3493 0c69 00       		.byte	0
 3494 0c6a 23       		.uleb128 0x23
 3495 0c6b 62070000 		.4byte	.LASF113
 3496 0c6f 01       		.byte	0x1
 3497 0c70 B904     		.2byte	0x4b9
 3498 0c72 00000000 		.4byte	.LFB88
 3499 0c76 38000000 		.4byte	.LFE88-.LFB88
 3500 0c7a 01       		.uleb128 0x1
 3501 0c7b 9C       		.byte	0x9c
 3502 0c7c CC0C0000 		.4byte	0xccc
 3503 0c80 16       		.uleb128 0x16
 3504 0c81 2D030000 		.4byte	.LASF56
 3505 0c85 01       		.byte	0x1
 3506 0c86 B904     		.2byte	0x4b9
 3507 0c88 6C030000 		.4byte	0x36c
 3508 0c8c 02       		.uleb128 0x2
 3509 0c8d 91       		.byte	0x91
 3510 0c8e 74       		.sleb128 -12
 3511 0c8f 16       		.uleb128 0x16
 3512 0c90 02020000 		.4byte	.LASF47
 3513 0c94 01       		.byte	0x1
 3514 0c95 BA04     		.2byte	0x4ba
 3515 0c97 CC0C0000 		.4byte	0xccc
 3516 0c9b 02       		.uleb128 0x2
 3517 0c9c 91       		.byte	0x91
 3518 0c9d 70       		.sleb128 -16
 3519 0c9e 16       		.uleb128 0x16
 3520 0c9f 8F030000 		.4byte	.LASF52
 3521 0ca3 01       		.byte	0x1
 3522 0ca4 BB04     		.2byte	0x4bb
 3523 0ca6 AD000000 		.4byte	0xad
 3524 0caa 02       		.uleb128 0x2
 3525 0cab 91       		.byte	0x91
 3526 0cac 6C       		.sleb128 -20
 3527 0cad 16       		.uleb128 0x16
 3528 0cae 4F050000 		.4byte	.LASF44
 3529 0cb2 01       		.byte	0x1
 3530 0cb3 BC04     		.2byte	0x4bc
 3531 0cb5 AD000000 		.4byte	0xad
 3532 0cb9 02       		.uleb128 0x2
 3533 0cba 91       		.byte	0x91
 3534 0cbb 68       		.sleb128 -24
 3535 0cbc 16       		.uleb128 0x16
 3536 0cbd 75040000 		.4byte	.LASF48
 3537 0cc1 01       		.byte	0x1
 3538 0cc2 BD04     		.2byte	0x4bd
 3539 0cc4 8C000000 		.4byte	0x8c
 3540 0cc8 02       		.uleb128 0x2
 3541 0cc9 91       		.byte	0x91
 3542 0cca 00       		.sleb128 0
 3543 0ccb 00       		.byte	0
 3544 0ccc 19       		.uleb128 0x19
 3545 0ccd 40010000 		.4byte	0x140
ARM GAS  C:\Users\Gusta\AppData\Local\Temp\ccugn2Vx.s 			page 89


 3546 0cd1 24       		.uleb128 0x24
 3547 0cd2 FA000000 		.4byte	0xfa
 3548 0cd6 E10C0000 		.4byte	0xce1
 3549 0cda 25       		.uleb128 0x25
 3550 0cdb BF000000 		.4byte	0xbf
 3551 0cdf 07       		.byte	0x7
 3552 0ce0 00       		.byte	0
 3553 0ce1 26       		.uleb128 0x26
 3554 0ce2 D4000000 		.4byte	.LASF102
 3555 0ce6 07       		.byte	0x7
 3556 0ce7 34       		.byte	0x34
 3557 0ce8 D10C0000 		.4byte	0xcd1
 3558 0cec 05       		.uleb128 0x5
 3559 0ced 03       		.byte	0x3
 3560 0cee 00000000 		.4byte	DS18x8_Sensor
 3561 0cf2 26       		.uleb128 0x26
 3562 0cf3 8F040000 		.4byte	.LASF103
 3563 0cf7 07       		.byte	0x7
 3564 0cf8 39       		.byte	0x39
 3565 0cf9 F5000000 		.4byte	0xf5
 3566 0cfd 05       		.uleb128 0x5
 3567 0cfe 03       		.byte	0x3
 3568 0cff 00000000 		.4byte	DS18x8_DataReady
 3569 0d03 27       		.uleb128 0x27
 3570 0d04 55070000 		.4byte	.LASF104
 3571 0d08 0A       		.byte	0xa
 3572 0d09 1207     		.2byte	0x712
 3573 0d0b 0F0D0000 		.4byte	0xd0f
 3574 0d0f 07       		.uleb128 0x7
 3575 0d10 97000000 		.4byte	0x97
 3576 0d14 00       		.byte	0
 3577              		.section	.debug_abbrev,"",%progbits
 3578              	.Ldebug_abbrev0:
 3579 0000 01       		.uleb128 0x1
 3580 0001 11       		.uleb128 0x11
 3581 0002 01       		.byte	0x1
 3582 0003 25       		.uleb128 0x25
 3583 0004 0E       		.uleb128 0xe
 3584 0005 13       		.uleb128 0x13
 3585 0006 0B       		.uleb128 0xb
 3586 0007 03       		.uleb128 0x3
 3587 0008 0E       		.uleb128 0xe
 3588 0009 1B       		.uleb128 0x1b
 3589 000a 0E       		.uleb128 0xe
 3590 000b 55       		.uleb128 0x55
 3591 000c 17       		.uleb128 0x17
 3592 000d 11       		.uleb128 0x11
 3593 000e 01       		.uleb128 0x1
 3594 000f 10       		.uleb128 0x10
 3595 0010 17       		.uleb128 0x17
 3596 0011 00       		.byte	0
 3597 0012 00       		.byte	0
 3598 0013 02       		.uleb128 0x2
 3599 0014 24       		.uleb128 0x24
 3600 0015 00       		.byte	0
 3601 0016 0B       		.uleb128 0xb
 3602 0017 0B       		.uleb128 0xb
ARM GAS  C:\Users\Gusta\AppData\Local\Temp\ccugn2Vx.s 			page 90


 3603 0018 3E       		.uleb128 0x3e
 3604 0019 0B       		.uleb128 0xb
 3605 001a 03       		.uleb128 0x3
 3606 001b 0E       		.uleb128 0xe
 3607 001c 00       		.byte	0
 3608 001d 00       		.byte	0
 3609 001e 03       		.uleb128 0x3
 3610 001f 16       		.uleb128 0x16
 3611 0020 00       		.byte	0
 3612 0021 03       		.uleb128 0x3
 3613 0022 0E       		.uleb128 0xe
 3614 0023 3A       		.uleb128 0x3a
 3615 0024 0B       		.uleb128 0xb
 3616 0025 3B       		.uleb128 0x3b
 3617 0026 0B       		.uleb128 0xb
 3618 0027 49       		.uleb128 0x49
 3619 0028 13       		.uleb128 0x13
 3620 0029 00       		.byte	0
 3621 002a 00       		.byte	0
 3622 002b 04       		.uleb128 0x4
 3623 002c 24       		.uleb128 0x24
 3624 002d 00       		.byte	0
 3625 002e 0B       		.uleb128 0xb
 3626 002f 0B       		.uleb128 0xb
 3627 0030 3E       		.uleb128 0x3e
 3628 0031 0B       		.uleb128 0xb
 3629 0032 03       		.uleb128 0x3
 3630 0033 08       		.uleb128 0x8
 3631 0034 00       		.byte	0
 3632 0035 00       		.byte	0
 3633 0036 05       		.uleb128 0x5
 3634 0037 0F       		.uleb128 0xf
 3635 0038 00       		.byte	0
 3636 0039 0B       		.uleb128 0xb
 3637 003a 0B       		.uleb128 0xb
 3638 003b 00       		.byte	0
 3639 003c 00       		.byte	0
 3640 003d 06       		.uleb128 0x6
 3641 003e 16       		.uleb128 0x16
 3642 003f 00       		.byte	0
 3643 0040 03       		.uleb128 0x3
 3644 0041 0E       		.uleb128 0xe
 3645 0042 3A       		.uleb128 0x3a
 3646 0043 0B       		.uleb128 0xb
 3647 0044 3B       		.uleb128 0x3b
 3648 0045 05       		.uleb128 0x5
 3649 0046 49       		.uleb128 0x49
 3650 0047 13       		.uleb128 0x13
 3651 0048 00       		.byte	0
 3652 0049 00       		.byte	0
 3653 004a 07       		.uleb128 0x7
 3654 004b 35       		.uleb128 0x35
 3655 004c 00       		.byte	0
 3656 004d 49       		.uleb128 0x49
 3657 004e 13       		.uleb128 0x13
 3658 004f 00       		.byte	0
 3659 0050 00       		.byte	0
ARM GAS  C:\Users\Gusta\AppData\Local\Temp\ccugn2Vx.s 			page 91


 3660 0051 08       		.uleb128 0x8
 3661 0052 13       		.uleb128 0x13
 3662 0053 01       		.byte	0x1
 3663 0054 03       		.uleb128 0x3
 3664 0055 0E       		.uleb128 0xe
 3665 0056 0B       		.uleb128 0xb
 3666 0057 0B       		.uleb128 0xb
 3667 0058 3A       		.uleb128 0x3a
 3668 0059 0B       		.uleb128 0xb
 3669 005a 3B       		.uleb128 0x3b
 3670 005b 0B       		.uleb128 0xb
 3671 005c 01       		.uleb128 0x1
 3672 005d 13       		.uleb128 0x13
 3673 005e 00       		.byte	0
 3674 005f 00       		.byte	0
 3675 0060 09       		.uleb128 0x9
 3676 0061 0D       		.uleb128 0xd
 3677 0062 00       		.byte	0
 3678 0063 03       		.uleb128 0x3
 3679 0064 0E       		.uleb128 0xe
 3680 0065 3A       		.uleb128 0x3a
 3681 0066 0B       		.uleb128 0xb
 3682 0067 3B       		.uleb128 0x3b
 3683 0068 0B       		.uleb128 0xb
 3684 0069 49       		.uleb128 0x49
 3685 006a 13       		.uleb128 0x13
 3686 006b 38       		.uleb128 0x38
 3687 006c 0B       		.uleb128 0xb
 3688 006d 00       		.byte	0
 3689 006e 00       		.byte	0
 3690 006f 0A       		.uleb128 0xa
 3691 0070 0F       		.uleb128 0xf
 3692 0071 00       		.byte	0
 3693 0072 0B       		.uleb128 0xb
 3694 0073 0B       		.uleb128 0xb
 3695 0074 49       		.uleb128 0x49
 3696 0075 13       		.uleb128 0x13
 3697 0076 00       		.byte	0
 3698 0077 00       		.byte	0
 3699 0078 0B       		.uleb128 0xb
 3700 0079 13       		.uleb128 0x13
 3701 007a 00       		.byte	0
 3702 007b 03       		.uleb128 0x3
 3703 007c 0E       		.uleb128 0xe
 3704 007d 3C       		.uleb128 0x3c
 3705 007e 19       		.uleb128 0x19
 3706 007f 00       		.byte	0
 3707 0080 00       		.byte	0
 3708 0081 0C       		.uleb128 0xc
 3709 0082 04       		.uleb128 0x4
 3710 0083 01       		.byte	0x1
 3711 0084 0B       		.uleb128 0xb
 3712 0085 0B       		.uleb128 0xb
 3713 0086 49       		.uleb128 0x49
 3714 0087 13       		.uleb128 0x13
 3715 0088 3A       		.uleb128 0x3a
 3716 0089 0B       		.uleb128 0xb
ARM GAS  C:\Users\Gusta\AppData\Local\Temp\ccugn2Vx.s 			page 92


 3717 008a 3B       		.uleb128 0x3b
 3718 008b 0B       		.uleb128 0xb
 3719 008c 01       		.uleb128 0x1
 3720 008d 13       		.uleb128 0x13
 3721 008e 00       		.byte	0
 3722 008f 00       		.byte	0
 3723 0090 0D       		.uleb128 0xd
 3724 0091 28       		.uleb128 0x28
 3725 0092 00       		.byte	0
 3726 0093 03       		.uleb128 0x3
 3727 0094 0E       		.uleb128 0xe
 3728 0095 1C       		.uleb128 0x1c
 3729 0096 0B       		.uleb128 0xb
 3730 0097 00       		.byte	0
 3731 0098 00       		.byte	0
 3732 0099 0E       		.uleb128 0xe
 3733 009a 2E       		.uleb128 0x2e
 3734 009b 01       		.byte	0x1
 3735 009c 03       		.uleb128 0x3
 3736 009d 0E       		.uleb128 0xe
 3737 009e 3A       		.uleb128 0x3a
 3738 009f 0B       		.uleb128 0xb
 3739 00a0 3B       		.uleb128 0x3b
 3740 00a1 0B       		.uleb128 0xb
 3741 00a2 27       		.uleb128 0x27
 3742 00a3 19       		.uleb128 0x19
 3743 00a4 49       		.uleb128 0x49
 3744 00a5 13       		.uleb128 0x13
 3745 00a6 20       		.uleb128 0x20
 3746 00a7 0B       		.uleb128 0xb
 3747 00a8 01       		.uleb128 0x1
 3748 00a9 13       		.uleb128 0x13
 3749 00aa 00       		.byte	0
 3750 00ab 00       		.byte	0
 3751 00ac 0F       		.uleb128 0xf
 3752 00ad 34       		.uleb128 0x34
 3753 00ae 00       		.byte	0
 3754 00af 03       		.uleb128 0x3
 3755 00b0 0E       		.uleb128 0xe
 3756 00b1 3A       		.uleb128 0x3a
 3757 00b2 0B       		.uleb128 0xb
 3758 00b3 3B       		.uleb128 0x3b
 3759 00b4 0B       		.uleb128 0xb
 3760 00b5 49       		.uleb128 0x49
 3761 00b6 13       		.uleb128 0x13
 3762 00b7 00       		.byte	0
 3763 00b8 00       		.byte	0
 3764 00b9 10       		.uleb128 0x10
 3765 00ba 2E       		.uleb128 0x2e
 3766 00bb 01       		.byte	0x1
 3767 00bc 03       		.uleb128 0x3
 3768 00bd 0E       		.uleb128 0xe
 3769 00be 3A       		.uleb128 0x3a
 3770 00bf 0B       		.uleb128 0xb
 3771 00c0 3B       		.uleb128 0x3b
 3772 00c1 0B       		.uleb128 0xb
 3773 00c2 27       		.uleb128 0x27
ARM GAS  C:\Users\Gusta\AppData\Local\Temp\ccugn2Vx.s 			page 93


 3774 00c3 19       		.uleb128 0x19
 3775 00c4 20       		.uleb128 0x20
 3776 00c5 0B       		.uleb128 0xb
 3777 00c6 01       		.uleb128 0x1
 3778 00c7 13       		.uleb128 0x13
 3779 00c8 00       		.byte	0
 3780 00c9 00       		.byte	0
 3781 00ca 11       		.uleb128 0x11
 3782 00cb 05       		.uleb128 0x5
 3783 00cc 00       		.byte	0
 3784 00cd 03       		.uleb128 0x3
 3785 00ce 0E       		.uleb128 0xe
 3786 00cf 3A       		.uleb128 0x3a
 3787 00d0 0B       		.uleb128 0xb
 3788 00d1 3B       		.uleb128 0x3b
 3789 00d2 0B       		.uleb128 0xb
 3790 00d3 49       		.uleb128 0x49
 3791 00d4 13       		.uleb128 0x13
 3792 00d5 00       		.byte	0
 3793 00d6 00       		.byte	0
 3794 00d7 12       		.uleb128 0x12
 3795 00d8 2E       		.uleb128 0x2e
 3796 00d9 01       		.byte	0x1
 3797 00da 3F       		.uleb128 0x3f
 3798 00db 19       		.uleb128 0x19
 3799 00dc 03       		.uleb128 0x3
 3800 00dd 0E       		.uleb128 0xe
 3801 00de 3A       		.uleb128 0x3a
 3802 00df 0B       		.uleb128 0xb
 3803 00e0 3B       		.uleb128 0x3b
 3804 00e1 0B       		.uleb128 0xb
 3805 00e2 27       		.uleb128 0x27
 3806 00e3 19       		.uleb128 0x19
 3807 00e4 49       		.uleb128 0x49
 3808 00e5 13       		.uleb128 0x13
 3809 00e6 11       		.uleb128 0x11
 3810 00e7 01       		.uleb128 0x1
 3811 00e8 12       		.uleb128 0x12
 3812 00e9 06       		.uleb128 0x6
 3813 00ea 40       		.uleb128 0x40
 3814 00eb 18       		.uleb128 0x18
 3815 00ec 9642     		.uleb128 0x2116
 3816 00ee 19       		.uleb128 0x19
 3817 00ef 01       		.uleb128 0x1
 3818 00f0 13       		.uleb128 0x13
 3819 00f1 00       		.byte	0
 3820 00f2 00       		.byte	0
 3821 00f3 13       		.uleb128 0x13
 3822 00f4 05       		.uleb128 0x5
 3823 00f5 00       		.byte	0
 3824 00f6 03       		.uleb128 0x3
 3825 00f7 0E       		.uleb128 0xe
 3826 00f8 3A       		.uleb128 0x3a
 3827 00f9 0B       		.uleb128 0xb
 3828 00fa 3B       		.uleb128 0x3b
 3829 00fb 0B       		.uleb128 0xb
 3830 00fc 49       		.uleb128 0x49
ARM GAS  C:\Users\Gusta\AppData\Local\Temp\ccugn2Vx.s 			page 94


 3831 00fd 13       		.uleb128 0x13
 3832 00fe 02       		.uleb128 0x2
 3833 00ff 18       		.uleb128 0x18
 3834 0100 00       		.byte	0
 3835 0101 00       		.byte	0
 3836 0102 14       		.uleb128 0x14
 3837 0103 34       		.uleb128 0x34
 3838 0104 00       		.byte	0
 3839 0105 03       		.uleb128 0x3
 3840 0106 0E       		.uleb128 0xe
 3841 0107 3A       		.uleb128 0x3a
 3842 0108 0B       		.uleb128 0xb
 3843 0109 3B       		.uleb128 0x3b
 3844 010a 0B       		.uleb128 0xb
 3845 010b 49       		.uleb128 0x49
 3846 010c 13       		.uleb128 0x13
 3847 010d 02       		.uleb128 0x2
 3848 010e 18       		.uleb128 0x18
 3849 010f 00       		.byte	0
 3850 0110 00       		.byte	0
 3851 0111 15       		.uleb128 0x15
 3852 0112 2E       		.uleb128 0x2e
 3853 0113 01       		.byte	0x1
 3854 0114 3F       		.uleb128 0x3f
 3855 0115 19       		.uleb128 0x19
 3856 0116 03       		.uleb128 0x3
 3857 0117 0E       		.uleb128 0xe
 3858 0118 3A       		.uleb128 0x3a
 3859 0119 0B       		.uleb128 0xb
 3860 011a 3B       		.uleb128 0x3b
 3861 011b 05       		.uleb128 0x5
 3862 011c 27       		.uleb128 0x27
 3863 011d 19       		.uleb128 0x19
 3864 011e 11       		.uleb128 0x11
 3865 011f 01       		.uleb128 0x1
 3866 0120 12       		.uleb128 0x12
 3867 0121 06       		.uleb128 0x6
 3868 0122 40       		.uleb128 0x40
 3869 0123 18       		.uleb128 0x18
 3870 0124 9642     		.uleb128 0x2116
 3871 0126 19       		.uleb128 0x19
 3872 0127 01       		.uleb128 0x1
 3873 0128 13       		.uleb128 0x13
 3874 0129 00       		.byte	0
 3875 012a 00       		.byte	0
 3876 012b 16       		.uleb128 0x16
 3877 012c 05       		.uleb128 0x5
 3878 012d 00       		.byte	0
 3879 012e 03       		.uleb128 0x3
 3880 012f 0E       		.uleb128 0xe
 3881 0130 3A       		.uleb128 0x3a
 3882 0131 0B       		.uleb128 0xb
 3883 0132 3B       		.uleb128 0x3b
 3884 0133 05       		.uleb128 0x5
 3885 0134 49       		.uleb128 0x49
 3886 0135 13       		.uleb128 0x13
 3887 0136 02       		.uleb128 0x2
ARM GAS  C:\Users\Gusta\AppData\Local\Temp\ccugn2Vx.s 			page 95


 3888 0137 18       		.uleb128 0x18
 3889 0138 00       		.byte	0
 3890 0139 00       		.byte	0
 3891 013a 17       		.uleb128 0x17
 3892 013b 34       		.uleb128 0x34
 3893 013c 00       		.byte	0
 3894 013d 03       		.uleb128 0x3
 3895 013e 0E       		.uleb128 0xe
 3896 013f 3A       		.uleb128 0x3a
 3897 0140 0B       		.uleb128 0xb
 3898 0141 3B       		.uleb128 0x3b
 3899 0142 05       		.uleb128 0x5
 3900 0143 49       		.uleb128 0x49
 3901 0144 13       		.uleb128 0x13
 3902 0145 02       		.uleb128 0x2
 3903 0146 18       		.uleb128 0x18
 3904 0147 00       		.byte	0
 3905 0148 00       		.byte	0
 3906 0149 18       		.uleb128 0x18
 3907 014a 2E       		.uleb128 0x2e
 3908 014b 01       		.byte	0x1
 3909 014c 3F       		.uleb128 0x3f
 3910 014d 19       		.uleb128 0x19
 3911 014e 03       		.uleb128 0x3
 3912 014f 0E       		.uleb128 0xe
 3913 0150 3A       		.uleb128 0x3a
 3914 0151 0B       		.uleb128 0xb
 3915 0152 3B       		.uleb128 0x3b
 3916 0153 05       		.uleb128 0x5
 3917 0154 27       		.uleb128 0x27
 3918 0155 19       		.uleb128 0x19
 3919 0156 49       		.uleb128 0x49
 3920 0157 13       		.uleb128 0x13
 3921 0158 11       		.uleb128 0x11
 3922 0159 01       		.uleb128 0x1
 3923 015a 12       		.uleb128 0x12
 3924 015b 06       		.uleb128 0x6
 3925 015c 40       		.uleb128 0x40
 3926 015d 18       		.uleb128 0x18
 3927 015e 9642     		.uleb128 0x2116
 3928 0160 19       		.uleb128 0x19
 3929 0161 01       		.uleb128 0x1
 3930 0162 13       		.uleb128 0x13
 3931 0163 00       		.byte	0
 3932 0164 00       		.byte	0
 3933 0165 19       		.uleb128 0x19
 3934 0166 26       		.uleb128 0x26
 3935 0167 00       		.byte	0
 3936 0168 49       		.uleb128 0x49
 3937 0169 13       		.uleb128 0x13
 3938 016a 00       		.byte	0
 3939 016b 00       		.byte	0
 3940 016c 1A       		.uleb128 0x1a
 3941 016d 2E       		.uleb128 0x2e
 3942 016e 01       		.byte	0x1
 3943 016f 3F       		.uleb128 0x3f
 3944 0170 19       		.uleb128 0x19
ARM GAS  C:\Users\Gusta\AppData\Local\Temp\ccugn2Vx.s 			page 96


 3945 0171 03       		.uleb128 0x3
 3946 0172 0E       		.uleb128 0xe
 3947 0173 3A       		.uleb128 0x3a
 3948 0174 0B       		.uleb128 0xb
 3949 0175 3B       		.uleb128 0x3b
 3950 0176 05       		.uleb128 0x5
 3951 0177 27       		.uleb128 0x27
 3952 0178 19       		.uleb128 0x19
 3953 0179 49       		.uleb128 0x49
 3954 017a 13       		.uleb128 0x13
 3955 017b 11       		.uleb128 0x11
 3956 017c 01       		.uleb128 0x1
 3957 017d 12       		.uleb128 0x12
 3958 017e 06       		.uleb128 0x6
 3959 017f 40       		.uleb128 0x40
 3960 0180 18       		.uleb128 0x18
 3961 0181 9742     		.uleb128 0x2117
 3962 0183 19       		.uleb128 0x19
 3963 0184 01       		.uleb128 0x1
 3964 0185 13       		.uleb128 0x13
 3965 0186 00       		.byte	0
 3966 0187 00       		.byte	0
 3967 0188 1B       		.uleb128 0x1b
 3968 0189 26       		.uleb128 0x26
 3969 018a 00       		.byte	0
 3970 018b 00       		.byte	0
 3971 018c 00       		.byte	0
 3972 018d 1C       		.uleb128 0x1c
 3973 018e 0B       		.uleb128 0xb
 3974 018f 01       		.byte	0x1
 3975 0190 11       		.uleb128 0x11
 3976 0191 01       		.uleb128 0x1
 3977 0192 12       		.uleb128 0x12
 3978 0193 06       		.uleb128 0x6
 3979 0194 00       		.byte	0
 3980 0195 00       		.byte	0
 3981 0196 1D       		.uleb128 0x1d
 3982 0197 1D       		.uleb128 0x1d
 3983 0198 01       		.byte	0x1
 3984 0199 31       		.uleb128 0x31
 3985 019a 13       		.uleb128 0x13
 3986 019b 11       		.uleb128 0x11
 3987 019c 01       		.uleb128 0x1
 3988 019d 12       		.uleb128 0x12
 3989 019e 06       		.uleb128 0x6
 3990 019f 58       		.uleb128 0x58
 3991 01a0 0B       		.uleb128 0xb
 3992 01a1 59       		.uleb128 0x59
 3993 01a2 05       		.uleb128 0x5
 3994 01a3 01       		.uleb128 0x1
 3995 01a4 13       		.uleb128 0x13
 3996 01a5 00       		.byte	0
 3997 01a6 00       		.byte	0
 3998 01a7 1E       		.uleb128 0x1e
 3999 01a8 34       		.uleb128 0x34
 4000 01a9 00       		.byte	0
 4001 01aa 31       		.uleb128 0x31
ARM GAS  C:\Users\Gusta\AppData\Local\Temp\ccugn2Vx.s 			page 97


 4002 01ab 13       		.uleb128 0x13
 4003 01ac 02       		.uleb128 0x2
 4004 01ad 18       		.uleb128 0x18
 4005 01ae 00       		.byte	0
 4006 01af 00       		.byte	0
 4007 01b0 1F       		.uleb128 0x1f
 4008 01b1 1D       		.uleb128 0x1d
 4009 01b2 01       		.byte	0x1
 4010 01b3 31       		.uleb128 0x31
 4011 01b4 13       		.uleb128 0x13
 4012 01b5 11       		.uleb128 0x11
 4013 01b6 01       		.uleb128 0x1
 4014 01b7 12       		.uleb128 0x12
 4015 01b8 06       		.uleb128 0x6
 4016 01b9 58       		.uleb128 0x58
 4017 01ba 0B       		.uleb128 0xb
 4018 01bb 59       		.uleb128 0x59
 4019 01bc 05       		.uleb128 0x5
 4020 01bd 00       		.byte	0
 4021 01be 00       		.byte	0
 4022 01bf 20       		.uleb128 0x20
 4023 01c0 05       		.uleb128 0x5
 4024 01c1 00       		.byte	0
 4025 01c2 31       		.uleb128 0x31
 4026 01c3 13       		.uleb128 0x13
 4027 01c4 02       		.uleb128 0x2
 4028 01c5 18       		.uleb128 0x18
 4029 01c6 00       		.byte	0
 4030 01c7 00       		.byte	0
 4031 01c8 21       		.uleb128 0x21
 4032 01c9 2E       		.uleb128 0x2e
 4033 01ca 01       		.byte	0x1
 4034 01cb 03       		.uleb128 0x3
 4035 01cc 0E       		.uleb128 0xe
 4036 01cd 3A       		.uleb128 0x3a
 4037 01ce 0B       		.uleb128 0xb
 4038 01cf 3B       		.uleb128 0x3b
 4039 01d0 05       		.uleb128 0x5
 4040 01d1 27       		.uleb128 0x27
 4041 01d2 19       		.uleb128 0x19
 4042 01d3 49       		.uleb128 0x49
 4043 01d4 13       		.uleb128 0x13
 4044 01d5 11       		.uleb128 0x11
 4045 01d6 01       		.uleb128 0x1
 4046 01d7 12       		.uleb128 0x12
 4047 01d8 06       		.uleb128 0x6
 4048 01d9 40       		.uleb128 0x40
 4049 01da 18       		.uleb128 0x18
 4050 01db 9642     		.uleb128 0x2116
 4051 01dd 19       		.uleb128 0x19
 4052 01de 01       		.uleb128 0x1
 4053 01df 13       		.uleb128 0x13
 4054 01e0 00       		.byte	0
 4055 01e1 00       		.byte	0
 4056 01e2 22       		.uleb128 0x22
 4057 01e3 2E       		.uleb128 0x2e
 4058 01e4 01       		.byte	0x1
ARM GAS  C:\Users\Gusta\AppData\Local\Temp\ccugn2Vx.s 			page 98


 4059 01e5 03       		.uleb128 0x3
 4060 01e6 0E       		.uleb128 0xe
 4061 01e7 3A       		.uleb128 0x3a
 4062 01e8 0B       		.uleb128 0xb
 4063 01e9 3B       		.uleb128 0x3b
 4064 01ea 05       		.uleb128 0x5
 4065 01eb 27       		.uleb128 0x27
 4066 01ec 19       		.uleb128 0x19
 4067 01ed 49       		.uleb128 0x49
 4068 01ee 13       		.uleb128 0x13
 4069 01ef 11       		.uleb128 0x11
 4070 01f0 01       		.uleb128 0x1
 4071 01f1 12       		.uleb128 0x12
 4072 01f2 06       		.uleb128 0x6
 4073 01f3 40       		.uleb128 0x40
 4074 01f4 18       		.uleb128 0x18
 4075 01f5 9742     		.uleb128 0x2117
 4076 01f7 19       		.uleb128 0x19
 4077 01f8 01       		.uleb128 0x1
 4078 01f9 13       		.uleb128 0x13
 4079 01fa 00       		.byte	0
 4080 01fb 00       		.byte	0
 4081 01fc 23       		.uleb128 0x23
 4082 01fd 2E       		.uleb128 0x2e
 4083 01fe 01       		.byte	0x1
 4084 01ff 03       		.uleb128 0x3
 4085 0200 0E       		.uleb128 0xe
 4086 0201 3A       		.uleb128 0x3a
 4087 0202 0B       		.uleb128 0xb
 4088 0203 3B       		.uleb128 0x3b
 4089 0204 05       		.uleb128 0x5
 4090 0205 27       		.uleb128 0x27
 4091 0206 19       		.uleb128 0x19
 4092 0207 11       		.uleb128 0x11
 4093 0208 01       		.uleb128 0x1
 4094 0209 12       		.uleb128 0x12
 4095 020a 06       		.uleb128 0x6
 4096 020b 40       		.uleb128 0x40
 4097 020c 18       		.uleb128 0x18
 4098 020d 9642     		.uleb128 0x2116
 4099 020f 19       		.uleb128 0x19
 4100 0210 01       		.uleb128 0x1
 4101 0211 13       		.uleb128 0x13
 4102 0212 00       		.byte	0
 4103 0213 00       		.byte	0
 4104 0214 24       		.uleb128 0x24
 4105 0215 01       		.uleb128 0x1
 4106 0216 01       		.byte	0x1
 4107 0217 49       		.uleb128 0x49
 4108 0218 13       		.uleb128 0x13
 4109 0219 01       		.uleb128 0x1
 4110 021a 13       		.uleb128 0x13
 4111 021b 00       		.byte	0
 4112 021c 00       		.byte	0
 4113 021d 25       		.uleb128 0x25
 4114 021e 21       		.uleb128 0x21
 4115 021f 00       		.byte	0
ARM GAS  C:\Users\Gusta\AppData\Local\Temp\ccugn2Vx.s 			page 99


 4116 0220 49       		.uleb128 0x49
 4117 0221 13       		.uleb128 0x13
 4118 0222 2F       		.uleb128 0x2f
 4119 0223 0B       		.uleb128 0xb
 4120 0224 00       		.byte	0
 4121 0225 00       		.byte	0
 4122 0226 26       		.uleb128 0x26
 4123 0227 34       		.uleb128 0x34
 4124 0228 00       		.byte	0
 4125 0229 03       		.uleb128 0x3
 4126 022a 0E       		.uleb128 0xe
 4127 022b 3A       		.uleb128 0x3a
 4128 022c 0B       		.uleb128 0xb
 4129 022d 3B       		.uleb128 0x3b
 4130 022e 0B       		.uleb128 0xb
 4131 022f 49       		.uleb128 0x49
 4132 0230 13       		.uleb128 0x13
 4133 0231 3F       		.uleb128 0x3f
 4134 0232 19       		.uleb128 0x19
 4135 0233 02       		.uleb128 0x2
 4136 0234 18       		.uleb128 0x18
 4137 0235 00       		.byte	0
 4138 0236 00       		.byte	0
 4139 0237 27       		.uleb128 0x27
 4140 0238 34       		.uleb128 0x34
 4141 0239 00       		.byte	0
 4142 023a 03       		.uleb128 0x3
 4143 023b 0E       		.uleb128 0xe
 4144 023c 3A       		.uleb128 0x3a
 4145 023d 0B       		.uleb128 0xb
 4146 023e 3B       		.uleb128 0x3b
 4147 023f 05       		.uleb128 0x5
 4148 0240 49       		.uleb128 0x49
 4149 0241 13       		.uleb128 0x13
 4150 0242 3F       		.uleb128 0x3f
 4151 0243 19       		.uleb128 0x19
 4152 0244 3C       		.uleb128 0x3c
 4153 0245 19       		.uleb128 0x19
 4154 0246 00       		.byte	0
 4155 0247 00       		.byte	0
 4156 0248 00       		.byte	0
 4157              		.section	.debug_aranges,"",%progbits
 4158 0000 BC000000 		.4byte	0xbc
 4159 0004 0200     		.2byte	0x2
 4160 0006 00000000 		.4byte	.Ldebug_info0
 4161 000a 04       		.byte	0x4
 4162 000b 00       		.byte	0
 4163 000c 0000     		.2byte	0
 4164 000e 0000     		.2byte	0
 4165 0010 00000000 		.4byte	.LFB68
 4166 0014 5C000000 		.4byte	.LFE68-.LFB68
 4167 0018 00000000 		.4byte	.LFB69
 4168 001c 32000000 		.4byte	.LFE69-.LFB69
 4169 0020 00000000 		.4byte	.LFB70
 4170 0024 50000000 		.4byte	.LFE70-.LFB70
 4171 0028 00000000 		.4byte	.LFB71
 4172 002c 3E000000 		.4byte	.LFE71-.LFB71
ARM GAS  C:\Users\Gusta\AppData\Local\Temp\ccugn2Vx.s 			page 100


 4173 0030 00000000 		.4byte	.LFB72
 4174 0034 48000000 		.4byte	.LFE72-.LFB72
 4175 0038 00000000 		.4byte	.LFB73
 4176 003c 1E000000 		.4byte	.LFE73-.LFB73
 4177 0040 00000000 		.4byte	.LFB74
 4178 0044 F6000000 		.4byte	.LFE74-.LFB74
 4179 0048 00000000 		.4byte	.LFB75
 4180 004c A8000000 		.4byte	.LFE75-.LFB75
 4181 0050 00000000 		.4byte	.LFB76
 4182 0054 7A000000 		.4byte	.LFE76-.LFB76
 4183 0058 00000000 		.4byte	.LFB77
 4184 005c D4000000 		.4byte	.LFE77-.LFB77
 4185 0060 00000000 		.4byte	.LFB78
 4186 0064 5A000000 		.4byte	.LFE78-.LFB78
 4187 0068 00000000 		.4byte	.LFB79
 4188 006c A4000000 		.4byte	.LFE79-.LFB79
 4189 0070 00000000 		.4byte	.LFB80
 4190 0074 64000000 		.4byte	.LFE80-.LFB80
 4191 0078 00000000 		.4byte	.LFB81
 4192 007c 32000000 		.4byte	.LFE81-.LFB81
 4193 0080 00000000 		.4byte	.LFB82
 4194 0084 44000000 		.4byte	.LFE82-.LFB82
 4195 0088 00000000 		.4byte	.LFB83
 4196 008c 68000000 		.4byte	.LFE83-.LFB83
 4197 0090 00000000 		.4byte	.LFB84
 4198 0094 68000000 		.4byte	.LFE84-.LFB84
 4199 0098 00000000 		.4byte	.LFB85
 4200 009c 80000000 		.4byte	.LFE85-.LFB85
 4201 00a0 00000000 		.4byte	.LFB86
 4202 00a4 94000000 		.4byte	.LFE86-.LFB86
 4203 00a8 00000000 		.4byte	.LFB87
 4204 00ac 3E000000 		.4byte	.LFE87-.LFB87
 4205 00b0 00000000 		.4byte	.LFB88
 4206 00b4 38000000 		.4byte	.LFE88-.LFB88
 4207 00b8 00000000 		.4byte	0
 4208 00bc 00000000 		.4byte	0
 4209              		.section	.debug_ranges,"",%progbits
 4210              	.Ldebug_ranges0:
 4211 0000 00000000 		.4byte	.LFB68
 4212 0004 5C000000 		.4byte	.LFE68
 4213 0008 00000000 		.4byte	.LFB69
 4214 000c 32000000 		.4byte	.LFE69
 4215 0010 00000000 		.4byte	.LFB70
 4216 0014 50000000 		.4byte	.LFE70
 4217 0018 00000000 		.4byte	.LFB71
 4218 001c 3E000000 		.4byte	.LFE71
 4219 0020 00000000 		.4byte	.LFB72
 4220 0024 48000000 		.4byte	.LFE72
 4221 0028 00000000 		.4byte	.LFB73
 4222 002c 1E000000 		.4byte	.LFE73
 4223 0030 00000000 		.4byte	.LFB74
 4224 0034 F6000000 		.4byte	.LFE74
 4225 0038 00000000 		.4byte	.LFB75
 4226 003c A8000000 		.4byte	.LFE75
 4227 0040 00000000 		.4byte	.LFB76
 4228 0044 7A000000 		.4byte	.LFE76
 4229 0048 00000000 		.4byte	.LFB77
ARM GAS  C:\Users\Gusta\AppData\Local\Temp\ccugn2Vx.s 			page 101


 4230 004c D4000000 		.4byte	.LFE77
 4231 0050 00000000 		.4byte	.LFB78
 4232 0054 5A000000 		.4byte	.LFE78
 4233 0058 00000000 		.4byte	.LFB79
 4234 005c A4000000 		.4byte	.LFE79
 4235 0060 00000000 		.4byte	.LFB80
 4236 0064 64000000 		.4byte	.LFE80
 4237 0068 00000000 		.4byte	.LFB81
 4238 006c 32000000 		.4byte	.LFE81
 4239 0070 00000000 		.4byte	.LFB82
 4240 0074 44000000 		.4byte	.LFE82
 4241 0078 00000000 		.4byte	.LFB83
 4242 007c 68000000 		.4byte	.LFE83
 4243 0080 00000000 		.4byte	.LFB84
 4244 0084 68000000 		.4byte	.LFE84
 4245 0088 00000000 		.4byte	.LFB85
 4246 008c 80000000 		.4byte	.LFE85
 4247 0090 00000000 		.4byte	.LFB86
 4248 0094 94000000 		.4byte	.LFE86
 4249 0098 00000000 		.4byte	.LFB87
 4250 009c 3E000000 		.4byte	.LFE87
 4251 00a0 00000000 		.4byte	.LFB88
 4252 00a4 38000000 		.4byte	.LFE88
 4253 00a8 00000000 		.4byte	0
 4254 00ac 00000000 		.4byte	0
 4255              		.section	.debug_line,"",%progbits
 4256              	.Ldebug_line0:
 4257 0000 33050000 		.section	.debug_str,"MS",%progbits,1
 4257      02004502 
 4257      00000201 
 4257      FB0E0D00 
 4257      01010101 
 4258              	.LASF74:
 4259 0000 7853686F 		.ascii	"xShouldWrite\000"
 4259      756C6457 
 4259      72697465 
 4259      00
 4260              	.LASF77:
 4261 000d 78427566 		.ascii	"xBufferLengthBytes\000"
 4261      6665724C 
 4261      656E6774 
 4261      68427974 
 4261      657300
 4262              	.LASF50:
 4263 0020 756C4F72 		.ascii	"ulOriginalBASEPRI\000"
 4263      6967696E 
 4263      616C4241 
 4263      53455052 
 4263      4900
 4264              	.LASF29:
 4265 0032 654E6F41 		.ascii	"eNoAction\000"
 4265      6374696F 
 4265      6E00
 4266              	.LASF57:
 4267 003c 78537472 		.ascii	"xStreamBufferGenericCreate\000"
 4267      65616D42 
 4267      75666665 
ARM GAS  C:\Users\Gusta\AppData\Local\Temp\ccugn2Vx.s 			page 102


 4267      7247656E 
 4267      65726963 
 4268              	.LASF51:
 4269 0057 756C4E65 		.ascii	"ulNewBASEPRI\000"
 4269      77424153 
 4269      45505249 
 4269      00
 4270              	.LASF95:
 4271 0064 78436F75 		.ascii	"xCount\000"
 4271      6E7400
 4272              	.LASF112:
 4273 006b 76537472 		.ascii	"vStreamBufferDelete\000"
 4273      65616D42 
 4273      75666665 
 4273      7244656C 
 4273      65746500 
 4274              	.LASF35:
 4275 007f 7854494D 		.ascii	"xTIME_OUT\000"
 4275      455F4F55 
 4275      5400
 4276              	.LASF75:
 4277 0089 78537472 		.ascii	"xStreamBufferReceive\000"
 4277      65616D42 
 4277      75666665 
 4277      72526563 
 4277      65697665 
 4278              	.LASF40:
 4279 009e 53747265 		.ascii	"StreamBufferDef_t\000"
 4279      616D4275 
 4279      66666572 
 4279      4465665F 
 4279      7400
 4280              	.LASF38:
 4281 00b0 54696D65 		.ascii	"TimeOut_t\000"
 4281      4F75745F 
 4281      7400
 4282              	.LASF2:
 4283 00ba 73686F72 		.ascii	"short int\000"
 4283      7420696E 
 4283      7400
 4284              	.LASF15:
 4285 00c4 73697A65 		.ascii	"size_t\000"
 4285      5F7400
 4286              	.LASF17:
 4287 00cb 73697A65 		.ascii	"sizetype\000"
 4287      74797065 
 4287      00
 4288              	.LASF102:
 4289 00d4 44533138 		.ascii	"DS18x8_Sensor\000"
 4289      78385F53 
 4289      656E736F 
 4289      7200
 4290              	.LASF28:
 4291 00e2 5461736B 		.ascii	"TaskHandle_t\000"
 4291      48616E64 
 4291      6C655F74 
 4291      00
ARM GAS  C:\Users\Gusta\AppData\Local\Temp\ccugn2Vx.s 			page 103


 4292              	.LASF92:
 4293 00ef 78537472 		.ascii	"xStreamBufferReceiveCompletedFromISR\000"
 4293      65616D42 
 4293      75666665 
 4293      72526563 
 4293      65697665 
 4294              	.LASF79:
 4295 0114 78427974 		.ascii	"xBytesAvailable\000"
 4295      65734176 
 4295      61696C61 
 4295      626C6500 
 4296              	.LASF106:
 4297 0124 536F7572 		.ascii	"Source\\stream_buffer.c\000"
 4297      63655C73 
 4297      74726561 
 4297      6D5F6275 
 4297      66666572 
 4298              	.LASF105:
 4299 013b 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 4299      43313120 
 4299      352E342E 
 4299      31203230 
 4299      31363036 
 4300 016e 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 4300      20726576 
 4300      6973696F 
 4300      6E203233 
 4300      37373135 
 4301 01a1 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 4301      66756E63 
 4301      74696F6E 
 4301      2D736563 
 4301      74696F6E 
 4302              	.LASF87:
 4303 01c9 784E6578 		.ascii	"xNextMessageLength\000"
 4303      744D6573 
 4303      73616765 
 4303      4C656E67 
 4303      746800
 4304              	.LASF96:
 4305 01dc 784E6578 		.ascii	"xNextHead\000"
 4305      74486561 
 4305      6400
 4306              	.LASF7:
 4307 01e6 5F5F7569 		.ascii	"__uint32_t\000"
 4307      6E743332 
 4307      5F7400
 4308              	.LASF67:
 4309 01f1 78446174 		.ascii	"xDataLengthBytes\000"
 4309      614C656E 
 4309      67746842 
 4309      79746573 
 4309      00
 4310              	.LASF47:
 4311 0202 70756342 		.ascii	"pucBuffer\000"
 4311      75666665 
 4311      7200
ARM GAS  C:\Users\Gusta\AppData\Local\Temp\ccugn2Vx.s 			page 104


 4312              	.LASF97:
 4313 020c 78466972 		.ascii	"xFirstLength\000"
 4313      73744C65 
 4313      6E677468 
 4313      00
 4314              	.LASF70:
 4315 0219 7854696D 		.ascii	"xTimeOut\000"
 4315      654F7574 
 4315      00
 4316              	.LASF12:
 4317 0222 75696E74 		.ascii	"uint8_t\000"
 4317      385F7400 
 4318              	.LASF78:
 4319 022a 78526563 		.ascii	"xReceivedLength\000"
 4319      65697665 
 4319      644C656E 
 4319      67746800 
 4320              	.LASF99:
 4321 023a 784D6178 		.ascii	"xMaxCount\000"
 4321      436F756E 
 4321      7400
 4322              	.LASF109:
 4323 0244 756C506F 		.ascii	"ulPortRaiseBASEPRI\000"
 4323      72745261 
 4323      69736542 
 4323      41534550 
 4323      524900
 4324              	.LASF30:
 4325 0257 65536574 		.ascii	"eSetBits\000"
 4325      42697473 
 4325      00
 4326              	.LASF55:
 4327 0260 78537472 		.ascii	"xStreamBuffer\000"
 4327      65616D42 
 4327      75666665 
 4327      7200
 4328              	.LASF21:
 4329 026e 666C6F61 		.ascii	"float\000"
 4329      7400
 4330              	.LASF68:
 4331 0274 78546963 		.ascii	"xTicksToWait\000"
 4331      6B73546F 
 4331      57616974 
 4331      00
 4332              	.LASF9:
 4333 0281 6C6F6E67 		.ascii	"long long int\000"
 4333      206C6F6E 
 4333      6720696E 
 4333      7400
 4334              	.LASF69:
 4335 028f 78526571 		.ascii	"xRequiredSpace\000"
 4335      75697265 
 4335      64537061 
 4335      636500
 4336              	.LASF84:
 4337 029e 78537472 		.ascii	"xStreamBufferReceiveFromISR\000"
 4337      65616D42 
ARM GAS  C:\Users\Gusta\AppData\Local\Temp\ccugn2Vx.s 			page 105


 4337      75666665 
 4337      72526563 
 4337      65697665 
 4338              	.LASF90:
 4339 02ba 78537472 		.ascii	"xStreamBufferIsFull\000"
 4339      65616D42 
 4339      75666665 
 4339      72497346 
 4339      756C6C00 
 4340              	.LASF6:
 4341 02ce 6C6F6E67 		.ascii	"long int\000"
 4341      20696E74 
 4341      00
 4342              	.LASF61:
 4343 02d7 78547269 		.ascii	"xTriggerLevel\000"
 4343      67676572 
 4343      4C657665 
 4343      6C00
 4344              	.LASF89:
 4345 02e5 78537472 		.ascii	"xStreamBufferIsEmpty\000"
 4345      65616D42 
 4345      75666665 
 4345      72497345 
 4345      6D707479 
 4346              	.LASF108:
 4347 02fa 74736B54 		.ascii	"tskTaskControlBlock\000"
 4347      61736B43 
 4347      6F6E7472 
 4347      6F6C426C 
 4347      6F636B00 
 4348              	.LASF83:
 4349 030e 7854656D 		.ascii	"xTempReturn\000"
 4349      70526574 
 4349      75726E00 
 4350              	.LASF54:
 4351 031a 70756341 		.ascii	"pucAllocatedMemory\000"
 4351      6C6C6F63 
 4351      61746564 
 4351      4D656D6F 
 4351      727900
 4352              	.LASF56:
 4353 032d 70785374 		.ascii	"pxStreamBuffer\000"
 4353      7265616D 
 4353      42756666 
 4353      657200
 4354              	.LASF85:
 4355 033c 70727657 		.ascii	"prvWriteMessageToBuffer\000"
 4355      72697465 
 4355      4D657373 
 4355      61676554 
 4355      6F427566 
 4356              	.LASF76:
 4357 0354 70765278 		.ascii	"pvRxData\000"
 4357      44617461 
 4357      00
 4358              	.LASF16:
 4359 035d 6C6F6E67 		.ascii	"long double\000"
ARM GAS  C:\Users\Gusta\AppData\Local\Temp\ccugn2Vx.s 			page 106


 4359      20646F75 
 4359      626C6500 
 4360              	.LASF43:
 4361 0369 784C656E 		.ascii	"xLength\000"
 4361      67746800 
 4362              	.LASF1:
 4363 0371 756E7369 		.ascii	"unsigned char\000"
 4363      676E6564 
 4363      20636861 
 4363      7200
 4364              	.LASF37:
 4365 037f 7854696D 		.ascii	"xTimeOnEntering\000"
 4365      654F6E45 
 4365      6E746572 
 4365      696E6700 
 4366              	.LASF52:
 4367 038f 78427566 		.ascii	"xBufferSizeBytes\000"
 4367      66657253 
 4367      697A6542 
 4367      79746573 
 4367      00
 4368              	.LASF36:
 4369 03a0 784F7665 		.ascii	"xOverflowCount\000"
 4369      72666C6F 
 4369      77436F75 
 4369      6E7400
 4370              	.LASF60:
 4371 03af 78537472 		.ascii	"xStreamBufferSetTriggerLevel\000"
 4371      65616D42 
 4371      75666665 
 4371      72536574 
 4371      54726967 
 4372              	.LASF45:
 4373 03cc 78546173 		.ascii	"xTaskWaitingToReceive\000"
 4373      6B576169 
 4373      74696E67 
 4373      546F5265 
 4373      63656976 
 4374              	.LASF0:
 4375 03e2 7369676E 		.ascii	"signed char\000"
 4375      65642063 
 4375      68617200 
 4376              	.LASF62:
 4377 03ee 78537472 		.ascii	"xStreamBufferSpacesAvailable\000"
 4377      65616D42 
 4377      75666665 
 4377      72537061 
 4377      63657341 
 4378              	.LASF10:
 4379 040b 6C6F6E67 		.ascii	"long long unsigned int\000"
 4379      206C6F6E 
 4379      6720756E 
 4379      7369676E 
 4379      65642069 
 4380              	.LASF86:
 4381 0422 70727652 		.ascii	"prvReadMessageFromBuffer\000"
 4381      6561644D 
ARM GAS  C:\Users\Gusta\AppData\Local\Temp\ccugn2Vx.s 			page 107


 4381      65737361 
 4381      67654672 
 4381      6F6D4275 
 4382              	.LASF14:
 4383 043b 75696E74 		.ascii	"uint32_t\000"
 4383      33325F74 
 4383      00
 4384              	.LASF71:
 4385 0444 78537472 		.ascii	"xStreamBufferSendFromISR\000"
 4385      65616D42 
 4385      75666665 
 4385      7253656E 
 4385      6446726F 
 4386              	.LASF11:
 4387 045d 756E7369 		.ascii	"unsigned int\000"
 4387      676E6564 
 4387      20696E74 
 4387      00
 4388              	.LASF25:
 4389 046a 42617365 		.ascii	"BaseType_t\000"
 4389      54797065 
 4389      5F7400
 4390              	.LASF48:
 4391 0475 7563466C 		.ascii	"ucFlags\000"
 4391      61677300 
 4392              	.LASF65:
 4393 047d 78537472 		.ascii	"xStreamBufferSend\000"
 4393      65616D42 
 4393      75666665 
 4393      7253656E 
 4393      6400
 4394              	.LASF103:
 4395 048f 44533138 		.ascii	"DS18x8_DataReady\000"
 4395      78385F44 
 4395      61746152 
 4395      65616479 
 4395      00
 4396              	.LASF27:
 4397 04a0 5469636B 		.ascii	"TickType_t\000"
 4397      54797065 
 4397      5F7400
 4398              	.LASF3:
 4399 04ab 73686F72 		.ascii	"short unsigned int\000"
 4399      7420756E 
 4399      7369676E 
 4399      65642069 
 4399      6E7400
 4400              	.LASF111:
 4401 04be 756C4E65 		.ascii	"ulNewMaskValue\000"
 4401      774D6173 
 4401      6B56616C 
 4401      756500
 4402              	.LASF110:
 4403 04cd 76506F72 		.ascii	"vPortSetBASEPRI\000"
 4403      74536574 
 4403      42415345 
 4403      50524900 
ARM GAS  C:\Users\Gusta\AppData\Local\Temp\ccugn2Vx.s 			page 108


 4404              	.LASF18:
 4405 04dd 63686172 		.ascii	"char\000"
 4405      00
 4406              	.LASF32:
 4407 04e2 65536574 		.ascii	"eSetValueWithOverwrite\000"
 4407      56616C75 
 4407      65576974 
 4407      684F7665 
 4407      72777269 
 4408              	.LASF13:
 4409 04f9 696E7433 		.ascii	"int32_t\000"
 4409      325F7400 
 4410              	.LASF53:
 4411 0501 7849734D 		.ascii	"xIsMessageBuffer\000"
 4411      65737361 
 4411      67654275 
 4411      66666572 
 4411      00
 4412              	.LASF88:
 4413 0512 7854656D 		.ascii	"xTempNextMessageLength\000"
 4413      704E6578 
 4413      744D6573 
 4413      73616765 
 4413      4C656E67 
 4414              	.LASF19:
 4415 0529 75696E74 		.ascii	"uint8\000"
 4415      3800
 4416              	.LASF34:
 4417 052f 44533138 		.ascii	"DS18x8_TSensor\000"
 4417      78385F54 
 4417      53656E73 
 4417      6F7200
 4418              	.LASF101:
 4419 053e 70727642 		.ascii	"prvBytesInBuffer\000"
 4419      79746573 
 4419      496E4275 
 4419      66666572 
 4419      00
 4420              	.LASF44:
 4421 054f 78547269 		.ascii	"xTriggerLevelBytes\000"
 4421      67676572 
 4421      4C657665 
 4421      6C427974 
 4421      657300
 4422              	.LASF20:
 4423 0562 75696E74 		.ascii	"uint16\000"
 4423      313600
 4424              	.LASF63:
 4425 0569 78537061 		.ascii	"xSpace\000"
 4425      636500
 4426              	.LASF58:
 4427 0570 78537472 		.ascii	"xStreamBufferReset\000"
 4427      65616D42 
 4427      75666665 
 4427      72526573 
 4427      657400
 4428              	.LASF8:
ARM GAS  C:\Users\Gusta\AppData\Local\Temp\ccugn2Vx.s 			page 109


 4429 0583 6C6F6E67 		.ascii	"long unsigned int\000"
 4429      20756E73 
 4429      69676E65 
 4429      6420696E 
 4429      7400
 4430              	.LASF80:
 4431 0595 78427974 		.ascii	"xBytesToStoreMessageLength\000"
 4431      6573546F 
 4431      53746F72 
 4431      654D6573 
 4431      73616765 
 4432              	.LASF26:
 4433 05b0 55426173 		.ascii	"UBaseType_t\000"
 4433      65547970 
 4433      655F7400 
 4434              	.LASF93:
 4435 05bc 70727657 		.ascii	"prvWriteBytesToBuffer\000"
 4435      72697465 
 4435      42797465 
 4435      73546F42 
 4435      75666665 
 4436              	.LASF41:
 4437 05d2 78546169 		.ascii	"xTail\000"
 4437      6C00
 4438              	.LASF91:
 4439 05d8 78537472 		.ascii	"xStreamBufferSendCompletedFromISR\000"
 4439      65616D42 
 4439      75666665 
 4439      7253656E 
 4439      64436F6D 
 4440              	.LASF81:
 4441 05fa 78537472 		.ascii	"xStreamBufferNextMessageLengthBytes\000"
 4441      65616D42 
 4441      75666665 
 4441      724E6578 
 4441      744D6573 
 4442              	.LASF33:
 4443 061e 65536574 		.ascii	"eSetValueWithoutOverwrite\000"
 4443      56616C75 
 4443      65576974 
 4443      686F7574 
 4443      4F766572 
 4444              	.LASF5:
 4445 0638 5F5F696E 		.ascii	"__int32_t\000"
 4445      7433325F 
 4445      7400
 4446              	.LASF46:
 4447 0642 78546173 		.ascii	"xTaskWaitingToSend\000"
 4447      6B576169 
 4447      74696E67 
 4447      546F5365 
 4447      6E6400
 4448              	.LASF39:
 4449 0655 53747265 		.ascii	"StreamBufferHandle_t\000"
 4449      616D4275 
 4449      66666572 
 4449      48616E64 
ARM GAS  C:\Users\Gusta\AppData\Local\Temp\ccugn2Vx.s 			page 110


 4449      6C655F74 
 4450              	.LASF73:
 4451 066a 75785361 		.ascii	"uxSavedInterruptStatus\000"
 4451      76656449 
 4451      6E746572 
 4451      72757074 
 4451      53746174 
 4452              	.LASF24:
 4453 0681 70726573 		.ascii	"present\000"
 4453      656E7400 
 4454              	.LASF59:
 4455 0689 78526574 		.ascii	"xReturn\000"
 4455      75726E00 
 4456              	.LASF72:
 4457 0691 70784869 		.ascii	"pxHigherPriorityTaskWoken\000"
 4457      67686572 
 4457      5072696F 
 4457      72697479 
 4457      5461736B 
 4458              	.LASF100:
 4459 06ab 784E6578 		.ascii	"xNextTail\000"
 4459      74546169 
 4459      6C00
 4460              	.LASF23:
 4461 06b5 54656D70 		.ascii	"Temperature\000"
 4461      65726174 
 4461      75726500 
 4462              	.LASF42:
 4463 06c1 78486561 		.ascii	"xHead\000"
 4463      6400
 4464              	.LASF22:
 4465 06c7 646F7562 		.ascii	"double\000"
 4465      6C6500
 4466              	.LASF98:
 4467 06ce 70727652 		.ascii	"prvReadBytesFromBuffer\000"
 4467      65616442 
 4467      79746573 
 4467      46726F6D 
 4467      42756666 
 4468              	.LASF82:
 4469 06e5 784F7269 		.ascii	"xOriginalTail\000"
 4469      67696E61 
 4469      6C546169 
 4469      6C00
 4470              	.LASF107:
 4471 06f3 433A5C55 		.ascii	"C:\\Users\\Gusta\\OneDrive\\Dokumenter\\GitHub\\P4_"
 4471      73657273 
 4471      5C477573 
 4471      74615C4F 
 4471      6E654472 
 4472 0720 56657274 		.ascii	"Vertical_farm\\RTOS_TEMPLATE-master\\PlanteModul.cy"
 4472      6963616C 
 4472      5F666172 
 4472      6D5C5254 
 4472      4F535F54 
 4473 0751 64736E00 		.ascii	"dsn\000"
 4474              	.LASF104:
ARM GAS  C:\Users\Gusta\AppData\Local\Temp\ccugn2Vx.s 			page 111


 4475 0755 49544D5F 		.ascii	"ITM_RxBuffer\000"
 4475      52784275 
 4475      66666572 
 4475      00
 4476              	.LASF113:
 4477 0762 70727649 		.ascii	"prvInitialiseNewStreamBuffer\000"
 4477      6E697469 
 4477      616C6973 
 4477      654E6577 
 4477      53747265 
 4478              	.LASF94:
 4479 077f 70756344 		.ascii	"pucData\000"
 4479      61746100 
 4480              	.LASF64:
 4481 0787 78537472 		.ascii	"xStreamBufferBytesAvailable\000"
 4481      65616D42 
 4481      75666665 
 4481      72427974 
 4481      65734176 
 4482              	.LASF66:
 4483 07a3 70765478 		.ascii	"pvTxData\000"
 4483      44617461 
 4483      00
 4484              	.LASF31:
 4485 07ac 65496E63 		.ascii	"eIncrement\000"
 4485      72656D65 
 4485      6E7400
 4486              	.LASF4:
 4487 07b7 5F5F7569 		.ascii	"__uint8_t\000"
 4487      6E74385F 
 4487      7400
 4488              	.LASF49:
 4489 07c1 53747265 		.ascii	"StreamBuffer_t\000"
 4489      616D4275 
 4489      66666572 
 4489      5F7400
 4490              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
