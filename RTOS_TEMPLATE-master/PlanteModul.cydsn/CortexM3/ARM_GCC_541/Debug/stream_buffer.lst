ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccTqmdk2.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"stream_buffer.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.xStreamBufferGenericCreate,"ax",%progbits
  20              		.align	2
  21              		.global	xStreamBufferGenericCreate
  22              		.thumb
  23              		.thumb_func
  24              		.type	xStreamBufferGenericCreate, %function
  25              	xStreamBufferGenericCreate:
  26              	.LFB68:
  27              		.file 1 "Source\\stream_buffer.c"
   1:Source/stream_buffer.c **** /*
   2:Source/stream_buffer.c ****  * FreeRTOS Kernel V10.3.1
   3:Source/stream_buffer.c ****  * Copyright (C) 2020 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:Source/stream_buffer.c ****  *
   5:Source/stream_buffer.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:Source/stream_buffer.c ****  * this software and associated documentation files (the "Software"), to deal in
   7:Source/stream_buffer.c ****  * the Software without restriction, including without limitation the rights to
   8:Source/stream_buffer.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:Source/stream_buffer.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:Source/stream_buffer.c ****  * subject to the following conditions:
  11:Source/stream_buffer.c ****  *
  12:Source/stream_buffer.c ****  * The above copyright notice and this permission notice shall be included in all
  13:Source/stream_buffer.c ****  * copies or substantial portions of the Software.
  14:Source/stream_buffer.c ****  *
  15:Source/stream_buffer.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:Source/stream_buffer.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:Source/stream_buffer.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:Source/stream_buffer.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:Source/stream_buffer.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:Source/stream_buffer.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:Source/stream_buffer.c ****  *
  22:Source/stream_buffer.c ****  * http://www.FreeRTOS.org
  23:Source/stream_buffer.c ****  * http://aws.amazon.com/freertos
  24:Source/stream_buffer.c ****  *
  25:Source/stream_buffer.c ****  * 1 tab == 4 spaces!
  26:Source/stream_buffer.c ****  */
  27:Source/stream_buffer.c **** 
  28:Source/stream_buffer.c **** /* Standard includes. */
  29:Source/stream_buffer.c **** #include <stdint.h>
  30:Source/stream_buffer.c **** #include <string.h>
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccTqmdk2.s 			page 2


  31:Source/stream_buffer.c **** 
  32:Source/stream_buffer.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  33:Source/stream_buffer.c **** all the API functions to use the MPU wrappers.  That should only be done when
  34:Source/stream_buffer.c **** task.h is included from an application file. */
  35:Source/stream_buffer.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  36:Source/stream_buffer.c **** 
  37:Source/stream_buffer.c **** /* FreeRTOS includes. */
  38:Source/stream_buffer.c **** #include "FreeRTOS.h"
  39:Source/stream_buffer.c **** #include "task.h"
  40:Source/stream_buffer.c **** #include "stream_buffer.h"
  41:Source/stream_buffer.c **** 
  42:Source/stream_buffer.c **** #if( configUSE_TASK_NOTIFICATIONS != 1 )
  43:Source/stream_buffer.c **** 	#error configUSE_TASK_NOTIFICATIONS must be set to 1 to build stream_buffer.c
  44:Source/stream_buffer.c **** #endif
  45:Source/stream_buffer.c **** 
  46:Source/stream_buffer.c **** /* Lint e961, e9021 and e750 are suppressed as a MISRA exception justified
  47:Source/stream_buffer.c **** because the MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined
  48:Source/stream_buffer.c **** for the header files above, but not in this file, in order to generate the
  49:Source/stream_buffer.c **** correct privileged Vs unprivileged linkage and placement. */
  50:Source/stream_buffer.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750 !e9021. */
  51:Source/stream_buffer.c **** 
  52:Source/stream_buffer.c **** /* If the user has not provided application specific Rx notification macros,
  53:Source/stream_buffer.c **** or #defined the notification macros away, them provide default implementations
  54:Source/stream_buffer.c **** that uses task notifications. */
  55:Source/stream_buffer.c **** /*lint -save -e9026 Function like macros allowed and needed here so they can be overidden. */
  56:Source/stream_buffer.c **** #ifndef sbRECEIVE_COMPLETED
  57:Source/stream_buffer.c **** 	#define sbRECEIVE_COMPLETED( pxStreamBuffer )										\
  58:Source/stream_buffer.c **** 		vTaskSuspendAll();																\
  59:Source/stream_buffer.c **** 		{																				\
  60:Source/stream_buffer.c **** 			if( ( pxStreamBuffer )->xTaskWaitingToSend != NULL )						\
  61:Source/stream_buffer.c **** 			{																			\
  62:Source/stream_buffer.c **** 				( void ) xTaskNotify( ( pxStreamBuffer )->xTaskWaitingToSend,			\
  63:Source/stream_buffer.c **** 									  ( uint32_t ) 0,									\
  64:Source/stream_buffer.c **** 									  eNoAction );										\
  65:Source/stream_buffer.c **** 				( pxStreamBuffer )->xTaskWaitingToSend = NULL;							\
  66:Source/stream_buffer.c **** 			}																			\
  67:Source/stream_buffer.c **** 		}																				\
  68:Source/stream_buffer.c **** 		( void ) xTaskResumeAll();
  69:Source/stream_buffer.c **** #endif /* sbRECEIVE_COMPLETED */
  70:Source/stream_buffer.c **** 
  71:Source/stream_buffer.c **** #ifndef sbRECEIVE_COMPLETED_FROM_ISR
  72:Source/stream_buffer.c **** 	#define sbRECEIVE_COMPLETED_FROM_ISR( pxStreamBuffer,								\
  73:Source/stream_buffer.c **** 										  pxHigherPriorityTaskWoken )					\
  74:Source/stream_buffer.c **** 	{																					\
  75:Source/stream_buffer.c **** 	UBaseType_t uxSavedInterruptStatus;													\
  76:Source/stream_buffer.c **** 																						\
  77:Source/stream_buffer.c **** 		uxSavedInterruptStatus = ( UBaseType_t ) portSET_INTERRUPT_MASK_FROM_ISR();		\
  78:Source/stream_buffer.c **** 		{																				\
  79:Source/stream_buffer.c **** 			if( ( pxStreamBuffer )->xTaskWaitingToSend != NULL )						\
  80:Source/stream_buffer.c **** 			{																			\
  81:Source/stream_buffer.c **** 				( void ) xTaskNotifyFromISR( ( pxStreamBuffer )->xTaskWaitingToSend,	\
  82:Source/stream_buffer.c **** 											 ( uint32_t ) 0,							\
  83:Source/stream_buffer.c **** 											 eNoAction,									\
  84:Source/stream_buffer.c **** 											 pxHigherPriorityTaskWoken );				\
  85:Source/stream_buffer.c **** 				( pxStreamBuffer )->xTaskWaitingToSend = NULL;							\
  86:Source/stream_buffer.c **** 			}																			\
  87:Source/stream_buffer.c **** 		}																				\
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccTqmdk2.s 			page 3


  88:Source/stream_buffer.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );					\
  89:Source/stream_buffer.c **** 	}
  90:Source/stream_buffer.c **** #endif /* sbRECEIVE_COMPLETED_FROM_ISR */
  91:Source/stream_buffer.c **** 
  92:Source/stream_buffer.c **** /* If the user has not provided an application specific Tx notification macro,
  93:Source/stream_buffer.c **** or #defined the notification macro away, them provide a default implementation
  94:Source/stream_buffer.c **** that uses task notifications. */
  95:Source/stream_buffer.c **** #ifndef sbSEND_COMPLETED
  96:Source/stream_buffer.c **** 	#define sbSEND_COMPLETED( pxStreamBuffer )											\
  97:Source/stream_buffer.c **** 		vTaskSuspendAll();																\
  98:Source/stream_buffer.c **** 		{																				\
  99:Source/stream_buffer.c **** 			if( ( pxStreamBuffer )->xTaskWaitingToReceive != NULL )						\
 100:Source/stream_buffer.c **** 			{																			\
 101:Source/stream_buffer.c **** 				( void ) xTaskNotify( ( pxStreamBuffer )->xTaskWaitingToReceive,		\
 102:Source/stream_buffer.c **** 									  ( uint32_t ) 0,									\
 103:Source/stream_buffer.c **** 									  eNoAction );										\
 104:Source/stream_buffer.c **** 				( pxStreamBuffer )->xTaskWaitingToReceive = NULL;						\
 105:Source/stream_buffer.c **** 			}																			\
 106:Source/stream_buffer.c **** 		}																				\
 107:Source/stream_buffer.c **** 		( void ) xTaskResumeAll();
 108:Source/stream_buffer.c **** #endif /* sbSEND_COMPLETED */
 109:Source/stream_buffer.c **** 
 110:Source/stream_buffer.c **** #ifndef sbSEND_COMPLETE_FROM_ISR
 111:Source/stream_buffer.c **** 	#define sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken )		\
 112:Source/stream_buffer.c **** 	{																					\
 113:Source/stream_buffer.c **** 	UBaseType_t uxSavedInterruptStatus;													\
 114:Source/stream_buffer.c **** 																						\
 115:Source/stream_buffer.c **** 		uxSavedInterruptStatus = ( UBaseType_t ) portSET_INTERRUPT_MASK_FROM_ISR();		\
 116:Source/stream_buffer.c **** 		{																				\
 117:Source/stream_buffer.c **** 			if( ( pxStreamBuffer )->xTaskWaitingToReceive != NULL )						\
 118:Source/stream_buffer.c **** 			{																			\
 119:Source/stream_buffer.c **** 				( void ) xTaskNotifyFromISR( ( pxStreamBuffer )->xTaskWaitingToReceive,	\
 120:Source/stream_buffer.c **** 											 ( uint32_t ) 0,							\
 121:Source/stream_buffer.c **** 											 eNoAction,									\
 122:Source/stream_buffer.c **** 											 pxHigherPriorityTaskWoken );				\
 123:Source/stream_buffer.c **** 				( pxStreamBuffer )->xTaskWaitingToReceive = NULL;						\
 124:Source/stream_buffer.c **** 			}																			\
 125:Source/stream_buffer.c **** 		}																				\
 126:Source/stream_buffer.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );					\
 127:Source/stream_buffer.c **** 	}
 128:Source/stream_buffer.c **** #endif /* sbSEND_COMPLETE_FROM_ISR */
 129:Source/stream_buffer.c **** /*lint -restore (9026) */
 130:Source/stream_buffer.c **** 
 131:Source/stream_buffer.c **** /* The number of bytes used to hold the length of a message in the buffer. */
 132:Source/stream_buffer.c **** #define sbBYTES_TO_STORE_MESSAGE_LENGTH ( sizeof( configMESSAGE_BUFFER_LENGTH_TYPE ) )
 133:Source/stream_buffer.c **** 
 134:Source/stream_buffer.c **** /* Bits stored in the ucFlags field of the stream buffer. */
 135:Source/stream_buffer.c **** #define sbFLAGS_IS_MESSAGE_BUFFER		( ( uint8_t ) 1 ) /* Set if the stream buffer was created as a m
 136:Source/stream_buffer.c **** #define sbFLAGS_IS_STATICALLY_ALLOCATED ( ( uint8_t ) 2 ) /* Set if the stream buffer was created u
 137:Source/stream_buffer.c **** 
 138:Source/stream_buffer.c **** /*-----------------------------------------------------------*/
 139:Source/stream_buffer.c **** 
 140:Source/stream_buffer.c **** /* Structure that hold state information on the buffer. */
 141:Source/stream_buffer.c **** typedef struct StreamBufferDef_t /*lint !e9058 Style convention uses tag. */
 142:Source/stream_buffer.c **** {
 143:Source/stream_buffer.c **** 	volatile size_t xTail;				/* Index to the next item to read within the buffer. */
 144:Source/stream_buffer.c **** 	volatile size_t xHead;				/* Index to the next item to write within the buffer. */
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccTqmdk2.s 			page 4


 145:Source/stream_buffer.c **** 	size_t xLength;						/* The length of the buffer pointed to by pucBuffer. */
 146:Source/stream_buffer.c **** 	size_t xTriggerLevelBytes;			/* The number of bytes that must be in the stream buffer before a tas
 147:Source/stream_buffer.c **** 	volatile TaskHandle_t xTaskWaitingToReceive; /* Holds the handle of a task waiting for data, or NU
 148:Source/stream_buffer.c **** 	volatile TaskHandle_t xTaskWaitingToSend;	/* Holds the handle of a task waiting to send data to a 
 149:Source/stream_buffer.c **** 	uint8_t *pucBuffer;					/* Points to the buffer itself - that is - the RAM that stores the data pa
 150:Source/stream_buffer.c **** 	uint8_t ucFlags;
 151:Source/stream_buffer.c **** 
 152:Source/stream_buffer.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 153:Source/stream_buffer.c **** 		UBaseType_t uxStreamBufferNumber;		/* Used for tracing purposes. */
 154:Source/stream_buffer.c **** 	#endif
 155:Source/stream_buffer.c **** } StreamBuffer_t;
 156:Source/stream_buffer.c **** 
 157:Source/stream_buffer.c **** /*
 158:Source/stream_buffer.c ****  * The number of bytes available to be read from the buffer.
 159:Source/stream_buffer.c ****  */
 160:Source/stream_buffer.c **** static size_t prvBytesInBuffer( const StreamBuffer_t * const pxStreamBuffer ) PRIVILEGED_FUNCTION;
 161:Source/stream_buffer.c **** 
 162:Source/stream_buffer.c **** /*
 163:Source/stream_buffer.c ****  * Add xCount bytes from pucData into the pxStreamBuffer message buffer.
 164:Source/stream_buffer.c ****  * Returns the number of bytes written, which will either equal xCount in the
 165:Source/stream_buffer.c ****  * success case, or 0 if there was not enough space in the buffer (in which case
 166:Source/stream_buffer.c ****  * no data is written into the buffer).
 167:Source/stream_buffer.c ****  */
 168:Source/stream_buffer.c **** static size_t prvWriteBytesToBuffer( StreamBuffer_t * const pxStreamBuffer, const uint8_t *pucData,
 169:Source/stream_buffer.c **** 
 170:Source/stream_buffer.c **** /*
 171:Source/stream_buffer.c ****  * If the stream buffer is being used as a message buffer, then reads an entire
 172:Source/stream_buffer.c ****  * message out of the buffer.  If the stream buffer is being used as a stream
 173:Source/stream_buffer.c ****  * buffer then read as many bytes as possible from the buffer.
 174:Source/stream_buffer.c ****  * prvReadBytesFromBuffer() is called to actually extract the bytes from the
 175:Source/stream_buffer.c ****  * buffer's data storage area.
 176:Source/stream_buffer.c ****  */
 177:Source/stream_buffer.c **** static size_t prvReadMessageFromBuffer( StreamBuffer_t *pxStreamBuffer,
 178:Source/stream_buffer.c **** 										void *pvRxData,
 179:Source/stream_buffer.c **** 										size_t xBufferLengthBytes,
 180:Source/stream_buffer.c **** 										size_t xBytesAvailable,
 181:Source/stream_buffer.c **** 										size_t xBytesToStoreMessageLength ) PRIVILEGED_FUNCTION;
 182:Source/stream_buffer.c **** 
 183:Source/stream_buffer.c **** /*
 184:Source/stream_buffer.c ****  * If the stream buffer is being used as a message buffer, then writes an entire
 185:Source/stream_buffer.c ****  * message to the buffer.  If the stream buffer is being used as a stream
 186:Source/stream_buffer.c ****  * buffer then write as many bytes as possible to the buffer.
 187:Source/stream_buffer.c ****  * prvWriteBytestoBuffer() is called to actually send the bytes to the buffer's
 188:Source/stream_buffer.c ****  * data storage area.
 189:Source/stream_buffer.c ****  */
 190:Source/stream_buffer.c **** static size_t prvWriteMessageToBuffer(  StreamBuffer_t * const pxStreamBuffer,
 191:Source/stream_buffer.c **** 										const void * pvTxData,
 192:Source/stream_buffer.c **** 										size_t xDataLengthBytes,
 193:Source/stream_buffer.c **** 										size_t xSpace,
 194:Source/stream_buffer.c **** 										size_t xRequiredSpace ) PRIVILEGED_FUNCTION;
 195:Source/stream_buffer.c **** 
 196:Source/stream_buffer.c **** /*
 197:Source/stream_buffer.c ****  * Read xMaxCount bytes from the pxStreamBuffer message buffer and write them
 198:Source/stream_buffer.c ****  * to pucData.
 199:Source/stream_buffer.c ****  */
 200:Source/stream_buffer.c **** static size_t prvReadBytesFromBuffer( StreamBuffer_t *pxStreamBuffer,
 201:Source/stream_buffer.c **** 									  uint8_t *pucData,
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccTqmdk2.s 			page 5


 202:Source/stream_buffer.c **** 									  size_t xMaxCount,
 203:Source/stream_buffer.c **** 									  size_t xBytesAvailable ) PRIVILEGED_FUNCTION;
 204:Source/stream_buffer.c **** 
 205:Source/stream_buffer.c **** /*
 206:Source/stream_buffer.c ****  * Called by both pxStreamBufferCreate() and pxStreamBufferCreateStatic() to
 207:Source/stream_buffer.c ****  * initialise the members of the newly created stream buffer structure.
 208:Source/stream_buffer.c ****  */
 209:Source/stream_buffer.c **** static void prvInitialiseNewStreamBuffer( StreamBuffer_t * const pxStreamBuffer,
 210:Source/stream_buffer.c **** 										  uint8_t * const pucBuffer,
 211:Source/stream_buffer.c **** 										  size_t xBufferSizeBytes,
 212:Source/stream_buffer.c **** 										  size_t xTriggerLevelBytes,
 213:Source/stream_buffer.c **** 										  uint8_t ucFlags ) PRIVILEGED_FUNCTION;
 214:Source/stream_buffer.c **** 
 215:Source/stream_buffer.c **** /*-----------------------------------------------------------*/
 216:Source/stream_buffer.c **** 
 217:Source/stream_buffer.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 218:Source/stream_buffer.c **** 
 219:Source/stream_buffer.c **** 	StreamBufferHandle_t xStreamBufferGenericCreate( size_t xBufferSizeBytes, size_t xTriggerLevelByte
 220:Source/stream_buffer.c **** 	{
  28              		.loc 1 220 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 24
  31              		@ frame_needed = 1, uses_anonymous_args = 0
  32 0000 80B5     		push	{r7, lr}
  33              		.cfi_def_cfa_offset 8
  34              		.cfi_offset 7, -8
  35              		.cfi_offset 14, -4
  36 0002 88B0     		sub	sp, sp, #32
  37              		.cfi_def_cfa_offset 40
  38 0004 02AF     		add	r7, sp, #8
  39              		.cfi_def_cfa 7, 32
  40 0006 F860     		str	r0, [r7, #12]
  41 0008 B960     		str	r1, [r7, #8]
  42 000a 7A60     		str	r2, [r7, #4]
 221:Source/stream_buffer.c **** 	uint8_t *pucAllocatedMemory;
 222:Source/stream_buffer.c **** 	uint8_t ucFlags;
 223:Source/stream_buffer.c **** 
 224:Source/stream_buffer.c **** 		/* In case the stream buffer is going to be used as a message buffer
 225:Source/stream_buffer.c **** 		(that is, it will hold discrete messages with a little meta data that
 226:Source/stream_buffer.c **** 		says how big the next message is) check the buffer will be large enough
 227:Source/stream_buffer.c **** 		to hold at least one message. */
 228:Source/stream_buffer.c **** 		if( xIsMessageBuffer == pdTRUE )
  43              		.loc 1 228 0
  44 000c 7B68     		ldr	r3, [r7, #4]
  45 000e 012B     		cmp	r3, #1
  46 0010 02D1     		bne	.L2
 229:Source/stream_buffer.c **** 		{
 230:Source/stream_buffer.c **** 			/* Is a message buffer but not statically allocated. */
 231:Source/stream_buffer.c **** 			ucFlags = sbFLAGS_IS_MESSAGE_BUFFER;
  47              		.loc 1 231 0
  48 0012 0123     		movs	r3, #1
  49 0014 FB75     		strb	r3, [r7, #23]
  50 0016 01E0     		b	.L3
  51              	.L2:
 232:Source/stream_buffer.c **** 			configASSERT( xBufferSizeBytes > sbBYTES_TO_STORE_MESSAGE_LENGTH );
 233:Source/stream_buffer.c **** 		}
 234:Source/stream_buffer.c **** 		else
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccTqmdk2.s 			page 6


 235:Source/stream_buffer.c **** 		{
 236:Source/stream_buffer.c **** 			/* Not a message buffer and not statically allocated. */
 237:Source/stream_buffer.c **** 			ucFlags = 0;
  52              		.loc 1 237 0
  53 0018 0023     		movs	r3, #0
  54 001a FB75     		strb	r3, [r7, #23]
  55              	.L3:
 238:Source/stream_buffer.c **** 			configASSERT( xBufferSizeBytes > 0 );
 239:Source/stream_buffer.c **** 		}
 240:Source/stream_buffer.c **** 		configASSERT( xTriggerLevelBytes <= xBufferSizeBytes );
 241:Source/stream_buffer.c **** 
 242:Source/stream_buffer.c **** 		/* A trigger level of 0 would cause a waiting task to unblock even when
 243:Source/stream_buffer.c **** 		the buffer was empty. */
 244:Source/stream_buffer.c **** 		if( xTriggerLevelBytes == ( size_t ) 0 )
  56              		.loc 1 244 0
  57 001c BB68     		ldr	r3, [r7, #8]
  58 001e 002B     		cmp	r3, #0
  59 0020 01D1     		bne	.L4
 245:Source/stream_buffer.c **** 		{
 246:Source/stream_buffer.c **** 			xTriggerLevelBytes = ( size_t ) 1;
  60              		.loc 1 246 0
  61 0022 0123     		movs	r3, #1
  62 0024 BB60     		str	r3, [r7, #8]
  63              	.L4:
 247:Source/stream_buffer.c **** 		}
 248:Source/stream_buffer.c **** 
 249:Source/stream_buffer.c **** 		/* A stream buffer requires a StreamBuffer_t structure and a buffer.
 250:Source/stream_buffer.c **** 		Both are allocated in a single call to pvPortMalloc().  The
 251:Source/stream_buffer.c **** 		StreamBuffer_t structure is placed at the start of the allocated memory
 252:Source/stream_buffer.c **** 		and the buffer follows immediately after.  The requested size is
 253:Source/stream_buffer.c **** 		incremented so the free space is returned as the user would expect -
 254:Source/stream_buffer.c **** 		this is a quirk of the implementation that means otherwise the free
 255:Source/stream_buffer.c **** 		space would be reported as one byte smaller than would be logically
 256:Source/stream_buffer.c **** 		expected. */
 257:Source/stream_buffer.c **** 		xBufferSizeBytes++;
  64              		.loc 1 257 0
  65 0026 FB68     		ldr	r3, [r7, #12]
  66 0028 0133     		adds	r3, r3, #1
  67 002a FB60     		str	r3, [r7, #12]
 258:Source/stream_buffer.c **** 		pucAllocatedMemory = ( uint8_t * ) pvPortMalloc( xBufferSizeBytes + sizeof( StreamBuffer_t ) ); /
  68              		.loc 1 258 0
  69 002c FB68     		ldr	r3, [r7, #12]
  70 002e 2033     		adds	r3, r3, #32
  71 0030 1846     		mov	r0, r3
  72 0032 FFF7FEFF 		bl	pvPortMalloc
  73 0036 3861     		str	r0, [r7, #16]
 259:Source/stream_buffer.c **** 
 260:Source/stream_buffer.c **** 		if( pucAllocatedMemory != NULL )
  74              		.loc 1 260 0
  75 0038 3B69     		ldr	r3, [r7, #16]
  76 003a 002B     		cmp	r3, #0
  77 003c 09D0     		beq	.L5
 261:Source/stream_buffer.c **** 		{
 262:Source/stream_buffer.c **** 			prvInitialiseNewStreamBuffer( ( StreamBuffer_t * ) pucAllocatedMemory, /* Structure at the start
  78              		.loc 1 262 0
  79 003e 3B69     		ldr	r3, [r7, #16]
  80 0040 03F12001 		add	r1, r3, #32
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccTqmdk2.s 			page 7


  81 0044 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
  82 0046 0093     		str	r3, [sp]
  83 0048 BB68     		ldr	r3, [r7, #8]
  84 004a FA68     		ldr	r2, [r7, #12]
  85 004c 3869     		ldr	r0, [r7, #16]
  86 004e FFF7FEFF 		bl	prvInitialiseNewStreamBuffer
  87              	.L5:
 263:Source/stream_buffer.c **** 										   pucAllocatedMemory + sizeof( StreamBuffer_t ),  /* Storage area follows. */ /*lint !e9
 264:Source/stream_buffer.c **** 										   xBufferSizeBytes,
 265:Source/stream_buffer.c **** 										   xTriggerLevelBytes,
 266:Source/stream_buffer.c **** 										   ucFlags );
 267:Source/stream_buffer.c **** 
 268:Source/stream_buffer.c **** 			traceSTREAM_BUFFER_CREATE( ( ( StreamBuffer_t * ) pucAllocatedMemory ), xIsMessageBuffer );
 269:Source/stream_buffer.c **** 		}
 270:Source/stream_buffer.c **** 		else
 271:Source/stream_buffer.c **** 		{
 272:Source/stream_buffer.c **** 			traceSTREAM_BUFFER_CREATE_FAILED( xIsMessageBuffer );
 273:Source/stream_buffer.c **** 		}
 274:Source/stream_buffer.c **** 
 275:Source/stream_buffer.c **** 		return ( StreamBufferHandle_t ) pucAllocatedMemory; /*lint !e9087 !e826 Safe cast as allocated me
  88              		.loc 1 275 0
  89 0052 3B69     		ldr	r3, [r7, #16]
 276:Source/stream_buffer.c **** 	}
  90              		.loc 1 276 0
  91 0054 1846     		mov	r0, r3
  92 0056 1837     		adds	r7, r7, #24
  93              		.cfi_def_cfa_offset 8
  94 0058 BD46     		mov	sp, r7
  95              		.cfi_def_cfa_register 13
  96              		@ sp needed
  97 005a 80BD     		pop	{r7, pc}
  98              		.cfi_endproc
  99              	.LFE68:
 100              		.size	xStreamBufferGenericCreate, .-xStreamBufferGenericCreate
 101              		.section	.text.vStreamBufferDelete,"ax",%progbits
 102              		.align	2
 103              		.global	vStreamBufferDelete
 104              		.thumb
 105              		.thumb_func
 106              		.type	vStreamBufferDelete, %function
 107              	vStreamBufferDelete:
 108              	.LFB69:
 277:Source/stream_buffer.c **** 
 278:Source/stream_buffer.c **** #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 279:Source/stream_buffer.c **** /*-----------------------------------------------------------*/
 280:Source/stream_buffer.c **** 
 281:Source/stream_buffer.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 282:Source/stream_buffer.c **** 
 283:Source/stream_buffer.c **** 	StreamBufferHandle_t xStreamBufferGenericCreateStatic( size_t xBufferSizeBytes,
 284:Source/stream_buffer.c **** 														   size_t xTriggerLevelBytes,
 285:Source/stream_buffer.c **** 														   BaseType_t xIsMessageBuffer,
 286:Source/stream_buffer.c **** 														   uint8_t * const pucStreamBufferStorageArea,
 287:Source/stream_buffer.c **** 														   StaticStreamBuffer_t * const pxStaticStreamBuffer )
 288:Source/stream_buffer.c **** 	{
 289:Source/stream_buffer.c **** 	StreamBuffer_t * const pxStreamBuffer = ( StreamBuffer_t * ) pxStaticStreamBuffer; /*lint !e740 !e
 290:Source/stream_buffer.c **** 	StreamBufferHandle_t xReturn;
 291:Source/stream_buffer.c **** 	uint8_t ucFlags;
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccTqmdk2.s 			page 8


 292:Source/stream_buffer.c **** 
 293:Source/stream_buffer.c **** 		configASSERT( pucStreamBufferStorageArea );
 294:Source/stream_buffer.c **** 		configASSERT( pxStaticStreamBuffer );
 295:Source/stream_buffer.c **** 		configASSERT( xTriggerLevelBytes <= xBufferSizeBytes );
 296:Source/stream_buffer.c **** 
 297:Source/stream_buffer.c **** 		/* A trigger level of 0 would cause a waiting task to unblock even when
 298:Source/stream_buffer.c **** 		the buffer was empty. */
 299:Source/stream_buffer.c **** 		if( xTriggerLevelBytes == ( size_t ) 0 )
 300:Source/stream_buffer.c **** 		{
 301:Source/stream_buffer.c **** 			xTriggerLevelBytes = ( size_t ) 1;
 302:Source/stream_buffer.c **** 		}
 303:Source/stream_buffer.c **** 
 304:Source/stream_buffer.c **** 		if( xIsMessageBuffer != pdFALSE )
 305:Source/stream_buffer.c **** 		{
 306:Source/stream_buffer.c **** 			/* Statically allocated message buffer. */
 307:Source/stream_buffer.c **** 			ucFlags = sbFLAGS_IS_MESSAGE_BUFFER | sbFLAGS_IS_STATICALLY_ALLOCATED;
 308:Source/stream_buffer.c **** 		}
 309:Source/stream_buffer.c **** 		else
 310:Source/stream_buffer.c **** 		{
 311:Source/stream_buffer.c **** 			/* Statically allocated stream buffer. */
 312:Source/stream_buffer.c **** 			ucFlags = sbFLAGS_IS_STATICALLY_ALLOCATED;
 313:Source/stream_buffer.c **** 		}
 314:Source/stream_buffer.c **** 
 315:Source/stream_buffer.c **** 		/* In case the stream buffer is going to be used as a message buffer
 316:Source/stream_buffer.c **** 		(that is, it will hold discrete messages with a little meta data that
 317:Source/stream_buffer.c **** 		says how big the next message is) check the buffer will be large enough
 318:Source/stream_buffer.c **** 		to hold at least one message. */
 319:Source/stream_buffer.c **** 		configASSERT( xBufferSizeBytes > sbBYTES_TO_STORE_MESSAGE_LENGTH );
 320:Source/stream_buffer.c **** 
 321:Source/stream_buffer.c **** 		#if( configASSERT_DEFINED == 1 )
 322:Source/stream_buffer.c **** 		{
 323:Source/stream_buffer.c **** 			/* Sanity check that the size of the structure used to declare a
 324:Source/stream_buffer.c **** 			variable of type StaticStreamBuffer_t equals the size of the real
 325:Source/stream_buffer.c **** 			message buffer structure. */
 326:Source/stream_buffer.c **** 			volatile size_t xSize = sizeof( StaticStreamBuffer_t );
 327:Source/stream_buffer.c **** 			configASSERT( xSize == sizeof( StreamBuffer_t ) );
 328:Source/stream_buffer.c **** 		} /*lint !e529 xSize is referenced is configASSERT() is defined. */
 329:Source/stream_buffer.c **** 		#endif /* configASSERT_DEFINED */
 330:Source/stream_buffer.c **** 
 331:Source/stream_buffer.c **** 		if( ( pucStreamBufferStorageArea != NULL ) && ( pxStaticStreamBuffer != NULL ) )
 332:Source/stream_buffer.c **** 		{
 333:Source/stream_buffer.c **** 			prvInitialiseNewStreamBuffer( pxStreamBuffer,
 334:Source/stream_buffer.c **** 										  pucStreamBufferStorageArea,
 335:Source/stream_buffer.c **** 										  xBufferSizeBytes,
 336:Source/stream_buffer.c **** 										  xTriggerLevelBytes,
 337:Source/stream_buffer.c **** 										  ucFlags );
 338:Source/stream_buffer.c **** 
 339:Source/stream_buffer.c **** 			/* Remember this was statically allocated in case it is ever deleted
 340:Source/stream_buffer.c **** 			again. */
 341:Source/stream_buffer.c **** 			pxStreamBuffer->ucFlags |= sbFLAGS_IS_STATICALLY_ALLOCATED;
 342:Source/stream_buffer.c **** 
 343:Source/stream_buffer.c **** 			traceSTREAM_BUFFER_CREATE( pxStreamBuffer, xIsMessageBuffer );
 344:Source/stream_buffer.c **** 
 345:Source/stream_buffer.c **** 			xReturn = ( StreamBufferHandle_t ) pxStaticStreamBuffer; /*lint !e9087 Data hiding requires cast
 346:Source/stream_buffer.c **** 		}
 347:Source/stream_buffer.c **** 		else
 348:Source/stream_buffer.c **** 		{
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccTqmdk2.s 			page 9


 349:Source/stream_buffer.c **** 			xReturn = NULL;
 350:Source/stream_buffer.c **** 			traceSTREAM_BUFFER_CREATE_STATIC_FAILED( xReturn, xIsMessageBuffer );
 351:Source/stream_buffer.c **** 		}
 352:Source/stream_buffer.c **** 
 353:Source/stream_buffer.c **** 		return xReturn;
 354:Source/stream_buffer.c **** 	}
 355:Source/stream_buffer.c **** 
 356:Source/stream_buffer.c **** #endif /* ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
 357:Source/stream_buffer.c **** /*-----------------------------------------------------------*/
 358:Source/stream_buffer.c **** 
 359:Source/stream_buffer.c **** void vStreamBufferDelete( StreamBufferHandle_t xStreamBuffer )
 360:Source/stream_buffer.c **** {
 109              		.loc 1 360 0
 110              		.cfi_startproc
 111              		@ args = 0, pretend = 0, frame = 16
 112              		@ frame_needed = 1, uses_anonymous_args = 0
 113 0000 80B5     		push	{r7, lr}
 114              		.cfi_def_cfa_offset 8
 115              		.cfi_offset 7, -8
 116              		.cfi_offset 14, -4
 117 0002 84B0     		sub	sp, sp, #16
 118              		.cfi_def_cfa_offset 24
 119 0004 00AF     		add	r7, sp, #0
 120              		.cfi_def_cfa_register 7
 121 0006 7860     		str	r0, [r7, #4]
 361:Source/stream_buffer.c **** StreamBuffer_t * pxStreamBuffer = xStreamBuffer;
 122              		.loc 1 361 0
 123 0008 7B68     		ldr	r3, [r7, #4]
 124 000a FB60     		str	r3, [r7, #12]
 362:Source/stream_buffer.c **** 
 363:Source/stream_buffer.c **** 	configASSERT( pxStreamBuffer );
 364:Source/stream_buffer.c **** 
 365:Source/stream_buffer.c **** 	traceSTREAM_BUFFER_DELETE( xStreamBuffer );
 366:Source/stream_buffer.c **** 
 367:Source/stream_buffer.c **** 	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) pdFALSE )
 125              		.loc 1 367 0
 126 000c FB68     		ldr	r3, [r7, #12]
 127 000e 1B7F     		ldrb	r3, [r3, #28]	@ zero_extendqisi2
 128 0010 03F00203 		and	r3, r3, #2
 129 0014 002B     		cmp	r3, #0
 130 0016 03D1     		bne	.L8
 368:Source/stream_buffer.c **** 	{
 369:Source/stream_buffer.c **** 		#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 370:Source/stream_buffer.c **** 		{
 371:Source/stream_buffer.c **** 			/* Both the structure and the buffer were allocated using a single call
 372:Source/stream_buffer.c **** 			to pvPortMalloc(), hence only one call to vPortFree() is required. */
 373:Source/stream_buffer.c **** 			vPortFree( ( void * ) pxStreamBuffer ); /*lint !e9087 Standard free() semantics require void *, 
 131              		.loc 1 373 0
 132 0018 F868     		ldr	r0, [r7, #12]
 133 001a FFF7FEFF 		bl	vPortFree
 374:Source/stream_buffer.c **** 		}
 375:Source/stream_buffer.c **** 		#else
 376:Source/stream_buffer.c **** 		{
 377:Source/stream_buffer.c **** 			/* Should not be possible to get here, ucFlags must be corrupt.
 378:Source/stream_buffer.c **** 			Force an assert. */
 379:Source/stream_buffer.c **** 			configASSERT( xStreamBuffer == ( StreamBufferHandle_t ) ~0 );
 380:Source/stream_buffer.c **** 		}
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccTqmdk2.s 			page 10


 381:Source/stream_buffer.c **** 		#endif
 382:Source/stream_buffer.c **** 	}
 383:Source/stream_buffer.c **** 	else
 384:Source/stream_buffer.c **** 	{
 385:Source/stream_buffer.c **** 		/* The structure and buffer were not allocated dynamically and cannot be
 386:Source/stream_buffer.c **** 		freed - just scrub the structure so future use will assert. */
 387:Source/stream_buffer.c **** 		( void ) memset( pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) );
 388:Source/stream_buffer.c **** 	}
 389:Source/stream_buffer.c **** }
 134              		.loc 1 389 0
 135 001e 04E0     		b	.L10
 136              	.L8:
 387:Source/stream_buffer.c **** 	}
 137              		.loc 1 387 0
 138 0020 2022     		movs	r2, #32
 139 0022 0021     		movs	r1, #0
 140 0024 F868     		ldr	r0, [r7, #12]
 141 0026 FFF7FEFF 		bl	memset
 142              	.L10:
 143              		.loc 1 389 0
 144 002a 00BF     		nop
 145 002c 1037     		adds	r7, r7, #16
 146              		.cfi_def_cfa_offset 8
 147 002e BD46     		mov	sp, r7
 148              		.cfi_def_cfa_register 13
 149              		@ sp needed
 150 0030 80BD     		pop	{r7, pc}
 151              		.cfi_endproc
 152              	.LFE69:
 153              		.size	vStreamBufferDelete, .-vStreamBufferDelete
 154 0032 00BF     		.section	.text.xStreamBufferReset,"ax",%progbits
 155              		.align	2
 156              		.global	xStreamBufferReset
 157              		.thumb
 158              		.thumb_func
 159              		.type	xStreamBufferReset, %function
 160              	xStreamBufferReset:
 161              	.LFB70:
 390:Source/stream_buffer.c **** /*-----------------------------------------------------------*/
 391:Source/stream_buffer.c **** 
 392:Source/stream_buffer.c **** BaseType_t xStreamBufferReset( StreamBufferHandle_t xStreamBuffer )
 393:Source/stream_buffer.c **** {
 162              		.loc 1 393 0
 163              		.cfi_startproc
 164              		@ args = 0, pretend = 0, frame = 16
 165              		@ frame_needed = 1, uses_anonymous_args = 0
 166 0000 80B5     		push	{r7, lr}
 167              		.cfi_def_cfa_offset 8
 168              		.cfi_offset 7, -8
 169              		.cfi_offset 14, -4
 170 0002 86B0     		sub	sp, sp, #24
 171              		.cfi_def_cfa_offset 32
 172 0004 02AF     		add	r7, sp, #8
 173              		.cfi_def_cfa 7, 24
 174 0006 7860     		str	r0, [r7, #4]
 394:Source/stream_buffer.c **** StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 175              		.loc 1 394 0
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccTqmdk2.s 			page 11


 176 0008 7B68     		ldr	r3, [r7, #4]
 177 000a BB60     		str	r3, [r7, #8]
 395:Source/stream_buffer.c **** BaseType_t xReturn = pdFAIL;
 178              		.loc 1 395 0
 179 000c 0023     		movs	r3, #0
 180 000e FB60     		str	r3, [r7, #12]
 396:Source/stream_buffer.c **** 
 397:Source/stream_buffer.c **** #if( configUSE_TRACE_FACILITY == 1 )
 398:Source/stream_buffer.c **** 	UBaseType_t uxStreamBufferNumber;
 399:Source/stream_buffer.c **** #endif
 400:Source/stream_buffer.c **** 
 401:Source/stream_buffer.c **** 	configASSERT( pxStreamBuffer );
 402:Source/stream_buffer.c **** 
 403:Source/stream_buffer.c **** 	#if( configUSE_TRACE_FACILITY == 1 )
 404:Source/stream_buffer.c **** 	{
 405:Source/stream_buffer.c **** 		/* Store the stream buffer number so it can be restored after the
 406:Source/stream_buffer.c **** 		reset. */
 407:Source/stream_buffer.c **** 		uxStreamBufferNumber = pxStreamBuffer->uxStreamBufferNumber;
 408:Source/stream_buffer.c **** 	}
 409:Source/stream_buffer.c **** 	#endif
 410:Source/stream_buffer.c **** 
 411:Source/stream_buffer.c **** 	/* Can only reset a message buffer if there are no tasks blocked on it. */
 412:Source/stream_buffer.c **** 	taskENTER_CRITICAL();
 181              		.loc 1 412 0
 182 0010 FFF7FEFF 		bl	vPortEnterCritical
 413:Source/stream_buffer.c **** 	{
 414:Source/stream_buffer.c **** 		if( pxStreamBuffer->xTaskWaitingToReceive == NULL )
 183              		.loc 1 414 0
 184 0014 BB68     		ldr	r3, [r7, #8]
 185 0016 1B69     		ldr	r3, [r3, #16]
 186 0018 002B     		cmp	r3, #0
 187 001a 12D1     		bne	.L12
 415:Source/stream_buffer.c **** 		{
 416:Source/stream_buffer.c **** 			if( pxStreamBuffer->xTaskWaitingToSend == NULL )
 188              		.loc 1 416 0
 189 001c BB68     		ldr	r3, [r7, #8]
 190 001e 5B69     		ldr	r3, [r3, #20]
 191 0020 002B     		cmp	r3, #0
 192 0022 0ED1     		bne	.L12
 417:Source/stream_buffer.c **** 			{
 418:Source/stream_buffer.c **** 				prvInitialiseNewStreamBuffer( pxStreamBuffer,
 193              		.loc 1 418 0
 194 0024 BB68     		ldr	r3, [r7, #8]
 195 0026 9969     		ldr	r1, [r3, #24]
 196 0028 BB68     		ldr	r3, [r7, #8]
 197 002a 9A68     		ldr	r2, [r3, #8]
 198 002c BB68     		ldr	r3, [r7, #8]
 199 002e D868     		ldr	r0, [r3, #12]
 200 0030 BB68     		ldr	r3, [r7, #8]
 201 0032 1B7F     		ldrb	r3, [r3, #28]	@ zero_extendqisi2
 202 0034 0093     		str	r3, [sp]
 203 0036 0346     		mov	r3, r0
 204 0038 B868     		ldr	r0, [r7, #8]
 205 003a FFF7FEFF 		bl	prvInitialiseNewStreamBuffer
 419:Source/stream_buffer.c **** 											  pxStreamBuffer->pucBuffer,
 420:Source/stream_buffer.c **** 											  pxStreamBuffer->xLength,
 421:Source/stream_buffer.c **** 											  pxStreamBuffer->xTriggerLevelBytes,
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccTqmdk2.s 			page 12


 422:Source/stream_buffer.c **** 											  pxStreamBuffer->ucFlags );
 423:Source/stream_buffer.c **** 				xReturn = pdPASS;
 206              		.loc 1 423 0
 207 003e 0123     		movs	r3, #1
 208 0040 FB60     		str	r3, [r7, #12]
 209              	.L12:
 424:Source/stream_buffer.c **** 
 425:Source/stream_buffer.c **** 				#if( configUSE_TRACE_FACILITY == 1 )
 426:Source/stream_buffer.c **** 				{
 427:Source/stream_buffer.c **** 					pxStreamBuffer->uxStreamBufferNumber = uxStreamBufferNumber;
 428:Source/stream_buffer.c **** 				}
 429:Source/stream_buffer.c **** 				#endif
 430:Source/stream_buffer.c **** 
 431:Source/stream_buffer.c **** 				traceSTREAM_BUFFER_RESET( xStreamBuffer );
 432:Source/stream_buffer.c **** 			}
 433:Source/stream_buffer.c **** 		}
 434:Source/stream_buffer.c **** 	}
 435:Source/stream_buffer.c **** 	taskEXIT_CRITICAL();
 210              		.loc 1 435 0
 211 0042 FFF7FEFF 		bl	vPortExitCritical
 436:Source/stream_buffer.c **** 
 437:Source/stream_buffer.c **** 	return xReturn;
 212              		.loc 1 437 0
 213 0046 FB68     		ldr	r3, [r7, #12]
 438:Source/stream_buffer.c **** }
 214              		.loc 1 438 0
 215 0048 1846     		mov	r0, r3
 216 004a 1037     		adds	r7, r7, #16
 217              		.cfi_def_cfa_offset 8
 218 004c BD46     		mov	sp, r7
 219              		.cfi_def_cfa_register 13
 220              		@ sp needed
 221 004e 80BD     		pop	{r7, pc}
 222              		.cfi_endproc
 223              	.LFE70:
 224              		.size	xStreamBufferReset, .-xStreamBufferReset
 225              		.section	.text.xStreamBufferSetTriggerLevel,"ax",%progbits
 226              		.align	2
 227              		.global	xStreamBufferSetTriggerLevel
 228              		.thumb
 229              		.thumb_func
 230              		.type	xStreamBufferSetTriggerLevel, %function
 231              	xStreamBufferSetTriggerLevel:
 232              	.LFB71:
 439:Source/stream_buffer.c **** /*-----------------------------------------------------------*/
 440:Source/stream_buffer.c **** 
 441:Source/stream_buffer.c **** BaseType_t xStreamBufferSetTriggerLevel( StreamBufferHandle_t xStreamBuffer, size_t xTriggerLevel )
 442:Source/stream_buffer.c **** {
 233              		.loc 1 442 0
 234              		.cfi_startproc
 235              		@ args = 0, pretend = 0, frame = 16
 236              		@ frame_needed = 1, uses_anonymous_args = 0
 237              		@ link register save eliminated.
 238 0000 80B4     		push	{r7}
 239              		.cfi_def_cfa_offset 4
 240              		.cfi_offset 7, -4
 241 0002 85B0     		sub	sp, sp, #20
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccTqmdk2.s 			page 13


 242              		.cfi_def_cfa_offset 24
 243 0004 00AF     		add	r7, sp, #0
 244              		.cfi_def_cfa_register 7
 245 0006 7860     		str	r0, [r7, #4]
 246 0008 3960     		str	r1, [r7]
 443:Source/stream_buffer.c **** StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 247              		.loc 1 443 0
 248 000a 7B68     		ldr	r3, [r7, #4]
 249 000c BB60     		str	r3, [r7, #8]
 444:Source/stream_buffer.c **** BaseType_t xReturn;
 445:Source/stream_buffer.c **** 
 446:Source/stream_buffer.c **** 	configASSERT( pxStreamBuffer );
 447:Source/stream_buffer.c **** 
 448:Source/stream_buffer.c **** 	/* It is not valid for the trigger level to be 0. */
 449:Source/stream_buffer.c **** 	if( xTriggerLevel == ( size_t ) 0 )
 250              		.loc 1 449 0
 251 000e 3B68     		ldr	r3, [r7]
 252 0010 002B     		cmp	r3, #0
 253 0012 01D1     		bne	.L15
 450:Source/stream_buffer.c **** 	{
 451:Source/stream_buffer.c **** 		xTriggerLevel = ( size_t ) 1;
 254              		.loc 1 451 0
 255 0014 0123     		movs	r3, #1
 256 0016 3B60     		str	r3, [r7]
 257              	.L15:
 452:Source/stream_buffer.c **** 	}
 453:Source/stream_buffer.c **** 
 454:Source/stream_buffer.c **** 	/* The trigger level is the number of bytes that must be in the stream
 455:Source/stream_buffer.c **** 	buffer before a task that is waiting for data is unblocked. */
 456:Source/stream_buffer.c **** 	if( xTriggerLevel <= pxStreamBuffer->xLength )
 258              		.loc 1 456 0
 259 0018 BB68     		ldr	r3, [r7, #8]
 260 001a 9A68     		ldr	r2, [r3, #8]
 261 001c 3B68     		ldr	r3, [r7]
 262 001e 9A42     		cmp	r2, r3
 263 0020 05D3     		bcc	.L16
 457:Source/stream_buffer.c **** 	{
 458:Source/stream_buffer.c **** 		pxStreamBuffer->xTriggerLevelBytes = xTriggerLevel;
 264              		.loc 1 458 0
 265 0022 BB68     		ldr	r3, [r7, #8]
 266 0024 3A68     		ldr	r2, [r7]
 267 0026 DA60     		str	r2, [r3, #12]
 459:Source/stream_buffer.c **** 		xReturn = pdPASS;
 268              		.loc 1 459 0
 269 0028 0123     		movs	r3, #1
 270 002a FB60     		str	r3, [r7, #12]
 271 002c 01E0     		b	.L17
 272              	.L16:
 460:Source/stream_buffer.c **** 	}
 461:Source/stream_buffer.c **** 	else
 462:Source/stream_buffer.c **** 	{
 463:Source/stream_buffer.c **** 		xReturn = pdFALSE;
 273              		.loc 1 463 0
 274 002e 0023     		movs	r3, #0
 275 0030 FB60     		str	r3, [r7, #12]
 276              	.L17:
 464:Source/stream_buffer.c **** 	}
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccTqmdk2.s 			page 14


 465:Source/stream_buffer.c **** 
 466:Source/stream_buffer.c **** 	return xReturn;
 277              		.loc 1 466 0
 278 0032 FB68     		ldr	r3, [r7, #12]
 467:Source/stream_buffer.c **** }
 279              		.loc 1 467 0
 280 0034 1846     		mov	r0, r3
 281 0036 1437     		adds	r7, r7, #20
 282              		.cfi_def_cfa_offset 4
 283 0038 BD46     		mov	sp, r7
 284              		.cfi_def_cfa_register 13
 285              		@ sp needed
 286 003a 80BC     		pop	{r7}
 287              		.cfi_restore 7
 288              		.cfi_def_cfa_offset 0
 289 003c 7047     		bx	lr
 290              		.cfi_endproc
 291              	.LFE71:
 292              		.size	xStreamBufferSetTriggerLevel, .-xStreamBufferSetTriggerLevel
 293 003e 00BF     		.section	.text.xStreamBufferSpacesAvailable,"ax",%progbits
 294              		.align	2
 295              		.global	xStreamBufferSpacesAvailable
 296              		.thumb
 297              		.thumb_func
 298              		.type	xStreamBufferSpacesAvailable, %function
 299              	xStreamBufferSpacesAvailable:
 300              	.LFB72:
 468:Source/stream_buffer.c **** /*-----------------------------------------------------------*/
 469:Source/stream_buffer.c **** 
 470:Source/stream_buffer.c **** size_t xStreamBufferSpacesAvailable( StreamBufferHandle_t xStreamBuffer )
 471:Source/stream_buffer.c **** {
 301              		.loc 1 471 0
 302              		.cfi_startproc
 303              		@ args = 0, pretend = 0, frame = 16
 304              		@ frame_needed = 1, uses_anonymous_args = 0
 305              		@ link register save eliminated.
 306 0000 80B4     		push	{r7}
 307              		.cfi_def_cfa_offset 4
 308              		.cfi_offset 7, -4
 309 0002 85B0     		sub	sp, sp, #20
 310              		.cfi_def_cfa_offset 24
 311 0004 00AF     		add	r7, sp, #0
 312              		.cfi_def_cfa_register 7
 313 0006 7860     		str	r0, [r7, #4]
 472:Source/stream_buffer.c **** const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 314              		.loc 1 472 0
 315 0008 7B68     		ldr	r3, [r7, #4]
 316 000a BB60     		str	r3, [r7, #8]
 473:Source/stream_buffer.c **** size_t xSpace;
 474:Source/stream_buffer.c **** 
 475:Source/stream_buffer.c **** 	configASSERT( pxStreamBuffer );
 476:Source/stream_buffer.c **** 
 477:Source/stream_buffer.c **** 	xSpace = pxStreamBuffer->xLength + pxStreamBuffer->xTail;
 317              		.loc 1 477 0
 318 000c BB68     		ldr	r3, [r7, #8]
 319 000e 9A68     		ldr	r2, [r3, #8]
 320 0010 BB68     		ldr	r3, [r7, #8]
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccTqmdk2.s 			page 15


 321 0012 1B68     		ldr	r3, [r3]
 322 0014 1344     		add	r3, r3, r2
 323 0016 FB60     		str	r3, [r7, #12]
 478:Source/stream_buffer.c **** 	xSpace -= pxStreamBuffer->xHead;
 324              		.loc 1 478 0
 325 0018 BB68     		ldr	r3, [r7, #8]
 326 001a 5B68     		ldr	r3, [r3, #4]
 327 001c FA68     		ldr	r2, [r7, #12]
 328 001e D31A     		subs	r3, r2, r3
 329 0020 FB60     		str	r3, [r7, #12]
 479:Source/stream_buffer.c **** 	xSpace -= ( size_t ) 1;
 330              		.loc 1 479 0
 331 0022 FB68     		ldr	r3, [r7, #12]
 332 0024 013B     		subs	r3, r3, #1
 333 0026 FB60     		str	r3, [r7, #12]
 480:Source/stream_buffer.c **** 
 481:Source/stream_buffer.c **** 	if( xSpace >= pxStreamBuffer->xLength )
 334              		.loc 1 481 0
 335 0028 BB68     		ldr	r3, [r7, #8]
 336 002a 9A68     		ldr	r2, [r3, #8]
 337 002c FB68     		ldr	r3, [r7, #12]
 338 002e 9A42     		cmp	r2, r3
 339 0030 04D8     		bhi	.L20
 482:Source/stream_buffer.c **** 	{
 483:Source/stream_buffer.c **** 		xSpace -= pxStreamBuffer->xLength;
 340              		.loc 1 483 0
 341 0032 BB68     		ldr	r3, [r7, #8]
 342 0034 9B68     		ldr	r3, [r3, #8]
 343 0036 FA68     		ldr	r2, [r7, #12]
 344 0038 D31A     		subs	r3, r2, r3
 345 003a FB60     		str	r3, [r7, #12]
 346              	.L20:
 484:Source/stream_buffer.c **** 	}
 485:Source/stream_buffer.c **** 	else
 486:Source/stream_buffer.c **** 	{
 487:Source/stream_buffer.c **** 		mtCOVERAGE_TEST_MARKER();
 488:Source/stream_buffer.c **** 	}
 489:Source/stream_buffer.c **** 
 490:Source/stream_buffer.c **** 	return xSpace;
 347              		.loc 1 490 0
 348 003c FB68     		ldr	r3, [r7, #12]
 491:Source/stream_buffer.c **** }
 349              		.loc 1 491 0
 350 003e 1846     		mov	r0, r3
 351 0040 1437     		adds	r7, r7, #20
 352              		.cfi_def_cfa_offset 4
 353 0042 BD46     		mov	sp, r7
 354              		.cfi_def_cfa_register 13
 355              		@ sp needed
 356 0044 80BC     		pop	{r7}
 357              		.cfi_restore 7
 358              		.cfi_def_cfa_offset 0
 359 0046 7047     		bx	lr
 360              		.cfi_endproc
 361              	.LFE72:
 362              		.size	xStreamBufferSpacesAvailable, .-xStreamBufferSpacesAvailable
 363              		.section	.text.xStreamBufferBytesAvailable,"ax",%progbits
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccTqmdk2.s 			page 16


 364              		.align	2
 365              		.global	xStreamBufferBytesAvailable
 366              		.thumb
 367              		.thumb_func
 368              		.type	xStreamBufferBytesAvailable, %function
 369              	xStreamBufferBytesAvailable:
 370              	.LFB73:
 492:Source/stream_buffer.c **** /*-----------------------------------------------------------*/
 493:Source/stream_buffer.c **** 
 494:Source/stream_buffer.c **** size_t xStreamBufferBytesAvailable( StreamBufferHandle_t xStreamBuffer )
 495:Source/stream_buffer.c **** {
 371              		.loc 1 495 0
 372              		.cfi_startproc
 373              		@ args = 0, pretend = 0, frame = 16
 374              		@ frame_needed = 1, uses_anonymous_args = 0
 375 0000 80B5     		push	{r7, lr}
 376              		.cfi_def_cfa_offset 8
 377              		.cfi_offset 7, -8
 378              		.cfi_offset 14, -4
 379 0002 84B0     		sub	sp, sp, #16
 380              		.cfi_def_cfa_offset 24
 381 0004 00AF     		add	r7, sp, #0
 382              		.cfi_def_cfa_register 7
 383 0006 7860     		str	r0, [r7, #4]
 496:Source/stream_buffer.c **** const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 384              		.loc 1 496 0
 385 0008 7B68     		ldr	r3, [r7, #4]
 386 000a FB60     		str	r3, [r7, #12]
 497:Source/stream_buffer.c **** size_t xReturn;
 498:Source/stream_buffer.c **** 
 499:Source/stream_buffer.c **** 	configASSERT( pxStreamBuffer );
 500:Source/stream_buffer.c **** 
 501:Source/stream_buffer.c **** 	xReturn = prvBytesInBuffer( pxStreamBuffer );
 387              		.loc 1 501 0
 388 000c F868     		ldr	r0, [r7, #12]
 389 000e FFF7FEFF 		bl	prvBytesInBuffer
 390 0012 B860     		str	r0, [r7, #8]
 502:Source/stream_buffer.c **** 	return xReturn;
 391              		.loc 1 502 0
 392 0014 BB68     		ldr	r3, [r7, #8]
 503:Source/stream_buffer.c **** }
 393              		.loc 1 503 0
 394 0016 1846     		mov	r0, r3
 395 0018 1037     		adds	r7, r7, #16
 396              		.cfi_def_cfa_offset 8
 397 001a BD46     		mov	sp, r7
 398              		.cfi_def_cfa_register 13
 399              		@ sp needed
 400 001c 80BD     		pop	{r7, pc}
 401              		.cfi_endproc
 402              	.LFE73:
 403              		.size	xStreamBufferBytesAvailable, .-xStreamBufferBytesAvailable
 404 001e 00BF     		.section	.text.xStreamBufferSend,"ax",%progbits
 405              		.align	2
 406              		.global	xStreamBufferSend
 407              		.thumb
 408              		.thumb_func
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccTqmdk2.s 			page 17


 409              		.type	xStreamBufferSend, %function
 410              	xStreamBufferSend:
 411              	.LFB74:
 504:Source/stream_buffer.c **** /*-----------------------------------------------------------*/
 505:Source/stream_buffer.c **** 
 506:Source/stream_buffer.c **** size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
 507:Source/stream_buffer.c **** 						  const void *pvTxData,
 508:Source/stream_buffer.c **** 						  size_t xDataLengthBytes,
 509:Source/stream_buffer.c **** 						  TickType_t xTicksToWait )
 510:Source/stream_buffer.c **** {
 412              		.loc 1 510 0
 413              		.cfi_startproc
 414              		@ args = 0, pretend = 0, frame = 40
 415              		@ frame_needed = 1, uses_anonymous_args = 0
 416 0000 80B5     		push	{r7, lr}
 417              		.cfi_def_cfa_offset 8
 418              		.cfi_offset 7, -8
 419              		.cfi_offset 14, -4
 420 0002 8CB0     		sub	sp, sp, #48
 421              		.cfi_def_cfa_offset 56
 422 0004 02AF     		add	r7, sp, #8
 423              		.cfi_def_cfa 7, 48
 424 0006 F860     		str	r0, [r7, #12]
 425 0008 B960     		str	r1, [r7, #8]
 426 000a 7A60     		str	r2, [r7, #4]
 427 000c 3B60     		str	r3, [r7]
 511:Source/stream_buffer.c **** StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 428              		.loc 1 511 0
 429 000e FB68     		ldr	r3, [r7, #12]
 430 0010 FB61     		str	r3, [r7, #28]
 512:Source/stream_buffer.c **** size_t xReturn, xSpace = 0;
 431              		.loc 1 512 0
 432 0012 0023     		movs	r3, #0
 433 0014 7B62     		str	r3, [r7, #36]
 513:Source/stream_buffer.c **** size_t xRequiredSpace = xDataLengthBytes;
 434              		.loc 1 513 0
 435 0016 7B68     		ldr	r3, [r7, #4]
 436 0018 3B62     		str	r3, [r7, #32]
 514:Source/stream_buffer.c **** TimeOut_t xTimeOut;
 515:Source/stream_buffer.c **** 
 516:Source/stream_buffer.c **** 	configASSERT( pvTxData );
 517:Source/stream_buffer.c **** 	configASSERT( pxStreamBuffer );
 518:Source/stream_buffer.c **** 
 519:Source/stream_buffer.c **** 	/* This send function is used to write to both message buffers and stream
 520:Source/stream_buffer.c **** 	buffers.  If this is a message buffer then the space needed must be
 521:Source/stream_buffer.c **** 	increased by the amount of bytes needed to store the length of the
 522:Source/stream_buffer.c **** 	message. */
 523:Source/stream_buffer.c **** 	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 437              		.loc 1 523 0
 438 001a FB69     		ldr	r3, [r7, #28]
 439 001c 1B7F     		ldrb	r3, [r3, #28]	@ zero_extendqisi2
 440 001e 03F00103 		and	r3, r3, #1
 441 0022 002B     		cmp	r3, #0
 442 0024 02D0     		beq	.L25
 524:Source/stream_buffer.c **** 	{
 525:Source/stream_buffer.c **** 		xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
 443              		.loc 1 525 0
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccTqmdk2.s 			page 18


 444 0026 3B6A     		ldr	r3, [r7, #32]
 445 0028 0433     		adds	r3, r3, #4
 446 002a 3B62     		str	r3, [r7, #32]
 447              	.L25:
 526:Source/stream_buffer.c **** 
 527:Source/stream_buffer.c **** 		/* Overflow? */
 528:Source/stream_buffer.c **** 		configASSERT( xRequiredSpace > xDataLengthBytes );
 529:Source/stream_buffer.c **** 	}
 530:Source/stream_buffer.c **** 	else
 531:Source/stream_buffer.c **** 	{
 532:Source/stream_buffer.c **** 		mtCOVERAGE_TEST_MARKER();
 533:Source/stream_buffer.c **** 	}
 534:Source/stream_buffer.c **** 
 535:Source/stream_buffer.c **** 	if( xTicksToWait != ( TickType_t ) 0 )
 448              		.loc 1 535 0
 449 002c 3B68     		ldr	r3, [r7]
 450 002e 002B     		cmp	r3, #0
 451 0030 2FD0     		beq	.L26
 536:Source/stream_buffer.c **** 	{
 537:Source/stream_buffer.c **** 		vTaskSetTimeOutState( &xTimeOut );
 452              		.loc 1 537 0
 453 0032 07F11003 		add	r3, r7, #16
 454 0036 1846     		mov	r0, r3
 455 0038 FFF7FEFF 		bl	vTaskSetTimeOutState
 456              	.L30:
 538:Source/stream_buffer.c **** 
 539:Source/stream_buffer.c **** 		do
 540:Source/stream_buffer.c **** 		{
 541:Source/stream_buffer.c **** 			/* Wait until the required number of bytes are free in the message
 542:Source/stream_buffer.c **** 			buffer. */
 543:Source/stream_buffer.c **** 			taskENTER_CRITICAL();
 457              		.loc 1 543 0
 458 003c FFF7FEFF 		bl	vPortEnterCritical
 544:Source/stream_buffer.c **** 			{
 545:Source/stream_buffer.c **** 				xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 459              		.loc 1 545 0
 460 0040 F869     		ldr	r0, [r7, #28]
 461 0042 FFF7FEFF 		bl	xStreamBufferSpacesAvailable
 462 0046 7862     		str	r0, [r7, #36]
 546:Source/stream_buffer.c **** 
 547:Source/stream_buffer.c **** 				if( xSpace < xRequiredSpace )
 463              		.loc 1 547 0
 464 0048 7A6A     		ldr	r2, [r7, #36]
 465 004a 3B6A     		ldr	r3, [r7, #32]
 466 004c 9A42     		cmp	r2, r3
 467 004e 08D2     		bcs	.L27
 548:Source/stream_buffer.c **** 				{
 549:Source/stream_buffer.c **** 					/* Clear notification state as going to wait for space. */
 550:Source/stream_buffer.c **** 					( void ) xTaskNotifyStateClear( NULL );
 468              		.loc 1 550 0
 469 0050 0020     		movs	r0, #0
 470 0052 FFF7FEFF 		bl	xTaskNotifyStateClear
 551:Source/stream_buffer.c **** 
 552:Source/stream_buffer.c **** 					/* Should only be one writer. */
 553:Source/stream_buffer.c **** 					configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
 554:Source/stream_buffer.c **** 					pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
 471              		.loc 1 554 0
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccTqmdk2.s 			page 19


 472 0056 FFF7FEFF 		bl	xTaskGetCurrentTaskHandle
 473 005a 0246     		mov	r2, r0
 474 005c FB69     		ldr	r3, [r7, #28]
 475 005e 5A61     		str	r2, [r3, #20]
 476 0060 02E0     		b	.L35
 477              	.L27:
 555:Source/stream_buffer.c **** 				}
 556:Source/stream_buffer.c **** 				else
 557:Source/stream_buffer.c **** 				{
 558:Source/stream_buffer.c **** 					taskEXIT_CRITICAL();
 478              		.loc 1 558 0
 479 0062 FFF7FEFF 		bl	vPortExitCritical
 559:Source/stream_buffer.c **** 					break;
 480              		.loc 1 559 0
 481 0066 14E0     		b	.L26
 482              	.L35:
 560:Source/stream_buffer.c **** 				}
 561:Source/stream_buffer.c **** 			}
 562:Source/stream_buffer.c **** 			taskEXIT_CRITICAL();
 483              		.loc 1 562 0
 484 0068 FFF7FEFF 		bl	vPortExitCritical
 563:Source/stream_buffer.c **** 
 564:Source/stream_buffer.c **** 			traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
 565:Source/stream_buffer.c **** 			( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 485              		.loc 1 565 0
 486 006c 3B68     		ldr	r3, [r7]
 487 006e 0022     		movs	r2, #0
 488 0070 0021     		movs	r1, #0
 489 0072 0020     		movs	r0, #0
 490 0074 FFF7FEFF 		bl	xTaskNotifyWait
 566:Source/stream_buffer.c **** 			pxStreamBuffer->xTaskWaitingToSend = NULL;
 491              		.loc 1 566 0
 492 0078 FB69     		ldr	r3, [r7, #28]
 493 007a 0022     		movs	r2, #0
 494 007c 5A61     		str	r2, [r3, #20]
 567:Source/stream_buffer.c **** 
 568:Source/stream_buffer.c **** 		} while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
 495              		.loc 1 568 0
 496 007e 3A46     		mov	r2, r7
 497 0080 07F11003 		add	r3, r7, #16
 498 0084 1146     		mov	r1, r2
 499 0086 1846     		mov	r0, r3
 500 0088 FFF7FEFF 		bl	xTaskCheckForTimeOut
 501 008c 0346     		mov	r3, r0
 502 008e 002B     		cmp	r3, #0
 503 0090 D4D0     		beq	.L30
 504              	.L26:
 569:Source/stream_buffer.c **** 	}
 570:Source/stream_buffer.c **** 	else
 571:Source/stream_buffer.c **** 	{
 572:Source/stream_buffer.c **** 		mtCOVERAGE_TEST_MARKER();
 573:Source/stream_buffer.c **** 	}
 574:Source/stream_buffer.c **** 
 575:Source/stream_buffer.c **** 	if( xSpace == ( size_t ) 0 )
 505              		.loc 1 575 0
 506 0092 7B6A     		ldr	r3, [r7, #36]
 507 0094 002B     		cmp	r3, #0
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccTqmdk2.s 			page 20


 508 0096 03D1     		bne	.L31
 576:Source/stream_buffer.c **** 	{
 577:Source/stream_buffer.c **** 		xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 509              		.loc 1 577 0
 510 0098 F869     		ldr	r0, [r7, #28]
 511 009a FFF7FEFF 		bl	xStreamBufferSpacesAvailable
 512 009e 7862     		str	r0, [r7, #36]
 513              	.L31:
 578:Source/stream_buffer.c **** 	}
 579:Source/stream_buffer.c **** 	else
 580:Source/stream_buffer.c **** 	{
 581:Source/stream_buffer.c **** 		mtCOVERAGE_TEST_MARKER();
 582:Source/stream_buffer.c **** 	}
 583:Source/stream_buffer.c **** 
 584:Source/stream_buffer.c **** 	xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSp
 514              		.loc 1 584 0
 515 00a0 3B6A     		ldr	r3, [r7, #32]
 516 00a2 0093     		str	r3, [sp]
 517 00a4 7B6A     		ldr	r3, [r7, #36]
 518 00a6 7A68     		ldr	r2, [r7, #4]
 519 00a8 B968     		ldr	r1, [r7, #8]
 520 00aa F869     		ldr	r0, [r7, #28]
 521 00ac FFF7FEFF 		bl	prvWriteMessageToBuffer
 522 00b0 B861     		str	r0, [r7, #24]
 585:Source/stream_buffer.c **** 
 586:Source/stream_buffer.c **** 	if( xReturn > ( size_t ) 0 )
 523              		.loc 1 586 0
 524 00b2 BB69     		ldr	r3, [r7, #24]
 525 00b4 002B     		cmp	r3, #0
 526 00b6 19D0     		beq	.L32
 587:Source/stream_buffer.c **** 	{
 588:Source/stream_buffer.c **** 		traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );
 589:Source/stream_buffer.c **** 
 590:Source/stream_buffer.c **** 		/* Was a task waiting for the data? */
 591:Source/stream_buffer.c **** 		if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
 527              		.loc 1 591 0
 528 00b8 F869     		ldr	r0, [r7, #28]
 529 00ba FFF7FEFF 		bl	prvBytesInBuffer
 530 00be 0246     		mov	r2, r0
 531 00c0 FB69     		ldr	r3, [r7, #28]
 532 00c2 DB68     		ldr	r3, [r3, #12]
 533 00c4 9A42     		cmp	r2, r3
 534 00c6 11D3     		bcc	.L32
 592:Source/stream_buffer.c **** 		{
 593:Source/stream_buffer.c **** 			sbSEND_COMPLETED( pxStreamBuffer );
 535              		.loc 1 593 0
 536 00c8 FFF7FEFF 		bl	vTaskSuspendAll
 537 00cc FB69     		ldr	r3, [r7, #28]
 538 00ce 1B69     		ldr	r3, [r3, #16]
 539 00d0 002B     		cmp	r3, #0
 540 00d2 09D0     		beq	.L33
 541              		.loc 1 593 0 is_stmt 0 discriminator 1
 542 00d4 FB69     		ldr	r3, [r7, #28]
 543 00d6 1869     		ldr	r0, [r3, #16]
 544 00d8 0023     		movs	r3, #0
 545 00da 0022     		movs	r2, #0
 546 00dc 0021     		movs	r1, #0
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccTqmdk2.s 			page 21


 547 00de FFF7FEFF 		bl	xTaskGenericNotify
 548 00e2 FB69     		ldr	r3, [r7, #28]
 549 00e4 0022     		movs	r2, #0
 550 00e6 1A61     		str	r2, [r3, #16]
 551              	.L33:
 552              		.loc 1 593 0 discriminator 3
 553 00e8 FFF7FEFF 		bl	xTaskResumeAll
 554              	.L32:
 594:Source/stream_buffer.c **** 		}
 595:Source/stream_buffer.c **** 		else
 596:Source/stream_buffer.c **** 		{
 597:Source/stream_buffer.c **** 			mtCOVERAGE_TEST_MARKER();
 598:Source/stream_buffer.c **** 		}
 599:Source/stream_buffer.c **** 	}
 600:Source/stream_buffer.c **** 	else
 601:Source/stream_buffer.c **** 	{
 602:Source/stream_buffer.c **** 		mtCOVERAGE_TEST_MARKER();
 603:Source/stream_buffer.c **** 		traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
 604:Source/stream_buffer.c **** 	}
 605:Source/stream_buffer.c **** 
 606:Source/stream_buffer.c **** 	return xReturn;
 555              		.loc 1 606 0 is_stmt 1
 556 00ec BB69     		ldr	r3, [r7, #24]
 607:Source/stream_buffer.c **** }
 557              		.loc 1 607 0
 558 00ee 1846     		mov	r0, r3
 559 00f0 2837     		adds	r7, r7, #40
 560              		.cfi_def_cfa_offset 8
 561 00f2 BD46     		mov	sp, r7
 562              		.cfi_def_cfa_register 13
 563              		@ sp needed
 564 00f4 80BD     		pop	{r7, pc}
 565              		.cfi_endproc
 566              	.LFE74:
 567              		.size	xStreamBufferSend, .-xStreamBufferSend
 568 00f6 00BF     		.section	.text.xStreamBufferSendFromISR,"ax",%progbits
 569              		.align	2
 570              		.global	xStreamBufferSendFromISR
 571              		.thumb
 572              		.thumb_func
 573              		.type	xStreamBufferSendFromISR, %function
 574              	xStreamBufferSendFromISR:
 575              	.LFB75:
 608:Source/stream_buffer.c **** /*-----------------------------------------------------------*/
 609:Source/stream_buffer.c **** 
 610:Source/stream_buffer.c **** size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
 611:Source/stream_buffer.c **** 								 const void *pvTxData,
 612:Source/stream_buffer.c **** 								 size_t xDataLengthBytes,
 613:Source/stream_buffer.c **** 								 BaseType_t * const pxHigherPriorityTaskWoken )
 614:Source/stream_buffer.c **** {
 576              		.loc 1 614 0
 577              		.cfi_startproc
 578              		@ args = 0, pretend = 0, frame = 48
 579              		@ frame_needed = 1, uses_anonymous_args = 0
 580 0000 80B5     		push	{r7, lr}
 581              		.cfi_def_cfa_offset 8
 582              		.cfi_offset 7, -8
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccTqmdk2.s 			page 22


 583              		.cfi_offset 14, -4
 584 0002 8EB0     		sub	sp, sp, #56
 585              		.cfi_def_cfa_offset 64
 586 0004 02AF     		add	r7, sp, #8
 587              		.cfi_def_cfa 7, 56
 588 0006 F860     		str	r0, [r7, #12]
 589 0008 B960     		str	r1, [r7, #8]
 590 000a 7A60     		str	r2, [r7, #4]
 591 000c 3B60     		str	r3, [r7]
 615:Source/stream_buffer.c **** StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 592              		.loc 1 615 0
 593 000e FB68     		ldr	r3, [r7, #12]
 594 0010 BB62     		str	r3, [r7, #40]
 616:Source/stream_buffer.c **** size_t xReturn, xSpace;
 617:Source/stream_buffer.c **** size_t xRequiredSpace = xDataLengthBytes;
 595              		.loc 1 617 0
 596 0012 7B68     		ldr	r3, [r7, #4]
 597 0014 FB62     		str	r3, [r7, #44]
 618:Source/stream_buffer.c **** 
 619:Source/stream_buffer.c **** 	configASSERT( pvTxData );
 620:Source/stream_buffer.c **** 	configASSERT( pxStreamBuffer );
 621:Source/stream_buffer.c **** 
 622:Source/stream_buffer.c **** 	/* This send function is used to write to both message buffers and stream
 623:Source/stream_buffer.c **** 	buffers.  If this is a message buffer then the space needed must be
 624:Source/stream_buffer.c **** 	increased by the amount of bytes needed to store the length of the
 625:Source/stream_buffer.c **** 	message. */
 626:Source/stream_buffer.c **** 	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 598              		.loc 1 626 0
 599 0016 BB6A     		ldr	r3, [r7, #40]
 600 0018 1B7F     		ldrb	r3, [r3, #28]	@ zero_extendqisi2
 601 001a 03F00103 		and	r3, r3, #1
 602 001e 002B     		cmp	r3, #0
 603 0020 02D0     		beq	.L37
 627:Source/stream_buffer.c **** 	{
 628:Source/stream_buffer.c **** 		xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
 604              		.loc 1 628 0
 605 0022 FB6A     		ldr	r3, [r7, #44]
 606 0024 0433     		adds	r3, r3, #4
 607 0026 FB62     		str	r3, [r7, #44]
 608              	.L37:
 629:Source/stream_buffer.c **** 	}
 630:Source/stream_buffer.c **** 	else
 631:Source/stream_buffer.c **** 	{
 632:Source/stream_buffer.c **** 		mtCOVERAGE_TEST_MARKER();
 633:Source/stream_buffer.c **** 	}
 634:Source/stream_buffer.c **** 
 635:Source/stream_buffer.c **** 	xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 609              		.loc 1 635 0
 610 0028 B86A     		ldr	r0, [r7, #40]
 611 002a FFF7FEFF 		bl	xStreamBufferSpacesAvailable
 612 002e 7862     		str	r0, [r7, #36]
 636:Source/stream_buffer.c **** 	xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSp
 613              		.loc 1 636 0
 614 0030 FB6A     		ldr	r3, [r7, #44]
 615 0032 0093     		str	r3, [sp]
 616 0034 7B6A     		ldr	r3, [r7, #36]
 617 0036 7A68     		ldr	r2, [r7, #4]
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccTqmdk2.s 			page 23


 618 0038 B968     		ldr	r1, [r7, #8]
 619 003a B86A     		ldr	r0, [r7, #40]
 620 003c FFF7FEFF 		bl	prvWriteMessageToBuffer
 621 0040 3862     		str	r0, [r7, #32]
 637:Source/stream_buffer.c **** 
 638:Source/stream_buffer.c **** 	if( xReturn > ( size_t ) 0 )
 622              		.loc 1 638 0
 623 0042 3B6A     		ldr	r3, [r7, #32]
 624 0044 002B     		cmp	r3, #0
 625 0046 2AD0     		beq	.L38
 639:Source/stream_buffer.c **** 	{
 640:Source/stream_buffer.c **** 		/* Was a task waiting for the data? */
 641:Source/stream_buffer.c **** 		if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
 626              		.loc 1 641 0
 627 0048 B86A     		ldr	r0, [r7, #40]
 628 004a FFF7FEFF 		bl	prvBytesInBuffer
 629 004e 0246     		mov	r2, r0
 630 0050 BB6A     		ldr	r3, [r7, #40]
 631 0052 DB68     		ldr	r3, [r3, #12]
 632 0054 9A42     		cmp	r2, r3
 633 0056 22D3     		bcc	.L38
 634              	.LBB20:
 635              	.LBB21:
 636              	.LBB22:
 637              		.file 2 ".\\Source\\portable\\GCC\\ARM_CM3/portmacro.h"
   1:.\Source\portable\GCC\ARM_CM3/portmacro.h **** /*
   2:.\Source\portable\GCC\ARM_CM3/portmacro.h ****  * FreeRTOS Kernel V10.3.1
   3:.\Source\portable\GCC\ARM_CM3/portmacro.h ****  * Copyright (C) 2020 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:.\Source\portable\GCC\ARM_CM3/portmacro.h ****  *
   5:.\Source\portable\GCC\ARM_CM3/portmacro.h ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:.\Source\portable\GCC\ARM_CM3/portmacro.h ****  * this software and associated documentation files (the "Software"), to deal in
   7:.\Source\portable\GCC\ARM_CM3/portmacro.h ****  * the Software without restriction, including without limitation the rights to
   8:.\Source\portable\GCC\ARM_CM3/portmacro.h ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:.\Source\portable\GCC\ARM_CM3/portmacro.h ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:.\Source\portable\GCC\ARM_CM3/portmacro.h ****  * subject to the following conditions:
  11:.\Source\portable\GCC\ARM_CM3/portmacro.h ****  *
  12:.\Source\portable\GCC\ARM_CM3/portmacro.h ****  * The above copyright notice and this permission notice shall be included in all
  13:.\Source\portable\GCC\ARM_CM3/portmacro.h ****  * copies or substantial portions of the Software.
  14:.\Source\portable\GCC\ARM_CM3/portmacro.h ****  *
  15:.\Source\portable\GCC\ARM_CM3/portmacro.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:.\Source\portable\GCC\ARM_CM3/portmacro.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:.\Source\portable\GCC\ARM_CM3/portmacro.h ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:.\Source\portable\GCC\ARM_CM3/portmacro.h ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:.\Source\portable\GCC\ARM_CM3/portmacro.h ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:.\Source\portable\GCC\ARM_CM3/portmacro.h ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:.\Source\portable\GCC\ARM_CM3/portmacro.h ****  *
  22:.\Source\portable\GCC\ARM_CM3/portmacro.h ****  * http://www.FreeRTOS.org
  23:.\Source\portable\GCC\ARM_CM3/portmacro.h ****  * http://aws.amazon.com/freertos
  24:.\Source\portable\GCC\ARM_CM3/portmacro.h ****  *
  25:.\Source\portable\GCC\ARM_CM3/portmacro.h ****  * 1 tab == 4 spaces!
  26:.\Source\portable\GCC\ARM_CM3/portmacro.h ****  */
  27:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 
  28:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 
  29:.\Source\portable\GCC\ARM_CM3/portmacro.h **** #ifndef PORTMACRO_H
  30:.\Source\portable\GCC\ARM_CM3/portmacro.h **** #define PORTMACRO_H
  31:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 
  32:.\Source\portable\GCC\ARM_CM3/portmacro.h **** #ifdef __cplusplus
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccTqmdk2.s 			page 24


  33:.\Source\portable\GCC\ARM_CM3/portmacro.h **** extern "C" {
  34:.\Source\portable\GCC\ARM_CM3/portmacro.h **** #endif
  35:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 
  36:.\Source\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------
  37:.\Source\portable\GCC\ARM_CM3/portmacro.h ****  * Port specific definitions.
  38:.\Source\portable\GCC\ARM_CM3/portmacro.h ****  *
  39:.\Source\portable\GCC\ARM_CM3/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  40:.\Source\portable\GCC\ARM_CM3/portmacro.h ****  * given hardware and compiler.
  41:.\Source\portable\GCC\ARM_CM3/portmacro.h ****  *
  42:.\Source\portable\GCC\ARM_CM3/portmacro.h ****  * These settings should not be altered.
  43:.\Source\portable\GCC\ARM_CM3/portmacro.h ****  *-----------------------------------------------------------
  44:.\Source\portable\GCC\ARM_CM3/portmacro.h ****  */
  45:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 
  46:.\Source\portable\GCC\ARM_CM3/portmacro.h **** /* Type definitions. */
  47:.\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portCHAR		char
  48:.\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portFLOAT		float
  49:.\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portDOUBLE		double
  50:.\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portLONG		long
  51:.\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portSHORT		short
  52:.\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portSTACK_TYPE	uint32_t
  53:.\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portBASE_TYPE	long
  54:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 
  55:.\Source\portable\GCC\ARM_CM3/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  56:.\Source\portable\GCC\ARM_CM3/portmacro.h **** typedef long BaseType_t;
  57:.\Source\portable\GCC\ARM_CM3/portmacro.h **** typedef unsigned long UBaseType_t;
  58:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 
  59:.\Source\portable\GCC\ARM_CM3/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
  60:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	typedef uint16_t TickType_t;
  61:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
  62:.\Source\portable\GCC\ARM_CM3/portmacro.h **** #else
  63:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	typedef uint32_t TickType_t;
  64:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
  65:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 
  66:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
  67:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	not need to be guarded with a critical section. */
  68:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
  69:.\Source\portable\GCC\ARM_CM3/portmacro.h **** #endif
  70:.\Source\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
  71:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 
  72:.\Source\portable\GCC\ARM_CM3/portmacro.h **** /* Architecture specifics. */
  73:.\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portSTACK_GROWTH			( -1 )
  74:.\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
  75:.\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portBYTE_ALIGNMENT			8
  76:.\Source\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
  77:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 
  78:.\Source\portable\GCC\ARM_CM3/portmacro.h **** /* Scheduler utilities. */
  79:.\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portYIELD() 															\
  80:.\Source\portable\GCC\ARM_CM3/portmacro.h **** {																				\
  81:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	/* Set a PendSV to request a context switch. */								\
  82:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\
  83:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 																				\
  84:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	/* Barriers are normally not required but do ensure the code is completely	\
  85:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	within the specified behaviour for the architecture. */						\
  86:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	__asm volatile( "dsb" ::: "memory" );										\
  87:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	__asm volatile( "isb" );													\
  88:.\Source\portable\GCC\ARM_CM3/portmacro.h **** }
  89:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccTqmdk2.s 			page 25


  90:.\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
  91:.\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
  92:.\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) if( xSwitchRequired != pdFALSE ) portYIELD()
  93:.\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
  94:.\Source\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
  95:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 
  96:.\Source\portable\GCC\ARM_CM3/portmacro.h **** /* Critical section management. */
  97:.\Source\portable\GCC\ARM_CM3/portmacro.h **** extern void vPortEnterCritical( void );
  98:.\Source\portable\GCC\ARM_CM3/portmacro.h **** extern void vPortExitCritical( void );
  99:.\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortRaiseBASEPRI()
 100:.\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortSetBASEPRI(x)
 101:.\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portDISABLE_INTERRUPTS()				vPortRaiseBASEPRI()
 102:.\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortSetBASEPRI(0)
 103:.\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 104:.\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 105:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 106:.\Source\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 107:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 108:.\Source\portable\GCC\ARM_CM3/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 109:.\Source\portable\GCC\ARM_CM3/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 110:.\Source\portable\GCC\ARM_CM3/portmacro.h **** (which build with all the ports) will build. */
 111:.\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 112:.\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 113:.\Source\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 114:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 115:.\Source\portable\GCC\ARM_CM3/portmacro.h **** /* Tickless idle/low power functionality. */
 116:.\Source\portable\GCC\ARM_CM3/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 117:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 118:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 119:.\Source\portable\GCC\ARM_CM3/portmacro.h **** #endif
 120:.\Source\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 121:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 122:.\Source\portable\GCC\ARM_CM3/portmacro.h **** /* Architecture specific optimisations. */
 123:.\Source\portable\GCC\ARM_CM3/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 124:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 125:.\Source\portable\GCC\ARM_CM3/portmacro.h **** #endif
 126:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 127:.\Source\portable\GCC\ARM_CM3/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 128:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 129:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	/* Generic helper function. */
 130:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 131:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	{
 132:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	uint8_t ucReturn;
 133:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 134:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 135:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 		return ucReturn;
 136:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	}
 137:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 138:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	/* Check the configuration. */
 139:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	#if( configMAX_PRIORITIES > 32 )
 140:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is 
 141:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	#endif
 142:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 143:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	/* Store/clear the ready priorities in a bit map. */
 144:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) |= ( 1UL 
 145:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) &= ~( 1UL 
 146:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccTqmdk2.s 			page 26


 147:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	/*-----------------------------------------------------------*/
 148:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 149:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities ) uxTopPriority = ( 31UL - ( ui
 150:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 151:.\Source\portable\GCC\ARM_CM3/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 152:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 153:.\Source\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 154:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 155:.\Source\portable\GCC\ARM_CM3/portmacro.h **** #ifdef configASSERT
 156:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	void vPortValidateInterruptPriority( void );
 157:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
 158:.\Source\portable\GCC\ARM_CM3/portmacro.h **** #endif
 159:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 160:.\Source\portable\GCC\ARM_CM3/portmacro.h **** /* portNOP() is not required by this port. */
 161:.\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portNOP()
 162:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 163:.\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portINLINE	__inline
 164:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 165:.\Source\portable\GCC\ARM_CM3/portmacro.h **** #ifndef portFORCE_INLINE
 166:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	#define portFORCE_INLINE inline __attribute__(( always_inline))
 167:.\Source\portable\GCC\ARM_CM3/portmacro.h **** #endif
 168:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 169:.\Source\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 170:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 171:.\Source\portable\GCC\ARM_CM3/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 172:.\Source\portable\GCC\ARM_CM3/portmacro.h **** {
 173:.\Source\portable\GCC\ARM_CM3/portmacro.h **** uint32_t ulCurrentInterrupt;
 174:.\Source\portable\GCC\ARM_CM3/portmacro.h **** BaseType_t xReturn;
 175:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 176:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	/* Obtain the number of the currently executing interrupt. */
 177:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 178:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 179:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	if( ulCurrentInterrupt == 0 )
 180:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	{
 181:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 		xReturn = pdFALSE;
 182:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	}
 183:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	else
 184:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	{
 185:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 		xReturn = pdTRUE;
 186:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	}
 187:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 188:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	return xReturn;
 189:.\Source\portable\GCC\ARM_CM3/portmacro.h **** }
 190:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 191:.\Source\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 192:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 193:.\Source\portable\GCC\ARM_CM3/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 194:.\Source\portable\GCC\ARM_CM3/portmacro.h **** {
 195:.\Source\portable\GCC\ARM_CM3/portmacro.h **** uint32_t ulNewBASEPRI;
 196:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 197:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	__asm volatile
 198:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	(
 199:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 		"	mov %0, %1												\n" \
 200:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 		"	msr basepri, %0											\n" \
 201:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 		"	isb														\n" \
 202:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 		"	dsb														\n" \
 203:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccTqmdk2.s 			page 27


 204:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	);
 205:.\Source\portable\GCC\ARM_CM3/portmacro.h **** }
 206:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 207:.\Source\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 208:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 209:.\Source\portable\GCC\ARM_CM3/portmacro.h **** portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 210:.\Source\portable\GCC\ARM_CM3/portmacro.h **** {
 211:.\Source\portable\GCC\ARM_CM3/portmacro.h **** uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 212:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 213:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	__asm volatile
 638              		.loc 2 213 0
 639              		.syntax unified
 640              	@ 213 ".\Source\portable\GCC\ARM_CM3/portmacro.h" 1
 641 0058 EFF31182 			mrs r2, basepri											
 642 005c 4FF0A003 		mov r3, #160												
 643 0060 83F31188 		msr basepri, r3											
 644 0064 BFF36F8F 		isb														
 645 0068 BFF34F8F 		dsb														
 646              	
 647              	@ 0 "" 2
 648              		.thumb
 649              		.syntax unified
 650 006c 7A61     		str	r2, [r7, #20]
 651 006e 3B61     		str	r3, [r7, #16]
 214:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	(
 215:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 		"	mrs %0, basepri											\n" \
 216:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 		"	mov %1, %2												\n" \
 217:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 		"	msr basepri, %1											\n" \
 218:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 		"	isb														\n" \
 219:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 		"	dsb														\n" \
 220:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "
 221:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	);
 222:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 223:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	/* This return will not be reached but is necessary to prevent compiler
 224:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	warnings. */
 225:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	return ulOriginalBASEPRI;
 652              		.loc 2 225 0
 653 0070 7B69     		ldr	r3, [r7, #20]
 654              	.LBE22:
 655              	.LBE21:
 642:Source/stream_buffer.c **** 		{
 643:Source/stream_buffer.c **** 			sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
 656              		.loc 1 643 0
 657 0072 BB61     		str	r3, [r7, #24]
 658 0074 BB6A     		ldr	r3, [r7, #40]
 659 0076 1B69     		ldr	r3, [r3, #16]
 660 0078 002B     		cmp	r3, #0
 661 007a 0BD0     		beq	.L40
 662              		.loc 1 643 0 is_stmt 0 discriminator 1
 663 007c BB6A     		ldr	r3, [r7, #40]
 664 007e 1869     		ldr	r0, [r3, #16]
 665 0080 3B68     		ldr	r3, [r7]
 666 0082 0093     		str	r3, [sp]
 667 0084 0023     		movs	r3, #0
 668 0086 0022     		movs	r2, #0
 669 0088 0021     		movs	r1, #0
 670 008a FFF7FEFF 		bl	xTaskGenericNotifyFromISR
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccTqmdk2.s 			page 28


 671 008e BB6A     		ldr	r3, [r7, #40]
 672 0090 0022     		movs	r2, #0
 673 0092 1A61     		str	r2, [r3, #16]
 674              	.L40:
 675 0094 BB69     		ldr	r3, [r7, #24]
 676 0096 FB61     		str	r3, [r7, #28]
 677              	.LBB23:
 678              	.LBB24:
 226:.\Source\portable\GCC\ARM_CM3/portmacro.h **** }
 227:.\Source\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 228:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 229:.\Source\portable\GCC\ARM_CM3/portmacro.h **** portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 230:.\Source\portable\GCC\ARM_CM3/portmacro.h **** {
 231:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	__asm volatile
 679              		.loc 2 231 0 is_stmt 1 discriminator 3
 680 0098 FB69     		ldr	r3, [r7, #28]
 681              		.syntax unified
 682              	@ 231 ".\Source\portable\GCC\ARM_CM3/portmacro.h" 1
 683 009a 83F31188 			msr basepri, r3	
 684              	@ 0 "" 2
 685              		.thumb
 686              		.syntax unified
 687              	.L38:
 688              	.LBE24:
 689              	.LBE23:
 690              	.LBE20:
 644:Source/stream_buffer.c **** 		}
 645:Source/stream_buffer.c **** 		else
 646:Source/stream_buffer.c **** 		{
 647:Source/stream_buffer.c **** 			mtCOVERAGE_TEST_MARKER();
 648:Source/stream_buffer.c **** 		}
 649:Source/stream_buffer.c **** 	}
 650:Source/stream_buffer.c **** 	else
 651:Source/stream_buffer.c **** 	{
 652:Source/stream_buffer.c **** 		mtCOVERAGE_TEST_MARKER();
 653:Source/stream_buffer.c **** 	}
 654:Source/stream_buffer.c **** 
 655:Source/stream_buffer.c **** 	traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );
 656:Source/stream_buffer.c **** 
 657:Source/stream_buffer.c **** 	return xReturn;
 691              		.loc 1 657 0
 692 009e 3B6A     		ldr	r3, [r7, #32]
 658:Source/stream_buffer.c **** }
 693              		.loc 1 658 0
 694 00a0 1846     		mov	r0, r3
 695 00a2 3037     		adds	r7, r7, #48
 696              		.cfi_def_cfa_offset 8
 697 00a4 BD46     		mov	sp, r7
 698              		.cfi_def_cfa_register 13
 699              		@ sp needed
 700 00a6 80BD     		pop	{r7, pc}
 701              		.cfi_endproc
 702              	.LFE75:
 703              		.size	xStreamBufferSendFromISR, .-xStreamBufferSendFromISR
 704              		.section	.text.prvWriteMessageToBuffer,"ax",%progbits
 705              		.align	2
 706              		.thumb
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccTqmdk2.s 			page 29


 707              		.thumb_func
 708              		.type	prvWriteMessageToBuffer, %function
 709              	prvWriteMessageToBuffer:
 710              	.LFB76:
 659:Source/stream_buffer.c **** /*-----------------------------------------------------------*/
 660:Source/stream_buffer.c **** 
 661:Source/stream_buffer.c **** static size_t prvWriteMessageToBuffer( StreamBuffer_t * const pxStreamBuffer,
 662:Source/stream_buffer.c **** 									   const void * pvTxData,
 663:Source/stream_buffer.c **** 									   size_t xDataLengthBytes,
 664:Source/stream_buffer.c **** 									   size_t xSpace,
 665:Source/stream_buffer.c **** 									   size_t xRequiredSpace )
 666:Source/stream_buffer.c **** {
 711              		.loc 1 666 0
 712              		.cfi_startproc
 713              		@ args = 4, pretend = 0, frame = 24
 714              		@ frame_needed = 1, uses_anonymous_args = 0
 715 0000 80B5     		push	{r7, lr}
 716              		.cfi_def_cfa_offset 8
 717              		.cfi_offset 7, -8
 718              		.cfi_offset 14, -4
 719 0002 86B0     		sub	sp, sp, #24
 720              		.cfi_def_cfa_offset 32
 721 0004 00AF     		add	r7, sp, #0
 722              		.cfi_def_cfa_register 7
 723 0006 F860     		str	r0, [r7, #12]
 724 0008 B960     		str	r1, [r7, #8]
 725 000a 7A60     		str	r2, [r7, #4]
 726 000c 3B60     		str	r3, [r7]
 667:Source/stream_buffer.c **** 	BaseType_t xShouldWrite;
 668:Source/stream_buffer.c **** 	size_t xReturn;
 669:Source/stream_buffer.c **** 
 670:Source/stream_buffer.c **** 	if( xSpace == ( size_t ) 0 )
 727              		.loc 1 670 0
 728 000e 3B68     		ldr	r3, [r7]
 729 0010 002B     		cmp	r3, #0
 730 0012 02D1     		bne	.L43
 671:Source/stream_buffer.c **** 	{
 672:Source/stream_buffer.c **** 		/* Doesn't matter if this is a stream buffer or a message buffer, there
 673:Source/stream_buffer.c **** 		is no space to write. */
 674:Source/stream_buffer.c **** 		xShouldWrite = pdFALSE;
 731              		.loc 1 674 0
 732 0014 0023     		movs	r3, #0
 733 0016 7B61     		str	r3, [r7, #20]
 734 0018 1DE0     		b	.L44
 735              	.L43:
 675:Source/stream_buffer.c **** 	}
 676:Source/stream_buffer.c **** 	else if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) == ( uint8_t ) 0 )
 736              		.loc 1 676 0
 737 001a FB68     		ldr	r3, [r7, #12]
 738 001c 1B7F     		ldrb	r3, [r3, #28]	@ zero_extendqisi2
 739 001e 03F00103 		and	r3, r3, #1
 740 0022 002B     		cmp	r3, #0
 741 0024 08D1     		bne	.L45
 677:Source/stream_buffer.c **** 	{
 678:Source/stream_buffer.c **** 		/* This is a stream buffer, as opposed to a message buffer, so writing a
 679:Source/stream_buffer.c **** 		stream of bytes rather than discrete messages.  Write as many bytes as
 680:Source/stream_buffer.c **** 		possible. */
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccTqmdk2.s 			page 30


 681:Source/stream_buffer.c **** 		xShouldWrite = pdTRUE;
 742              		.loc 1 681 0
 743 0026 0123     		movs	r3, #1
 744 0028 7B61     		str	r3, [r7, #20]
 682:Source/stream_buffer.c **** 		xDataLengthBytes = configMIN( xDataLengthBytes, xSpace );
 745              		.loc 1 682 0
 746 002a 7A68     		ldr	r2, [r7, #4]
 747 002c 3B68     		ldr	r3, [r7]
 748 002e 9342     		cmp	r3, r2
 749 0030 28BF     		it	cs
 750 0032 1346     		movcs	r3, r2
 751 0034 7B60     		str	r3, [r7, #4]
 752 0036 0EE0     		b	.L44
 753              	.L45:
 683:Source/stream_buffer.c **** 	}
 684:Source/stream_buffer.c **** 	else if( xSpace >= xRequiredSpace )
 754              		.loc 1 684 0
 755 0038 3A68     		ldr	r2, [r7]
 756 003a 3B6A     		ldr	r3, [r7, #32]
 757 003c 9A42     		cmp	r2, r3
 758 003e 08D3     		bcc	.L46
 685:Source/stream_buffer.c **** 	{
 686:Source/stream_buffer.c **** 		/* This is a message buffer, as opposed to a stream buffer, and there
 687:Source/stream_buffer.c **** 		is enough space to write both the message length and the message itself
 688:Source/stream_buffer.c **** 		into the buffer.  Start by writing the length of the data, the data
 689:Source/stream_buffer.c **** 		itself will be written later in this function. */
 690:Source/stream_buffer.c **** 		xShouldWrite = pdTRUE;
 759              		.loc 1 690 0
 760 0040 0123     		movs	r3, #1
 761 0042 7B61     		str	r3, [r7, #20]
 691:Source/stream_buffer.c **** 		( void ) prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) &( xDataLengthBytes ), sbBYTE
 762              		.loc 1 691 0
 763 0044 3B1D     		adds	r3, r7, #4
 764 0046 0422     		movs	r2, #4
 765 0048 1946     		mov	r1, r3
 766 004a F868     		ldr	r0, [r7, #12]
 767 004c FFF7FEFF 		bl	prvWriteBytesToBuffer
 768 0050 01E0     		b	.L44
 769              	.L46:
 692:Source/stream_buffer.c **** 	}
 693:Source/stream_buffer.c **** 	else
 694:Source/stream_buffer.c **** 	{
 695:Source/stream_buffer.c **** 		/* There is space available, but not enough space. */
 696:Source/stream_buffer.c **** 		xShouldWrite = pdFALSE;
 770              		.loc 1 696 0
 771 0052 0023     		movs	r3, #0
 772 0054 7B61     		str	r3, [r7, #20]
 773              	.L44:
 697:Source/stream_buffer.c **** 	}
 698:Source/stream_buffer.c **** 
 699:Source/stream_buffer.c **** 	if( xShouldWrite != pdFALSE )
 774              		.loc 1 699 0
 775 0056 7B69     		ldr	r3, [r7, #20]
 776 0058 002B     		cmp	r3, #0
 777 005a 07D0     		beq	.L47
 700:Source/stream_buffer.c **** 	{
 701:Source/stream_buffer.c **** 		/* Writes the data itself. */
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccTqmdk2.s 			page 31


 702:Source/stream_buffer.c **** 		xReturn = prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) pvTxData, xDataLengthBytes )
 778              		.loc 1 702 0
 779 005c 7B68     		ldr	r3, [r7, #4]
 780 005e 1A46     		mov	r2, r3
 781 0060 B968     		ldr	r1, [r7, #8]
 782 0062 F868     		ldr	r0, [r7, #12]
 783 0064 FFF7FEFF 		bl	prvWriteBytesToBuffer
 784 0068 3861     		str	r0, [r7, #16]
 785 006a 01E0     		b	.L48
 786              	.L47:
 703:Source/stream_buffer.c **** 	}
 704:Source/stream_buffer.c **** 	else
 705:Source/stream_buffer.c **** 	{
 706:Source/stream_buffer.c **** 		xReturn = 0;
 787              		.loc 1 706 0
 788 006c 0023     		movs	r3, #0
 789 006e 3B61     		str	r3, [r7, #16]
 790              	.L48:
 707:Source/stream_buffer.c **** 	}
 708:Source/stream_buffer.c **** 
 709:Source/stream_buffer.c **** 	return xReturn;
 791              		.loc 1 709 0
 792 0070 3B69     		ldr	r3, [r7, #16]
 710:Source/stream_buffer.c **** }
 793              		.loc 1 710 0
 794 0072 1846     		mov	r0, r3
 795 0074 1837     		adds	r7, r7, #24
 796              		.cfi_def_cfa_offset 8
 797 0076 BD46     		mov	sp, r7
 798              		.cfi_def_cfa_register 13
 799              		@ sp needed
 800 0078 80BD     		pop	{r7, pc}
 801              		.cfi_endproc
 802              	.LFE76:
 803              		.size	prvWriteMessageToBuffer, .-prvWriteMessageToBuffer
 804 007a 00BF     		.section	.text.xStreamBufferReceive,"ax",%progbits
 805              		.align	2
 806              		.global	xStreamBufferReceive
 807              		.thumb
 808              		.thumb_func
 809              		.type	xStreamBufferReceive, %function
 810              	xStreamBufferReceive:
 811              	.LFB77:
 711:Source/stream_buffer.c **** /*-----------------------------------------------------------*/
 712:Source/stream_buffer.c **** 
 713:Source/stream_buffer.c **** size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
 714:Source/stream_buffer.c **** 							 void *pvRxData,
 715:Source/stream_buffer.c **** 							 size_t xBufferLengthBytes,
 716:Source/stream_buffer.c **** 							 TickType_t xTicksToWait )
 717:Source/stream_buffer.c **** {
 812              		.loc 1 717 0
 813              		.cfi_startproc
 814              		@ args = 0, pretend = 0, frame = 32
 815              		@ frame_needed = 1, uses_anonymous_args = 0
 816 0000 80B5     		push	{r7, lr}
 817              		.cfi_def_cfa_offset 8
 818              		.cfi_offset 7, -8
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccTqmdk2.s 			page 32


 819              		.cfi_offset 14, -4
 820 0002 8AB0     		sub	sp, sp, #40
 821              		.cfi_def_cfa_offset 48
 822 0004 02AF     		add	r7, sp, #8
 823              		.cfi_def_cfa 7, 40
 824 0006 F860     		str	r0, [r7, #12]
 825 0008 B960     		str	r1, [r7, #8]
 826 000a 7A60     		str	r2, [r7, #4]
 827 000c 3B60     		str	r3, [r7]
 718:Source/stream_buffer.c **** StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 828              		.loc 1 718 0
 829 000e FB68     		ldr	r3, [r7, #12]
 830 0010 3B61     		str	r3, [r7, #16]
 719:Source/stream_buffer.c **** size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
 831              		.loc 1 719 0
 832 0012 0023     		movs	r3, #0
 833 0014 FB61     		str	r3, [r7, #28]
 720:Source/stream_buffer.c **** 
 721:Source/stream_buffer.c **** 	configASSERT( pvRxData );
 722:Source/stream_buffer.c **** 	configASSERT( pxStreamBuffer );
 723:Source/stream_buffer.c **** 
 724:Source/stream_buffer.c **** 	/* This receive function is used by both message buffers, which store
 725:Source/stream_buffer.c **** 	discrete messages, and stream buffers, which store a continuous stream of
 726:Source/stream_buffer.c **** 	bytes.  Discrete messages include an additional
 727:Source/stream_buffer.c **** 	sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
 728:Source/stream_buffer.c **** 	message. */
 729:Source/stream_buffer.c **** 	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 834              		.loc 1 729 0
 835 0016 3B69     		ldr	r3, [r7, #16]
 836 0018 1B7F     		ldrb	r3, [r3, #28]	@ zero_extendqisi2
 837 001a 03F00103 		and	r3, r3, #1
 838 001e 002B     		cmp	r3, #0
 839 0020 02D0     		beq	.L51
 730:Source/stream_buffer.c **** 	{
 731:Source/stream_buffer.c **** 		xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
 840              		.loc 1 731 0
 841 0022 0423     		movs	r3, #4
 842 0024 7B61     		str	r3, [r7, #20]
 843 0026 01E0     		b	.L52
 844              	.L51:
 732:Source/stream_buffer.c **** 	}
 733:Source/stream_buffer.c **** 	else
 734:Source/stream_buffer.c **** 	{
 735:Source/stream_buffer.c **** 		xBytesToStoreMessageLength = 0;
 845              		.loc 1 735 0
 846 0028 0023     		movs	r3, #0
 847 002a 7B61     		str	r3, [r7, #20]
 848              	.L52:
 736:Source/stream_buffer.c **** 	}
 737:Source/stream_buffer.c **** 
 738:Source/stream_buffer.c **** 	if( xTicksToWait != ( TickType_t ) 0 )
 849              		.loc 1 738 0
 850 002c 3B68     		ldr	r3, [r7]
 851 002e 002B     		cmp	r3, #0
 852 0030 25D0     		beq	.L53
 739:Source/stream_buffer.c **** 	{
 740:Source/stream_buffer.c **** 		/* Checking if there is data and clearing the notification state must be
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccTqmdk2.s 			page 33


 741:Source/stream_buffer.c **** 		performed atomically. */
 742:Source/stream_buffer.c **** 		taskENTER_CRITICAL();
 853              		.loc 1 742 0
 854 0032 FFF7FEFF 		bl	vPortEnterCritical
 743:Source/stream_buffer.c **** 		{
 744:Source/stream_buffer.c **** 			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 855              		.loc 1 744 0
 856 0036 3869     		ldr	r0, [r7, #16]
 857 0038 FFF7FEFF 		bl	prvBytesInBuffer
 858 003c B861     		str	r0, [r7, #24]
 745:Source/stream_buffer.c **** 
 746:Source/stream_buffer.c **** 			/* If this function was invoked by a message buffer read then
 747:Source/stream_buffer.c **** 			xBytesToStoreMessageLength holds the number of bytes used to hold
 748:Source/stream_buffer.c **** 			the length of the next discrete message.  If this function was
 749:Source/stream_buffer.c **** 			invoked by a stream buffer read then xBytesToStoreMessageLength will
 750:Source/stream_buffer.c **** 			be 0. */
 751:Source/stream_buffer.c **** 			if( xBytesAvailable <= xBytesToStoreMessageLength )
 859              		.loc 1 751 0
 860 003e BA69     		ldr	r2, [r7, #24]
 861 0040 7B69     		ldr	r3, [r7, #20]
 862 0042 9A42     		cmp	r2, r3
 863 0044 07D8     		bhi	.L54
 752:Source/stream_buffer.c **** 			{
 753:Source/stream_buffer.c **** 				/* Clear notification state as going to wait for data. */
 754:Source/stream_buffer.c **** 				( void ) xTaskNotifyStateClear( NULL );
 864              		.loc 1 754 0
 865 0046 0020     		movs	r0, #0
 866 0048 FFF7FEFF 		bl	xTaskNotifyStateClear
 755:Source/stream_buffer.c **** 
 756:Source/stream_buffer.c **** 				/* Should only be one reader. */
 757:Source/stream_buffer.c **** 				configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
 758:Source/stream_buffer.c **** 				pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
 867              		.loc 1 758 0
 868 004c FFF7FEFF 		bl	xTaskGetCurrentTaskHandle
 869 0050 0246     		mov	r2, r0
 870 0052 3B69     		ldr	r3, [r7, #16]
 871 0054 1A61     		str	r2, [r3, #16]
 872              	.L54:
 759:Source/stream_buffer.c **** 			}
 760:Source/stream_buffer.c **** 			else
 761:Source/stream_buffer.c **** 			{
 762:Source/stream_buffer.c **** 				mtCOVERAGE_TEST_MARKER();
 763:Source/stream_buffer.c **** 			}
 764:Source/stream_buffer.c **** 		}
 765:Source/stream_buffer.c **** 		taskEXIT_CRITICAL();
 873              		.loc 1 765 0
 874 0056 FFF7FEFF 		bl	vPortExitCritical
 766:Source/stream_buffer.c **** 
 767:Source/stream_buffer.c **** 		if( xBytesAvailable <= xBytesToStoreMessageLength )
 875              		.loc 1 767 0
 876 005a BA69     		ldr	r2, [r7, #24]
 877 005c 7B69     		ldr	r3, [r7, #20]
 878 005e 9A42     		cmp	r2, r3
 879 0060 11D8     		bhi	.L55
 768:Source/stream_buffer.c **** 		{
 769:Source/stream_buffer.c **** 			/* Wait for data to be available. */
 770:Source/stream_buffer.c **** 			traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccTqmdk2.s 			page 34


 771:Source/stream_buffer.c **** 			( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 880              		.loc 1 771 0
 881 0062 3B68     		ldr	r3, [r7]
 882 0064 0022     		movs	r2, #0
 883 0066 0021     		movs	r1, #0
 884 0068 0020     		movs	r0, #0
 885 006a FFF7FEFF 		bl	xTaskNotifyWait
 772:Source/stream_buffer.c **** 			pxStreamBuffer->xTaskWaitingToReceive = NULL;
 886              		.loc 1 772 0
 887 006e 3B69     		ldr	r3, [r7, #16]
 888 0070 0022     		movs	r2, #0
 889 0072 1A61     		str	r2, [r3, #16]
 773:Source/stream_buffer.c **** 
 774:Source/stream_buffer.c **** 			/* Recheck the data available after blocking. */
 775:Source/stream_buffer.c **** 			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 890              		.loc 1 775 0
 891 0074 3869     		ldr	r0, [r7, #16]
 892 0076 FFF7FEFF 		bl	prvBytesInBuffer
 893 007a B861     		str	r0, [r7, #24]
 894 007c 03E0     		b	.L55
 895              	.L53:
 776:Source/stream_buffer.c **** 		}
 777:Source/stream_buffer.c **** 		else
 778:Source/stream_buffer.c **** 		{
 779:Source/stream_buffer.c **** 			mtCOVERAGE_TEST_MARKER();
 780:Source/stream_buffer.c **** 		}
 781:Source/stream_buffer.c **** 	}
 782:Source/stream_buffer.c **** 	else
 783:Source/stream_buffer.c **** 	{
 784:Source/stream_buffer.c **** 		xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 896              		.loc 1 784 0
 897 007e 3869     		ldr	r0, [r7, #16]
 898 0080 FFF7FEFF 		bl	prvBytesInBuffer
 899 0084 B861     		str	r0, [r7, #24]
 900              	.L55:
 785:Source/stream_buffer.c **** 	}
 786:Source/stream_buffer.c **** 
 787:Source/stream_buffer.c **** 	/* Whether receiving a discrete message (where xBytesToStoreMessageLength
 788:Source/stream_buffer.c **** 	holds the number of bytes used to store the message length) or a stream of
 789:Source/stream_buffer.c **** 	bytes (where xBytesToStoreMessageLength is zero), the number of bytes
 790:Source/stream_buffer.c **** 	available must be greater than xBytesToStoreMessageLength to be able to
 791:Source/stream_buffer.c **** 	read bytes from the buffer. */
 792:Source/stream_buffer.c **** 	if( xBytesAvailable > xBytesToStoreMessageLength )
 901              		.loc 1 792 0
 902 0086 BA69     		ldr	r2, [r7, #24]
 903 0088 7B69     		ldr	r3, [r7, #20]
 904 008a 9A42     		cmp	r2, r3
 905 008c 1DD9     		bls	.L56
 793:Source/stream_buffer.c **** 	{
 794:Source/stream_buffer.c **** 		xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesA
 906              		.loc 1 794 0
 907 008e 7B69     		ldr	r3, [r7, #20]
 908 0090 0093     		str	r3, [sp]
 909 0092 BB69     		ldr	r3, [r7, #24]
 910 0094 7A68     		ldr	r2, [r7, #4]
 911 0096 B968     		ldr	r1, [r7, #8]
 912 0098 3869     		ldr	r0, [r7, #16]
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccTqmdk2.s 			page 35


 913 009a FFF7FEFF 		bl	prvReadMessageFromBuffer
 914 009e F861     		str	r0, [r7, #28]
 795:Source/stream_buffer.c **** 
 796:Source/stream_buffer.c **** 		/* Was a task waiting for space in the buffer? */
 797:Source/stream_buffer.c **** 		if( xReceivedLength != ( size_t ) 0 )
 915              		.loc 1 797 0
 916 00a0 FB69     		ldr	r3, [r7, #28]
 917 00a2 002B     		cmp	r3, #0
 918 00a4 11D0     		beq	.L56
 798:Source/stream_buffer.c **** 		{
 799:Source/stream_buffer.c **** 			traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
 800:Source/stream_buffer.c **** 			sbRECEIVE_COMPLETED( pxStreamBuffer );
 919              		.loc 1 800 0
 920 00a6 FFF7FEFF 		bl	vTaskSuspendAll
 921 00aa 3B69     		ldr	r3, [r7, #16]
 922 00ac 5B69     		ldr	r3, [r3, #20]
 923 00ae 002B     		cmp	r3, #0
 924 00b0 09D0     		beq	.L57
 925              		.loc 1 800 0 is_stmt 0 discriminator 1
 926 00b2 3B69     		ldr	r3, [r7, #16]
 927 00b4 5869     		ldr	r0, [r3, #20]
 928 00b6 0023     		movs	r3, #0
 929 00b8 0022     		movs	r2, #0
 930 00ba 0021     		movs	r1, #0
 931 00bc FFF7FEFF 		bl	xTaskGenericNotify
 932 00c0 3B69     		ldr	r3, [r7, #16]
 933 00c2 0022     		movs	r2, #0
 934 00c4 5A61     		str	r2, [r3, #20]
 935              	.L57:
 936              		.loc 1 800 0 discriminator 3
 937 00c6 FFF7FEFF 		bl	xTaskResumeAll
 938              	.L56:
 801:Source/stream_buffer.c **** 		}
 802:Source/stream_buffer.c **** 		else
 803:Source/stream_buffer.c **** 		{
 804:Source/stream_buffer.c **** 			mtCOVERAGE_TEST_MARKER();
 805:Source/stream_buffer.c **** 		}
 806:Source/stream_buffer.c **** 	}
 807:Source/stream_buffer.c **** 	else
 808:Source/stream_buffer.c **** 	{
 809:Source/stream_buffer.c **** 		traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
 810:Source/stream_buffer.c **** 		mtCOVERAGE_TEST_MARKER();
 811:Source/stream_buffer.c **** 	}
 812:Source/stream_buffer.c **** 
 813:Source/stream_buffer.c **** 	return xReceivedLength;
 939              		.loc 1 813 0 is_stmt 1
 940 00ca FB69     		ldr	r3, [r7, #28]
 814:Source/stream_buffer.c **** }
 941              		.loc 1 814 0
 942 00cc 1846     		mov	r0, r3
 943 00ce 2037     		adds	r7, r7, #32
 944              		.cfi_def_cfa_offset 8
 945 00d0 BD46     		mov	sp, r7
 946              		.cfi_def_cfa_register 13
 947              		@ sp needed
 948 00d2 80BD     		pop	{r7, pc}
 949              		.cfi_endproc
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccTqmdk2.s 			page 36


 950              	.LFE77:
 951              		.size	xStreamBufferReceive, .-xStreamBufferReceive
 952              		.section	.text.xStreamBufferNextMessageLengthBytes,"ax",%progbits
 953              		.align	2
 954              		.global	xStreamBufferNextMessageLengthBytes
 955              		.thumb
 956              		.thumb_func
 957              		.type	xStreamBufferNextMessageLengthBytes, %function
 958              	xStreamBufferNextMessageLengthBytes:
 959              	.LFB78:
 815:Source/stream_buffer.c **** /*-----------------------------------------------------------*/
 816:Source/stream_buffer.c **** 
 817:Source/stream_buffer.c **** size_t xStreamBufferNextMessageLengthBytes( StreamBufferHandle_t xStreamBuffer )
 818:Source/stream_buffer.c **** {
 960              		.loc 1 818 0
 961              		.cfi_startproc
 962              		@ args = 0, pretend = 0, frame = 32
 963              		@ frame_needed = 1, uses_anonymous_args = 0
 964 0000 80B5     		push	{r7, lr}
 965              		.cfi_def_cfa_offset 8
 966              		.cfi_offset 7, -8
 967              		.cfi_offset 14, -4
 968 0002 88B0     		sub	sp, sp, #32
 969              		.cfi_def_cfa_offset 40
 970 0004 00AF     		add	r7, sp, #0
 971              		.cfi_def_cfa_register 7
 972 0006 7860     		str	r0, [r7, #4]
 819:Source/stream_buffer.c **** StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 973              		.loc 1 819 0
 974 0008 7B68     		ldr	r3, [r7, #4]
 975 000a BB61     		str	r3, [r7, #24]
 820:Source/stream_buffer.c **** size_t xReturn, xBytesAvailable, xOriginalTail;
 821:Source/stream_buffer.c **** configMESSAGE_BUFFER_LENGTH_TYPE xTempReturn;
 822:Source/stream_buffer.c **** 
 823:Source/stream_buffer.c **** 	configASSERT( pxStreamBuffer );
 824:Source/stream_buffer.c **** 
 825:Source/stream_buffer.c **** 	/* Ensure the stream buffer is being used as a message buffer. */
 826:Source/stream_buffer.c **** 	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 976              		.loc 1 826 0
 977 000c BB69     		ldr	r3, [r7, #24]
 978 000e 1B7F     		ldrb	r3, [r3, #28]	@ zero_extendqisi2
 979 0010 03F00103 		and	r3, r3, #1
 980 0014 002B     		cmp	r3, #0
 981 0016 19D0     		beq	.L60
 827:Source/stream_buffer.c **** 	{
 828:Source/stream_buffer.c **** 		xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 982              		.loc 1 828 0
 983 0018 B869     		ldr	r0, [r7, #24]
 984 001a FFF7FEFF 		bl	prvBytesInBuffer
 985 001e 7861     		str	r0, [r7, #20]
 829:Source/stream_buffer.c **** 		if( xBytesAvailable > sbBYTES_TO_STORE_MESSAGE_LENGTH )
 986              		.loc 1 829 0
 987 0020 7B69     		ldr	r3, [r7, #20]
 988 0022 042B     		cmp	r3, #4
 989 0024 0FD9     		bls	.L61
 830:Source/stream_buffer.c **** 		{
 831:Source/stream_buffer.c **** 			/* The number of bytes available is greater than the number of bytes
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccTqmdk2.s 			page 37


 832:Source/stream_buffer.c **** 			required to hold the length of the next message, so another message
 833:Source/stream_buffer.c **** 			is available.  Return its length without removing the length bytes
 834:Source/stream_buffer.c **** 			from the buffer.  A copy of the tail is stored so the buffer can be
 835:Source/stream_buffer.c **** 			returned to its prior state as the message is not actually being
 836:Source/stream_buffer.c **** 			removed from the buffer. */
 837:Source/stream_buffer.c **** 			xOriginalTail = pxStreamBuffer->xTail;
 990              		.loc 1 837 0
 991 0026 BB69     		ldr	r3, [r7, #24]
 992 0028 1B68     		ldr	r3, [r3]
 993 002a 3B61     		str	r3, [r7, #16]
 838:Source/stream_buffer.c **** 			( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempReturn, sbBYTES_TO_STORE_ME
 994              		.loc 1 838 0
 995 002c 07F10C01 		add	r1, r7, #12
 996 0030 7B69     		ldr	r3, [r7, #20]
 997 0032 0422     		movs	r2, #4
 998 0034 B869     		ldr	r0, [r7, #24]
 999 0036 FFF7FEFF 		bl	prvReadBytesFromBuffer
 839:Source/stream_buffer.c **** 			xReturn = ( size_t ) xTempReturn;
 1000              		.loc 1 839 0
 1001 003a FB68     		ldr	r3, [r7, #12]
 1002 003c FB61     		str	r3, [r7, #28]
 840:Source/stream_buffer.c **** 			pxStreamBuffer->xTail = xOriginalTail;
 1003              		.loc 1 840 0
 1004 003e BB69     		ldr	r3, [r7, #24]
 1005 0040 3A69     		ldr	r2, [r7, #16]
 1006 0042 1A60     		str	r2, [r3]
 1007 0044 04E0     		b	.L63
 1008              	.L61:
 841:Source/stream_buffer.c **** 		}
 842:Source/stream_buffer.c **** 		else
 843:Source/stream_buffer.c **** 		{
 844:Source/stream_buffer.c **** 			/* The minimum amount of bytes in a message buffer is
 845:Source/stream_buffer.c **** 			( sbBYTES_TO_STORE_MESSAGE_LENGTH + 1 ), so if xBytesAvailable is
 846:Source/stream_buffer.c **** 			less than sbBYTES_TO_STORE_MESSAGE_LENGTH the only other valid
 847:Source/stream_buffer.c **** 			value is 0. */
 848:Source/stream_buffer.c **** 			configASSERT( xBytesAvailable == 0 );
 849:Source/stream_buffer.c **** 			xReturn = 0;
 1009              		.loc 1 849 0
 1010 0046 0023     		movs	r3, #0
 1011 0048 FB61     		str	r3, [r7, #28]
 1012 004a 01E0     		b	.L63
 1013              	.L60:
 850:Source/stream_buffer.c **** 		}
 851:Source/stream_buffer.c **** 	}
 852:Source/stream_buffer.c **** 	else
 853:Source/stream_buffer.c **** 	{
 854:Source/stream_buffer.c **** 		xReturn = 0;
 1014              		.loc 1 854 0
 1015 004c 0023     		movs	r3, #0
 1016 004e FB61     		str	r3, [r7, #28]
 1017              	.L63:
 855:Source/stream_buffer.c **** 	}
 856:Source/stream_buffer.c **** 
 857:Source/stream_buffer.c **** 	return xReturn;
 1018              		.loc 1 857 0
 1019 0050 FB69     		ldr	r3, [r7, #28]
 858:Source/stream_buffer.c **** }
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccTqmdk2.s 			page 38


 1020              		.loc 1 858 0
 1021 0052 1846     		mov	r0, r3
 1022 0054 2037     		adds	r7, r7, #32
 1023              		.cfi_def_cfa_offset 8
 1024 0056 BD46     		mov	sp, r7
 1025              		.cfi_def_cfa_register 13
 1026              		@ sp needed
 1027 0058 80BD     		pop	{r7, pc}
 1028              		.cfi_endproc
 1029              	.LFE78:
 1030              		.size	xStreamBufferNextMessageLengthBytes, .-xStreamBufferNextMessageLengthBytes
 1031 005a 00BF     		.section	.text.xStreamBufferReceiveFromISR,"ax",%progbits
 1032              		.align	2
 1033              		.global	xStreamBufferReceiveFromISR
 1034              		.thumb
 1035              		.thumb_func
 1036              		.type	xStreamBufferReceiveFromISR, %function
 1037              	xStreamBufferReceiveFromISR:
 1038              	.LFB79:
 859:Source/stream_buffer.c **** /*-----------------------------------------------------------*/
 860:Source/stream_buffer.c **** 
 861:Source/stream_buffer.c **** size_t xStreamBufferReceiveFromISR( StreamBufferHandle_t xStreamBuffer,
 862:Source/stream_buffer.c **** 									void *pvRxData,
 863:Source/stream_buffer.c **** 									size_t xBufferLengthBytes,
 864:Source/stream_buffer.c **** 									BaseType_t * const pxHigherPriorityTaskWoken )
 865:Source/stream_buffer.c **** {
 1039              		.loc 1 865 0
 1040              		.cfi_startproc
 1041              		@ args = 0, pretend = 0, frame = 48
 1042              		@ frame_needed = 1, uses_anonymous_args = 0
 1043 0000 80B5     		push	{r7, lr}
 1044              		.cfi_def_cfa_offset 8
 1045              		.cfi_offset 7, -8
 1046              		.cfi_offset 14, -4
 1047 0002 8EB0     		sub	sp, sp, #56
 1048              		.cfi_def_cfa_offset 64
 1049 0004 02AF     		add	r7, sp, #8
 1050              		.cfi_def_cfa 7, 56
 1051 0006 F860     		str	r0, [r7, #12]
 1052 0008 B960     		str	r1, [r7, #8]
 1053 000a 7A60     		str	r2, [r7, #4]
 1054 000c 3B60     		str	r3, [r7]
 866:Source/stream_buffer.c **** StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 1055              		.loc 1 866 0
 1056 000e FB68     		ldr	r3, [r7, #12]
 1057 0010 7B62     		str	r3, [r7, #36]
 867:Source/stream_buffer.c **** size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
 1058              		.loc 1 867 0
 1059 0012 0023     		movs	r3, #0
 1060 0014 FB62     		str	r3, [r7, #44]
 868:Source/stream_buffer.c **** 
 869:Source/stream_buffer.c **** 	configASSERT( pvRxData );
 870:Source/stream_buffer.c **** 	configASSERT( pxStreamBuffer );
 871:Source/stream_buffer.c **** 
 872:Source/stream_buffer.c **** 	/* This receive function is used by both message buffers, which store
 873:Source/stream_buffer.c **** 	discrete messages, and stream buffers, which store a continuous stream of
 874:Source/stream_buffer.c **** 	bytes.  Discrete messages include an additional
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccTqmdk2.s 			page 39


 875:Source/stream_buffer.c **** 	sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
 876:Source/stream_buffer.c **** 	message. */
 877:Source/stream_buffer.c **** 	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 1061              		.loc 1 877 0
 1062 0016 7B6A     		ldr	r3, [r7, #36]
 1063 0018 1B7F     		ldrb	r3, [r3, #28]	@ zero_extendqisi2
 1064 001a 03F00103 		and	r3, r3, #1
 1065 001e 002B     		cmp	r3, #0
 1066 0020 02D0     		beq	.L66
 878:Source/stream_buffer.c **** 	{
 879:Source/stream_buffer.c **** 		xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
 1067              		.loc 1 879 0
 1068 0022 0423     		movs	r3, #4
 1069 0024 BB62     		str	r3, [r7, #40]
 1070 0026 01E0     		b	.L67
 1071              	.L66:
 880:Source/stream_buffer.c **** 	}
 881:Source/stream_buffer.c **** 	else
 882:Source/stream_buffer.c **** 	{
 883:Source/stream_buffer.c **** 		xBytesToStoreMessageLength = 0;
 1072              		.loc 1 883 0
 1073 0028 0023     		movs	r3, #0
 1074 002a BB62     		str	r3, [r7, #40]
 1075              	.L67:
 884:Source/stream_buffer.c **** 	}
 885:Source/stream_buffer.c **** 
 886:Source/stream_buffer.c **** 	xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 1076              		.loc 1 886 0
 1077 002c 786A     		ldr	r0, [r7, #36]
 1078 002e FFF7FEFF 		bl	prvBytesInBuffer
 1079 0032 3862     		str	r0, [r7, #32]
 887:Source/stream_buffer.c **** 
 888:Source/stream_buffer.c **** 	/* Whether receiving a discrete message (where xBytesToStoreMessageLength
 889:Source/stream_buffer.c **** 	holds the number of bytes used to store the message length) or a stream of
 890:Source/stream_buffer.c **** 	bytes (where xBytesToStoreMessageLength is zero), the number of bytes
 891:Source/stream_buffer.c **** 	available must be greater than xBytesToStoreMessageLength to be able to
 892:Source/stream_buffer.c **** 	read bytes from the buffer. */
 893:Source/stream_buffer.c **** 	if( xBytesAvailable > xBytesToStoreMessageLength )
 1080              		.loc 1 893 0
 1081 0034 3A6A     		ldr	r2, [r7, #32]
 1082 0036 BB6A     		ldr	r3, [r7, #40]
 1083 0038 9A42     		cmp	r2, r3
 1084 003a 2ED9     		bls	.L68
 894:Source/stream_buffer.c **** 	{
 895:Source/stream_buffer.c **** 		xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesA
 1085              		.loc 1 895 0
 1086 003c BB6A     		ldr	r3, [r7, #40]
 1087 003e 0093     		str	r3, [sp]
 1088 0040 3B6A     		ldr	r3, [r7, #32]
 1089 0042 7A68     		ldr	r2, [r7, #4]
 1090 0044 B968     		ldr	r1, [r7, #8]
 1091 0046 786A     		ldr	r0, [r7, #36]
 1092 0048 FFF7FEFF 		bl	prvReadMessageFromBuffer
 1093 004c F862     		str	r0, [r7, #44]
 896:Source/stream_buffer.c **** 
 897:Source/stream_buffer.c **** 		/* Was a task waiting for space in the buffer? */
 898:Source/stream_buffer.c **** 		if( xReceivedLength != ( size_t ) 0 )
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccTqmdk2.s 			page 40


 1094              		.loc 1 898 0
 1095 004e FB6A     		ldr	r3, [r7, #44]
 1096 0050 002B     		cmp	r3, #0
 1097 0052 22D0     		beq	.L68
 1098              	.LBB25:
 1099              	.LBB26:
 1100              	.LBB27:
 213:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	(
 1101              		.loc 2 213 0
 1102              		.syntax unified
 1103              	@ 213 ".\Source\portable\GCC\ARM_CM3/portmacro.h" 1
 1104 0054 EFF31182 			mrs r2, basepri											
 1105 0058 4FF0A003 		mov r3, #160												
 1106 005c 83F31188 		msr basepri, r3											
 1107 0060 BFF36F8F 		isb														
 1108 0064 BFF34F8F 		dsb														
 1109              	
 1110              	@ 0 "" 2
 1111              		.thumb
 1112              		.syntax unified
 1113 0068 7A61     		str	r2, [r7, #20]
 1114 006a 3B61     		str	r3, [r7, #16]
 225:.\Source\portable\GCC\ARM_CM3/portmacro.h **** }
 1115              		.loc 2 225 0
 1116 006c 7B69     		ldr	r3, [r7, #20]
 1117              	.LBE27:
 1118              	.LBE26:
 899:Source/stream_buffer.c **** 		{
 900:Source/stream_buffer.c **** 			sbRECEIVE_COMPLETED_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
 1119              		.loc 1 900 0
 1120 006e BB61     		str	r3, [r7, #24]
 1121 0070 7B6A     		ldr	r3, [r7, #36]
 1122 0072 5B69     		ldr	r3, [r3, #20]
 1123 0074 002B     		cmp	r3, #0
 1124 0076 0BD0     		beq	.L70
 1125              		.loc 1 900 0 is_stmt 0 discriminator 1
 1126 0078 7B6A     		ldr	r3, [r7, #36]
 1127 007a 5869     		ldr	r0, [r3, #20]
 1128 007c 3B68     		ldr	r3, [r7]
 1129 007e 0093     		str	r3, [sp]
 1130 0080 0023     		movs	r3, #0
 1131 0082 0022     		movs	r2, #0
 1132 0084 0021     		movs	r1, #0
 1133 0086 FFF7FEFF 		bl	xTaskGenericNotifyFromISR
 1134 008a 7B6A     		ldr	r3, [r7, #36]
 1135 008c 0022     		movs	r2, #0
 1136 008e 5A61     		str	r2, [r3, #20]
 1137              	.L70:
 1138 0090 BB69     		ldr	r3, [r7, #24]
 1139 0092 FB61     		str	r3, [r7, #28]
 1140              	.LBB28:
 1141              	.LBB29:
 1142              		.loc 2 231 0 is_stmt 1 discriminator 3
 1143 0094 FB69     		ldr	r3, [r7, #28]
 1144              		.syntax unified
 1145              	@ 231 ".\Source\portable\GCC\ARM_CM3/portmacro.h" 1
 1146 0096 83F31188 			msr basepri, r3	
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccTqmdk2.s 			page 41


 1147              	@ 0 "" 2
 1148              		.thumb
 1149              		.syntax unified
 1150              	.L68:
 1151              	.LBE29:
 1152              	.LBE28:
 1153              	.LBE25:
 901:Source/stream_buffer.c **** 		}
 902:Source/stream_buffer.c **** 		else
 903:Source/stream_buffer.c **** 		{
 904:Source/stream_buffer.c **** 			mtCOVERAGE_TEST_MARKER();
 905:Source/stream_buffer.c **** 		}
 906:Source/stream_buffer.c **** 	}
 907:Source/stream_buffer.c **** 	else
 908:Source/stream_buffer.c **** 	{
 909:Source/stream_buffer.c **** 		mtCOVERAGE_TEST_MARKER();
 910:Source/stream_buffer.c **** 	}
 911:Source/stream_buffer.c **** 
 912:Source/stream_buffer.c **** 	traceSTREAM_BUFFER_RECEIVE_FROM_ISR( xStreamBuffer, xReceivedLength );
 913:Source/stream_buffer.c **** 
 914:Source/stream_buffer.c **** 	return xReceivedLength;
 1154              		.loc 1 914 0
 1155 009a FB6A     		ldr	r3, [r7, #44]
 915:Source/stream_buffer.c **** }
 1156              		.loc 1 915 0
 1157 009c 1846     		mov	r0, r3
 1158 009e 3037     		adds	r7, r7, #48
 1159              		.cfi_def_cfa_offset 8
 1160 00a0 BD46     		mov	sp, r7
 1161              		.cfi_def_cfa_register 13
 1162              		@ sp needed
 1163 00a2 80BD     		pop	{r7, pc}
 1164              		.cfi_endproc
 1165              	.LFE79:
 1166              		.size	xStreamBufferReceiveFromISR, .-xStreamBufferReceiveFromISR
 1167              		.section	.text.prvReadMessageFromBuffer,"ax",%progbits
 1168              		.align	2
 1169              		.thumb
 1170              		.thumb_func
 1171              		.type	prvReadMessageFromBuffer, %function
 1172              	prvReadMessageFromBuffer:
 1173              	.LFB80:
 916:Source/stream_buffer.c **** /*-----------------------------------------------------------*/
 917:Source/stream_buffer.c **** 
 918:Source/stream_buffer.c **** static size_t prvReadMessageFromBuffer( StreamBuffer_t *pxStreamBuffer,
 919:Source/stream_buffer.c **** 										void *pvRxData,
 920:Source/stream_buffer.c **** 										size_t xBufferLengthBytes,
 921:Source/stream_buffer.c **** 										size_t xBytesAvailable,
 922:Source/stream_buffer.c **** 										size_t xBytesToStoreMessageLength )
 923:Source/stream_buffer.c **** {
 1174              		.loc 1 923 0
 1175              		.cfi_startproc
 1176              		@ args = 4, pretend = 0, frame = 32
 1177              		@ frame_needed = 1, uses_anonymous_args = 0
 1178 0000 80B5     		push	{r7, lr}
 1179              		.cfi_def_cfa_offset 8
 1180              		.cfi_offset 7, -8
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccTqmdk2.s 			page 42


 1181              		.cfi_offset 14, -4
 1182 0002 88B0     		sub	sp, sp, #32
 1183              		.cfi_def_cfa_offset 40
 1184 0004 00AF     		add	r7, sp, #0
 1185              		.cfi_def_cfa_register 7
 1186 0006 F860     		str	r0, [r7, #12]
 1187 0008 B960     		str	r1, [r7, #8]
 1188 000a 7A60     		str	r2, [r7, #4]
 1189 000c 3B60     		str	r3, [r7]
 924:Source/stream_buffer.c **** size_t xOriginalTail, xReceivedLength, xNextMessageLength;
 925:Source/stream_buffer.c **** configMESSAGE_BUFFER_LENGTH_TYPE xTempNextMessageLength;
 926:Source/stream_buffer.c **** 
 927:Source/stream_buffer.c **** 	if( xBytesToStoreMessageLength != ( size_t ) 0 )
 1190              		.loc 1 927 0
 1191 000e BB6A     		ldr	r3, [r7, #40]
 1192 0010 002B     		cmp	r3, #0
 1193 0012 19D0     		beq	.L73
 928:Source/stream_buffer.c **** 	{
 929:Source/stream_buffer.c **** 		/* A discrete message is being received.  First receive the length
 930:Source/stream_buffer.c **** 		of the message.  A copy of the tail is stored so the buffer can be
 931:Source/stream_buffer.c **** 		returned to its prior state if the length of the message is too
 932:Source/stream_buffer.c **** 		large for the provided buffer. */
 933:Source/stream_buffer.c **** 		xOriginalTail = pxStreamBuffer->xTail;
 1194              		.loc 1 933 0
 1195 0014 FB68     		ldr	r3, [r7, #12]
 1196 0016 1B68     		ldr	r3, [r3]
 1197 0018 BB61     		str	r3, [r7, #24]
 934:Source/stream_buffer.c **** 		( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToS
 1198              		.loc 1 934 0
 1199 001a 07F11001 		add	r1, r7, #16
 1200 001e 3B68     		ldr	r3, [r7]
 1201 0020 BA6A     		ldr	r2, [r7, #40]
 1202 0022 F868     		ldr	r0, [r7, #12]
 1203 0024 FFF7FEFF 		bl	prvReadBytesFromBuffer
 935:Source/stream_buffer.c **** 		xNextMessageLength = ( size_t ) xTempNextMessageLength;
 1204              		.loc 1 935 0
 1205 0028 3B69     		ldr	r3, [r7, #16]
 1206 002a FB61     		str	r3, [r7, #28]
 936:Source/stream_buffer.c **** 
 937:Source/stream_buffer.c **** 		/* Reduce the number of bytes available by the number of bytes just
 938:Source/stream_buffer.c **** 		read out. */
 939:Source/stream_buffer.c **** 		xBytesAvailable -= xBytesToStoreMessageLength;
 1207              		.loc 1 939 0
 1208 002c 3A68     		ldr	r2, [r7]
 1209 002e BB6A     		ldr	r3, [r7, #40]
 1210 0030 D31A     		subs	r3, r2, r3
 1211 0032 3B60     		str	r3, [r7]
 940:Source/stream_buffer.c **** 
 941:Source/stream_buffer.c **** 		/* Check there is enough space in the buffer provided by the
 942:Source/stream_buffer.c **** 		user. */
 943:Source/stream_buffer.c **** 		if( xNextMessageLength > xBufferLengthBytes )
 1212              		.loc 1 943 0
 1213 0034 FA69     		ldr	r2, [r7, #28]
 1214 0036 7B68     		ldr	r3, [r7, #4]
 1215 0038 9A42     		cmp	r2, r3
 1216 003a 07D9     		bls	.L74
 944:Source/stream_buffer.c **** 		{
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccTqmdk2.s 			page 43


 945:Source/stream_buffer.c **** 			/* The user has provided insufficient space to read the message
 946:Source/stream_buffer.c **** 			so return the buffer to its previous state (so the length of
 947:Source/stream_buffer.c **** 			the message is in the buffer again). */
 948:Source/stream_buffer.c **** 			pxStreamBuffer->xTail = xOriginalTail;
 1217              		.loc 1 948 0
 1218 003c FB68     		ldr	r3, [r7, #12]
 1219 003e BA69     		ldr	r2, [r7, #24]
 1220 0040 1A60     		str	r2, [r3]
 949:Source/stream_buffer.c **** 			xNextMessageLength = 0;
 1221              		.loc 1 949 0
 1222 0042 0023     		movs	r3, #0
 1223 0044 FB61     		str	r3, [r7, #28]
 1224 0046 01E0     		b	.L74
 1225              	.L73:
 950:Source/stream_buffer.c **** 		}
 951:Source/stream_buffer.c **** 		else
 952:Source/stream_buffer.c **** 		{
 953:Source/stream_buffer.c **** 			mtCOVERAGE_TEST_MARKER();
 954:Source/stream_buffer.c **** 		}
 955:Source/stream_buffer.c **** 	}
 956:Source/stream_buffer.c **** 	else
 957:Source/stream_buffer.c **** 	{
 958:Source/stream_buffer.c **** 		/* A stream of bytes is being received (as opposed to a discrete
 959:Source/stream_buffer.c **** 		message), so read as many bytes as possible. */
 960:Source/stream_buffer.c **** 		xNextMessageLength = xBufferLengthBytes;
 1226              		.loc 1 960 0
 1227 0048 7B68     		ldr	r3, [r7, #4]
 1228 004a FB61     		str	r3, [r7, #28]
 1229              	.L74:
 961:Source/stream_buffer.c **** 	}
 962:Source/stream_buffer.c **** 
 963:Source/stream_buffer.c **** 	/* Read the actual data. */
 964:Source/stream_buffer.c **** 	xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLeng
 1230              		.loc 1 964 0
 1231 004c 3B68     		ldr	r3, [r7]
 1232 004e FA69     		ldr	r2, [r7, #28]
 1233 0050 B968     		ldr	r1, [r7, #8]
 1234 0052 F868     		ldr	r0, [r7, #12]
 1235 0054 FFF7FEFF 		bl	prvReadBytesFromBuffer
 1236 0058 7861     		str	r0, [r7, #20]
 965:Source/stream_buffer.c **** 
 966:Source/stream_buffer.c **** 	return xReceivedLength;
 1237              		.loc 1 966 0
 1238 005a 7B69     		ldr	r3, [r7, #20]
 967:Source/stream_buffer.c **** }
 1239              		.loc 1 967 0
 1240 005c 1846     		mov	r0, r3
 1241 005e 2037     		adds	r7, r7, #32
 1242              		.cfi_def_cfa_offset 8
 1243 0060 BD46     		mov	sp, r7
 1244              		.cfi_def_cfa_register 13
 1245              		@ sp needed
 1246 0062 80BD     		pop	{r7, pc}
 1247              		.cfi_endproc
 1248              	.LFE80:
 1249              		.size	prvReadMessageFromBuffer, .-prvReadMessageFromBuffer
 1250              		.section	.text.xStreamBufferIsEmpty,"ax",%progbits
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccTqmdk2.s 			page 44


 1251              		.align	2
 1252              		.global	xStreamBufferIsEmpty
 1253              		.thumb
 1254              		.thumb_func
 1255              		.type	xStreamBufferIsEmpty, %function
 1256              	xStreamBufferIsEmpty:
 1257              	.LFB81:
 968:Source/stream_buffer.c **** /*-----------------------------------------------------------*/
 969:Source/stream_buffer.c **** 
 970:Source/stream_buffer.c **** BaseType_t xStreamBufferIsEmpty( StreamBufferHandle_t xStreamBuffer )
 971:Source/stream_buffer.c **** {
 1258              		.loc 1 971 0
 1259              		.cfi_startproc
 1260              		@ args = 0, pretend = 0, frame = 24
 1261              		@ frame_needed = 1, uses_anonymous_args = 0
 1262              		@ link register save eliminated.
 1263 0000 80B4     		push	{r7}
 1264              		.cfi_def_cfa_offset 4
 1265              		.cfi_offset 7, -4
 1266 0002 87B0     		sub	sp, sp, #28
 1267              		.cfi_def_cfa_offset 32
 1268 0004 00AF     		add	r7, sp, #0
 1269              		.cfi_def_cfa_register 7
 1270 0006 7860     		str	r0, [r7, #4]
 972:Source/stream_buffer.c **** const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 1271              		.loc 1 972 0
 1272 0008 7B68     		ldr	r3, [r7, #4]
 1273 000a 3B61     		str	r3, [r7, #16]
 973:Source/stream_buffer.c **** BaseType_t xReturn;
 974:Source/stream_buffer.c **** size_t xTail;
 975:Source/stream_buffer.c **** 
 976:Source/stream_buffer.c **** 	configASSERT( pxStreamBuffer );
 977:Source/stream_buffer.c **** 
 978:Source/stream_buffer.c **** 	/* True if no bytes are available. */
 979:Source/stream_buffer.c **** 	xTail = pxStreamBuffer->xTail;
 1274              		.loc 1 979 0
 1275 000c 3B69     		ldr	r3, [r7, #16]
 1276 000e 1B68     		ldr	r3, [r3]
 1277 0010 FB60     		str	r3, [r7, #12]
 980:Source/stream_buffer.c **** 	if( pxStreamBuffer->xHead == xTail )
 1278              		.loc 1 980 0
 1279 0012 3B69     		ldr	r3, [r7, #16]
 1280 0014 5A68     		ldr	r2, [r3, #4]
 1281 0016 FB68     		ldr	r3, [r7, #12]
 1282 0018 9A42     		cmp	r2, r3
 1283 001a 02D1     		bne	.L77
 981:Source/stream_buffer.c **** 	{
 982:Source/stream_buffer.c **** 		xReturn = pdTRUE;
 1284              		.loc 1 982 0
 1285 001c 0123     		movs	r3, #1
 1286 001e 7B61     		str	r3, [r7, #20]
 1287 0020 01E0     		b	.L78
 1288              	.L77:
 983:Source/stream_buffer.c **** 	}
 984:Source/stream_buffer.c **** 	else
 985:Source/stream_buffer.c **** 	{
 986:Source/stream_buffer.c **** 		xReturn = pdFALSE;
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccTqmdk2.s 			page 45


 1289              		.loc 1 986 0
 1290 0022 0023     		movs	r3, #0
 1291 0024 7B61     		str	r3, [r7, #20]
 1292              	.L78:
 987:Source/stream_buffer.c **** 	}
 988:Source/stream_buffer.c **** 
 989:Source/stream_buffer.c **** 	return xReturn;
 1293              		.loc 1 989 0
 1294 0026 7B69     		ldr	r3, [r7, #20]
 990:Source/stream_buffer.c **** }
 1295              		.loc 1 990 0
 1296 0028 1846     		mov	r0, r3
 1297 002a 1C37     		adds	r7, r7, #28
 1298              		.cfi_def_cfa_offset 4
 1299 002c BD46     		mov	sp, r7
 1300              		.cfi_def_cfa_register 13
 1301              		@ sp needed
 1302 002e 80BC     		pop	{r7}
 1303              		.cfi_restore 7
 1304              		.cfi_def_cfa_offset 0
 1305 0030 7047     		bx	lr
 1306              		.cfi_endproc
 1307              	.LFE81:
 1308              		.size	xStreamBufferIsEmpty, .-xStreamBufferIsEmpty
 1309 0032 00BF     		.section	.text.xStreamBufferIsFull,"ax",%progbits
 1310              		.align	2
 1311              		.global	xStreamBufferIsFull
 1312              		.thumb
 1313              		.thumb_func
 1314              		.type	xStreamBufferIsFull, %function
 1315              	xStreamBufferIsFull:
 1316              	.LFB82:
 991:Source/stream_buffer.c **** /*-----------------------------------------------------------*/
 992:Source/stream_buffer.c **** 
 993:Source/stream_buffer.c **** BaseType_t xStreamBufferIsFull( StreamBufferHandle_t xStreamBuffer )
 994:Source/stream_buffer.c **** {
 1317              		.loc 1 994 0
 1318              		.cfi_startproc
 1319              		@ args = 0, pretend = 0, frame = 24
 1320              		@ frame_needed = 1, uses_anonymous_args = 0
 1321 0000 80B5     		push	{r7, lr}
 1322              		.cfi_def_cfa_offset 8
 1323              		.cfi_offset 7, -8
 1324              		.cfi_offset 14, -4
 1325 0002 86B0     		sub	sp, sp, #24
 1326              		.cfi_def_cfa_offset 32
 1327 0004 00AF     		add	r7, sp, #0
 1328              		.cfi_def_cfa_register 7
 1329 0006 7860     		str	r0, [r7, #4]
 995:Source/stream_buffer.c **** BaseType_t xReturn;
 996:Source/stream_buffer.c **** size_t xBytesToStoreMessageLength;
 997:Source/stream_buffer.c **** const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 1330              		.loc 1 997 0
 1331 0008 7B68     		ldr	r3, [r7, #4]
 1332 000a FB60     		str	r3, [r7, #12]
 998:Source/stream_buffer.c **** 
 999:Source/stream_buffer.c **** 	configASSERT( pxStreamBuffer );
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccTqmdk2.s 			page 46


1000:Source/stream_buffer.c **** 
1001:Source/stream_buffer.c **** 	/* This generic version of the receive function is used by both message
1002:Source/stream_buffer.c **** 	buffers, which store discrete messages, and stream buffers, which store a
1003:Source/stream_buffer.c **** 	continuous stream of bytes.  Discrete messages include an additional
1004:Source/stream_buffer.c **** 	sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the message. */
1005:Source/stream_buffer.c **** 	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 1333              		.loc 1 1005 0
 1334 000c FB68     		ldr	r3, [r7, #12]
 1335 000e 1B7F     		ldrb	r3, [r3, #28]	@ zero_extendqisi2
 1336 0010 03F00103 		and	r3, r3, #1
 1337 0014 002B     		cmp	r3, #0
 1338 0016 02D0     		beq	.L81
1006:Source/stream_buffer.c **** 	{
1007:Source/stream_buffer.c **** 		xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
 1339              		.loc 1 1007 0
 1340 0018 0423     		movs	r3, #4
 1341 001a 3B61     		str	r3, [r7, #16]
 1342 001c 01E0     		b	.L82
 1343              	.L81:
1008:Source/stream_buffer.c **** 	}
1009:Source/stream_buffer.c **** 	else
1010:Source/stream_buffer.c **** 	{
1011:Source/stream_buffer.c **** 		xBytesToStoreMessageLength = 0;
 1344              		.loc 1 1011 0
 1345 001e 0023     		movs	r3, #0
 1346 0020 3B61     		str	r3, [r7, #16]
 1347              	.L82:
1012:Source/stream_buffer.c **** 	}
1013:Source/stream_buffer.c **** 
1014:Source/stream_buffer.c **** 	/* True if the available space equals zero. */
1015:Source/stream_buffer.c **** 	if( xStreamBufferSpacesAvailable( xStreamBuffer ) <= xBytesToStoreMessageLength )
 1348              		.loc 1 1015 0
 1349 0022 7868     		ldr	r0, [r7, #4]
 1350 0024 FFF7FEFF 		bl	xStreamBufferSpacesAvailable
 1351 0028 0246     		mov	r2, r0
 1352 002a 3B69     		ldr	r3, [r7, #16]
 1353 002c 9A42     		cmp	r2, r3
 1354 002e 02D8     		bhi	.L83
1016:Source/stream_buffer.c **** 	{
1017:Source/stream_buffer.c **** 		xReturn = pdTRUE;
 1355              		.loc 1 1017 0
 1356 0030 0123     		movs	r3, #1
 1357 0032 7B61     		str	r3, [r7, #20]
 1358 0034 01E0     		b	.L84
 1359              	.L83:
1018:Source/stream_buffer.c **** 	}
1019:Source/stream_buffer.c **** 	else
1020:Source/stream_buffer.c **** 	{
1021:Source/stream_buffer.c **** 		xReturn = pdFALSE;
 1360              		.loc 1 1021 0
 1361 0036 0023     		movs	r3, #0
 1362 0038 7B61     		str	r3, [r7, #20]
 1363              	.L84:
1022:Source/stream_buffer.c **** 	}
1023:Source/stream_buffer.c **** 
1024:Source/stream_buffer.c **** 	return xReturn;
 1364              		.loc 1 1024 0
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccTqmdk2.s 			page 47


 1365 003a 7B69     		ldr	r3, [r7, #20]
1025:Source/stream_buffer.c **** }
 1366              		.loc 1 1025 0
 1367 003c 1846     		mov	r0, r3
 1368 003e 1837     		adds	r7, r7, #24
 1369              		.cfi_def_cfa_offset 8
 1370 0040 BD46     		mov	sp, r7
 1371              		.cfi_def_cfa_register 13
 1372              		@ sp needed
 1373 0042 80BD     		pop	{r7, pc}
 1374              		.cfi_endproc
 1375              	.LFE82:
 1376              		.size	xStreamBufferIsFull, .-xStreamBufferIsFull
 1377              		.section	.text.xStreamBufferSendCompletedFromISR,"ax",%progbits
 1378              		.align	2
 1379              		.global	xStreamBufferSendCompletedFromISR
 1380              		.thumb
 1381              		.thumb_func
 1382              		.type	xStreamBufferSendCompletedFromISR, %function
 1383              	xStreamBufferSendCompletedFromISR:
 1384              	.LFB83:
1026:Source/stream_buffer.c **** /*-----------------------------------------------------------*/
1027:Source/stream_buffer.c **** 
1028:Source/stream_buffer.c **** BaseType_t xStreamBufferSendCompletedFromISR( StreamBufferHandle_t xStreamBuffer, BaseType_t *pxHig
1029:Source/stream_buffer.c **** {
 1385              		.loc 1 1029 0
 1386              		.cfi_startproc
 1387              		@ args = 0, pretend = 0, frame = 32
 1388              		@ frame_needed = 1, uses_anonymous_args = 0
 1389 0000 80B5     		push	{r7, lr}
 1390              		.cfi_def_cfa_offset 8
 1391              		.cfi_offset 7, -8
 1392              		.cfi_offset 14, -4
 1393 0002 8AB0     		sub	sp, sp, #40
 1394              		.cfi_def_cfa_offset 48
 1395 0004 02AF     		add	r7, sp, #8
 1396              		.cfi_def_cfa 7, 40
 1397 0006 7860     		str	r0, [r7, #4]
 1398 0008 3960     		str	r1, [r7]
1030:Source/stream_buffer.c **** StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 1399              		.loc 1 1030 0
 1400 000a 7B68     		ldr	r3, [r7, #4]
 1401 000c BB61     		str	r3, [r7, #24]
 1402              	.LBB30:
 1403              	.LBB31:
 213:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	(
 1404              		.loc 2 213 0
 1405              		.syntax unified
 1406              	@ 213 ".\Source\portable\GCC\ARM_CM3/portmacro.h" 1
 1407 000e EFF31182 			mrs r2, basepri											
 1408 0012 4FF0A003 		mov r3, #160												
 1409 0016 83F31188 		msr basepri, r3											
 1410 001a BFF36F8F 		isb														
 1411 001e BFF34F8F 		dsb														
 1412              	
 1413              	@ 0 "" 2
 1414              		.thumb
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccTqmdk2.s 			page 48


 1415              		.syntax unified
 1416 0022 FA60     		str	r2, [r7, #12]
 1417 0024 BB60     		str	r3, [r7, #8]
 225:.\Source\portable\GCC\ARM_CM3/portmacro.h **** }
 1418              		.loc 2 225 0
 1419 0026 FB68     		ldr	r3, [r7, #12]
 1420              	.LBE31:
 1421              	.LBE30:
1031:Source/stream_buffer.c **** BaseType_t xReturn;
1032:Source/stream_buffer.c **** UBaseType_t uxSavedInterruptStatus;
1033:Source/stream_buffer.c **** 
1034:Source/stream_buffer.c **** 	configASSERT( pxStreamBuffer );
1035:Source/stream_buffer.c **** 
1036:Source/stream_buffer.c **** 	uxSavedInterruptStatus = ( UBaseType_t ) portSET_INTERRUPT_MASK_FROM_ISR();
 1422              		.loc 1 1036 0
 1423 0028 3B61     		str	r3, [r7, #16]
1037:Source/stream_buffer.c **** 	{
1038:Source/stream_buffer.c **** 		if( ( pxStreamBuffer )->xTaskWaitingToReceive != NULL )
 1424              		.loc 1 1038 0
 1425 002a BB69     		ldr	r3, [r7, #24]
 1426 002c 1B69     		ldr	r3, [r3, #16]
 1427 002e 002B     		cmp	r3, #0
 1428 0030 0ED0     		beq	.L88
1039:Source/stream_buffer.c **** 		{
1040:Source/stream_buffer.c **** 			( void ) xTaskNotifyFromISR( ( pxStreamBuffer )->xTaskWaitingToReceive,
 1429              		.loc 1 1040 0
 1430 0032 BB69     		ldr	r3, [r7, #24]
 1431 0034 1869     		ldr	r0, [r3, #16]
 1432 0036 3B68     		ldr	r3, [r7]
 1433 0038 0093     		str	r3, [sp]
 1434 003a 0023     		movs	r3, #0
 1435 003c 0022     		movs	r2, #0
 1436 003e 0021     		movs	r1, #0
 1437 0040 FFF7FEFF 		bl	xTaskGenericNotifyFromISR
1041:Source/stream_buffer.c **** 										 ( uint32_t ) 0,
1042:Source/stream_buffer.c **** 										 eNoAction,
1043:Source/stream_buffer.c **** 										 pxHigherPriorityTaskWoken );
1044:Source/stream_buffer.c **** 			( pxStreamBuffer )->xTaskWaitingToReceive = NULL;
 1438              		.loc 1 1044 0
 1439 0044 BB69     		ldr	r3, [r7, #24]
 1440 0046 0022     		movs	r2, #0
 1441 0048 1A61     		str	r2, [r3, #16]
1045:Source/stream_buffer.c **** 			xReturn = pdTRUE;
 1442              		.loc 1 1045 0
 1443 004a 0123     		movs	r3, #1
 1444 004c FB61     		str	r3, [r7, #28]
 1445 004e 01E0     		b	.L89
 1446              	.L88:
1046:Source/stream_buffer.c **** 		}
1047:Source/stream_buffer.c **** 		else
1048:Source/stream_buffer.c **** 		{
1049:Source/stream_buffer.c **** 			xReturn = pdFALSE;
 1447              		.loc 1 1049 0
 1448 0050 0023     		movs	r3, #0
 1449 0052 FB61     		str	r3, [r7, #28]
 1450              	.L89:
 1451 0054 3B69     		ldr	r3, [r7, #16]
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccTqmdk2.s 			page 49


 1452 0056 7B61     		str	r3, [r7, #20]
 1453              	.LBB32:
 1454              	.LBB33:
 1455              		.loc 2 231 0
 1456 0058 7B69     		ldr	r3, [r7, #20]
 1457              		.syntax unified
 1458              	@ 231 ".\Source\portable\GCC\ARM_CM3/portmacro.h" 1
 1459 005a 83F31188 			msr basepri, r3	
 1460              	@ 0 "" 2
 1461              		.thumb
 1462              		.syntax unified
 1463              	.LBE33:
 1464              	.LBE32:
1050:Source/stream_buffer.c **** 		}
1051:Source/stream_buffer.c **** 	}
1052:Source/stream_buffer.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1053:Source/stream_buffer.c **** 
1054:Source/stream_buffer.c **** 	return xReturn;
 1465              		.loc 1 1054 0
 1466 005e FB69     		ldr	r3, [r7, #28]
1055:Source/stream_buffer.c **** }
 1467              		.loc 1 1055 0
 1468 0060 1846     		mov	r0, r3
 1469 0062 2037     		adds	r7, r7, #32
 1470              		.cfi_def_cfa_offset 8
 1471 0064 BD46     		mov	sp, r7
 1472              		.cfi_def_cfa_register 13
 1473              		@ sp needed
 1474 0066 80BD     		pop	{r7, pc}
 1475              		.cfi_endproc
 1476              	.LFE83:
 1477              		.size	xStreamBufferSendCompletedFromISR, .-xStreamBufferSendCompletedFromISR
 1478              		.section	.text.xStreamBufferReceiveCompletedFromISR,"ax",%progbits
 1479              		.align	2
 1480              		.global	xStreamBufferReceiveCompletedFromISR
 1481              		.thumb
 1482              		.thumb_func
 1483              		.type	xStreamBufferReceiveCompletedFromISR, %function
 1484              	xStreamBufferReceiveCompletedFromISR:
 1485              	.LFB84:
1056:Source/stream_buffer.c **** /*-----------------------------------------------------------*/
1057:Source/stream_buffer.c **** 
1058:Source/stream_buffer.c **** BaseType_t xStreamBufferReceiveCompletedFromISR( StreamBufferHandle_t xStreamBuffer, BaseType_t *px
1059:Source/stream_buffer.c **** {
 1486              		.loc 1 1059 0
 1487              		.cfi_startproc
 1488              		@ args = 0, pretend = 0, frame = 32
 1489              		@ frame_needed = 1, uses_anonymous_args = 0
 1490 0000 80B5     		push	{r7, lr}
 1491              		.cfi_def_cfa_offset 8
 1492              		.cfi_offset 7, -8
 1493              		.cfi_offset 14, -4
 1494 0002 8AB0     		sub	sp, sp, #40
 1495              		.cfi_def_cfa_offset 48
 1496 0004 02AF     		add	r7, sp, #8
 1497              		.cfi_def_cfa 7, 40
 1498 0006 7860     		str	r0, [r7, #4]
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccTqmdk2.s 			page 50


 1499 0008 3960     		str	r1, [r7]
1060:Source/stream_buffer.c **** StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 1500              		.loc 1 1060 0
 1501 000a 7B68     		ldr	r3, [r7, #4]
 1502 000c BB61     		str	r3, [r7, #24]
 1503              	.LBB34:
 1504              	.LBB35:
 213:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	(
 1505              		.loc 2 213 0
 1506              		.syntax unified
 1507              	@ 213 ".\Source\portable\GCC\ARM_CM3/portmacro.h" 1
 1508 000e EFF31182 			mrs r2, basepri											
 1509 0012 4FF0A003 		mov r3, #160												
 1510 0016 83F31188 		msr basepri, r3											
 1511 001a BFF36F8F 		isb														
 1512 001e BFF34F8F 		dsb														
 1513              	
 1514              	@ 0 "" 2
 1515              		.thumb
 1516              		.syntax unified
 1517 0022 FA60     		str	r2, [r7, #12]
 1518 0024 BB60     		str	r3, [r7, #8]
 225:.\Source\portable\GCC\ARM_CM3/portmacro.h **** }
 1519              		.loc 2 225 0
 1520 0026 FB68     		ldr	r3, [r7, #12]
 1521              	.LBE35:
 1522              	.LBE34:
1061:Source/stream_buffer.c **** BaseType_t xReturn;
1062:Source/stream_buffer.c **** UBaseType_t uxSavedInterruptStatus;
1063:Source/stream_buffer.c **** 
1064:Source/stream_buffer.c **** 	configASSERT( pxStreamBuffer );
1065:Source/stream_buffer.c **** 
1066:Source/stream_buffer.c **** 	uxSavedInterruptStatus = ( UBaseType_t ) portSET_INTERRUPT_MASK_FROM_ISR();
 1523              		.loc 1 1066 0
 1524 0028 3B61     		str	r3, [r7, #16]
1067:Source/stream_buffer.c **** 	{
1068:Source/stream_buffer.c **** 		if( ( pxStreamBuffer )->xTaskWaitingToSend != NULL )
 1525              		.loc 1 1068 0
 1526 002a BB69     		ldr	r3, [r7, #24]
 1527 002c 5B69     		ldr	r3, [r3, #20]
 1528 002e 002B     		cmp	r3, #0
 1529 0030 0ED0     		beq	.L93
1069:Source/stream_buffer.c **** 		{
1070:Source/stream_buffer.c **** 			( void ) xTaskNotifyFromISR( ( pxStreamBuffer )->xTaskWaitingToSend,
 1530              		.loc 1 1070 0
 1531 0032 BB69     		ldr	r3, [r7, #24]
 1532 0034 5869     		ldr	r0, [r3, #20]
 1533 0036 3B68     		ldr	r3, [r7]
 1534 0038 0093     		str	r3, [sp]
 1535 003a 0023     		movs	r3, #0
 1536 003c 0022     		movs	r2, #0
 1537 003e 0021     		movs	r1, #0
 1538 0040 FFF7FEFF 		bl	xTaskGenericNotifyFromISR
1071:Source/stream_buffer.c **** 										 ( uint32_t ) 0,
1072:Source/stream_buffer.c **** 										 eNoAction,
1073:Source/stream_buffer.c **** 										 pxHigherPriorityTaskWoken );
1074:Source/stream_buffer.c **** 			( pxStreamBuffer )->xTaskWaitingToSend = NULL;
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccTqmdk2.s 			page 51


 1539              		.loc 1 1074 0
 1540 0044 BB69     		ldr	r3, [r7, #24]
 1541 0046 0022     		movs	r2, #0
 1542 0048 5A61     		str	r2, [r3, #20]
1075:Source/stream_buffer.c **** 			xReturn = pdTRUE;
 1543              		.loc 1 1075 0
 1544 004a 0123     		movs	r3, #1
 1545 004c FB61     		str	r3, [r7, #28]
 1546 004e 01E0     		b	.L94
 1547              	.L93:
1076:Source/stream_buffer.c **** 		}
1077:Source/stream_buffer.c **** 		else
1078:Source/stream_buffer.c **** 		{
1079:Source/stream_buffer.c **** 			xReturn = pdFALSE;
 1548              		.loc 1 1079 0
 1549 0050 0023     		movs	r3, #0
 1550 0052 FB61     		str	r3, [r7, #28]
 1551              	.L94:
 1552 0054 3B69     		ldr	r3, [r7, #16]
 1553 0056 7B61     		str	r3, [r7, #20]
 1554              	.LBB36:
 1555              	.LBB37:
 1556              		.loc 2 231 0
 1557 0058 7B69     		ldr	r3, [r7, #20]
 1558              		.syntax unified
 1559              	@ 231 ".\Source\portable\GCC\ARM_CM3/portmacro.h" 1
 1560 005a 83F31188 			msr basepri, r3	
 1561              	@ 0 "" 2
 1562              		.thumb
 1563              		.syntax unified
 1564              	.LBE37:
 1565              	.LBE36:
1080:Source/stream_buffer.c **** 		}
1081:Source/stream_buffer.c **** 	}
1082:Source/stream_buffer.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1083:Source/stream_buffer.c **** 
1084:Source/stream_buffer.c **** 	return xReturn;
 1566              		.loc 1 1084 0
 1567 005e FB69     		ldr	r3, [r7, #28]
1085:Source/stream_buffer.c **** }
 1568              		.loc 1 1085 0
 1569 0060 1846     		mov	r0, r3
 1570 0062 2037     		adds	r7, r7, #32
 1571              		.cfi_def_cfa_offset 8
 1572 0064 BD46     		mov	sp, r7
 1573              		.cfi_def_cfa_register 13
 1574              		@ sp needed
 1575 0066 80BD     		pop	{r7, pc}
 1576              		.cfi_endproc
 1577              	.LFE84:
 1578              		.size	xStreamBufferReceiveCompletedFromISR, .-xStreamBufferReceiveCompletedFromISR
 1579              		.section	.text.prvWriteBytesToBuffer,"ax",%progbits
 1580              		.align	2
 1581              		.thumb
 1582              		.thumb_func
 1583              		.type	prvWriteBytesToBuffer, %function
 1584              	prvWriteBytesToBuffer:
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccTqmdk2.s 			page 52


 1585              	.LFB85:
1086:Source/stream_buffer.c **** /*-----------------------------------------------------------*/
1087:Source/stream_buffer.c **** 
1088:Source/stream_buffer.c **** static size_t prvWriteBytesToBuffer( StreamBuffer_t * const pxStreamBuffer, const uint8_t *pucData,
1089:Source/stream_buffer.c **** {
 1586              		.loc 1 1089 0
 1587              		.cfi_startproc
 1588              		@ args = 0, pretend = 0, frame = 24
 1589              		@ frame_needed = 1, uses_anonymous_args = 0
 1590 0000 80B5     		push	{r7, lr}
 1591              		.cfi_def_cfa_offset 8
 1592              		.cfi_offset 7, -8
 1593              		.cfi_offset 14, -4
 1594 0002 86B0     		sub	sp, sp, #24
 1595              		.cfi_def_cfa_offset 32
 1596 0004 00AF     		add	r7, sp, #0
 1597              		.cfi_def_cfa_register 7
 1598 0006 F860     		str	r0, [r7, #12]
 1599 0008 B960     		str	r1, [r7, #8]
 1600 000a 7A60     		str	r2, [r7, #4]
1090:Source/stream_buffer.c **** size_t xNextHead, xFirstLength;
1091:Source/stream_buffer.c **** 
1092:Source/stream_buffer.c **** 	configASSERT( xCount > ( size_t ) 0 );
1093:Source/stream_buffer.c **** 
1094:Source/stream_buffer.c **** 	xNextHead = pxStreamBuffer->xHead;
 1601              		.loc 1 1094 0
 1602 000c FB68     		ldr	r3, [r7, #12]
 1603 000e 5B68     		ldr	r3, [r3, #4]
 1604 0010 7B61     		str	r3, [r7, #20]
1095:Source/stream_buffer.c **** 
1096:Source/stream_buffer.c **** 	/* Calculate the number of bytes that can be added in the first write -
1097:Source/stream_buffer.c **** 	which may be less than the total number of bytes that need to be added if
1098:Source/stream_buffer.c **** 	the buffer will wrap back to the beginning. */
1099:Source/stream_buffer.c **** 	xFirstLength = configMIN( pxStreamBuffer->xLength - xNextHead, xCount );
 1605              		.loc 1 1099 0
 1606 0012 FB68     		ldr	r3, [r7, #12]
 1607 0014 9A68     		ldr	r2, [r3, #8]
 1608 0016 7B69     		ldr	r3, [r7, #20]
 1609 0018 D21A     		subs	r2, r2, r3
 1610 001a 7B68     		ldr	r3, [r7, #4]
 1611 001c 9342     		cmp	r3, r2
 1612 001e 28BF     		it	cs
 1613 0020 1346     		movcs	r3, r2
 1614 0022 3B61     		str	r3, [r7, #16]
1100:Source/stream_buffer.c **** 
1101:Source/stream_buffer.c **** 	/* Write as many bytes as can be written in the first write. */
1102:Source/stream_buffer.c **** 	configASSERT( ( xNextHead + xFirstLength ) <= pxStreamBuffer->xLength );
1103:Source/stream_buffer.c **** 	( void ) memcpy( ( void* ) ( &( pxStreamBuffer->pucBuffer[ xNextHead ] ) ), ( const void * ) pucDa
 1615              		.loc 1 1103 0
 1616 0024 FB68     		ldr	r3, [r7, #12]
 1617 0026 9A69     		ldr	r2, [r3, #24]
 1618 0028 7B69     		ldr	r3, [r7, #20]
 1619 002a 1344     		add	r3, r3, r2
 1620 002c 3A69     		ldr	r2, [r7, #16]
 1621 002e B968     		ldr	r1, [r7, #8]
 1622 0030 1846     		mov	r0, r3
 1623 0032 FFF7FEFF 		bl	memcpy
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccTqmdk2.s 			page 53


1104:Source/stream_buffer.c **** 
1105:Source/stream_buffer.c **** 	/* If the number of bytes written was less than the number that could be
1106:Source/stream_buffer.c **** 	written in the first write... */
1107:Source/stream_buffer.c **** 	if( xCount > xFirstLength )
 1624              		.loc 1 1107 0
 1625 0036 7A68     		ldr	r2, [r7, #4]
 1626 0038 3B69     		ldr	r3, [r7, #16]
 1627 003a 9A42     		cmp	r2, r3
 1628 003c 0AD9     		bls	.L97
1108:Source/stream_buffer.c **** 	{
1109:Source/stream_buffer.c **** 		/* ...then write the remaining bytes to the start of the buffer. */
1110:Source/stream_buffer.c **** 		configASSERT( ( xCount - xFirstLength ) <= pxStreamBuffer->xLength );
1111:Source/stream_buffer.c **** 		( void ) memcpy( ( void * ) pxStreamBuffer->pucBuffer, ( const void * ) &( pucData[ xFirstLength 
 1629              		.loc 1 1111 0
 1630 003e FB68     		ldr	r3, [r7, #12]
 1631 0040 9869     		ldr	r0, [r3, #24]
 1632 0042 BA68     		ldr	r2, [r7, #8]
 1633 0044 3B69     		ldr	r3, [r7, #16]
 1634 0046 D118     		adds	r1, r2, r3
 1635 0048 7A68     		ldr	r2, [r7, #4]
 1636 004a 3B69     		ldr	r3, [r7, #16]
 1637 004c D31A     		subs	r3, r2, r3
 1638 004e 1A46     		mov	r2, r3
 1639 0050 FFF7FEFF 		bl	memcpy
 1640              	.L97:
1112:Source/stream_buffer.c **** 	}
1113:Source/stream_buffer.c **** 	else
1114:Source/stream_buffer.c **** 	{
1115:Source/stream_buffer.c **** 		mtCOVERAGE_TEST_MARKER();
1116:Source/stream_buffer.c **** 	}
1117:Source/stream_buffer.c **** 
1118:Source/stream_buffer.c **** 	xNextHead += xCount;
 1641              		.loc 1 1118 0
 1642 0054 7A69     		ldr	r2, [r7, #20]
 1643 0056 7B68     		ldr	r3, [r7, #4]
 1644 0058 1344     		add	r3, r3, r2
 1645 005a 7B61     		str	r3, [r7, #20]
1119:Source/stream_buffer.c **** 	if( xNextHead >= pxStreamBuffer->xLength )
 1646              		.loc 1 1119 0
 1647 005c FB68     		ldr	r3, [r7, #12]
 1648 005e 9A68     		ldr	r2, [r3, #8]
 1649 0060 7B69     		ldr	r3, [r7, #20]
 1650 0062 9A42     		cmp	r2, r3
 1651 0064 04D8     		bhi	.L98
1120:Source/stream_buffer.c **** 	{
1121:Source/stream_buffer.c **** 		xNextHead -= pxStreamBuffer->xLength;
 1652              		.loc 1 1121 0
 1653 0066 FB68     		ldr	r3, [r7, #12]
 1654 0068 9B68     		ldr	r3, [r3, #8]
 1655 006a 7A69     		ldr	r2, [r7, #20]
 1656 006c D31A     		subs	r3, r2, r3
 1657 006e 7B61     		str	r3, [r7, #20]
 1658              	.L98:
1122:Source/stream_buffer.c **** 	}
1123:Source/stream_buffer.c **** 	else
1124:Source/stream_buffer.c **** 	{
1125:Source/stream_buffer.c **** 		mtCOVERAGE_TEST_MARKER();
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccTqmdk2.s 			page 54


1126:Source/stream_buffer.c **** 	}
1127:Source/stream_buffer.c **** 
1128:Source/stream_buffer.c **** 	pxStreamBuffer->xHead = xNextHead;
 1659              		.loc 1 1128 0
 1660 0070 FB68     		ldr	r3, [r7, #12]
 1661 0072 7A69     		ldr	r2, [r7, #20]
 1662 0074 5A60     		str	r2, [r3, #4]
1129:Source/stream_buffer.c **** 
1130:Source/stream_buffer.c **** 	return xCount;
 1663              		.loc 1 1130 0
 1664 0076 7B68     		ldr	r3, [r7, #4]
1131:Source/stream_buffer.c **** }
 1665              		.loc 1 1131 0
 1666 0078 1846     		mov	r0, r3
 1667 007a 1837     		adds	r7, r7, #24
 1668              		.cfi_def_cfa_offset 8
 1669 007c BD46     		mov	sp, r7
 1670              		.cfi_def_cfa_register 13
 1671              		@ sp needed
 1672 007e 80BD     		pop	{r7, pc}
 1673              		.cfi_endproc
 1674              	.LFE85:
 1675              		.size	prvWriteBytesToBuffer, .-prvWriteBytesToBuffer
 1676              		.section	.text.prvReadBytesFromBuffer,"ax",%progbits
 1677              		.align	2
 1678              		.thumb
 1679              		.thumb_func
 1680              		.type	prvReadBytesFromBuffer, %function
 1681              	prvReadBytesFromBuffer:
 1682              	.LFB86:
1132:Source/stream_buffer.c **** /*-----------------------------------------------------------*/
1133:Source/stream_buffer.c **** 
1134:Source/stream_buffer.c **** static size_t prvReadBytesFromBuffer( StreamBuffer_t *pxStreamBuffer, uint8_t *pucData, size_t xMax
1135:Source/stream_buffer.c **** {
 1683              		.loc 1 1135 0
 1684              		.cfi_startproc
 1685              		@ args = 0, pretend = 0, frame = 32
 1686              		@ frame_needed = 1, uses_anonymous_args = 0
 1687 0000 80B5     		push	{r7, lr}
 1688              		.cfi_def_cfa_offset 8
 1689              		.cfi_offset 7, -8
 1690              		.cfi_offset 14, -4
 1691 0002 88B0     		sub	sp, sp, #32
 1692              		.cfi_def_cfa_offset 40
 1693 0004 00AF     		add	r7, sp, #0
 1694              		.cfi_def_cfa_register 7
 1695 0006 F860     		str	r0, [r7, #12]
 1696 0008 B960     		str	r1, [r7, #8]
 1697 000a 7A60     		str	r2, [r7, #4]
 1698 000c 3B60     		str	r3, [r7]
1136:Source/stream_buffer.c **** size_t xCount, xFirstLength, xNextTail;
1137:Source/stream_buffer.c **** 
1138:Source/stream_buffer.c **** 	/* Use the minimum of the wanted bytes and the available bytes. */
1139:Source/stream_buffer.c **** 	xCount = configMIN( xBytesAvailable, xMaxCount );
 1699              		.loc 1 1139 0
 1700 000e 7A68     		ldr	r2, [r7, #4]
 1701 0010 3B68     		ldr	r3, [r7]
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccTqmdk2.s 			page 55


 1702 0012 9342     		cmp	r3, r2
 1703 0014 28BF     		it	cs
 1704 0016 1346     		movcs	r3, r2
 1705 0018 BB61     		str	r3, [r7, #24]
1140:Source/stream_buffer.c **** 
1141:Source/stream_buffer.c **** 	if( xCount > ( size_t ) 0 )
 1706              		.loc 1 1141 0
 1707 001a BB69     		ldr	r3, [r7, #24]
 1708 001c 002B     		cmp	r3, #0
 1709 001e 34D0     		beq	.L101
1142:Source/stream_buffer.c **** 	{
1143:Source/stream_buffer.c **** 		xNextTail = pxStreamBuffer->xTail;
 1710              		.loc 1 1143 0
 1711 0020 FB68     		ldr	r3, [r7, #12]
 1712 0022 1B68     		ldr	r3, [r3]
 1713 0024 FB61     		str	r3, [r7, #28]
1144:Source/stream_buffer.c **** 
1145:Source/stream_buffer.c **** 		/* Calculate the number of bytes that can be read - which may be
1146:Source/stream_buffer.c **** 		less than the number wanted if the data wraps around to the start of
1147:Source/stream_buffer.c **** 		the buffer. */
1148:Source/stream_buffer.c **** 		xFirstLength = configMIN( pxStreamBuffer->xLength - xNextTail, xCount );
 1714              		.loc 1 1148 0
 1715 0026 FB68     		ldr	r3, [r7, #12]
 1716 0028 9A68     		ldr	r2, [r3, #8]
 1717 002a FB69     		ldr	r3, [r7, #28]
 1718 002c D21A     		subs	r2, r2, r3
 1719 002e BB69     		ldr	r3, [r7, #24]
 1720 0030 9342     		cmp	r3, r2
 1721 0032 28BF     		it	cs
 1722 0034 1346     		movcs	r3, r2
 1723 0036 7B61     		str	r3, [r7, #20]
1149:Source/stream_buffer.c **** 
1150:Source/stream_buffer.c **** 		/* Obtain the number of bytes it is possible to obtain in the first
1151:Source/stream_buffer.c **** 		read.  Asserts check bounds of read and write. */
1152:Source/stream_buffer.c **** 		configASSERT( xFirstLength <= xMaxCount );
1153:Source/stream_buffer.c **** 		configASSERT( ( xNextTail + xFirstLength ) <= pxStreamBuffer->xLength );
1154:Source/stream_buffer.c **** 		( void ) memcpy( ( void * ) pucData, ( const void * ) &( pxStreamBuffer->pucBuffer[ xNextTail ] )
 1724              		.loc 1 1154 0
 1725 0038 FB68     		ldr	r3, [r7, #12]
 1726 003a 9A69     		ldr	r2, [r3, #24]
 1727 003c FB69     		ldr	r3, [r7, #28]
 1728 003e 1344     		add	r3, r3, r2
 1729 0040 7A69     		ldr	r2, [r7, #20]
 1730 0042 1946     		mov	r1, r3
 1731 0044 B868     		ldr	r0, [r7, #8]
 1732 0046 FFF7FEFF 		bl	memcpy
1155:Source/stream_buffer.c **** 
1156:Source/stream_buffer.c **** 		/* If the total number of wanted bytes is greater than the number
1157:Source/stream_buffer.c **** 		that could be read in the first read... */
1158:Source/stream_buffer.c **** 		if( xCount > xFirstLength )
 1733              		.loc 1 1158 0
 1734 004a BA69     		ldr	r2, [r7, #24]
 1735 004c 7B69     		ldr	r3, [r7, #20]
 1736 004e 9A42     		cmp	r2, r3
 1737 0050 0AD9     		bls	.L102
1159:Source/stream_buffer.c **** 		{
1160:Source/stream_buffer.c **** 			/*...then read the remaining bytes from the start of the buffer. */
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccTqmdk2.s 			page 56


1161:Source/stream_buffer.c **** 			configASSERT( xCount <= xMaxCount );
1162:Source/stream_buffer.c **** 			( void ) memcpy( ( void * ) &( pucData[ xFirstLength ] ), ( void * ) ( pxStreamBuffer->pucBuffer
 1738              		.loc 1 1162 0
 1739 0052 BA68     		ldr	r2, [r7, #8]
 1740 0054 7B69     		ldr	r3, [r7, #20]
 1741 0056 D018     		adds	r0, r2, r3
 1742 0058 FB68     		ldr	r3, [r7, #12]
 1743 005a 9969     		ldr	r1, [r3, #24]
 1744 005c BA69     		ldr	r2, [r7, #24]
 1745 005e 7B69     		ldr	r3, [r7, #20]
 1746 0060 D31A     		subs	r3, r2, r3
 1747 0062 1A46     		mov	r2, r3
 1748 0064 FFF7FEFF 		bl	memcpy
 1749              	.L102:
1163:Source/stream_buffer.c **** 		}
1164:Source/stream_buffer.c **** 		else
1165:Source/stream_buffer.c **** 		{
1166:Source/stream_buffer.c **** 			mtCOVERAGE_TEST_MARKER();
1167:Source/stream_buffer.c **** 		}
1168:Source/stream_buffer.c **** 
1169:Source/stream_buffer.c **** 		/* Move the tail pointer to effectively remove the data read from
1170:Source/stream_buffer.c **** 		the buffer. */
1171:Source/stream_buffer.c **** 		xNextTail += xCount;
 1750              		.loc 1 1171 0
 1751 0068 FA69     		ldr	r2, [r7, #28]
 1752 006a BB69     		ldr	r3, [r7, #24]
 1753 006c 1344     		add	r3, r3, r2
 1754 006e FB61     		str	r3, [r7, #28]
1172:Source/stream_buffer.c **** 
1173:Source/stream_buffer.c **** 		if( xNextTail >= pxStreamBuffer->xLength )
 1755              		.loc 1 1173 0
 1756 0070 FB68     		ldr	r3, [r7, #12]
 1757 0072 9A68     		ldr	r2, [r3, #8]
 1758 0074 FB69     		ldr	r3, [r7, #28]
 1759 0076 9A42     		cmp	r2, r3
 1760 0078 04D8     		bhi	.L103
1174:Source/stream_buffer.c **** 		{
1175:Source/stream_buffer.c **** 			xNextTail -= pxStreamBuffer->xLength;
 1761              		.loc 1 1175 0
 1762 007a FB68     		ldr	r3, [r7, #12]
 1763 007c 9B68     		ldr	r3, [r3, #8]
 1764 007e FA69     		ldr	r2, [r7, #28]
 1765 0080 D31A     		subs	r3, r2, r3
 1766 0082 FB61     		str	r3, [r7, #28]
 1767              	.L103:
1176:Source/stream_buffer.c **** 		}
1177:Source/stream_buffer.c **** 
1178:Source/stream_buffer.c **** 		pxStreamBuffer->xTail = xNextTail;
 1768              		.loc 1 1178 0
 1769 0084 FB68     		ldr	r3, [r7, #12]
 1770 0086 FA69     		ldr	r2, [r7, #28]
 1771 0088 1A60     		str	r2, [r3]
 1772              	.L101:
1179:Source/stream_buffer.c **** 	}
1180:Source/stream_buffer.c **** 	else
1181:Source/stream_buffer.c **** 	{
1182:Source/stream_buffer.c **** 		mtCOVERAGE_TEST_MARKER();
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccTqmdk2.s 			page 57


1183:Source/stream_buffer.c **** 	}
1184:Source/stream_buffer.c **** 
1185:Source/stream_buffer.c **** 	return xCount;
 1773              		.loc 1 1185 0
 1774 008a BB69     		ldr	r3, [r7, #24]
1186:Source/stream_buffer.c **** }
 1775              		.loc 1 1186 0
 1776 008c 1846     		mov	r0, r3
 1777 008e 2037     		adds	r7, r7, #32
 1778              		.cfi_def_cfa_offset 8
 1779 0090 BD46     		mov	sp, r7
 1780              		.cfi_def_cfa_register 13
 1781              		@ sp needed
 1782 0092 80BD     		pop	{r7, pc}
 1783              		.cfi_endproc
 1784              	.LFE86:
 1785              		.size	prvReadBytesFromBuffer, .-prvReadBytesFromBuffer
 1786              		.section	.text.prvBytesInBuffer,"ax",%progbits
 1787              		.align	2
 1788              		.thumb
 1789              		.thumb_func
 1790              		.type	prvBytesInBuffer, %function
 1791              	prvBytesInBuffer:
 1792              	.LFB87:
1187:Source/stream_buffer.c **** /*-----------------------------------------------------------*/
1188:Source/stream_buffer.c **** 
1189:Source/stream_buffer.c **** static size_t prvBytesInBuffer( const StreamBuffer_t * const pxStreamBuffer )
1190:Source/stream_buffer.c **** {
 1793              		.loc 1 1190 0
 1794              		.cfi_startproc
 1795              		@ args = 0, pretend = 0, frame = 16
 1796              		@ frame_needed = 1, uses_anonymous_args = 0
 1797              		@ link register save eliminated.
 1798 0000 80B4     		push	{r7}
 1799              		.cfi_def_cfa_offset 4
 1800              		.cfi_offset 7, -4
 1801 0002 85B0     		sub	sp, sp, #20
 1802              		.cfi_def_cfa_offset 24
 1803 0004 00AF     		add	r7, sp, #0
 1804              		.cfi_def_cfa_register 7
 1805 0006 7860     		str	r0, [r7, #4]
1191:Source/stream_buffer.c **** /* Returns the distance between xTail and xHead. */
1192:Source/stream_buffer.c **** size_t xCount;
1193:Source/stream_buffer.c **** 
1194:Source/stream_buffer.c **** 	xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
 1806              		.loc 1 1194 0
 1807 0008 7B68     		ldr	r3, [r7, #4]
 1808 000a 9A68     		ldr	r2, [r3, #8]
 1809 000c 7B68     		ldr	r3, [r7, #4]
 1810 000e 5B68     		ldr	r3, [r3, #4]
 1811 0010 1344     		add	r3, r3, r2
 1812 0012 FB60     		str	r3, [r7, #12]
1195:Source/stream_buffer.c **** 	xCount -= pxStreamBuffer->xTail;
 1813              		.loc 1 1195 0
 1814 0014 7B68     		ldr	r3, [r7, #4]
 1815 0016 1B68     		ldr	r3, [r3]
 1816 0018 FA68     		ldr	r2, [r7, #12]
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccTqmdk2.s 			page 58


 1817 001a D31A     		subs	r3, r2, r3
 1818 001c FB60     		str	r3, [r7, #12]
1196:Source/stream_buffer.c **** 	if ( xCount >= pxStreamBuffer->xLength )
 1819              		.loc 1 1196 0
 1820 001e 7B68     		ldr	r3, [r7, #4]
 1821 0020 9A68     		ldr	r2, [r3, #8]
 1822 0022 FB68     		ldr	r3, [r7, #12]
 1823 0024 9A42     		cmp	r2, r3
 1824 0026 04D8     		bhi	.L106
1197:Source/stream_buffer.c **** 	{
1198:Source/stream_buffer.c **** 		xCount -= pxStreamBuffer->xLength;
 1825              		.loc 1 1198 0
 1826 0028 7B68     		ldr	r3, [r7, #4]
 1827 002a 9B68     		ldr	r3, [r3, #8]
 1828 002c FA68     		ldr	r2, [r7, #12]
 1829 002e D31A     		subs	r3, r2, r3
 1830 0030 FB60     		str	r3, [r7, #12]
 1831              	.L106:
1199:Source/stream_buffer.c **** 	}
1200:Source/stream_buffer.c **** 	else
1201:Source/stream_buffer.c **** 	{
1202:Source/stream_buffer.c **** 		mtCOVERAGE_TEST_MARKER();
1203:Source/stream_buffer.c **** 	}
1204:Source/stream_buffer.c **** 
1205:Source/stream_buffer.c **** 	return xCount;
 1832              		.loc 1 1205 0
 1833 0032 FB68     		ldr	r3, [r7, #12]
1206:Source/stream_buffer.c **** }
 1834              		.loc 1 1206 0
 1835 0034 1846     		mov	r0, r3
 1836 0036 1437     		adds	r7, r7, #20
 1837              		.cfi_def_cfa_offset 4
 1838 0038 BD46     		mov	sp, r7
 1839              		.cfi_def_cfa_register 13
 1840              		@ sp needed
 1841 003a 80BC     		pop	{r7}
 1842              		.cfi_restore 7
 1843              		.cfi_def_cfa_offset 0
 1844 003c 7047     		bx	lr
 1845              		.cfi_endproc
 1846              	.LFE87:
 1847              		.size	prvBytesInBuffer, .-prvBytesInBuffer
 1848 003e 00BF     		.section	.text.prvInitialiseNewStreamBuffer,"ax",%progbits
 1849              		.align	2
 1850              		.thumb
 1851              		.thumb_func
 1852              		.type	prvInitialiseNewStreamBuffer, %function
 1853              	prvInitialiseNewStreamBuffer:
 1854              	.LFB88:
1207:Source/stream_buffer.c **** /*-----------------------------------------------------------*/
1208:Source/stream_buffer.c **** 
1209:Source/stream_buffer.c **** static void prvInitialiseNewStreamBuffer( StreamBuffer_t * const pxStreamBuffer,
1210:Source/stream_buffer.c **** 										  uint8_t * const pucBuffer,
1211:Source/stream_buffer.c **** 										  size_t xBufferSizeBytes,
1212:Source/stream_buffer.c **** 										  size_t xTriggerLevelBytes,
1213:Source/stream_buffer.c **** 										  uint8_t ucFlags )
1214:Source/stream_buffer.c **** {
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccTqmdk2.s 			page 59


 1855              		.loc 1 1214 0
 1856              		.cfi_startproc
 1857              		@ args = 4, pretend = 0, frame = 16
 1858              		@ frame_needed = 1, uses_anonymous_args = 0
 1859 0000 80B5     		push	{r7, lr}
 1860              		.cfi_def_cfa_offset 8
 1861              		.cfi_offset 7, -8
 1862              		.cfi_offset 14, -4
 1863 0002 84B0     		sub	sp, sp, #16
 1864              		.cfi_def_cfa_offset 24
 1865 0004 00AF     		add	r7, sp, #0
 1866              		.cfi_def_cfa_register 7
 1867 0006 F860     		str	r0, [r7, #12]
 1868 0008 B960     		str	r1, [r7, #8]
 1869 000a 7A60     		str	r2, [r7, #4]
 1870 000c 3B60     		str	r3, [r7]
1215:Source/stream_buffer.c **** 	/* Assert here is deliberately writing to the entire buffer to ensure it can
1216:Source/stream_buffer.c **** 	be written to without generating exceptions, and is setting the buffer to a
1217:Source/stream_buffer.c **** 	known value to assist in development/debugging. */
1218:Source/stream_buffer.c **** 	#if( configASSERT_DEFINED == 1 )
1219:Source/stream_buffer.c **** 	{
1220:Source/stream_buffer.c **** 		/* The value written just has to be identifiable when looking at the
1221:Source/stream_buffer.c **** 		memory.  Don't use 0xA5 as that is the stack fill value and could
1222:Source/stream_buffer.c **** 		result in confusion as to what is actually being observed. */
1223:Source/stream_buffer.c **** 		const BaseType_t xWriteValue = 0x55;
1224:Source/stream_buffer.c **** 		configASSERT( memset( pucBuffer, ( int ) xWriteValue, xBufferSizeBytes ) == pucBuffer );
1225:Source/stream_buffer.c **** 	} /*lint !e529 !e438 xWriteValue is only used if configASSERT() is defined. */
1226:Source/stream_buffer.c **** 	#endif
1227:Source/stream_buffer.c **** 
1228:Source/stream_buffer.c **** 	( void ) memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) ); /*lint !e9087 memset
 1871              		.loc 1 1228 0
 1872 000e 2022     		movs	r2, #32
 1873 0010 0021     		movs	r1, #0
 1874 0012 F868     		ldr	r0, [r7, #12]
 1875 0014 FFF7FEFF 		bl	memset
1229:Source/stream_buffer.c **** 	pxStreamBuffer->pucBuffer = pucBuffer;
 1876              		.loc 1 1229 0
 1877 0018 FB68     		ldr	r3, [r7, #12]
 1878 001a BA68     		ldr	r2, [r7, #8]
 1879 001c 9A61     		str	r2, [r3, #24]
1230:Source/stream_buffer.c **** 	pxStreamBuffer->xLength = xBufferSizeBytes;
 1880              		.loc 1 1230 0
 1881 001e FB68     		ldr	r3, [r7, #12]
 1882 0020 7A68     		ldr	r2, [r7, #4]
 1883 0022 9A60     		str	r2, [r3, #8]
1231:Source/stream_buffer.c **** 	pxStreamBuffer->xTriggerLevelBytes = xTriggerLevelBytes;
 1884              		.loc 1 1231 0
 1885 0024 FB68     		ldr	r3, [r7, #12]
 1886 0026 3A68     		ldr	r2, [r7]
 1887 0028 DA60     		str	r2, [r3, #12]
1232:Source/stream_buffer.c **** 	pxStreamBuffer->ucFlags = ucFlags;
 1888              		.loc 1 1232 0
 1889 002a FB68     		ldr	r3, [r7, #12]
 1890 002c 3A7E     		ldrb	r2, [r7, #24]
 1891 002e 1A77     		strb	r2, [r3, #28]
1233:Source/stream_buffer.c **** }
 1892              		.loc 1 1233 0
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccTqmdk2.s 			page 60


 1893 0030 00BF     		nop
 1894 0032 1037     		adds	r7, r7, #16
 1895              		.cfi_def_cfa_offset 8
 1896 0034 BD46     		mov	sp, r7
 1897              		.cfi_def_cfa_register 13
 1898              		@ sp needed
 1899 0036 80BD     		pop	{r7, pc}
 1900              		.cfi_endproc
 1901              	.LFE88:
 1902              		.size	prvInitialiseNewStreamBuffer, .-prvInitialiseNewStreamBuffer
 1903              		.text
 1904              	.Letext0:
 1905              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.3\\psoc creator\\import\\gnu\\arm\\5.4.
 1906              		.file 4 "c:\\program files (x86)\\cypress\\psoc creator\\4.3\\psoc creator\\import\\gnu\\arm\\5.4.
 1907              		.file 5 "c:\\program files (x86)\\cypress\\psoc creator\\4.3\\psoc creator\\import\\gnu\\arm\\5.4.
 1908              		.file 6 ".\\Source\\include/task.h"
 1909              		.file 7 ".\\Source\\include/stream_buffer.h"
 1910              		.file 8 "Generated_Source\\PSoC5/core_cm3.h"
 1911              		.section	.debug_info,"",%progbits
 1912              	.Ldebug_info0:
 1913 0000 9D0C0000 		.4byte	0xc9d
 1914 0004 0400     		.2byte	0x4
 1915 0006 00000000 		.4byte	.Ldebug_abbrev0
 1916 000a 04       		.byte	0x4
 1917 000b 01       		.uleb128 0x1
 1918 000c 44010000 		.4byte	.LASF97
 1919 0010 0C       		.byte	0xc
 1920 0011 2D010000 		.4byte	.LASF98
 1921 0015 8A020000 		.4byte	.LASF99
 1922 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1923 001d 00000000 		.4byte	0
 1924 0021 00000000 		.4byte	.Ldebug_line0
 1925 0025 02       		.uleb128 0x2
 1926 0026 01       		.byte	0x1
 1927 0027 06       		.byte	0x6
 1928 0028 2E040000 		.4byte	.LASF0
 1929 002c 03       		.uleb128 0x3
 1930 002d 49070000 		.4byte	.LASF4
 1931 0031 03       		.byte	0x3
 1932 0032 1D       		.byte	0x1d
 1933 0033 37000000 		.4byte	0x37
 1934 0037 02       		.uleb128 0x2
 1935 0038 01       		.byte	0x1
 1936 0039 08       		.byte	0x8
 1937 003a BD030000 		.4byte	.LASF1
 1938 003e 02       		.uleb128 0x2
 1939 003f 02       		.byte	0x2
 1940 0040 05       		.byte	0x5
 1941 0041 BA000000 		.4byte	.LASF2
 1942 0045 02       		.uleb128 0x2
 1943 0046 02       		.byte	0x2
 1944 0047 07       		.byte	0x7
 1945 0048 E6040000 		.4byte	.LASF3
 1946 004c 03       		.uleb128 0x3
 1947 004d 57060000 		.4byte	.LASF5
 1948 0051 03       		.byte	0x3
 1949 0052 3F       		.byte	0x3f
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccTqmdk2.s 			page 61


 1950 0053 57000000 		.4byte	0x57
 1951 0057 02       		.uleb128 0x2
 1952 0058 04       		.byte	0x4
 1953 0059 05       		.byte	0x5
 1954 005a 1A030000 		.4byte	.LASF6
 1955 005e 03       		.uleb128 0x3
 1956 005f EF010000 		.4byte	.LASF7
 1957 0063 03       		.byte	0x3
 1958 0064 41       		.byte	0x41
 1959 0065 69000000 		.4byte	0x69
 1960 0069 02       		.uleb128 0x2
 1961 006a 04       		.byte	0x4
 1962 006b 07       		.byte	0x7
 1963 006c A2050000 		.4byte	.LASF8
 1964 0070 02       		.uleb128 0x2
 1965 0071 08       		.byte	0x8
 1966 0072 05       		.byte	0x5
 1967 0073 CD020000 		.4byte	.LASF9
 1968 0077 02       		.uleb128 0x2
 1969 0078 08       		.byte	0x8
 1970 0079 07       		.byte	0x7
 1971 007a 57040000 		.4byte	.LASF10
 1972 007e 04       		.uleb128 0x4
 1973 007f 04       		.byte	0x4
 1974 0080 05       		.byte	0x5
 1975 0081 696E7400 		.ascii	"int\000"
 1976 0085 02       		.uleb128 0x2
 1977 0086 04       		.byte	0x4
 1978 0087 07       		.byte	0x7
 1979 0088 A9040000 		.4byte	.LASF11
 1980 008c 03       		.uleb128 0x3
 1981 008d 38020000 		.4byte	.LASF12
 1982 0091 04       		.byte	0x4
 1983 0092 18       		.byte	0x18
 1984 0093 2C000000 		.4byte	0x2c
 1985 0097 03       		.uleb128 0x3
 1986 0098 34050000 		.4byte	.LASF13
 1987 009c 04       		.byte	0x4
 1988 009d 2C       		.byte	0x2c
 1989 009e 4C000000 		.4byte	0x4c
 1990 00a2 03       		.uleb128 0x3
 1991 00a3 87040000 		.4byte	.LASF14
 1992 00a7 04       		.byte	0x4
 1993 00a8 30       		.byte	0x30
 1994 00a9 5E000000 		.4byte	0x5e
 1995 00ad 03       		.uleb128 0x3
 1996 00ae C4000000 		.4byte	.LASF15
 1997 00b2 05       		.byte	0x5
 1998 00b3 D8       		.byte	0xd8
 1999 00b4 85000000 		.4byte	0x85
 2000 00b8 02       		.uleb128 0x2
 2001 00b9 08       		.byte	0x8
 2002 00ba 04       		.byte	0x4
 2003 00bb A9030000 		.4byte	.LASF16
 2004 00bf 02       		.uleb128 0x2
 2005 00c0 04       		.byte	0x4
 2006 00c1 07       		.byte	0x7
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccTqmdk2.s 			page 62


 2007 00c2 CB000000 		.4byte	.LASF17
 2008 00c6 05       		.uleb128 0x5
 2009 00c7 04       		.byte	0x4
 2010 00c8 02       		.uleb128 0x2
 2011 00c9 01       		.byte	0x1
 2012 00ca 08       		.byte	0x8
 2013 00cb 18050000 		.4byte	.LASF18
 2014 00cf 02       		.uleb128 0x2
 2015 00d0 04       		.byte	0x4
 2016 00d1 04       		.byte	0x4
 2017 00d2 84020000 		.4byte	.LASF19
 2018 00d6 02       		.uleb128 0x2
 2019 00d7 08       		.byte	0x8
 2020 00d8 04       		.byte	0x4
 2021 00d9 D2060000 		.4byte	.LASF20
 2022 00dd 03       		.uleb128 0x3
 2023 00de B6040000 		.4byte	.LASF21
 2024 00e2 02       		.byte	0x2
 2025 00e3 38       		.byte	0x38
 2026 00e4 57000000 		.4byte	0x57
 2027 00e8 03       		.uleb128 0x3
 2028 00e9 CF050000 		.4byte	.LASF22
 2029 00ed 02       		.byte	0x2
 2030 00ee 39       		.byte	0x39
 2031 00ef 69000000 		.4byte	0x69
 2032 00f3 03       		.uleb128 0x3
 2033 00f4 DB040000 		.4byte	.LASF23
 2034 00f8 02       		.byte	0x2
 2035 00f9 3F       		.byte	0x3f
 2036 00fa A2000000 		.4byte	0xa2
 2037 00fe 06       		.uleb128 0x6
 2038 00ff 04       		.byte	0x4
 2039 0100 8C000000 		.4byte	0x8c
 2040 0104 03       		.uleb128 0x3
 2041 0105 EB000000 		.4byte	.LASF24
 2042 0109 06       		.byte	0x6
 2043 010a 46       		.byte	0x46
 2044 010b 0F010000 		.4byte	0x10f
 2045 010f 06       		.uleb128 0x6
 2046 0110 04       		.byte	0x4
 2047 0111 15010000 		.4byte	0x115
 2048 0115 07       		.uleb128 0x7
 2049 0116 46030000 		.4byte	.LASF100
 2050 011a 08       		.uleb128 0x8
 2051 011b 01       		.byte	0x1
 2052 011c 37000000 		.4byte	0x37
 2053 0120 06       		.byte	0x6
 2054 0121 5B       		.byte	0x5b
 2055 0122 45010000 		.4byte	0x145
 2056 0126 09       		.uleb128 0x9
 2057 0127 32000000 		.4byte	.LASF25
 2058 012b 00       		.byte	0
 2059 012c 09       		.uleb128 0x9
 2060 012d 6D020000 		.4byte	.LASF26
 2061 0131 01       		.byte	0x1
 2062 0132 09       		.uleb128 0x9
 2063 0133 3E070000 		.4byte	.LASF27
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccTqmdk2.s 			page 63


 2064 0137 02       		.byte	0x2
 2065 0138 09       		.uleb128 0x9
 2066 0139 1D050000 		.4byte	.LASF28
 2067 013d 03       		.byte	0x3
 2068 013e 09       		.uleb128 0x9
 2069 013f 3D060000 		.4byte	.LASF29
 2070 0143 04       		.byte	0x4
 2071 0144 00       		.byte	0
 2072 0145 0A       		.uleb128 0xa
 2073 0146 7F000000 		.4byte	.LASF34
 2074 014a 08       		.byte	0x8
 2075 014b 06       		.byte	0x6
 2076 014c 66       		.byte	0x66
 2077 014d 6A010000 		.4byte	0x16a
 2078 0151 0B       		.uleb128 0xb
 2079 0152 EC030000 		.4byte	.LASF30
 2080 0156 06       		.byte	0x6
 2081 0157 68       		.byte	0x68
 2082 0158 DD000000 		.4byte	0xdd
 2083 015c 00       		.byte	0
 2084 015d 0B       		.uleb128 0xb
 2085 015e CB030000 		.4byte	.LASF31
 2086 0162 06       		.byte	0x6
 2087 0163 69       		.byte	0x69
 2088 0164 F3000000 		.4byte	0xf3
 2089 0168 04       		.byte	0x4
 2090 0169 00       		.byte	0
 2091 016a 03       		.uleb128 0x3
 2092 016b B0000000 		.4byte	.LASF32
 2093 016f 06       		.byte	0x6
 2094 0170 6A       		.byte	0x6a
 2095 0171 45010000 		.4byte	0x145
 2096 0175 03       		.uleb128 0x3
 2097 0176 74060000 		.4byte	.LASF33
 2098 017a 07       		.byte	0x7
 2099 017b 45       		.byte	0x45
 2100 017c 80010000 		.4byte	0x180
 2101 0180 06       		.uleb128 0x6
 2102 0181 04       		.byte	0x4
 2103 0182 86010000 		.4byte	0x186
 2104 0186 0A       		.uleb128 0xa
 2105 0187 9E000000 		.4byte	.LASF35
 2106 018b 20       		.byte	0x20
 2107 018c 01       		.byte	0x1
 2108 018d 8D       		.byte	0x8d
 2109 018e F3010000 		.4byte	0x1f3
 2110 0192 0B       		.uleb128 0xb
 2111 0193 F1050000 		.4byte	.LASF36
 2112 0197 01       		.byte	0x1
 2113 0198 8F       		.byte	0x8f
 2114 0199 F3010000 		.4byte	0x1f3
 2115 019d 00       		.byte	0
 2116 019e 0B       		.uleb128 0xb
 2117 019f CC060000 		.4byte	.LASF37
 2118 01a3 01       		.byte	0x1
 2119 01a4 90       		.byte	0x90
 2120 01a5 F3010000 		.4byte	0x1f3
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccTqmdk2.s 			page 64


 2121 01a9 04       		.byte	0x4
 2122 01aa 0B       		.uleb128 0xb
 2123 01ab B5030000 		.4byte	.LASF38
 2124 01af 01       		.byte	0x1
 2125 01b0 91       		.byte	0x91
 2126 01b1 AD000000 		.4byte	0xad
 2127 01b5 08       		.byte	0x8
 2128 01b6 0B       		.uleb128 0xb
 2129 01b7 75050000 		.4byte	.LASF39
 2130 01bb 01       		.byte	0x1
 2131 01bc 92       		.byte	0x92
 2132 01bd AD000000 		.4byte	0xad
 2133 01c1 0C       		.byte	0xc
 2134 01c2 0B       		.uleb128 0xb
 2135 01c3 18040000 		.4byte	.LASF40
 2136 01c7 01       		.byte	0x1
 2137 01c8 93       		.byte	0x93
 2138 01c9 F8010000 		.4byte	0x1f8
 2139 01cd 10       		.byte	0x10
 2140 01ce 0B       		.uleb128 0xb
 2141 01cf 61060000 		.4byte	.LASF41
 2142 01d3 01       		.byte	0x1
 2143 01d4 94       		.byte	0x94
 2144 01d5 F8010000 		.4byte	0x1f8
 2145 01d9 14       		.byte	0x14
 2146 01da 0B       		.uleb128 0xb
 2147 01db 0B020000 		.4byte	.LASF42
 2148 01df 01       		.byte	0x1
 2149 01e0 95       		.byte	0x95
 2150 01e1 FE000000 		.4byte	0xfe
 2151 01e5 18       		.byte	0x18
 2152 01e6 0B       		.uleb128 0xb
 2153 01e7 C1040000 		.4byte	.LASF43
 2154 01eb 01       		.byte	0x1
 2155 01ec 96       		.byte	0x96
 2156 01ed 8C000000 		.4byte	0x8c
 2157 01f1 1C       		.byte	0x1c
 2158 01f2 00       		.byte	0
 2159 01f3 0C       		.uleb128 0xc
 2160 01f4 AD000000 		.4byte	0xad
 2161 01f8 0C       		.uleb128 0xc
 2162 01f9 04010000 		.4byte	0x104
 2163 01fd 03       		.uleb128 0x3
 2164 01fe 53070000 		.4byte	.LASF44
 2165 0202 01       		.byte	0x1
 2166 0203 9B       		.byte	0x9b
 2167 0204 86010000 		.4byte	0x186
 2168 0208 0D       		.uleb128 0xd
 2169 0209 5A020000 		.4byte	.LASF101
 2170 020d 02       		.byte	0x2
 2171 020e D1       		.byte	0xd1
 2172 020f A2000000 		.4byte	0xa2
 2173 0213 03       		.byte	0x3
 2174 0214 2F020000 		.4byte	0x22f
 2175 0218 0E       		.uleb128 0xe
 2176 0219 20000000 		.4byte	.LASF45
 2177 021d 02       		.byte	0x2
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccTqmdk2.s 			page 65


 2178 021e D3       		.byte	0xd3
 2179 021f A2000000 		.4byte	0xa2
 2180 0223 0E       		.uleb128 0xe
 2181 0224 57000000 		.4byte	.LASF46
 2182 0228 02       		.byte	0x2
 2183 0229 D3       		.byte	0xd3
 2184 022a A2000000 		.4byte	0xa2
 2185 022e 00       		.byte	0
 2186 022f 0F       		.uleb128 0xf
 2187 0230 08050000 		.4byte	.LASF102
 2188 0234 02       		.byte	0x2
 2189 0235 E5       		.byte	0xe5
 2190 0236 03       		.byte	0x3
 2191 0237 47020000 		.4byte	0x247
 2192 023b 10       		.uleb128 0x10
 2193 023c F9040000 		.4byte	.LASF103
 2194 0240 02       		.byte	0x2
 2195 0241 E5       		.byte	0xe5
 2196 0242 A2000000 		.4byte	0xa2
 2197 0246 00       		.byte	0
 2198 0247 11       		.uleb128 0x11
 2199 0248 3C000000 		.4byte	.LASF52
 2200 024c 01       		.byte	0x1
 2201 024d DB       		.byte	0xdb
 2202 024e 75010000 		.4byte	0x175
 2203 0252 00000000 		.4byte	.LFB68
 2204 0256 5C000000 		.4byte	.LFE68-.LFB68
 2205 025a 01       		.uleb128 0x1
 2206 025b 9C       		.byte	0x9c
 2207 025c A7020000 		.4byte	0x2a7
 2208 0260 12       		.uleb128 0x12
 2209 0261 DB030000 		.4byte	.LASF47
 2210 0265 01       		.byte	0x1
 2211 0266 DB       		.byte	0xdb
 2212 0267 AD000000 		.4byte	0xad
 2213 026b 02       		.uleb128 0x2
 2214 026c 91       		.byte	0x91
 2215 026d 6C       		.sleb128 -20
 2216 026e 12       		.uleb128 0x12
 2217 026f 75050000 		.4byte	.LASF39
 2218 0273 01       		.byte	0x1
 2219 0274 DB       		.byte	0xdb
 2220 0275 AD000000 		.4byte	0xad
 2221 0279 02       		.uleb128 0x2
 2222 027a 91       		.byte	0x91
 2223 027b 68       		.sleb128 -24
 2224 027c 12       		.uleb128 0x12
 2225 027d 3C050000 		.4byte	.LASF48
 2226 0281 01       		.byte	0x1
 2227 0282 DB       		.byte	0xdb
 2228 0283 DD000000 		.4byte	0xdd
 2229 0287 02       		.uleb128 0x2
 2230 0288 91       		.byte	0x91
 2231 0289 64       		.sleb128 -28
 2232 028a 13       		.uleb128 0x13
 2233 028b 66030000 		.4byte	.LASF49
 2234 028f 01       		.byte	0x1
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccTqmdk2.s 			page 66


 2235 0290 DD       		.byte	0xdd
 2236 0291 FE000000 		.4byte	0xfe
 2237 0295 02       		.uleb128 0x2
 2238 0296 91       		.byte	0x91
 2239 0297 70       		.sleb128 -16
 2240 0298 13       		.uleb128 0x13
 2241 0299 C1040000 		.4byte	.LASF43
 2242 029d 01       		.byte	0x1
 2243 029e DE       		.byte	0xde
 2244 029f 8C000000 		.4byte	0x8c
 2245 02a3 02       		.uleb128 0x2
 2246 02a4 91       		.byte	0x91
 2247 02a5 77       		.sleb128 -9
 2248 02a6 00       		.byte	0
 2249 02a7 14       		.uleb128 0x14
 2250 02a8 6B000000 		.4byte	.LASF104
 2251 02ac 01       		.byte	0x1
 2252 02ad 6701     		.2byte	0x167
 2253 02af 00000000 		.4byte	.LFB69
 2254 02b3 32000000 		.4byte	.LFE69-.LFB69
 2255 02b7 01       		.uleb128 0x1
 2256 02b8 9C       		.byte	0x9c
 2257 02b9 DC020000 		.4byte	0x2dc
 2258 02bd 15       		.uleb128 0x15
 2259 02be 76020000 		.4byte	.LASF50
 2260 02c2 01       		.byte	0x1
 2261 02c3 6701     		.2byte	0x167
 2262 02c5 75010000 		.4byte	0x175
 2263 02c9 02       		.uleb128 0x2
 2264 02ca 91       		.byte	0x91
 2265 02cb 6C       		.sleb128 -20
 2266 02cc 16       		.uleb128 0x16
 2267 02cd 79030000 		.4byte	.LASF51
 2268 02d1 01       		.byte	0x1
 2269 02d2 6901     		.2byte	0x169
 2270 02d4 DC020000 		.4byte	0x2dc
 2271 02d8 02       		.uleb128 0x2
 2272 02d9 91       		.byte	0x91
 2273 02da 74       		.sleb128 -12
 2274 02db 00       		.byte	0
 2275 02dc 06       		.uleb128 0x6
 2276 02dd 04       		.byte	0x4
 2277 02de FD010000 		.4byte	0x1fd
 2278 02e2 17       		.uleb128 0x17
 2279 02e3 8F050000 		.4byte	.LASF53
 2280 02e7 01       		.byte	0x1
 2281 02e8 8801     		.2byte	0x188
 2282 02ea DD000000 		.4byte	0xdd
 2283 02ee 00000000 		.4byte	.LFB70
 2284 02f2 50000000 		.4byte	.LFE70-.LFB70
 2285 02f6 01       		.uleb128 0x1
 2286 02f7 9C       		.byte	0x9c
 2287 02f8 2A030000 		.4byte	0x32a
 2288 02fc 15       		.uleb128 0x15
 2289 02fd 76020000 		.4byte	.LASF50
 2290 0301 01       		.byte	0x1
 2291 0302 8801     		.2byte	0x188
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccTqmdk2.s 			page 67


 2292 0304 75010000 		.4byte	0x175
 2293 0308 02       		.uleb128 0x2
 2294 0309 91       		.byte	0x91
 2295 030a 6C       		.sleb128 -20
 2296 030b 16       		.uleb128 0x16
 2297 030c 79030000 		.4byte	.LASF51
 2298 0310 01       		.byte	0x1
 2299 0311 8A01     		.2byte	0x18a
 2300 0313 2A030000 		.4byte	0x32a
 2301 0317 02       		.uleb128 0x2
 2302 0318 91       		.byte	0x91
 2303 0319 70       		.sleb128 -16
 2304 031a 16       		.uleb128 0x16
 2305 031b A0060000 		.4byte	.LASF54
 2306 031f 01       		.byte	0x1
 2307 0320 8B01     		.2byte	0x18b
 2308 0322 DD000000 		.4byte	0xdd
 2309 0326 02       		.uleb128 0x2
 2310 0327 91       		.byte	0x91
 2311 0328 74       		.sleb128 -12
 2312 0329 00       		.byte	0
 2313 032a 18       		.uleb128 0x18
 2314 032b DC020000 		.4byte	0x2dc
 2315 032f 19       		.uleb128 0x19
 2316 0330 FB030000 		.4byte	.LASF55
 2317 0334 01       		.byte	0x1
 2318 0335 B901     		.2byte	0x1b9
 2319 0337 DD000000 		.4byte	0xdd
 2320 033b 00000000 		.4byte	.LFB71
 2321 033f 3E000000 		.4byte	.LFE71-.LFB71
 2322 0343 01       		.uleb128 0x1
 2323 0344 9C       		.byte	0x9c
 2324 0345 86030000 		.4byte	0x386
 2325 0349 15       		.uleb128 0x15
 2326 034a 76020000 		.4byte	.LASF50
 2327 034e 01       		.byte	0x1
 2328 034f B901     		.2byte	0x1b9
 2329 0351 75010000 		.4byte	0x175
 2330 0355 02       		.uleb128 0x2
 2331 0356 91       		.byte	0x91
 2332 0357 6C       		.sleb128 -20
 2333 0358 15       		.uleb128 0x15
 2334 0359 23030000 		.4byte	.LASF56
 2335 035d 01       		.byte	0x1
 2336 035e B901     		.2byte	0x1b9
 2337 0360 AD000000 		.4byte	0xad
 2338 0364 02       		.uleb128 0x2
 2339 0365 91       		.byte	0x91
 2340 0366 68       		.sleb128 -24
 2341 0367 16       		.uleb128 0x16
 2342 0368 79030000 		.4byte	.LASF51
 2343 036c 01       		.byte	0x1
 2344 036d BB01     		.2byte	0x1bb
 2345 036f 2A030000 		.4byte	0x32a
 2346 0373 02       		.uleb128 0x2
 2347 0374 91       		.byte	0x91
 2348 0375 70       		.sleb128 -16
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccTqmdk2.s 			page 68


 2349 0376 16       		.uleb128 0x16
 2350 0377 A0060000 		.4byte	.LASF54
 2351 037b 01       		.byte	0x1
 2352 037c BC01     		.2byte	0x1bc
 2353 037e DD000000 		.4byte	0xdd
 2354 0382 02       		.uleb128 0x2
 2355 0383 91       		.byte	0x91
 2356 0384 74       		.sleb128 -12
 2357 0385 00       		.byte	0
 2358 0386 19       		.uleb128 0x19
 2359 0387 3A040000 		.4byte	.LASF57
 2360 038b 01       		.byte	0x1
 2361 038c D601     		.2byte	0x1d6
 2362 038e AD000000 		.4byte	0xad
 2363 0392 00000000 		.4byte	.LFB72
 2364 0396 48000000 		.4byte	.LFE72-.LFB72
 2365 039a 01       		.uleb128 0x1
 2366 039b 9C       		.byte	0x9c
 2367 039c CE030000 		.4byte	0x3ce
 2368 03a0 15       		.uleb128 0x15
 2369 03a1 76020000 		.4byte	.LASF50
 2370 03a5 01       		.byte	0x1
 2371 03a6 D601     		.2byte	0x1d6
 2372 03a8 75010000 		.4byte	0x175
 2373 03ac 02       		.uleb128 0x2
 2374 03ad 91       		.byte	0x91
 2375 03ae 6C       		.sleb128 -20
 2376 03af 16       		.uleb128 0x16
 2377 03b0 79030000 		.4byte	.LASF51
 2378 03b4 01       		.byte	0x1
 2379 03b5 D801     		.2byte	0x1d8
 2380 03b7 D9030000 		.4byte	0x3d9
 2381 03bb 02       		.uleb128 0x2
 2382 03bc 91       		.byte	0x91
 2383 03bd 70       		.sleb128 -16
 2384 03be 16       		.uleb128 0x16
 2385 03bf 88050000 		.4byte	.LASF58
 2386 03c3 01       		.byte	0x1
 2387 03c4 D901     		.2byte	0x1d9
 2388 03c6 AD000000 		.4byte	0xad
 2389 03ca 02       		.uleb128 0x2
 2390 03cb 91       		.byte	0x91
 2391 03cc 74       		.sleb128 -12
 2392 03cd 00       		.byte	0
 2393 03ce 06       		.uleb128 0x6
 2394 03cf 04       		.byte	0x4
 2395 03d0 D4030000 		.4byte	0x3d4
 2396 03d4 18       		.uleb128 0x18
 2397 03d5 FD010000 		.4byte	0x1fd
 2398 03d9 18       		.uleb128 0x18
 2399 03da CE030000 		.4byte	0x3ce
 2400 03de 17       		.uleb128 0x17
 2401 03df 19070000 		.4byte	.LASF59
 2402 03e3 01       		.byte	0x1
 2403 03e4 EE01     		.2byte	0x1ee
 2404 03e6 AD000000 		.4byte	0xad
 2405 03ea 00000000 		.4byte	.LFB73
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccTqmdk2.s 			page 69


 2406 03ee 1E000000 		.4byte	.LFE73-.LFB73
 2407 03f2 01       		.uleb128 0x1
 2408 03f3 9C       		.byte	0x9c
 2409 03f4 26040000 		.4byte	0x426
 2410 03f8 15       		.uleb128 0x15
 2411 03f9 76020000 		.4byte	.LASF50
 2412 03fd 01       		.byte	0x1
 2413 03fe EE01     		.2byte	0x1ee
 2414 0400 75010000 		.4byte	0x175
 2415 0404 02       		.uleb128 0x2
 2416 0405 91       		.byte	0x91
 2417 0406 6C       		.sleb128 -20
 2418 0407 16       		.uleb128 0x16
 2419 0408 79030000 		.4byte	.LASF51
 2420 040c 01       		.byte	0x1
 2421 040d F001     		.2byte	0x1f0
 2422 040f D9030000 		.4byte	0x3d9
 2423 0413 02       		.uleb128 0x2
 2424 0414 91       		.byte	0x91
 2425 0415 74       		.sleb128 -12
 2426 0416 16       		.uleb128 0x16
 2427 0417 A0060000 		.4byte	.LASF54
 2428 041b 01       		.byte	0x1
 2429 041c F101     		.2byte	0x1f1
 2430 041e AD000000 		.4byte	0xad
 2431 0422 02       		.uleb128 0x2
 2432 0423 91       		.byte	0x91
 2433 0424 70       		.sleb128 -16
 2434 0425 00       		.byte	0
 2435 0426 17       		.uleb128 0x17
 2436 0427 C9040000 		.4byte	.LASF60
 2437 042b 01       		.byte	0x1
 2438 042c FA01     		.2byte	0x1fa
 2439 042e AD000000 		.4byte	0xad
 2440 0432 00000000 		.4byte	.LFB74
 2441 0436 F6000000 		.4byte	.LFE74-.LFB74
 2442 043a 01       		.uleb128 0x1
 2443 043b 9C       		.byte	0x9c
 2444 043c C8040000 		.4byte	0x4c8
 2445 0440 15       		.uleb128 0x15
 2446 0441 76020000 		.4byte	.LASF50
 2447 0445 01       		.byte	0x1
 2448 0446 FA01     		.2byte	0x1fa
 2449 0448 75010000 		.4byte	0x175
 2450 044c 02       		.uleb128 0x2
 2451 044d 91       		.byte	0x91
 2452 044e 5C       		.sleb128 -36
 2453 044f 15       		.uleb128 0x15
 2454 0450 35070000 		.4byte	.LASF61
 2455 0454 01       		.byte	0x1
 2456 0455 FB01     		.2byte	0x1fb
 2457 0457 C8040000 		.4byte	0x4c8
 2458 045b 02       		.uleb128 0x2
 2459 045c 91       		.byte	0x91
 2460 045d 58       		.sleb128 -40
 2461 045e 15       		.uleb128 0x15
 2462 045f FA010000 		.4byte	.LASF62
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccTqmdk2.s 			page 70


 2463 0463 01       		.byte	0x1
 2464 0464 FC01     		.2byte	0x1fc
 2465 0466 AD000000 		.4byte	0xad
 2466 046a 02       		.uleb128 0x2
 2467 046b 91       		.byte	0x91
 2468 046c 54       		.sleb128 -44
 2469 046d 15       		.uleb128 0x15
 2470 046e 22020000 		.4byte	.LASF63
 2471 0472 01       		.byte	0x1
 2472 0473 FD01     		.2byte	0x1fd
 2473 0475 F3000000 		.4byte	0xf3
 2474 0479 02       		.uleb128 0x2
 2475 047a 91       		.byte	0x91
 2476 047b 50       		.sleb128 -48
 2477 047c 16       		.uleb128 0x16
 2478 047d 79030000 		.4byte	.LASF51
 2479 0481 01       		.byte	0x1
 2480 0482 FF01     		.2byte	0x1ff
 2481 0484 2A030000 		.4byte	0x32a
 2482 0488 02       		.uleb128 0x2
 2483 0489 91       		.byte	0x91
 2484 048a 6C       		.sleb128 -20
 2485 048b 16       		.uleb128 0x16
 2486 048c A0060000 		.4byte	.LASF54
 2487 0490 01       		.byte	0x1
 2488 0491 0002     		.2byte	0x200
 2489 0493 AD000000 		.4byte	0xad
 2490 0497 02       		.uleb128 0x2
 2491 0498 91       		.byte	0x91
 2492 0499 68       		.sleb128 -24
 2493 049a 16       		.uleb128 0x16
 2494 049b 88050000 		.4byte	.LASF58
 2495 049f 01       		.byte	0x1
 2496 04a0 0002     		.2byte	0x200
 2497 04a2 AD000000 		.4byte	0xad
 2498 04a6 02       		.uleb128 0x2
 2499 04a7 91       		.byte	0x91
 2500 04a8 74       		.sleb128 -12
 2501 04a9 16       		.uleb128 0x16
 2502 04aa DB020000 		.4byte	.LASF64
 2503 04ae 01       		.byte	0x1
 2504 04af 0102     		.2byte	0x201
 2505 04b1 AD000000 		.4byte	0xad
 2506 04b5 02       		.uleb128 0x2
 2507 04b6 91       		.byte	0x91
 2508 04b7 70       		.sleb128 -16
 2509 04b8 16       		.uleb128 0x16
 2510 04b9 2F020000 		.4byte	.LASF65
 2511 04bd 01       		.byte	0x1
 2512 04be 0202     		.2byte	0x202
 2513 04c0 6A010000 		.4byte	0x16a
 2514 04c4 02       		.uleb128 0x2
 2515 04c5 91       		.byte	0x91
 2516 04c6 60       		.sleb128 -32
 2517 04c7 00       		.byte	0
 2518 04c8 06       		.uleb128 0x6
 2519 04c9 04       		.byte	0x4
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccTqmdk2.s 			page 71


 2520 04ca CE040000 		.4byte	0x4ce
 2521 04ce 1A       		.uleb128 0x1a
 2522 04cf 17       		.uleb128 0x17
 2523 04d0 90040000 		.4byte	.LASF66
 2524 04d4 01       		.byte	0x1
 2525 04d5 6202     		.2byte	0x262
 2526 04d7 AD000000 		.4byte	0xad
 2527 04db 00000000 		.4byte	.LFB75
 2528 04df A8000000 		.4byte	.LFE75-.LFB75
 2529 04e3 01       		.uleb128 0x1
 2530 04e4 9C       		.byte	0x9c
 2531 04e5 C3050000 		.4byte	0x5c3
 2532 04e9 15       		.uleb128 0x15
 2533 04ea 76020000 		.4byte	.LASF50
 2534 04ee 01       		.byte	0x1
 2535 04ef 6202     		.2byte	0x262
 2536 04f1 75010000 		.4byte	0x175
 2537 04f5 02       		.uleb128 0x2
 2538 04f6 91       		.byte	0x91
 2539 04f7 54       		.sleb128 -44
 2540 04f8 15       		.uleb128 0x15
 2541 04f9 35070000 		.4byte	.LASF61
 2542 04fd 01       		.byte	0x1
 2543 04fe 6302     		.2byte	0x263
 2544 0500 C8040000 		.4byte	0x4c8
 2545 0504 02       		.uleb128 0x2
 2546 0505 91       		.byte	0x91
 2547 0506 50       		.sleb128 -48
 2548 0507 15       		.uleb128 0x15
 2549 0508 FA010000 		.4byte	.LASF62
 2550 050c 01       		.byte	0x1
 2551 050d 6402     		.2byte	0x264
 2552 050f AD000000 		.4byte	0xad
 2553 0513 02       		.uleb128 0x2
 2554 0514 91       		.byte	0x91
 2555 0515 4C       		.sleb128 -52
 2556 0516 15       		.uleb128 0x15
 2557 0517 A8060000 		.4byte	.LASF67
 2558 051b 01       		.byte	0x1
 2559 051c 6502     		.2byte	0x265
 2560 051e C9050000 		.4byte	0x5c9
 2561 0522 02       		.uleb128 0x2
 2562 0523 91       		.byte	0x91
 2563 0524 48       		.sleb128 -56
 2564 0525 16       		.uleb128 0x16
 2565 0526 79030000 		.4byte	.LASF51
 2566 052a 01       		.byte	0x1
 2567 052b 6702     		.2byte	0x267
 2568 052d 2A030000 		.4byte	0x32a
 2569 0531 02       		.uleb128 0x2
 2570 0532 91       		.byte	0x91
 2571 0533 70       		.sleb128 -16
 2572 0534 16       		.uleb128 0x16
 2573 0535 A0060000 		.4byte	.LASF54
 2574 0539 01       		.byte	0x1
 2575 053a 6802     		.2byte	0x268
 2576 053c AD000000 		.4byte	0xad
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccTqmdk2.s 			page 72


 2577 0540 02       		.uleb128 0x2
 2578 0541 91       		.byte	0x91
 2579 0542 68       		.sleb128 -24
 2580 0543 16       		.uleb128 0x16
 2581 0544 88050000 		.4byte	.LASF58
 2582 0548 01       		.byte	0x1
 2583 0549 6802     		.2byte	0x268
 2584 054b AD000000 		.4byte	0xad
 2585 054f 02       		.uleb128 0x2
 2586 0550 91       		.byte	0x91
 2587 0551 6C       		.sleb128 -20
 2588 0552 16       		.uleb128 0x16
 2589 0553 DB020000 		.4byte	.LASF64
 2590 0557 01       		.byte	0x1
 2591 0558 6902     		.2byte	0x269
 2592 055a AD000000 		.4byte	0xad
 2593 055e 02       		.uleb128 0x2
 2594 055f 91       		.byte	0x91
 2595 0560 74       		.sleb128 -12
 2596 0561 1B       		.uleb128 0x1b
 2597 0562 58000000 		.4byte	.LBB20
 2598 0566 46000000 		.4byte	.LBE20-.LBB20
 2599 056a 16       		.uleb128 0x16
 2600 056b 89060000 		.4byte	.LASF68
 2601 056f 01       		.byte	0x1
 2602 0570 8302     		.2byte	0x283
 2603 0572 E8000000 		.4byte	0xe8
 2604 0576 02       		.uleb128 0x2
 2605 0577 91       		.byte	0x91
 2606 0578 60       		.sleb128 -32
 2607 0579 1C       		.uleb128 0x1c
 2608 057a 08020000 		.4byte	0x208
 2609 057e 58000000 		.4byte	.LBB21
 2610 0582 1A000000 		.4byte	.LBE21-.LBB21
 2611 0586 01       		.byte	0x1
 2612 0587 8302     		.2byte	0x283
 2613 0589 A8050000 		.4byte	0x5a8
 2614 058d 1B       		.uleb128 0x1b
 2615 058e 58000000 		.4byte	.LBB22
 2616 0592 1A000000 		.4byte	.LBE22-.LBB22
 2617 0596 1D       		.uleb128 0x1d
 2618 0597 18020000 		.4byte	0x218
 2619 059b 02       		.uleb128 0x2
 2620 059c 91       		.byte	0x91
 2621 059d 5C       		.sleb128 -36
 2622 059e 1D       		.uleb128 0x1d
 2623 059f 23020000 		.4byte	0x223
 2624 05a3 02       		.uleb128 0x2
 2625 05a4 91       		.byte	0x91
 2626 05a5 58       		.sleb128 -40
 2627 05a6 00       		.byte	0
 2628 05a7 00       		.byte	0
 2629 05a8 1E       		.uleb128 0x1e
 2630 05a9 2F020000 		.4byte	0x22f
 2631 05ad 98000000 		.4byte	.LBB23
 2632 05b1 06000000 		.4byte	.LBE23-.LBB23
 2633 05b5 01       		.byte	0x1
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccTqmdk2.s 			page 73


 2634 05b6 8302     		.2byte	0x283
 2635 05b8 1F       		.uleb128 0x1f
 2636 05b9 3B020000 		.4byte	0x23b
 2637 05bd 02       		.uleb128 0x2
 2638 05be 91       		.byte	0x91
 2639 05bf 64       		.sleb128 -28
 2640 05c0 00       		.byte	0
 2641 05c1 00       		.byte	0
 2642 05c2 00       		.byte	0
 2643 05c3 06       		.uleb128 0x6
 2644 05c4 04       		.byte	0x4
 2645 05c5 DD000000 		.4byte	0xdd
 2646 05c9 18       		.uleb128 0x18
 2647 05ca C3050000 		.4byte	0x5c3
 2648 05ce 20       		.uleb128 0x20
 2649 05cf 88030000 		.4byte	.LASF80
 2650 05d3 01       		.byte	0x1
 2651 05d4 9502     		.2byte	0x295
 2652 05d6 AD000000 		.4byte	0xad
 2653 05da 00000000 		.4byte	.LFB76
 2654 05de 7A000000 		.4byte	.LFE76-.LFB76
 2655 05e2 01       		.uleb128 0x1
 2656 05e3 9C       		.byte	0x9c
 2657 05e4 52060000 		.4byte	0x652
 2658 05e8 15       		.uleb128 0x15
 2659 05e9 79030000 		.4byte	.LASF51
 2660 05ed 01       		.byte	0x1
 2661 05ee 9502     		.2byte	0x295
 2662 05f0 2A030000 		.4byte	0x32a
 2663 05f4 02       		.uleb128 0x2
 2664 05f5 91       		.byte	0x91
 2665 05f6 6C       		.sleb128 -20
 2666 05f7 15       		.uleb128 0x15
 2667 05f8 35070000 		.4byte	.LASF61
 2668 05fc 01       		.byte	0x1
 2669 05fd 9602     		.2byte	0x296
 2670 05ff C8040000 		.4byte	0x4c8
 2671 0603 02       		.uleb128 0x2
 2672 0604 91       		.byte	0x91
 2673 0605 68       		.sleb128 -24
 2674 0606 15       		.uleb128 0x15
 2675 0607 FA010000 		.4byte	.LASF62
 2676 060b 01       		.byte	0x1
 2677 060c 9702     		.2byte	0x297
 2678 060e AD000000 		.4byte	0xad
 2679 0612 02       		.uleb128 0x2
 2680 0613 91       		.byte	0x91
 2681 0614 64       		.sleb128 -28
 2682 0615 15       		.uleb128 0x15
 2683 0616 88050000 		.4byte	.LASF58
 2684 061a 01       		.byte	0x1
 2685 061b 9802     		.2byte	0x298
 2686 061d AD000000 		.4byte	0xad
 2687 0621 02       		.uleb128 0x2
 2688 0622 91       		.byte	0x91
 2689 0623 60       		.sleb128 -32
 2690 0624 15       		.uleb128 0x15
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccTqmdk2.s 			page 74


 2691 0625 DB020000 		.4byte	.LASF64
 2692 0629 01       		.byte	0x1
 2693 062a 9902     		.2byte	0x299
 2694 062c AD000000 		.4byte	0xad
 2695 0630 02       		.uleb128 0x2
 2696 0631 91       		.byte	0x91
 2697 0632 00       		.sleb128 0
 2698 0633 16       		.uleb128 0x16
 2699 0634 00000000 		.4byte	.LASF69
 2700 0638 01       		.byte	0x1
 2701 0639 9B02     		.2byte	0x29b
 2702 063b DD000000 		.4byte	0xdd
 2703 063f 02       		.uleb128 0x2
 2704 0640 91       		.byte	0x91
 2705 0641 74       		.sleb128 -12
 2706 0642 16       		.uleb128 0x16
 2707 0643 A0060000 		.4byte	.LASF54
 2708 0647 01       		.byte	0x1
 2709 0648 9C02     		.2byte	0x29c
 2710 064a AD000000 		.4byte	0xad
 2711 064e 02       		.uleb128 0x2
 2712 064f 91       		.byte	0x91
 2713 0650 70       		.sleb128 -16
 2714 0651 00       		.byte	0
 2715 0652 17       		.uleb128 0x17
 2716 0653 89000000 		.4byte	.LASF70
 2717 0657 01       		.byte	0x1
 2718 0658 C902     		.2byte	0x2c9
 2719 065a AD000000 		.4byte	0xad
 2720 065e 00000000 		.4byte	.LFB77
 2721 0662 D4000000 		.4byte	.LFE77-.LFB77
 2722 0666 01       		.uleb128 0x1
 2723 0667 9C       		.byte	0x9c
 2724 0668 E5060000 		.4byte	0x6e5
 2725 066c 15       		.uleb128 0x15
 2726 066d 76020000 		.4byte	.LASF50
 2727 0671 01       		.byte	0x1
 2728 0672 C902     		.2byte	0x2c9
 2729 0674 75010000 		.4byte	0x175
 2730 0678 02       		.uleb128 0x2
 2731 0679 91       		.byte	0x91
 2732 067a 64       		.sleb128 -28
 2733 067b 15       		.uleb128 0x15
 2734 067c A0030000 		.4byte	.LASF71
 2735 0680 01       		.byte	0x1
 2736 0681 CA02     		.2byte	0x2ca
 2737 0683 C6000000 		.4byte	0xc6
 2738 0687 02       		.uleb128 0x2
 2739 0688 91       		.byte	0x91
 2740 0689 60       		.sleb128 -32
 2741 068a 15       		.uleb128 0x15
 2742 068b 0D000000 		.4byte	.LASF72
 2743 068f 01       		.byte	0x1
 2744 0690 CB02     		.2byte	0x2cb
 2745 0692 AD000000 		.4byte	0xad
 2746 0696 02       		.uleb128 0x2
 2747 0697 91       		.byte	0x91
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccTqmdk2.s 			page 75


 2748 0698 5C       		.sleb128 -36
 2749 0699 15       		.uleb128 0x15
 2750 069a 22020000 		.4byte	.LASF63
 2751 069e 01       		.byte	0x1
 2752 069f CC02     		.2byte	0x2cc
 2753 06a1 F3000000 		.4byte	0xf3
 2754 06a5 02       		.uleb128 0x2
 2755 06a6 91       		.byte	0x91
 2756 06a7 58       		.sleb128 -40
 2757 06a8 16       		.uleb128 0x16
 2758 06a9 79030000 		.4byte	.LASF51
 2759 06ad 01       		.byte	0x1
 2760 06ae CE02     		.2byte	0x2ce
 2761 06b0 2A030000 		.4byte	0x32a
 2762 06b4 02       		.uleb128 0x2
 2763 06b5 91       		.byte	0x91
 2764 06b6 68       		.sleb128 -24
 2765 06b7 16       		.uleb128 0x16
 2766 06b8 40020000 		.4byte	.LASF73
 2767 06bc 01       		.byte	0x1
 2768 06bd CF02     		.2byte	0x2cf
 2769 06bf AD000000 		.4byte	0xad
 2770 06c3 02       		.uleb128 0x2
 2771 06c4 91       		.byte	0x91
 2772 06c5 74       		.sleb128 -12
 2773 06c6 16       		.uleb128 0x16
 2774 06c7 1D010000 		.4byte	.LASF74
 2775 06cb 01       		.byte	0x1
 2776 06cc CF02     		.2byte	0x2cf
 2777 06ce AD000000 		.4byte	0xad
 2778 06d2 02       		.uleb128 0x2
 2779 06d3 91       		.byte	0x91
 2780 06d4 70       		.sleb128 -16
 2781 06d5 16       		.uleb128 0x16
 2782 06d6 B4050000 		.4byte	.LASF75
 2783 06da 01       		.byte	0x1
 2784 06db CF02     		.2byte	0x2cf
 2785 06dd AD000000 		.4byte	0xad
 2786 06e1 02       		.uleb128 0x2
 2787 06e2 91       		.byte	0x91
 2788 06e3 6C       		.sleb128 -20
 2789 06e4 00       		.byte	0
 2790 06e5 17       		.uleb128 0x17
 2791 06e6 19060000 		.4byte	.LASF76
 2792 06ea 01       		.byte	0x1
 2793 06eb 3103     		.2byte	0x331
 2794 06ed AD000000 		.4byte	0xad
 2795 06f1 00000000 		.4byte	.LFB78
 2796 06f5 5A000000 		.4byte	.LFE78-.LFB78
 2797 06f9 01       		.uleb128 0x1
 2798 06fa 9C       		.byte	0x9c
 2799 06fb 5A070000 		.4byte	0x75a
 2800 06ff 15       		.uleb128 0x15
 2801 0700 76020000 		.4byte	.LASF50
 2802 0704 01       		.byte	0x1
 2803 0705 3103     		.2byte	0x331
 2804 0707 75010000 		.4byte	0x175
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccTqmdk2.s 			page 76


 2805 070b 02       		.uleb128 0x2
 2806 070c 91       		.byte	0x91
 2807 070d 5C       		.sleb128 -36
 2808 070e 16       		.uleb128 0x16
 2809 070f 79030000 		.4byte	.LASF51
 2810 0713 01       		.byte	0x1
 2811 0714 3303     		.2byte	0x333
 2812 0716 2A030000 		.4byte	0x32a
 2813 071a 02       		.uleb128 0x2
 2814 071b 91       		.byte	0x91
 2815 071c 70       		.sleb128 -16
 2816 071d 16       		.uleb128 0x16
 2817 071e A0060000 		.4byte	.LASF54
 2818 0722 01       		.byte	0x1
 2819 0723 3403     		.2byte	0x334
 2820 0725 AD000000 		.4byte	0xad
 2821 0729 02       		.uleb128 0x2
 2822 072a 91       		.byte	0x91
 2823 072b 74       		.sleb128 -12
 2824 072c 16       		.uleb128 0x16
 2825 072d 1D010000 		.4byte	.LASF74
 2826 0731 01       		.byte	0x1
 2827 0732 3403     		.2byte	0x334
 2828 0734 AD000000 		.4byte	0xad
 2829 0738 02       		.uleb128 0x2
 2830 0739 91       		.byte	0x91
 2831 073a 6C       		.sleb128 -20
 2832 073b 16       		.uleb128 0x16
 2833 073c D9060000 		.4byte	.LASF77
 2834 0740 01       		.byte	0x1
 2835 0741 3403     		.2byte	0x334
 2836 0743 AD000000 		.4byte	0xad
 2837 0747 02       		.uleb128 0x2
 2838 0748 91       		.byte	0x91
 2839 0749 68       		.sleb128 -24
 2840 074a 16       		.uleb128 0x16
 2841 074b 5A030000 		.4byte	.LASF78
 2842 074f 01       		.byte	0x1
 2843 0750 3503     		.2byte	0x335
 2844 0752 AD000000 		.4byte	0xad
 2845 0756 02       		.uleb128 0x2
 2846 0757 91       		.byte	0x91
 2847 0758 64       		.sleb128 -28
 2848 0759 00       		.byte	0
 2849 075a 17       		.uleb128 0x17
 2850 075b EA020000 		.4byte	.LASF79
 2851 075f 01       		.byte	0x1
 2852 0760 5D03     		.2byte	0x35d
 2853 0762 AD000000 		.4byte	0xad
 2854 0766 00000000 		.4byte	.LFB79
 2855 076a A4000000 		.4byte	.LFE79-.LFB79
 2856 076e 01       		.uleb128 0x1
 2857 076f 9C       		.byte	0x9c
 2858 0770 4E080000 		.4byte	0x84e
 2859 0774 15       		.uleb128 0x15
 2860 0775 76020000 		.4byte	.LASF50
 2861 0779 01       		.byte	0x1
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccTqmdk2.s 			page 77


 2862 077a 5D03     		.2byte	0x35d
 2863 077c 75010000 		.4byte	0x175
 2864 0780 02       		.uleb128 0x2
 2865 0781 91       		.byte	0x91
 2866 0782 54       		.sleb128 -44
 2867 0783 15       		.uleb128 0x15
 2868 0784 A0030000 		.4byte	.LASF71
 2869 0788 01       		.byte	0x1
 2870 0789 5E03     		.2byte	0x35e
 2871 078b C6000000 		.4byte	0xc6
 2872 078f 02       		.uleb128 0x2
 2873 0790 91       		.byte	0x91
 2874 0791 50       		.sleb128 -48
 2875 0792 15       		.uleb128 0x15
 2876 0793 0D000000 		.4byte	.LASF72
 2877 0797 01       		.byte	0x1
 2878 0798 5F03     		.2byte	0x35f
 2879 079a AD000000 		.4byte	0xad
 2880 079e 02       		.uleb128 0x2
 2881 079f 91       		.byte	0x91
 2882 07a0 4C       		.sleb128 -52
 2883 07a1 15       		.uleb128 0x15
 2884 07a2 A8060000 		.4byte	.LASF67
 2885 07a6 01       		.byte	0x1
 2886 07a7 6003     		.2byte	0x360
 2887 07a9 C9050000 		.4byte	0x5c9
 2888 07ad 02       		.uleb128 0x2
 2889 07ae 91       		.byte	0x91
 2890 07af 48       		.sleb128 -56
 2891 07b0 16       		.uleb128 0x16
 2892 07b1 79030000 		.4byte	.LASF51
 2893 07b5 01       		.byte	0x1
 2894 07b6 6203     		.2byte	0x362
 2895 07b8 2A030000 		.4byte	0x32a
 2896 07bc 02       		.uleb128 0x2
 2897 07bd 91       		.byte	0x91
 2898 07be 6C       		.sleb128 -20
 2899 07bf 16       		.uleb128 0x16
 2900 07c0 40020000 		.4byte	.LASF73
 2901 07c4 01       		.byte	0x1
 2902 07c5 6303     		.2byte	0x363
 2903 07c7 AD000000 		.4byte	0xad
 2904 07cb 02       		.uleb128 0x2
 2905 07cc 91       		.byte	0x91
 2906 07cd 74       		.sleb128 -12
 2907 07ce 16       		.uleb128 0x16
 2908 07cf 1D010000 		.4byte	.LASF74
 2909 07d3 01       		.byte	0x1
 2910 07d4 6303     		.2byte	0x363
 2911 07d6 AD000000 		.4byte	0xad
 2912 07da 02       		.uleb128 0x2
 2913 07db 91       		.byte	0x91
 2914 07dc 68       		.sleb128 -24
 2915 07dd 16       		.uleb128 0x16
 2916 07de B4050000 		.4byte	.LASF75
 2917 07e2 01       		.byte	0x1
 2918 07e3 6303     		.2byte	0x363
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccTqmdk2.s 			page 78


 2919 07e5 AD000000 		.4byte	0xad
 2920 07e9 02       		.uleb128 0x2
 2921 07ea 91       		.byte	0x91
 2922 07eb 70       		.sleb128 -16
 2923 07ec 1B       		.uleb128 0x1b
 2924 07ed 54000000 		.4byte	.LBB25
 2925 07f1 46000000 		.4byte	.LBE25-.LBB25
 2926 07f5 16       		.uleb128 0x16
 2927 07f6 89060000 		.4byte	.LASF68
 2928 07fa 01       		.byte	0x1
 2929 07fb 8403     		.2byte	0x384
 2930 07fd E8000000 		.4byte	0xe8
 2931 0801 02       		.uleb128 0x2
 2932 0802 91       		.byte	0x91
 2933 0803 60       		.sleb128 -32
 2934 0804 1C       		.uleb128 0x1c
 2935 0805 08020000 		.4byte	0x208
 2936 0809 54000000 		.4byte	.LBB26
 2937 080d 1A000000 		.4byte	.LBE26-.LBB26
 2938 0811 01       		.byte	0x1
 2939 0812 8403     		.2byte	0x384
 2940 0814 33080000 		.4byte	0x833
 2941 0818 1B       		.uleb128 0x1b
 2942 0819 54000000 		.4byte	.LBB27
 2943 081d 1A000000 		.4byte	.LBE27-.LBB27
 2944 0821 1D       		.uleb128 0x1d
 2945 0822 18020000 		.4byte	0x218
 2946 0826 02       		.uleb128 0x2
 2947 0827 91       		.byte	0x91
 2948 0828 5C       		.sleb128 -36
 2949 0829 1D       		.uleb128 0x1d
 2950 082a 23020000 		.4byte	0x223
 2951 082e 02       		.uleb128 0x2
 2952 082f 91       		.byte	0x91
 2953 0830 58       		.sleb128 -40
 2954 0831 00       		.byte	0
 2955 0832 00       		.byte	0
 2956 0833 1E       		.uleb128 0x1e
 2957 0834 2F020000 		.4byte	0x22f
 2958 0838 94000000 		.4byte	.LBB28
 2959 083c 06000000 		.4byte	.LBE28-.LBB28
 2960 0840 01       		.byte	0x1
 2961 0841 8403     		.2byte	0x384
 2962 0843 1F       		.uleb128 0x1f
 2963 0844 3B020000 		.4byte	0x23b
 2964 0848 02       		.uleb128 0x2
 2965 0849 91       		.byte	0x91
 2966 084a 64       		.sleb128 -28
 2967 084b 00       		.byte	0
 2968 084c 00       		.byte	0
 2969 084d 00       		.byte	0
 2970 084e 20       		.uleb128 0x20
 2971 084f 6E040000 		.4byte	.LASF81
 2972 0853 01       		.byte	0x1
 2973 0854 9603     		.2byte	0x396
 2974 0856 AD000000 		.4byte	0xad
 2975 085a 00000000 		.4byte	.LFB80
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccTqmdk2.s 			page 79


 2976 085e 64000000 		.4byte	.LFE80-.LFB80
 2977 0862 01       		.uleb128 0x1
 2978 0863 9C       		.byte	0x9c
 2979 0864 F0080000 		.4byte	0x8f0
 2980 0868 15       		.uleb128 0x15
 2981 0869 79030000 		.4byte	.LASF51
 2982 086d 01       		.byte	0x1
 2983 086e 9603     		.2byte	0x396
 2984 0870 DC020000 		.4byte	0x2dc
 2985 0874 02       		.uleb128 0x2
 2986 0875 91       		.byte	0x91
 2987 0876 64       		.sleb128 -28
 2988 0877 15       		.uleb128 0x15
 2989 0878 A0030000 		.4byte	.LASF71
 2990 087c 01       		.byte	0x1
 2991 087d 9703     		.2byte	0x397
 2992 087f C6000000 		.4byte	0xc6
 2993 0883 02       		.uleb128 0x2
 2994 0884 91       		.byte	0x91
 2995 0885 60       		.sleb128 -32
 2996 0886 15       		.uleb128 0x15
 2997 0887 0D000000 		.4byte	.LASF72
 2998 088b 01       		.byte	0x1
 2999 088c 9803     		.2byte	0x398
 3000 088e AD000000 		.4byte	0xad
 3001 0892 02       		.uleb128 0x2
 3002 0893 91       		.byte	0x91
 3003 0894 5C       		.sleb128 -36
 3004 0895 15       		.uleb128 0x15
 3005 0896 1D010000 		.4byte	.LASF74
 3006 089a 01       		.byte	0x1
 3007 089b 9903     		.2byte	0x399
 3008 089d AD000000 		.4byte	0xad
 3009 08a1 02       		.uleb128 0x2
 3010 08a2 91       		.byte	0x91
 3011 08a3 58       		.sleb128 -40
 3012 08a4 15       		.uleb128 0x15
 3013 08a5 B4050000 		.4byte	.LASF75
 3014 08a9 01       		.byte	0x1
 3015 08aa 9A03     		.2byte	0x39a
 3016 08ac AD000000 		.4byte	0xad
 3017 08b0 02       		.uleb128 0x2
 3018 08b1 91       		.byte	0x91
 3019 08b2 00       		.sleb128 0
 3020 08b3 16       		.uleb128 0x16
 3021 08b4 D9060000 		.4byte	.LASF77
 3022 08b8 01       		.byte	0x1
 3023 08b9 9C03     		.2byte	0x39c
 3024 08bb AD000000 		.4byte	0xad
 3025 08bf 02       		.uleb128 0x2
 3026 08c0 91       		.byte	0x91
 3027 08c1 70       		.sleb128 -16
 3028 08c2 16       		.uleb128 0x16
 3029 08c3 40020000 		.4byte	.LASF73
 3030 08c7 01       		.byte	0x1
 3031 08c8 9C03     		.2byte	0x39c
 3032 08ca AD000000 		.4byte	0xad
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccTqmdk2.s 			page 80


 3033 08ce 02       		.uleb128 0x2
 3034 08cf 91       		.byte	0x91
 3035 08d0 6C       		.sleb128 -20
 3036 08d1 16       		.uleb128 0x16
 3037 08d2 D2010000 		.4byte	.LASF82
 3038 08d6 01       		.byte	0x1
 3039 08d7 9C03     		.2byte	0x39c
 3040 08d9 AD000000 		.4byte	0xad
 3041 08dd 02       		.uleb128 0x2
 3042 08de 91       		.byte	0x91
 3043 08df 74       		.sleb128 -12
 3044 08e0 16       		.uleb128 0x16
 3045 08e1 4D050000 		.4byte	.LASF83
 3046 08e5 01       		.byte	0x1
 3047 08e6 9D03     		.2byte	0x39d
 3048 08e8 AD000000 		.4byte	0xad
 3049 08ec 02       		.uleb128 0x2
 3050 08ed 91       		.byte	0x91
 3051 08ee 68       		.sleb128 -24
 3052 08ef 00       		.byte	0
 3053 08f0 19       		.uleb128 0x19
 3054 08f1 31030000 		.4byte	.LASF84
 3055 08f5 01       		.byte	0x1
 3056 08f6 CA03     		.2byte	0x3ca
 3057 08f8 DD000000 		.4byte	0xdd
 3058 08fc 00000000 		.4byte	.LFB81
 3059 0900 32000000 		.4byte	.LFE81-.LFB81
 3060 0904 01       		.uleb128 0x1
 3061 0905 9C       		.byte	0x9c
 3062 0906 47090000 		.4byte	0x947
 3063 090a 15       		.uleb128 0x15
 3064 090b 76020000 		.4byte	.LASF50
 3065 090f 01       		.byte	0x1
 3066 0910 CA03     		.2byte	0x3ca
 3067 0912 75010000 		.4byte	0x175
 3068 0916 02       		.uleb128 0x2
 3069 0917 91       		.byte	0x91
 3070 0918 64       		.sleb128 -28
 3071 0919 16       		.uleb128 0x16
 3072 091a 79030000 		.4byte	.LASF51
 3073 091e 01       		.byte	0x1
 3074 091f CC03     		.2byte	0x3cc
 3075 0921 D9030000 		.4byte	0x3d9
 3076 0925 02       		.uleb128 0x2
 3077 0926 91       		.byte	0x91
 3078 0927 70       		.sleb128 -16
 3079 0928 16       		.uleb128 0x16
 3080 0929 A0060000 		.4byte	.LASF54
 3081 092d 01       		.byte	0x1
 3082 092e CD03     		.2byte	0x3cd
 3083 0930 DD000000 		.4byte	0xdd
 3084 0934 02       		.uleb128 0x2
 3085 0935 91       		.byte	0x91
 3086 0936 74       		.sleb128 -12
 3087 0937 16       		.uleb128 0x16
 3088 0938 F1050000 		.4byte	.LASF36
 3089 093c 01       		.byte	0x1
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccTqmdk2.s 			page 81


 3090 093d CE03     		.2byte	0x3ce
 3091 093f AD000000 		.4byte	0xad
 3092 0943 02       		.uleb128 0x2
 3093 0944 91       		.byte	0x91
 3094 0945 6C       		.sleb128 -20
 3095 0946 00       		.byte	0
 3096 0947 17       		.uleb128 0x17
 3097 0948 06030000 		.4byte	.LASF85
 3098 094c 01       		.byte	0x1
 3099 094d E103     		.2byte	0x3e1
 3100 094f DD000000 		.4byte	0xdd
 3101 0953 00000000 		.4byte	.LFB82
 3102 0957 44000000 		.4byte	.LFE82-.LFB82
 3103 095b 01       		.uleb128 0x1
 3104 095c 9C       		.byte	0x9c
 3105 095d 9E090000 		.4byte	0x99e
 3106 0961 15       		.uleb128 0x15
 3107 0962 76020000 		.4byte	.LASF50
 3108 0966 01       		.byte	0x1
 3109 0967 E103     		.2byte	0x3e1
 3110 0969 75010000 		.4byte	0x175
 3111 096d 02       		.uleb128 0x2
 3112 096e 91       		.byte	0x91
 3113 096f 64       		.sleb128 -28
 3114 0970 16       		.uleb128 0x16
 3115 0971 A0060000 		.4byte	.LASF54
 3116 0975 01       		.byte	0x1
 3117 0976 E303     		.2byte	0x3e3
 3118 0978 DD000000 		.4byte	0xdd
 3119 097c 02       		.uleb128 0x2
 3120 097d 91       		.byte	0x91
 3121 097e 74       		.sleb128 -12
 3122 097f 16       		.uleb128 0x16
 3123 0980 B4050000 		.4byte	.LASF75
 3124 0984 01       		.byte	0x1
 3125 0985 E403     		.2byte	0x3e4
 3126 0987 AD000000 		.4byte	0xad
 3127 098b 02       		.uleb128 0x2
 3128 098c 91       		.byte	0x91
 3129 098d 70       		.sleb128 -16
 3130 098e 16       		.uleb128 0x16
 3131 098f 79030000 		.4byte	.LASF51
 3132 0993 01       		.byte	0x1
 3133 0994 E503     		.2byte	0x3e5
 3134 0996 D9030000 		.4byte	0x3d9
 3135 099a 02       		.uleb128 0x2
 3136 099b 91       		.byte	0x91
 3137 099c 6C       		.sleb128 -20
 3138 099d 00       		.byte	0
 3139 099e 17       		.uleb128 0x17
 3140 099f F7050000 		.4byte	.LASF86
 3141 09a3 01       		.byte	0x1
 3142 09a4 0404     		.2byte	0x404
 3143 09a6 DD000000 		.4byte	0xdd
 3144 09aa 00000000 		.4byte	.LFB83
 3145 09ae 68000000 		.4byte	.LFE83-.LFB83
 3146 09b2 01       		.uleb128 0x1
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccTqmdk2.s 			page 82


 3147 09b3 9C       		.byte	0x9c
 3148 09b4 4C0A0000 		.4byte	0xa4c
 3149 09b8 15       		.uleb128 0x15
 3150 09b9 76020000 		.4byte	.LASF50
 3151 09bd 01       		.byte	0x1
 3152 09be 0404     		.2byte	0x404
 3153 09c0 75010000 		.4byte	0x175
 3154 09c4 02       		.uleb128 0x2
 3155 09c5 91       		.byte	0x91
 3156 09c6 5C       		.sleb128 -36
 3157 09c7 15       		.uleb128 0x15
 3158 09c8 A8060000 		.4byte	.LASF67
 3159 09cc 01       		.byte	0x1
 3160 09cd 0404     		.2byte	0x404
 3161 09cf C3050000 		.4byte	0x5c3
 3162 09d3 02       		.uleb128 0x2
 3163 09d4 91       		.byte	0x91
 3164 09d5 58       		.sleb128 -40
 3165 09d6 16       		.uleb128 0x16
 3166 09d7 79030000 		.4byte	.LASF51
 3167 09db 01       		.byte	0x1
 3168 09dc 0604     		.2byte	0x406
 3169 09de 2A030000 		.4byte	0x32a
 3170 09e2 02       		.uleb128 0x2
 3171 09e3 91       		.byte	0x91
 3172 09e4 70       		.sleb128 -16
 3173 09e5 16       		.uleb128 0x16
 3174 09e6 A0060000 		.4byte	.LASF54
 3175 09ea 01       		.byte	0x1
 3176 09eb 0704     		.2byte	0x407
 3177 09ed DD000000 		.4byte	0xdd
 3178 09f1 02       		.uleb128 0x2
 3179 09f2 91       		.byte	0x91
 3180 09f3 74       		.sleb128 -12
 3181 09f4 16       		.uleb128 0x16
 3182 09f5 89060000 		.4byte	.LASF68
 3183 09f9 01       		.byte	0x1
 3184 09fa 0804     		.2byte	0x408
 3185 09fc E8000000 		.4byte	0xe8
 3186 0a00 02       		.uleb128 0x2
 3187 0a01 91       		.byte	0x91
 3188 0a02 68       		.sleb128 -24
 3189 0a03 1C       		.uleb128 0x1c
 3190 0a04 08020000 		.4byte	0x208
 3191 0a08 0E000000 		.4byte	.LBB30
 3192 0a0c 1A000000 		.4byte	.LBE30-.LBB30
 3193 0a10 01       		.byte	0x1
 3194 0a11 0C04     		.2byte	0x40c
 3195 0a13 320A0000 		.4byte	0xa32
 3196 0a17 1B       		.uleb128 0x1b
 3197 0a18 0E000000 		.4byte	.LBB31
 3198 0a1c 1A000000 		.4byte	.LBE31-.LBB31
 3199 0a20 1D       		.uleb128 0x1d
 3200 0a21 18020000 		.4byte	0x218
 3201 0a25 02       		.uleb128 0x2
 3202 0a26 91       		.byte	0x91
 3203 0a27 64       		.sleb128 -28
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccTqmdk2.s 			page 83


 3204 0a28 1D       		.uleb128 0x1d
 3205 0a29 23020000 		.4byte	0x223
 3206 0a2d 02       		.uleb128 0x2
 3207 0a2e 91       		.byte	0x91
 3208 0a2f 60       		.sleb128 -32
 3209 0a30 00       		.byte	0
 3210 0a31 00       		.byte	0
 3211 0a32 1E       		.uleb128 0x1e
 3212 0a33 2F020000 		.4byte	0x22f
 3213 0a37 58000000 		.4byte	.LBB32
 3214 0a3b 06000000 		.4byte	.LBE32-.LBB32
 3215 0a3f 01       		.byte	0x1
 3216 0a40 1C04     		.2byte	0x41c
 3217 0a42 1F       		.uleb128 0x1f
 3218 0a43 3B020000 		.4byte	0x23b
 3219 0a47 02       		.uleb128 0x2
 3220 0a48 91       		.byte	0x91
 3221 0a49 6C       		.sleb128 -20
 3222 0a4a 00       		.byte	0
 3223 0a4b 00       		.byte	0
 3224 0a4c 17       		.uleb128 0x17
 3225 0a4d F8000000 		.4byte	.LASF87
 3226 0a51 01       		.byte	0x1
 3227 0a52 2204     		.2byte	0x422
 3228 0a54 DD000000 		.4byte	0xdd
 3229 0a58 00000000 		.4byte	.LFB84
 3230 0a5c 68000000 		.4byte	.LFE84-.LFB84
 3231 0a60 01       		.uleb128 0x1
 3232 0a61 9C       		.byte	0x9c
 3233 0a62 FA0A0000 		.4byte	0xafa
 3234 0a66 15       		.uleb128 0x15
 3235 0a67 76020000 		.4byte	.LASF50
 3236 0a6b 01       		.byte	0x1
 3237 0a6c 2204     		.2byte	0x422
 3238 0a6e 75010000 		.4byte	0x175
 3239 0a72 02       		.uleb128 0x2
 3240 0a73 91       		.byte	0x91
 3241 0a74 5C       		.sleb128 -36
 3242 0a75 15       		.uleb128 0x15
 3243 0a76 A8060000 		.4byte	.LASF67
 3244 0a7a 01       		.byte	0x1
 3245 0a7b 2204     		.2byte	0x422
 3246 0a7d C3050000 		.4byte	0x5c3
 3247 0a81 02       		.uleb128 0x2
 3248 0a82 91       		.byte	0x91
 3249 0a83 58       		.sleb128 -40
 3250 0a84 16       		.uleb128 0x16
 3251 0a85 79030000 		.4byte	.LASF51
 3252 0a89 01       		.byte	0x1
 3253 0a8a 2404     		.2byte	0x424
 3254 0a8c 2A030000 		.4byte	0x32a
 3255 0a90 02       		.uleb128 0x2
 3256 0a91 91       		.byte	0x91
 3257 0a92 70       		.sleb128 -16
 3258 0a93 16       		.uleb128 0x16
 3259 0a94 A0060000 		.4byte	.LASF54
 3260 0a98 01       		.byte	0x1
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccTqmdk2.s 			page 84


 3261 0a99 2504     		.2byte	0x425
 3262 0a9b DD000000 		.4byte	0xdd
 3263 0a9f 02       		.uleb128 0x2
 3264 0aa0 91       		.byte	0x91
 3265 0aa1 74       		.sleb128 -12
 3266 0aa2 16       		.uleb128 0x16
 3267 0aa3 89060000 		.4byte	.LASF68
 3268 0aa7 01       		.byte	0x1
 3269 0aa8 2604     		.2byte	0x426
 3270 0aaa E8000000 		.4byte	0xe8
 3271 0aae 02       		.uleb128 0x2
 3272 0aaf 91       		.byte	0x91
 3273 0ab0 68       		.sleb128 -24
 3274 0ab1 1C       		.uleb128 0x1c
 3275 0ab2 08020000 		.4byte	0x208
 3276 0ab6 0E000000 		.4byte	.LBB34
 3277 0aba 1A000000 		.4byte	.LBE34-.LBB34
 3278 0abe 01       		.byte	0x1
 3279 0abf 2A04     		.2byte	0x42a
 3280 0ac1 E00A0000 		.4byte	0xae0
 3281 0ac5 1B       		.uleb128 0x1b
 3282 0ac6 0E000000 		.4byte	.LBB35
 3283 0aca 1A000000 		.4byte	.LBE35-.LBB35
 3284 0ace 1D       		.uleb128 0x1d
 3285 0acf 18020000 		.4byte	0x218
 3286 0ad3 02       		.uleb128 0x2
 3287 0ad4 91       		.byte	0x91
 3288 0ad5 64       		.sleb128 -28
 3289 0ad6 1D       		.uleb128 0x1d
 3290 0ad7 23020000 		.4byte	0x223
 3291 0adb 02       		.uleb128 0x2
 3292 0adc 91       		.byte	0x91
 3293 0add 60       		.sleb128 -32
 3294 0ade 00       		.byte	0
 3295 0adf 00       		.byte	0
 3296 0ae0 1E       		.uleb128 0x1e
 3297 0ae1 2F020000 		.4byte	0x22f
 3298 0ae5 58000000 		.4byte	.LBB36
 3299 0ae9 06000000 		.4byte	.LBE36-.LBB36
 3300 0aed 01       		.byte	0x1
 3301 0aee 3A04     		.2byte	0x43a
 3302 0af0 1F       		.uleb128 0x1f
 3303 0af1 3B020000 		.4byte	0x23b
 3304 0af5 02       		.uleb128 0x2
 3305 0af6 91       		.byte	0x91
 3306 0af7 6C       		.sleb128 -20
 3307 0af8 00       		.byte	0
 3308 0af9 00       		.byte	0
 3309 0afa 20       		.uleb128 0x20
 3310 0afb DB050000 		.4byte	.LASF88
 3311 0aff 01       		.byte	0x1
 3312 0b00 4004     		.2byte	0x440
 3313 0b02 AD000000 		.4byte	0xad
 3314 0b06 00000000 		.4byte	.LFB85
 3315 0b0a 80000000 		.4byte	.LFE85-.LFB85
 3316 0b0e 01       		.uleb128 0x1
 3317 0b0f 9C       		.byte	0x9c
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccTqmdk2.s 			page 85


 3318 0b10 600B0000 		.4byte	0xb60
 3319 0b14 15       		.uleb128 0x15
 3320 0b15 79030000 		.4byte	.LASF51
 3321 0b19 01       		.byte	0x1
 3322 0b1a 4004     		.2byte	0x440
 3323 0b1c 2A030000 		.4byte	0x32a
 3324 0b20 02       		.uleb128 0x2
 3325 0b21 91       		.byte	0x91
 3326 0b22 6C       		.sleb128 -20
 3327 0b23 15       		.uleb128 0x15
 3328 0b24 11070000 		.4byte	.LASF89
 3329 0b28 01       		.byte	0x1
 3330 0b29 4004     		.2byte	0x440
 3331 0b2b 600B0000 		.4byte	0xb60
 3332 0b2f 02       		.uleb128 0x2
 3333 0b30 91       		.byte	0x91
 3334 0b31 68       		.sleb128 -24
 3335 0b32 15       		.uleb128 0x15
 3336 0b33 64000000 		.4byte	.LASF90
 3337 0b37 01       		.byte	0x1
 3338 0b38 4004     		.2byte	0x440
 3339 0b3a AD000000 		.4byte	0xad
 3340 0b3e 02       		.uleb128 0x2
 3341 0b3f 91       		.byte	0x91
 3342 0b40 64       		.sleb128 -28
 3343 0b41 16       		.uleb128 0x16
 3344 0b42 E5010000 		.4byte	.LASF91
 3345 0b46 01       		.byte	0x1
 3346 0b47 4204     		.2byte	0x442
 3347 0b49 AD000000 		.4byte	0xad
 3348 0b4d 02       		.uleb128 0x2
 3349 0b4e 91       		.byte	0x91
 3350 0b4f 74       		.sleb128 -12
 3351 0b50 16       		.uleb128 0x16
 3352 0b51 15020000 		.4byte	.LASF92
 3353 0b55 01       		.byte	0x1
 3354 0b56 4204     		.2byte	0x442
 3355 0b58 AD000000 		.4byte	0xad
 3356 0b5c 02       		.uleb128 0x2
 3357 0b5d 91       		.byte	0x91
 3358 0b5e 70       		.sleb128 -16
 3359 0b5f 00       		.byte	0
 3360 0b60 06       		.uleb128 0x6
 3361 0b61 04       		.byte	0x4
 3362 0b62 660B0000 		.4byte	0xb66
 3363 0b66 18       		.uleb128 0x18
 3364 0b67 8C000000 		.4byte	0x8c
 3365 0b6b 20       		.uleb128 0x20
 3366 0b6c D4000000 		.4byte	.LASF93
 3367 0b70 01       		.byte	0x1
 3368 0b71 6E04     		.2byte	0x46e
 3369 0b73 AD000000 		.4byte	0xad
 3370 0b77 00000000 		.4byte	.LFB86
 3371 0b7b 94000000 		.4byte	.LFE86-.LFB86
 3372 0b7f 01       		.uleb128 0x1
 3373 0b80 9C       		.byte	0x9c
 3374 0b81 EF0B0000 		.4byte	0xbef
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccTqmdk2.s 			page 86


 3375 0b85 15       		.uleb128 0x15
 3376 0b86 79030000 		.4byte	.LASF51
 3377 0b8a 01       		.byte	0x1
 3378 0b8b 6E04     		.2byte	0x46e
 3379 0b8d DC020000 		.4byte	0x2dc
 3380 0b91 02       		.uleb128 0x2
 3381 0b92 91       		.byte	0x91
 3382 0b93 64       		.sleb128 -28
 3383 0b94 15       		.uleb128 0x15
 3384 0b95 11070000 		.4byte	.LASF89
 3385 0b99 01       		.byte	0x1
 3386 0b9a 6E04     		.2byte	0x46e
 3387 0b9c FE000000 		.4byte	0xfe
 3388 0ba0 02       		.uleb128 0x2
 3389 0ba1 91       		.byte	0x91
 3390 0ba2 60       		.sleb128 -32
 3391 0ba3 15       		.uleb128 0x15
 3392 0ba4 50020000 		.4byte	.LASF94
 3393 0ba8 01       		.byte	0x1
 3394 0ba9 6E04     		.2byte	0x46e
 3395 0bab AD000000 		.4byte	0xad
 3396 0baf 02       		.uleb128 0x2
 3397 0bb0 91       		.byte	0x91
 3398 0bb1 5C       		.sleb128 -36
 3399 0bb2 15       		.uleb128 0x15
 3400 0bb3 1D010000 		.4byte	.LASF74
 3401 0bb7 01       		.byte	0x1
 3402 0bb8 6E04     		.2byte	0x46e
 3403 0bba AD000000 		.4byte	0xad
 3404 0bbe 02       		.uleb128 0x2
 3405 0bbf 91       		.byte	0x91
 3406 0bc0 58       		.sleb128 -40
 3407 0bc1 16       		.uleb128 0x16
 3408 0bc2 64000000 		.4byte	.LASF90
 3409 0bc6 01       		.byte	0x1
 3410 0bc7 7004     		.2byte	0x470
 3411 0bc9 AD000000 		.4byte	0xad
 3412 0bcd 02       		.uleb128 0x2
 3413 0bce 91       		.byte	0x91
 3414 0bcf 70       		.sleb128 -16
 3415 0bd0 16       		.uleb128 0x16
 3416 0bd1 15020000 		.4byte	.LASF92
 3417 0bd5 01       		.byte	0x1
 3418 0bd6 7004     		.2byte	0x470
 3419 0bd8 AD000000 		.4byte	0xad
 3420 0bdc 02       		.uleb128 0x2
 3421 0bdd 91       		.byte	0x91
 3422 0bde 6C       		.sleb128 -20
 3423 0bdf 16       		.uleb128 0x16
 3424 0be0 C2060000 		.4byte	.LASF95
 3425 0be4 01       		.byte	0x1
 3426 0be5 7004     		.2byte	0x470
 3427 0be7 AD000000 		.4byte	0xad
 3428 0beb 02       		.uleb128 0x2
 3429 0bec 91       		.byte	0x91
 3430 0bed 74       		.sleb128 -12
 3431 0bee 00       		.byte	0
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccTqmdk2.s 			page 87


 3432 0bef 21       		.uleb128 0x21
 3433 0bf0 64050000 		.4byte	.LASF96
 3434 0bf4 01       		.byte	0x1
 3435 0bf5 A504     		.2byte	0x4a5
 3436 0bf7 AD000000 		.4byte	0xad
 3437 0bfb 00000000 		.4byte	.LFB87
 3438 0bff 3E000000 		.4byte	.LFE87-.LFB87
 3439 0c03 01       		.uleb128 0x1
 3440 0c04 9C       		.byte	0x9c
 3441 0c05 280C0000 		.4byte	0xc28
 3442 0c09 15       		.uleb128 0x15
 3443 0c0a 79030000 		.4byte	.LASF51
 3444 0c0e 01       		.byte	0x1
 3445 0c0f A504     		.2byte	0x4a5
 3446 0c11 D9030000 		.4byte	0x3d9
 3447 0c15 02       		.uleb128 0x2
 3448 0c16 91       		.byte	0x91
 3449 0c17 6C       		.sleb128 -20
 3450 0c18 16       		.uleb128 0x16
 3451 0c19 64000000 		.4byte	.LASF90
 3452 0c1d 01       		.byte	0x1
 3453 0c1e A804     		.2byte	0x4a8
 3454 0c20 AD000000 		.4byte	0xad
 3455 0c24 02       		.uleb128 0x2
 3456 0c25 91       		.byte	0x91
 3457 0c26 74       		.sleb128 -12
 3458 0c27 00       		.byte	0
 3459 0c28 22       		.uleb128 0x22
 3460 0c29 F4060000 		.4byte	.LASF105
 3461 0c2d 01       		.byte	0x1
 3462 0c2e B904     		.2byte	0x4b9
 3463 0c30 00000000 		.4byte	.LFB88
 3464 0c34 38000000 		.4byte	.LFE88-.LFB88
 3465 0c38 01       		.uleb128 0x1
 3466 0c39 9C       		.byte	0x9c
 3467 0c3a 8A0C0000 		.4byte	0xc8a
 3468 0c3e 15       		.uleb128 0x15
 3469 0c3f 79030000 		.4byte	.LASF51
 3470 0c43 01       		.byte	0x1
 3471 0c44 B904     		.2byte	0x4b9
 3472 0c46 2A030000 		.4byte	0x32a
 3473 0c4a 02       		.uleb128 0x2
 3474 0c4b 91       		.byte	0x91
 3475 0c4c 74       		.sleb128 -12
 3476 0c4d 15       		.uleb128 0x15
 3477 0c4e 0B020000 		.4byte	.LASF42
 3478 0c52 01       		.byte	0x1
 3479 0c53 BA04     		.2byte	0x4ba
 3480 0c55 8A0C0000 		.4byte	0xc8a
 3481 0c59 02       		.uleb128 0x2
 3482 0c5a 91       		.byte	0x91
 3483 0c5b 70       		.sleb128 -16
 3484 0c5c 15       		.uleb128 0x15
 3485 0c5d DB030000 		.4byte	.LASF47
 3486 0c61 01       		.byte	0x1
 3487 0c62 BB04     		.2byte	0x4bb
 3488 0c64 AD000000 		.4byte	0xad
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccTqmdk2.s 			page 88


 3489 0c68 02       		.uleb128 0x2
 3490 0c69 91       		.byte	0x91
 3491 0c6a 6C       		.sleb128 -20
 3492 0c6b 15       		.uleb128 0x15
 3493 0c6c 75050000 		.4byte	.LASF39
 3494 0c70 01       		.byte	0x1
 3495 0c71 BC04     		.2byte	0x4bc
 3496 0c73 AD000000 		.4byte	0xad
 3497 0c77 02       		.uleb128 0x2
 3498 0c78 91       		.byte	0x91
 3499 0c79 68       		.sleb128 -24
 3500 0c7a 15       		.uleb128 0x15
 3501 0c7b C1040000 		.4byte	.LASF43
 3502 0c7f 01       		.byte	0x1
 3503 0c80 BD04     		.2byte	0x4bd
 3504 0c82 8C000000 		.4byte	0x8c
 3505 0c86 02       		.uleb128 0x2
 3506 0c87 91       		.byte	0x91
 3507 0c88 00       		.sleb128 0
 3508 0c89 00       		.byte	0
 3509 0c8a 18       		.uleb128 0x18
 3510 0c8b FE000000 		.4byte	0xfe
 3511 0c8f 23       		.uleb128 0x23
 3512 0c90 E7060000 		.4byte	.LASF106
 3513 0c94 08       		.byte	0x8
 3514 0c95 1207     		.2byte	0x712
 3515 0c97 9B0C0000 		.4byte	0xc9b
 3516 0c9b 0C       		.uleb128 0xc
 3517 0c9c 97000000 		.4byte	0x97
 3518 0ca0 00       		.byte	0
 3519              		.section	.debug_abbrev,"",%progbits
 3520              	.Ldebug_abbrev0:
 3521 0000 01       		.uleb128 0x1
 3522 0001 11       		.uleb128 0x11
 3523 0002 01       		.byte	0x1
 3524 0003 25       		.uleb128 0x25
 3525 0004 0E       		.uleb128 0xe
 3526 0005 13       		.uleb128 0x13
 3527 0006 0B       		.uleb128 0xb
 3528 0007 03       		.uleb128 0x3
 3529 0008 0E       		.uleb128 0xe
 3530 0009 1B       		.uleb128 0x1b
 3531 000a 0E       		.uleb128 0xe
 3532 000b 55       		.uleb128 0x55
 3533 000c 17       		.uleb128 0x17
 3534 000d 11       		.uleb128 0x11
 3535 000e 01       		.uleb128 0x1
 3536 000f 10       		.uleb128 0x10
 3537 0010 17       		.uleb128 0x17
 3538 0011 00       		.byte	0
 3539 0012 00       		.byte	0
 3540 0013 02       		.uleb128 0x2
 3541 0014 24       		.uleb128 0x24
 3542 0015 00       		.byte	0
 3543 0016 0B       		.uleb128 0xb
 3544 0017 0B       		.uleb128 0xb
 3545 0018 3E       		.uleb128 0x3e
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccTqmdk2.s 			page 89


 3546 0019 0B       		.uleb128 0xb
 3547 001a 03       		.uleb128 0x3
 3548 001b 0E       		.uleb128 0xe
 3549 001c 00       		.byte	0
 3550 001d 00       		.byte	0
 3551 001e 03       		.uleb128 0x3
 3552 001f 16       		.uleb128 0x16
 3553 0020 00       		.byte	0
 3554 0021 03       		.uleb128 0x3
 3555 0022 0E       		.uleb128 0xe
 3556 0023 3A       		.uleb128 0x3a
 3557 0024 0B       		.uleb128 0xb
 3558 0025 3B       		.uleb128 0x3b
 3559 0026 0B       		.uleb128 0xb
 3560 0027 49       		.uleb128 0x49
 3561 0028 13       		.uleb128 0x13
 3562 0029 00       		.byte	0
 3563 002a 00       		.byte	0
 3564 002b 04       		.uleb128 0x4
 3565 002c 24       		.uleb128 0x24
 3566 002d 00       		.byte	0
 3567 002e 0B       		.uleb128 0xb
 3568 002f 0B       		.uleb128 0xb
 3569 0030 3E       		.uleb128 0x3e
 3570 0031 0B       		.uleb128 0xb
 3571 0032 03       		.uleb128 0x3
 3572 0033 08       		.uleb128 0x8
 3573 0034 00       		.byte	0
 3574 0035 00       		.byte	0
 3575 0036 05       		.uleb128 0x5
 3576 0037 0F       		.uleb128 0xf
 3577 0038 00       		.byte	0
 3578 0039 0B       		.uleb128 0xb
 3579 003a 0B       		.uleb128 0xb
 3580 003b 00       		.byte	0
 3581 003c 00       		.byte	0
 3582 003d 06       		.uleb128 0x6
 3583 003e 0F       		.uleb128 0xf
 3584 003f 00       		.byte	0
 3585 0040 0B       		.uleb128 0xb
 3586 0041 0B       		.uleb128 0xb
 3587 0042 49       		.uleb128 0x49
 3588 0043 13       		.uleb128 0x13
 3589 0044 00       		.byte	0
 3590 0045 00       		.byte	0
 3591 0046 07       		.uleb128 0x7
 3592 0047 13       		.uleb128 0x13
 3593 0048 00       		.byte	0
 3594 0049 03       		.uleb128 0x3
 3595 004a 0E       		.uleb128 0xe
 3596 004b 3C       		.uleb128 0x3c
 3597 004c 19       		.uleb128 0x19
 3598 004d 00       		.byte	0
 3599 004e 00       		.byte	0
 3600 004f 08       		.uleb128 0x8
 3601 0050 04       		.uleb128 0x4
 3602 0051 01       		.byte	0x1
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccTqmdk2.s 			page 90


 3603 0052 0B       		.uleb128 0xb
 3604 0053 0B       		.uleb128 0xb
 3605 0054 49       		.uleb128 0x49
 3606 0055 13       		.uleb128 0x13
 3607 0056 3A       		.uleb128 0x3a
 3608 0057 0B       		.uleb128 0xb
 3609 0058 3B       		.uleb128 0x3b
 3610 0059 0B       		.uleb128 0xb
 3611 005a 01       		.uleb128 0x1
 3612 005b 13       		.uleb128 0x13
 3613 005c 00       		.byte	0
 3614 005d 00       		.byte	0
 3615 005e 09       		.uleb128 0x9
 3616 005f 28       		.uleb128 0x28
 3617 0060 00       		.byte	0
 3618 0061 03       		.uleb128 0x3
 3619 0062 0E       		.uleb128 0xe
 3620 0063 1C       		.uleb128 0x1c
 3621 0064 0B       		.uleb128 0xb
 3622 0065 00       		.byte	0
 3623 0066 00       		.byte	0
 3624 0067 0A       		.uleb128 0xa
 3625 0068 13       		.uleb128 0x13
 3626 0069 01       		.byte	0x1
 3627 006a 03       		.uleb128 0x3
 3628 006b 0E       		.uleb128 0xe
 3629 006c 0B       		.uleb128 0xb
 3630 006d 0B       		.uleb128 0xb
 3631 006e 3A       		.uleb128 0x3a
 3632 006f 0B       		.uleb128 0xb
 3633 0070 3B       		.uleb128 0x3b
 3634 0071 0B       		.uleb128 0xb
 3635 0072 01       		.uleb128 0x1
 3636 0073 13       		.uleb128 0x13
 3637 0074 00       		.byte	0
 3638 0075 00       		.byte	0
 3639 0076 0B       		.uleb128 0xb
 3640 0077 0D       		.uleb128 0xd
 3641 0078 00       		.byte	0
 3642 0079 03       		.uleb128 0x3
 3643 007a 0E       		.uleb128 0xe
 3644 007b 3A       		.uleb128 0x3a
 3645 007c 0B       		.uleb128 0xb
 3646 007d 3B       		.uleb128 0x3b
 3647 007e 0B       		.uleb128 0xb
 3648 007f 49       		.uleb128 0x49
 3649 0080 13       		.uleb128 0x13
 3650 0081 38       		.uleb128 0x38
 3651 0082 0B       		.uleb128 0xb
 3652 0083 00       		.byte	0
 3653 0084 00       		.byte	0
 3654 0085 0C       		.uleb128 0xc
 3655 0086 35       		.uleb128 0x35
 3656 0087 00       		.byte	0
 3657 0088 49       		.uleb128 0x49
 3658 0089 13       		.uleb128 0x13
 3659 008a 00       		.byte	0
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccTqmdk2.s 			page 91


 3660 008b 00       		.byte	0
 3661 008c 0D       		.uleb128 0xd
 3662 008d 2E       		.uleb128 0x2e
 3663 008e 01       		.byte	0x1
 3664 008f 03       		.uleb128 0x3
 3665 0090 0E       		.uleb128 0xe
 3666 0091 3A       		.uleb128 0x3a
 3667 0092 0B       		.uleb128 0xb
 3668 0093 3B       		.uleb128 0x3b
 3669 0094 0B       		.uleb128 0xb
 3670 0095 27       		.uleb128 0x27
 3671 0096 19       		.uleb128 0x19
 3672 0097 49       		.uleb128 0x49
 3673 0098 13       		.uleb128 0x13
 3674 0099 20       		.uleb128 0x20
 3675 009a 0B       		.uleb128 0xb
 3676 009b 01       		.uleb128 0x1
 3677 009c 13       		.uleb128 0x13
 3678 009d 00       		.byte	0
 3679 009e 00       		.byte	0
 3680 009f 0E       		.uleb128 0xe
 3681 00a0 34       		.uleb128 0x34
 3682 00a1 00       		.byte	0
 3683 00a2 03       		.uleb128 0x3
 3684 00a3 0E       		.uleb128 0xe
 3685 00a4 3A       		.uleb128 0x3a
 3686 00a5 0B       		.uleb128 0xb
 3687 00a6 3B       		.uleb128 0x3b
 3688 00a7 0B       		.uleb128 0xb
 3689 00a8 49       		.uleb128 0x49
 3690 00a9 13       		.uleb128 0x13
 3691 00aa 00       		.byte	0
 3692 00ab 00       		.byte	0
 3693 00ac 0F       		.uleb128 0xf
 3694 00ad 2E       		.uleb128 0x2e
 3695 00ae 01       		.byte	0x1
 3696 00af 03       		.uleb128 0x3
 3697 00b0 0E       		.uleb128 0xe
 3698 00b1 3A       		.uleb128 0x3a
 3699 00b2 0B       		.uleb128 0xb
 3700 00b3 3B       		.uleb128 0x3b
 3701 00b4 0B       		.uleb128 0xb
 3702 00b5 27       		.uleb128 0x27
 3703 00b6 19       		.uleb128 0x19
 3704 00b7 20       		.uleb128 0x20
 3705 00b8 0B       		.uleb128 0xb
 3706 00b9 01       		.uleb128 0x1
 3707 00ba 13       		.uleb128 0x13
 3708 00bb 00       		.byte	0
 3709 00bc 00       		.byte	0
 3710 00bd 10       		.uleb128 0x10
 3711 00be 05       		.uleb128 0x5
 3712 00bf 00       		.byte	0
 3713 00c0 03       		.uleb128 0x3
 3714 00c1 0E       		.uleb128 0xe
 3715 00c2 3A       		.uleb128 0x3a
 3716 00c3 0B       		.uleb128 0xb
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccTqmdk2.s 			page 92


 3717 00c4 3B       		.uleb128 0x3b
 3718 00c5 0B       		.uleb128 0xb
 3719 00c6 49       		.uleb128 0x49
 3720 00c7 13       		.uleb128 0x13
 3721 00c8 00       		.byte	0
 3722 00c9 00       		.byte	0
 3723 00ca 11       		.uleb128 0x11
 3724 00cb 2E       		.uleb128 0x2e
 3725 00cc 01       		.byte	0x1
 3726 00cd 3F       		.uleb128 0x3f
 3727 00ce 19       		.uleb128 0x19
 3728 00cf 03       		.uleb128 0x3
 3729 00d0 0E       		.uleb128 0xe
 3730 00d1 3A       		.uleb128 0x3a
 3731 00d2 0B       		.uleb128 0xb
 3732 00d3 3B       		.uleb128 0x3b
 3733 00d4 0B       		.uleb128 0xb
 3734 00d5 27       		.uleb128 0x27
 3735 00d6 19       		.uleb128 0x19
 3736 00d7 49       		.uleb128 0x49
 3737 00d8 13       		.uleb128 0x13
 3738 00d9 11       		.uleb128 0x11
 3739 00da 01       		.uleb128 0x1
 3740 00db 12       		.uleb128 0x12
 3741 00dc 06       		.uleb128 0x6
 3742 00dd 40       		.uleb128 0x40
 3743 00de 18       		.uleb128 0x18
 3744 00df 9642     		.uleb128 0x2116
 3745 00e1 19       		.uleb128 0x19
 3746 00e2 01       		.uleb128 0x1
 3747 00e3 13       		.uleb128 0x13
 3748 00e4 00       		.byte	0
 3749 00e5 00       		.byte	0
 3750 00e6 12       		.uleb128 0x12
 3751 00e7 05       		.uleb128 0x5
 3752 00e8 00       		.byte	0
 3753 00e9 03       		.uleb128 0x3
 3754 00ea 0E       		.uleb128 0xe
 3755 00eb 3A       		.uleb128 0x3a
 3756 00ec 0B       		.uleb128 0xb
 3757 00ed 3B       		.uleb128 0x3b
 3758 00ee 0B       		.uleb128 0xb
 3759 00ef 49       		.uleb128 0x49
 3760 00f0 13       		.uleb128 0x13
 3761 00f1 02       		.uleb128 0x2
 3762 00f2 18       		.uleb128 0x18
 3763 00f3 00       		.byte	0
 3764 00f4 00       		.byte	0
 3765 00f5 13       		.uleb128 0x13
 3766 00f6 34       		.uleb128 0x34
 3767 00f7 00       		.byte	0
 3768 00f8 03       		.uleb128 0x3
 3769 00f9 0E       		.uleb128 0xe
 3770 00fa 3A       		.uleb128 0x3a
 3771 00fb 0B       		.uleb128 0xb
 3772 00fc 3B       		.uleb128 0x3b
 3773 00fd 0B       		.uleb128 0xb
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccTqmdk2.s 			page 93


 3774 00fe 49       		.uleb128 0x49
 3775 00ff 13       		.uleb128 0x13
 3776 0100 02       		.uleb128 0x2
 3777 0101 18       		.uleb128 0x18
 3778 0102 00       		.byte	0
 3779 0103 00       		.byte	0
 3780 0104 14       		.uleb128 0x14
 3781 0105 2E       		.uleb128 0x2e
 3782 0106 01       		.byte	0x1
 3783 0107 3F       		.uleb128 0x3f
 3784 0108 19       		.uleb128 0x19
 3785 0109 03       		.uleb128 0x3
 3786 010a 0E       		.uleb128 0xe
 3787 010b 3A       		.uleb128 0x3a
 3788 010c 0B       		.uleb128 0xb
 3789 010d 3B       		.uleb128 0x3b
 3790 010e 05       		.uleb128 0x5
 3791 010f 27       		.uleb128 0x27
 3792 0110 19       		.uleb128 0x19
 3793 0111 11       		.uleb128 0x11
 3794 0112 01       		.uleb128 0x1
 3795 0113 12       		.uleb128 0x12
 3796 0114 06       		.uleb128 0x6
 3797 0115 40       		.uleb128 0x40
 3798 0116 18       		.uleb128 0x18
 3799 0117 9642     		.uleb128 0x2116
 3800 0119 19       		.uleb128 0x19
 3801 011a 01       		.uleb128 0x1
 3802 011b 13       		.uleb128 0x13
 3803 011c 00       		.byte	0
 3804 011d 00       		.byte	0
 3805 011e 15       		.uleb128 0x15
 3806 011f 05       		.uleb128 0x5
 3807 0120 00       		.byte	0
 3808 0121 03       		.uleb128 0x3
 3809 0122 0E       		.uleb128 0xe
 3810 0123 3A       		.uleb128 0x3a
 3811 0124 0B       		.uleb128 0xb
 3812 0125 3B       		.uleb128 0x3b
 3813 0126 05       		.uleb128 0x5
 3814 0127 49       		.uleb128 0x49
 3815 0128 13       		.uleb128 0x13
 3816 0129 02       		.uleb128 0x2
 3817 012a 18       		.uleb128 0x18
 3818 012b 00       		.byte	0
 3819 012c 00       		.byte	0
 3820 012d 16       		.uleb128 0x16
 3821 012e 34       		.uleb128 0x34
 3822 012f 00       		.byte	0
 3823 0130 03       		.uleb128 0x3
 3824 0131 0E       		.uleb128 0xe
 3825 0132 3A       		.uleb128 0x3a
 3826 0133 0B       		.uleb128 0xb
 3827 0134 3B       		.uleb128 0x3b
 3828 0135 05       		.uleb128 0x5
 3829 0136 49       		.uleb128 0x49
 3830 0137 13       		.uleb128 0x13
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccTqmdk2.s 			page 94


 3831 0138 02       		.uleb128 0x2
 3832 0139 18       		.uleb128 0x18
 3833 013a 00       		.byte	0
 3834 013b 00       		.byte	0
 3835 013c 17       		.uleb128 0x17
 3836 013d 2E       		.uleb128 0x2e
 3837 013e 01       		.byte	0x1
 3838 013f 3F       		.uleb128 0x3f
 3839 0140 19       		.uleb128 0x19
 3840 0141 03       		.uleb128 0x3
 3841 0142 0E       		.uleb128 0xe
 3842 0143 3A       		.uleb128 0x3a
 3843 0144 0B       		.uleb128 0xb
 3844 0145 3B       		.uleb128 0x3b
 3845 0146 05       		.uleb128 0x5
 3846 0147 27       		.uleb128 0x27
 3847 0148 19       		.uleb128 0x19
 3848 0149 49       		.uleb128 0x49
 3849 014a 13       		.uleb128 0x13
 3850 014b 11       		.uleb128 0x11
 3851 014c 01       		.uleb128 0x1
 3852 014d 12       		.uleb128 0x12
 3853 014e 06       		.uleb128 0x6
 3854 014f 40       		.uleb128 0x40
 3855 0150 18       		.uleb128 0x18
 3856 0151 9642     		.uleb128 0x2116
 3857 0153 19       		.uleb128 0x19
 3858 0154 01       		.uleb128 0x1
 3859 0155 13       		.uleb128 0x13
 3860 0156 00       		.byte	0
 3861 0157 00       		.byte	0
 3862 0158 18       		.uleb128 0x18
 3863 0159 26       		.uleb128 0x26
 3864 015a 00       		.byte	0
 3865 015b 49       		.uleb128 0x49
 3866 015c 13       		.uleb128 0x13
 3867 015d 00       		.byte	0
 3868 015e 00       		.byte	0
 3869 015f 19       		.uleb128 0x19
 3870 0160 2E       		.uleb128 0x2e
 3871 0161 01       		.byte	0x1
 3872 0162 3F       		.uleb128 0x3f
 3873 0163 19       		.uleb128 0x19
 3874 0164 03       		.uleb128 0x3
 3875 0165 0E       		.uleb128 0xe
 3876 0166 3A       		.uleb128 0x3a
 3877 0167 0B       		.uleb128 0xb
 3878 0168 3B       		.uleb128 0x3b
 3879 0169 05       		.uleb128 0x5
 3880 016a 27       		.uleb128 0x27
 3881 016b 19       		.uleb128 0x19
 3882 016c 49       		.uleb128 0x49
 3883 016d 13       		.uleb128 0x13
 3884 016e 11       		.uleb128 0x11
 3885 016f 01       		.uleb128 0x1
 3886 0170 12       		.uleb128 0x12
 3887 0171 06       		.uleb128 0x6
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccTqmdk2.s 			page 95


 3888 0172 40       		.uleb128 0x40
 3889 0173 18       		.uleb128 0x18
 3890 0174 9742     		.uleb128 0x2117
 3891 0176 19       		.uleb128 0x19
 3892 0177 01       		.uleb128 0x1
 3893 0178 13       		.uleb128 0x13
 3894 0179 00       		.byte	0
 3895 017a 00       		.byte	0
 3896 017b 1A       		.uleb128 0x1a
 3897 017c 26       		.uleb128 0x26
 3898 017d 00       		.byte	0
 3899 017e 00       		.byte	0
 3900 017f 00       		.byte	0
 3901 0180 1B       		.uleb128 0x1b
 3902 0181 0B       		.uleb128 0xb
 3903 0182 01       		.byte	0x1
 3904 0183 11       		.uleb128 0x11
 3905 0184 01       		.uleb128 0x1
 3906 0185 12       		.uleb128 0x12
 3907 0186 06       		.uleb128 0x6
 3908 0187 00       		.byte	0
 3909 0188 00       		.byte	0
 3910 0189 1C       		.uleb128 0x1c
 3911 018a 1D       		.uleb128 0x1d
 3912 018b 01       		.byte	0x1
 3913 018c 31       		.uleb128 0x31
 3914 018d 13       		.uleb128 0x13
 3915 018e 11       		.uleb128 0x11
 3916 018f 01       		.uleb128 0x1
 3917 0190 12       		.uleb128 0x12
 3918 0191 06       		.uleb128 0x6
 3919 0192 58       		.uleb128 0x58
 3920 0193 0B       		.uleb128 0xb
 3921 0194 59       		.uleb128 0x59
 3922 0195 05       		.uleb128 0x5
 3923 0196 01       		.uleb128 0x1
 3924 0197 13       		.uleb128 0x13
 3925 0198 00       		.byte	0
 3926 0199 00       		.byte	0
 3927 019a 1D       		.uleb128 0x1d
 3928 019b 34       		.uleb128 0x34
 3929 019c 00       		.byte	0
 3930 019d 31       		.uleb128 0x31
 3931 019e 13       		.uleb128 0x13
 3932 019f 02       		.uleb128 0x2
 3933 01a0 18       		.uleb128 0x18
 3934 01a1 00       		.byte	0
 3935 01a2 00       		.byte	0
 3936 01a3 1E       		.uleb128 0x1e
 3937 01a4 1D       		.uleb128 0x1d
 3938 01a5 01       		.byte	0x1
 3939 01a6 31       		.uleb128 0x31
 3940 01a7 13       		.uleb128 0x13
 3941 01a8 11       		.uleb128 0x11
 3942 01a9 01       		.uleb128 0x1
 3943 01aa 12       		.uleb128 0x12
 3944 01ab 06       		.uleb128 0x6
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccTqmdk2.s 			page 96


 3945 01ac 58       		.uleb128 0x58
 3946 01ad 0B       		.uleb128 0xb
 3947 01ae 59       		.uleb128 0x59
 3948 01af 05       		.uleb128 0x5
 3949 01b0 00       		.byte	0
 3950 01b1 00       		.byte	0
 3951 01b2 1F       		.uleb128 0x1f
 3952 01b3 05       		.uleb128 0x5
 3953 01b4 00       		.byte	0
 3954 01b5 31       		.uleb128 0x31
 3955 01b6 13       		.uleb128 0x13
 3956 01b7 02       		.uleb128 0x2
 3957 01b8 18       		.uleb128 0x18
 3958 01b9 00       		.byte	0
 3959 01ba 00       		.byte	0
 3960 01bb 20       		.uleb128 0x20
 3961 01bc 2E       		.uleb128 0x2e
 3962 01bd 01       		.byte	0x1
 3963 01be 03       		.uleb128 0x3
 3964 01bf 0E       		.uleb128 0xe
 3965 01c0 3A       		.uleb128 0x3a
 3966 01c1 0B       		.uleb128 0xb
 3967 01c2 3B       		.uleb128 0x3b
 3968 01c3 05       		.uleb128 0x5
 3969 01c4 27       		.uleb128 0x27
 3970 01c5 19       		.uleb128 0x19
 3971 01c6 49       		.uleb128 0x49
 3972 01c7 13       		.uleb128 0x13
 3973 01c8 11       		.uleb128 0x11
 3974 01c9 01       		.uleb128 0x1
 3975 01ca 12       		.uleb128 0x12
 3976 01cb 06       		.uleb128 0x6
 3977 01cc 40       		.uleb128 0x40
 3978 01cd 18       		.uleb128 0x18
 3979 01ce 9642     		.uleb128 0x2116
 3980 01d0 19       		.uleb128 0x19
 3981 01d1 01       		.uleb128 0x1
 3982 01d2 13       		.uleb128 0x13
 3983 01d3 00       		.byte	0
 3984 01d4 00       		.byte	0
 3985 01d5 21       		.uleb128 0x21
 3986 01d6 2E       		.uleb128 0x2e
 3987 01d7 01       		.byte	0x1
 3988 01d8 03       		.uleb128 0x3
 3989 01d9 0E       		.uleb128 0xe
 3990 01da 3A       		.uleb128 0x3a
 3991 01db 0B       		.uleb128 0xb
 3992 01dc 3B       		.uleb128 0x3b
 3993 01dd 05       		.uleb128 0x5
 3994 01de 27       		.uleb128 0x27
 3995 01df 19       		.uleb128 0x19
 3996 01e0 49       		.uleb128 0x49
 3997 01e1 13       		.uleb128 0x13
 3998 01e2 11       		.uleb128 0x11
 3999 01e3 01       		.uleb128 0x1
 4000 01e4 12       		.uleb128 0x12
 4001 01e5 06       		.uleb128 0x6
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccTqmdk2.s 			page 97


 4002 01e6 40       		.uleb128 0x40
 4003 01e7 18       		.uleb128 0x18
 4004 01e8 9742     		.uleb128 0x2117
 4005 01ea 19       		.uleb128 0x19
 4006 01eb 01       		.uleb128 0x1
 4007 01ec 13       		.uleb128 0x13
 4008 01ed 00       		.byte	0
 4009 01ee 00       		.byte	0
 4010 01ef 22       		.uleb128 0x22
 4011 01f0 2E       		.uleb128 0x2e
 4012 01f1 01       		.byte	0x1
 4013 01f2 03       		.uleb128 0x3
 4014 01f3 0E       		.uleb128 0xe
 4015 01f4 3A       		.uleb128 0x3a
 4016 01f5 0B       		.uleb128 0xb
 4017 01f6 3B       		.uleb128 0x3b
 4018 01f7 05       		.uleb128 0x5
 4019 01f8 27       		.uleb128 0x27
 4020 01f9 19       		.uleb128 0x19
 4021 01fa 11       		.uleb128 0x11
 4022 01fb 01       		.uleb128 0x1
 4023 01fc 12       		.uleb128 0x12
 4024 01fd 06       		.uleb128 0x6
 4025 01fe 40       		.uleb128 0x40
 4026 01ff 18       		.uleb128 0x18
 4027 0200 9642     		.uleb128 0x2116
 4028 0202 19       		.uleb128 0x19
 4029 0203 01       		.uleb128 0x1
 4030 0204 13       		.uleb128 0x13
 4031 0205 00       		.byte	0
 4032 0206 00       		.byte	0
 4033 0207 23       		.uleb128 0x23
 4034 0208 34       		.uleb128 0x34
 4035 0209 00       		.byte	0
 4036 020a 03       		.uleb128 0x3
 4037 020b 0E       		.uleb128 0xe
 4038 020c 3A       		.uleb128 0x3a
 4039 020d 0B       		.uleb128 0xb
 4040 020e 3B       		.uleb128 0x3b
 4041 020f 05       		.uleb128 0x5
 4042 0210 49       		.uleb128 0x49
 4043 0211 13       		.uleb128 0x13
 4044 0212 3F       		.uleb128 0x3f
 4045 0213 19       		.uleb128 0x19
 4046 0214 3C       		.uleb128 0x3c
 4047 0215 19       		.uleb128 0x19
 4048 0216 00       		.byte	0
 4049 0217 00       		.byte	0
 4050 0218 00       		.byte	0
 4051              		.section	.debug_aranges,"",%progbits
 4052 0000 BC000000 		.4byte	0xbc
 4053 0004 0200     		.2byte	0x2
 4054 0006 00000000 		.4byte	.Ldebug_info0
 4055 000a 04       		.byte	0x4
 4056 000b 00       		.byte	0
 4057 000c 0000     		.2byte	0
 4058 000e 0000     		.2byte	0
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccTqmdk2.s 			page 98


 4059 0010 00000000 		.4byte	.LFB68
 4060 0014 5C000000 		.4byte	.LFE68-.LFB68
 4061 0018 00000000 		.4byte	.LFB69
 4062 001c 32000000 		.4byte	.LFE69-.LFB69
 4063 0020 00000000 		.4byte	.LFB70
 4064 0024 50000000 		.4byte	.LFE70-.LFB70
 4065 0028 00000000 		.4byte	.LFB71
 4066 002c 3E000000 		.4byte	.LFE71-.LFB71
 4067 0030 00000000 		.4byte	.LFB72
 4068 0034 48000000 		.4byte	.LFE72-.LFB72
 4069 0038 00000000 		.4byte	.LFB73
 4070 003c 1E000000 		.4byte	.LFE73-.LFB73
 4071 0040 00000000 		.4byte	.LFB74
 4072 0044 F6000000 		.4byte	.LFE74-.LFB74
 4073 0048 00000000 		.4byte	.LFB75
 4074 004c A8000000 		.4byte	.LFE75-.LFB75
 4075 0050 00000000 		.4byte	.LFB76
 4076 0054 7A000000 		.4byte	.LFE76-.LFB76
 4077 0058 00000000 		.4byte	.LFB77
 4078 005c D4000000 		.4byte	.LFE77-.LFB77
 4079 0060 00000000 		.4byte	.LFB78
 4080 0064 5A000000 		.4byte	.LFE78-.LFB78
 4081 0068 00000000 		.4byte	.LFB79
 4082 006c A4000000 		.4byte	.LFE79-.LFB79
 4083 0070 00000000 		.4byte	.LFB80
 4084 0074 64000000 		.4byte	.LFE80-.LFB80
 4085 0078 00000000 		.4byte	.LFB81
 4086 007c 32000000 		.4byte	.LFE81-.LFB81
 4087 0080 00000000 		.4byte	.LFB82
 4088 0084 44000000 		.4byte	.LFE82-.LFB82
 4089 0088 00000000 		.4byte	.LFB83
 4090 008c 68000000 		.4byte	.LFE83-.LFB83
 4091 0090 00000000 		.4byte	.LFB84
 4092 0094 68000000 		.4byte	.LFE84-.LFB84
 4093 0098 00000000 		.4byte	.LFB85
 4094 009c 80000000 		.4byte	.LFE85-.LFB85
 4095 00a0 00000000 		.4byte	.LFB86
 4096 00a4 94000000 		.4byte	.LFE86-.LFB86
 4097 00a8 00000000 		.4byte	.LFB87
 4098 00ac 3E000000 		.4byte	.LFE87-.LFB87
 4099 00b0 00000000 		.4byte	.LFB88
 4100 00b4 38000000 		.4byte	.LFE88-.LFB88
 4101 00b8 00000000 		.4byte	0
 4102 00bc 00000000 		.4byte	0
 4103              		.section	.debug_ranges,"",%progbits
 4104              	.Ldebug_ranges0:
 4105 0000 00000000 		.4byte	.LFB68
 4106 0004 5C000000 		.4byte	.LFE68
 4107 0008 00000000 		.4byte	.LFB69
 4108 000c 32000000 		.4byte	.LFE69
 4109 0010 00000000 		.4byte	.LFB70
 4110 0014 50000000 		.4byte	.LFE70
 4111 0018 00000000 		.4byte	.LFB71
 4112 001c 3E000000 		.4byte	.LFE71
 4113 0020 00000000 		.4byte	.LFB72
 4114 0024 48000000 		.4byte	.LFE72
 4115 0028 00000000 		.4byte	.LFB73
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccTqmdk2.s 			page 99


 4116 002c 1E000000 		.4byte	.LFE73
 4117 0030 00000000 		.4byte	.LFB74
 4118 0034 F6000000 		.4byte	.LFE74
 4119 0038 00000000 		.4byte	.LFB75
 4120 003c A8000000 		.4byte	.LFE75
 4121 0040 00000000 		.4byte	.LFB76
 4122 0044 7A000000 		.4byte	.LFE76
 4123 0048 00000000 		.4byte	.LFB77
 4124 004c D4000000 		.4byte	.LFE77
 4125 0050 00000000 		.4byte	.LFB78
 4126 0054 5A000000 		.4byte	.LFE78
 4127 0058 00000000 		.4byte	.LFB79
 4128 005c A4000000 		.4byte	.LFE79
 4129 0060 00000000 		.4byte	.LFB80
 4130 0064 64000000 		.4byte	.LFE80
 4131 0068 00000000 		.4byte	.LFB81
 4132 006c 32000000 		.4byte	.LFE81
 4133 0070 00000000 		.4byte	.LFB82
 4134 0074 44000000 		.4byte	.LFE82
 4135 0078 00000000 		.4byte	.LFB83
 4136 007c 68000000 		.4byte	.LFE83
 4137 0080 00000000 		.4byte	.LFB84
 4138 0084 68000000 		.4byte	.LFE84
 4139 0088 00000000 		.4byte	.LFB85
 4140 008c 80000000 		.4byte	.LFE85
 4141 0090 00000000 		.4byte	.LFB86
 4142 0094 94000000 		.4byte	.LFE86
 4143 0098 00000000 		.4byte	.LFB87
 4144 009c 3E000000 		.4byte	.LFE87
 4145 00a0 00000000 		.4byte	.LFB88
 4146 00a4 38000000 		.4byte	.LFE88
 4147 00a8 00000000 		.4byte	0
 4148 00ac 00000000 		.4byte	0
 4149              		.section	.debug_line,"",%progbits
 4150              	.Ldebug_line0:
 4151 0000 1A050000 		.section	.debug_str,"MS",%progbits,1
 4151      02002C02 
 4151      00000201 
 4151      FB0E0D00 
 4151      01010101 
 4152              	.LASF69:
 4153 0000 7853686F 		.ascii	"xShouldWrite\000"
 4153      756C6457 
 4153      72697465 
 4153      00
 4154              	.LASF72:
 4155 000d 78427566 		.ascii	"xBufferLengthBytes\000"
 4155      6665724C 
 4155      656E6774 
 4155      68427974 
 4155      657300
 4156              	.LASF45:
 4157 0020 756C4F72 		.ascii	"ulOriginalBASEPRI\000"
 4157      6967696E 
 4157      616C4241 
 4157      53455052 
 4157      4900
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccTqmdk2.s 			page 100


 4158              	.LASF25:
 4159 0032 654E6F41 		.ascii	"eNoAction\000"
 4159      6374696F 
 4159      6E00
 4160              	.LASF52:
 4161 003c 78537472 		.ascii	"xStreamBufferGenericCreate\000"
 4161      65616D42 
 4161      75666665 
 4161      7247656E 
 4161      65726963 
 4162              	.LASF46:
 4163 0057 756C4E65 		.ascii	"ulNewBASEPRI\000"
 4163      77424153 
 4163      45505249 
 4163      00
 4164              	.LASF90:
 4165 0064 78436F75 		.ascii	"xCount\000"
 4165      6E7400
 4166              	.LASF104:
 4167 006b 76537472 		.ascii	"vStreamBufferDelete\000"
 4167      65616D42 
 4167      75666665 
 4167      7244656C 
 4167      65746500 
 4168              	.LASF34:
 4169 007f 7854494D 		.ascii	"xTIME_OUT\000"
 4169      455F4F55 
 4169      5400
 4170              	.LASF70:
 4171 0089 78537472 		.ascii	"xStreamBufferReceive\000"
 4171      65616D42 
 4171      75666665 
 4171      72526563 
 4171      65697665 
 4172              	.LASF35:
 4173 009e 53747265 		.ascii	"StreamBufferDef_t\000"
 4173      616D4275 
 4173      66666572 
 4173      4465665F 
 4173      7400
 4174              	.LASF32:
 4175 00b0 54696D65 		.ascii	"TimeOut_t\000"
 4175      4F75745F 
 4175      7400
 4176              	.LASF2:
 4177 00ba 73686F72 		.ascii	"short int\000"
 4177      7420696E 
 4177      7400
 4178              	.LASF15:
 4179 00c4 73697A65 		.ascii	"size_t\000"
 4179      5F7400
 4180              	.LASF17:
 4181 00cb 73697A65 		.ascii	"sizetype\000"
 4181      74797065 
 4181      00
 4182              	.LASF93:
 4183 00d4 70727652 		.ascii	"prvReadBytesFromBuffer\000"
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccTqmdk2.s 			page 101


 4183      65616442 
 4183      79746573 
 4183      46726F6D 
 4183      42756666 
 4184              	.LASF24:
 4185 00eb 5461736B 		.ascii	"TaskHandle_t\000"
 4185      48616E64 
 4185      6C655F74 
 4185      00
 4186              	.LASF87:
 4187 00f8 78537472 		.ascii	"xStreamBufferReceiveCompletedFromISR\000"
 4187      65616D42 
 4187      75666665 
 4187      72526563 
 4187      65697665 
 4188              	.LASF74:
 4189 011d 78427974 		.ascii	"xBytesAvailable\000"
 4189      65734176 
 4189      61696C61 
 4189      626C6500 
 4190              	.LASF98:
 4191 012d 536F7572 		.ascii	"Source\\stream_buffer.c\000"
 4191      63655C73 
 4191      74726561 
 4191      6D5F6275 
 4191      66666572 
 4192              	.LASF97:
 4193 0144 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 4193      43313120 
 4193      352E342E 
 4193      31203230 
 4193      31363036 
 4194 0177 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 4194      20726576 
 4194      6973696F 
 4194      6E203233 
 4194      37373135 
 4195 01aa 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 4195      66756E63 
 4195      74696F6E 
 4195      2D736563 
 4195      74696F6E 
 4196              	.LASF82:
 4197 01d2 784E6578 		.ascii	"xNextMessageLength\000"
 4197      744D6573 
 4197      73616765 
 4197      4C656E67 
 4197      746800
 4198              	.LASF91:
 4199 01e5 784E6578 		.ascii	"xNextHead\000"
 4199      74486561 
 4199      6400
 4200              	.LASF7:
 4201 01ef 5F5F7569 		.ascii	"__uint32_t\000"
 4201      6E743332 
 4201      5F7400
 4202              	.LASF62:
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccTqmdk2.s 			page 102


 4203 01fa 78446174 		.ascii	"xDataLengthBytes\000"
 4203      614C656E 
 4203      67746842 
 4203      79746573 
 4203      00
 4204              	.LASF42:
 4205 020b 70756342 		.ascii	"pucBuffer\000"
 4205      75666665 
 4205      7200
 4206              	.LASF92:
 4207 0215 78466972 		.ascii	"xFirstLength\000"
 4207      73744C65 
 4207      6E677468 
 4207      00
 4208              	.LASF63:
 4209 0222 78546963 		.ascii	"xTicksToWait\000"
 4209      6B73546F 
 4209      57616974 
 4209      00
 4210              	.LASF65:
 4211 022f 7854696D 		.ascii	"xTimeOut\000"
 4211      654F7574 
 4211      00
 4212              	.LASF12:
 4213 0238 75696E74 		.ascii	"uint8_t\000"
 4213      385F7400 
 4214              	.LASF73:
 4215 0240 78526563 		.ascii	"xReceivedLength\000"
 4215      65697665 
 4215      644C656E 
 4215      67746800 
 4216              	.LASF94:
 4217 0250 784D6178 		.ascii	"xMaxCount\000"
 4217      436F756E 
 4217      7400
 4218              	.LASF101:
 4219 025a 756C506F 		.ascii	"ulPortRaiseBASEPRI\000"
 4219      72745261 
 4219      69736542 
 4219      41534550 
 4219      524900
 4220              	.LASF26:
 4221 026d 65536574 		.ascii	"eSetBits\000"
 4221      42697473 
 4221      00
 4222              	.LASF50:
 4223 0276 78537472 		.ascii	"xStreamBuffer\000"
 4223      65616D42 
 4223      75666665 
 4223      7200
 4224              	.LASF19:
 4225 0284 666C6F61 		.ascii	"float\000"
 4225      7400
 4226              	.LASF99:
 4227 028a 433A5C43 		.ascii	"C:\\Code\\P4\\P4_Vertical_farm\\RTOS_TEMPLATE-maste"
 4227      6F64655C 
 4227      50345C50 
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccTqmdk2.s 			page 103


 4227      345F5665 
 4227      72746963 
 4228 02b9 725C506C 		.ascii	"r\\PlanteModul.cydsn\000"
 4228      616E7465 
 4228      4D6F6475 
 4228      6C2E6379 
 4228      64736E00 
 4229              	.LASF9:
 4230 02cd 6C6F6E67 		.ascii	"long long int\000"
 4230      206C6F6E 
 4230      6720696E 
 4230      7400
 4231              	.LASF64:
 4232 02db 78526571 		.ascii	"xRequiredSpace\000"
 4232      75697265 
 4232      64537061 
 4232      636500
 4233              	.LASF79:
 4234 02ea 78537472 		.ascii	"xStreamBufferReceiveFromISR\000"
 4234      65616D42 
 4234      75666665 
 4234      72526563 
 4234      65697665 
 4235              	.LASF85:
 4236 0306 78537472 		.ascii	"xStreamBufferIsFull\000"
 4236      65616D42 
 4236      75666665 
 4236      72497346 
 4236      756C6C00 
 4237              	.LASF6:
 4238 031a 6C6F6E67 		.ascii	"long int\000"
 4238      20696E74 
 4238      00
 4239              	.LASF56:
 4240 0323 78547269 		.ascii	"xTriggerLevel\000"
 4240      67676572 
 4240      4C657665 
 4240      6C00
 4241              	.LASF84:
 4242 0331 78537472 		.ascii	"xStreamBufferIsEmpty\000"
 4242      65616D42 
 4242      75666665 
 4242      72497345 
 4242      6D707479 
 4243              	.LASF100:
 4244 0346 74736B54 		.ascii	"tskTaskControlBlock\000"
 4244      61736B43 
 4244      6F6E7472 
 4244      6F6C426C 
 4244      6F636B00 
 4245              	.LASF78:
 4246 035a 7854656D 		.ascii	"xTempReturn\000"
 4246      70526574 
 4246      75726E00 
 4247              	.LASF49:
 4248 0366 70756341 		.ascii	"pucAllocatedMemory\000"
 4248      6C6C6F63 
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccTqmdk2.s 			page 104


 4248      61746564 
 4248      4D656D6F 
 4248      727900
 4249              	.LASF51:
 4250 0379 70785374 		.ascii	"pxStreamBuffer\000"
 4250      7265616D 
 4250      42756666 
 4250      657200
 4251              	.LASF80:
 4252 0388 70727657 		.ascii	"prvWriteMessageToBuffer\000"
 4252      72697465 
 4252      4D657373 
 4252      61676554 
 4252      6F427566 
 4253              	.LASF71:
 4254 03a0 70765278 		.ascii	"pvRxData\000"
 4254      44617461 
 4254      00
 4255              	.LASF16:
 4256 03a9 6C6F6E67 		.ascii	"long double\000"
 4256      20646F75 
 4256      626C6500 
 4257              	.LASF38:
 4258 03b5 784C656E 		.ascii	"xLength\000"
 4258      67746800 
 4259              	.LASF1:
 4260 03bd 756E7369 		.ascii	"unsigned char\000"
 4260      676E6564 
 4260      20636861 
 4260      7200
 4261              	.LASF31:
 4262 03cb 7854696D 		.ascii	"xTimeOnEntering\000"
 4262      654F6E45 
 4262      6E746572 
 4262      696E6700 
 4263              	.LASF47:
 4264 03db 78427566 		.ascii	"xBufferSizeBytes\000"
 4264      66657253 
 4264      697A6542 
 4264      79746573 
 4264      00
 4265              	.LASF30:
 4266 03ec 784F7665 		.ascii	"xOverflowCount\000"
 4266      72666C6F 
 4266      77436F75 
 4266      6E7400
 4267              	.LASF55:
 4268 03fb 78537472 		.ascii	"xStreamBufferSetTriggerLevel\000"
 4268      65616D42 
 4268      75666665 
 4268      72536574 
 4268      54726967 
 4269              	.LASF40:
 4270 0418 78546173 		.ascii	"xTaskWaitingToReceive\000"
 4270      6B576169 
 4270      74696E67 
 4270      546F5265 
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccTqmdk2.s 			page 105


 4270      63656976 
 4271              	.LASF0:
 4272 042e 7369676E 		.ascii	"signed char\000"
 4272      65642063 
 4272      68617200 
 4273              	.LASF57:
 4274 043a 78537472 		.ascii	"xStreamBufferSpacesAvailable\000"
 4274      65616D42 
 4274      75666665 
 4274      72537061 
 4274      63657341 
 4275              	.LASF10:
 4276 0457 6C6F6E67 		.ascii	"long long unsigned int\000"
 4276      206C6F6E 
 4276      6720756E 
 4276      7369676E 
 4276      65642069 
 4277              	.LASF81:
 4278 046e 70727652 		.ascii	"prvReadMessageFromBuffer\000"
 4278      6561644D 
 4278      65737361 
 4278      67654672 
 4278      6F6D4275 
 4279              	.LASF14:
 4280 0487 75696E74 		.ascii	"uint32_t\000"
 4280      33325F74 
 4280      00
 4281              	.LASF66:
 4282 0490 78537472 		.ascii	"xStreamBufferSendFromISR\000"
 4282      65616D42 
 4282      75666665 
 4282      7253656E 
 4282      6446726F 
 4283              	.LASF11:
 4284 04a9 756E7369 		.ascii	"unsigned int\000"
 4284      676E6564 
 4284      20696E74 
 4284      00
 4285              	.LASF21:
 4286 04b6 42617365 		.ascii	"BaseType_t\000"
 4286      54797065 
 4286      5F7400
 4287              	.LASF43:
 4288 04c1 7563466C 		.ascii	"ucFlags\000"
 4288      61677300 
 4289              	.LASF60:
 4290 04c9 78537472 		.ascii	"xStreamBufferSend\000"
 4290      65616D42 
 4290      75666665 
 4290      7253656E 
 4290      6400
 4291              	.LASF23:
 4292 04db 5469636B 		.ascii	"TickType_t\000"
 4292      54797065 
 4292      5F7400
 4293              	.LASF3:
 4294 04e6 73686F72 		.ascii	"short unsigned int\000"
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccTqmdk2.s 			page 106


 4294      7420756E 
 4294      7369676E 
 4294      65642069 
 4294      6E7400
 4295              	.LASF103:
 4296 04f9 756C4E65 		.ascii	"ulNewMaskValue\000"
 4296      774D6173 
 4296      6B56616C 
 4296      756500
 4297              	.LASF102:
 4298 0508 76506F72 		.ascii	"vPortSetBASEPRI\000"
 4298      74536574 
 4298      42415345 
 4298      50524900 
 4299              	.LASF18:
 4300 0518 63686172 		.ascii	"char\000"
 4300      00
 4301              	.LASF28:
 4302 051d 65536574 		.ascii	"eSetValueWithOverwrite\000"
 4302      56616C75 
 4302      65576974 
 4302      684F7665 
 4302      72777269 
 4303              	.LASF13:
 4304 0534 696E7433 		.ascii	"int32_t\000"
 4304      325F7400 
 4305              	.LASF48:
 4306 053c 7849734D 		.ascii	"xIsMessageBuffer\000"
 4306      65737361 
 4306      67654275 
 4306      66666572 
 4306      00
 4307              	.LASF83:
 4308 054d 7854656D 		.ascii	"xTempNextMessageLength\000"
 4308      704E6578 
 4308      744D6573 
 4308      73616765 
 4308      4C656E67 
 4309              	.LASF96:
 4310 0564 70727642 		.ascii	"prvBytesInBuffer\000"
 4310      79746573 
 4310      496E4275 
 4310      66666572 
 4310      00
 4311              	.LASF39:
 4312 0575 78547269 		.ascii	"xTriggerLevelBytes\000"
 4312      67676572 
 4312      4C657665 
 4312      6C427974 
 4312      657300
 4313              	.LASF58:
 4314 0588 78537061 		.ascii	"xSpace\000"
 4314      636500
 4315              	.LASF53:
 4316 058f 78537472 		.ascii	"xStreamBufferReset\000"
 4316      65616D42 
 4316      75666665 
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccTqmdk2.s 			page 107


 4316      72526573 
 4316      657400
 4317              	.LASF8:
 4318 05a2 6C6F6E67 		.ascii	"long unsigned int\000"
 4318      20756E73 
 4318      69676E65 
 4318      6420696E 
 4318      7400
 4319              	.LASF75:
 4320 05b4 78427974 		.ascii	"xBytesToStoreMessageLength\000"
 4320      6573546F 
 4320      53746F72 
 4320      654D6573 
 4320      73616765 
 4321              	.LASF22:
 4322 05cf 55426173 		.ascii	"UBaseType_t\000"
 4322      65547970 
 4322      655F7400 
 4323              	.LASF88:
 4324 05db 70727657 		.ascii	"prvWriteBytesToBuffer\000"
 4324      72697465 
 4324      42797465 
 4324      73546F42 
 4324      75666665 
 4325              	.LASF36:
 4326 05f1 78546169 		.ascii	"xTail\000"
 4326      6C00
 4327              	.LASF86:
 4328 05f7 78537472 		.ascii	"xStreamBufferSendCompletedFromISR\000"
 4328      65616D42 
 4328      75666665 
 4328      7253656E 
 4328      64436F6D 
 4329              	.LASF76:
 4330 0619 78537472 		.ascii	"xStreamBufferNextMessageLengthBytes\000"
 4330      65616D42 
 4330      75666665 
 4330      724E6578 
 4330      744D6573 
 4331              	.LASF29:
 4332 063d 65536574 		.ascii	"eSetValueWithoutOverwrite\000"
 4332      56616C75 
 4332      65576974 
 4332      686F7574 
 4332      4F766572 
 4333              	.LASF5:
 4334 0657 5F5F696E 		.ascii	"__int32_t\000"
 4334      7433325F 
 4334      7400
 4335              	.LASF41:
 4336 0661 78546173 		.ascii	"xTaskWaitingToSend\000"
 4336      6B576169 
 4336      74696E67 
 4336      546F5365 
 4336      6E6400
 4337              	.LASF33:
 4338 0674 53747265 		.ascii	"StreamBufferHandle_t\000"
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccTqmdk2.s 			page 108


 4338      616D4275 
 4338      66666572 
 4338      48616E64 
 4338      6C655F74 
 4339              	.LASF68:
 4340 0689 75785361 		.ascii	"uxSavedInterruptStatus\000"
 4340      76656449 
 4340      6E746572 
 4340      72757074 
 4340      53746174 
 4341              	.LASF54:
 4342 06a0 78526574 		.ascii	"xReturn\000"
 4342      75726E00 
 4343              	.LASF67:
 4344 06a8 70784869 		.ascii	"pxHigherPriorityTaskWoken\000"
 4344      67686572 
 4344      5072696F 
 4344      72697479 
 4344      5461736B 
 4345              	.LASF95:
 4346 06c2 784E6578 		.ascii	"xNextTail\000"
 4346      74546169 
 4346      6C00
 4347              	.LASF37:
 4348 06cc 78486561 		.ascii	"xHead\000"
 4348      6400
 4349              	.LASF20:
 4350 06d2 646F7562 		.ascii	"double\000"
 4350      6C6500
 4351              	.LASF77:
 4352 06d9 784F7269 		.ascii	"xOriginalTail\000"
 4352      67696E61 
 4352      6C546169 
 4352      6C00
 4353              	.LASF106:
 4354 06e7 49544D5F 		.ascii	"ITM_RxBuffer\000"
 4354      52784275 
 4354      66666572 
 4354      00
 4355              	.LASF105:
 4356 06f4 70727649 		.ascii	"prvInitialiseNewStreamBuffer\000"
 4356      6E697469 
 4356      616C6973 
 4356      654E6577 
 4356      53747265 
 4357              	.LASF89:
 4358 0711 70756344 		.ascii	"pucData\000"
 4358      61746100 
 4359              	.LASF59:
 4360 0719 78537472 		.ascii	"xStreamBufferBytesAvailable\000"
 4360      65616D42 
 4360      75666665 
 4360      72427974 
 4360      65734176 
 4361              	.LASF61:
 4362 0735 70765478 		.ascii	"pvTxData\000"
 4362      44617461 
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccTqmdk2.s 			page 109


 4362      00
 4363              	.LASF27:
 4364 073e 65496E63 		.ascii	"eIncrement\000"
 4364      72656D65 
 4364      6E7400
 4365              	.LASF4:
 4366 0749 5F5F7569 		.ascii	"__uint8_t\000"
 4366      6E74385F 
 4366      7400
 4367              	.LASF44:
 4368 0753 53747265 		.ascii	"StreamBuffer_t\000"
 4368      616D4275 
 4368      66666572 
 4368      5F7400
 4369              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
