ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccetyzvX.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"port.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.comm	DS18x8_Sensor,32,4
  20              		.comm	DS18x8_DataReady,1,1
  21              		.data
  22              		.align	2
  23              		.type	uxCriticalNesting, %object
  24              		.size	uxCriticalNesting, 4
  25              	uxCriticalNesting:
  26 0000 AAAAAAAA 		.word	-1431655766
  27              		.section	.text.pxPortInitialiseStack,"ax",%progbits
  28              		.align	2
  29              		.global	pxPortInitialiseStack
  30              		.thumb
  31              		.thumb_func
  32              		.type	pxPortInitialiseStack, %function
  33              	pxPortInitialiseStack:
  34              	.LFB68:
  35              		.file 1 "Source\\portable\\GCC\\ARM_CM3\\port.c"
   1:Source\portable\GCC\ARM_CM3/port.c **** /*
   2:Source\portable\GCC\ARM_CM3/port.c ****  * FreeRTOS Kernel V10.3.1
   3:Source\portable\GCC\ARM_CM3/port.c ****  * Copyright (C) 2020 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:Source\portable\GCC\ARM_CM3/port.c ****  *
   5:Source\portable\GCC\ARM_CM3/port.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:Source\portable\GCC\ARM_CM3/port.c ****  * this software and associated documentation files (the "Software"), to deal in
   7:Source\portable\GCC\ARM_CM3/port.c ****  * the Software without restriction, including without limitation the rights to
   8:Source\portable\GCC\ARM_CM3/port.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:Source\portable\GCC\ARM_CM3/port.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:Source\portable\GCC\ARM_CM3/port.c ****  * subject to the following conditions:
  11:Source\portable\GCC\ARM_CM3/port.c ****  *
  12:Source\portable\GCC\ARM_CM3/port.c ****  * The above copyright notice and this permission notice shall be included in all
  13:Source\portable\GCC\ARM_CM3/port.c ****  * copies or substantial portions of the Software.
  14:Source\portable\GCC\ARM_CM3/port.c ****  *
  15:Source\portable\GCC\ARM_CM3/port.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:Source\portable\GCC\ARM_CM3/port.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:Source\portable\GCC\ARM_CM3/port.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:Source\portable\GCC\ARM_CM3/port.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:Source\portable\GCC\ARM_CM3/port.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:Source\portable\GCC\ARM_CM3/port.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:Source\portable\GCC\ARM_CM3/port.c ****  *
  22:Source\portable\GCC\ARM_CM3/port.c ****  * http://www.FreeRTOS.org
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccetyzvX.s 			page 2


  23:Source\portable\GCC\ARM_CM3/port.c ****  * http://aws.amazon.com/freertos
  24:Source\portable\GCC\ARM_CM3/port.c ****  *
  25:Source\portable\GCC\ARM_CM3/port.c ****  * 1 tab == 4 spaces!
  26:Source\portable\GCC\ARM_CM3/port.c ****  */
  27:Source\portable\GCC\ARM_CM3/port.c **** 
  28:Source\portable\GCC\ARM_CM3/port.c **** /*-----------------------------------------------------------
  29:Source\portable\GCC\ARM_CM3/port.c ****  * Implementation of functions defined in portable.h for the ARM CM3 port.
  30:Source\portable\GCC\ARM_CM3/port.c ****  *----------------------------------------------------------*/
  31:Source\portable\GCC\ARM_CM3/port.c **** 
  32:Source\portable\GCC\ARM_CM3/port.c **** /* Scheduler includes. */
  33:Source\portable\GCC\ARM_CM3/port.c **** #include "FreeRTOS.h"
  34:Source\portable\GCC\ARM_CM3/port.c **** #include "task.h"
  35:Source\portable\GCC\ARM_CM3/port.c **** 
  36:Source\portable\GCC\ARM_CM3/port.c **** /* For backward compatibility, ensure configKERNEL_INTERRUPT_PRIORITY is
  37:Source\portable\GCC\ARM_CM3/port.c **** defined.  The value should also ensure backward compatibility.
  38:Source\portable\GCC\ARM_CM3/port.c **** FreeRTOS.org versions prior to V4.4.0 did not include this definition. */
  39:Source\portable\GCC\ARM_CM3/port.c **** #ifndef configKERNEL_INTERRUPT_PRIORITY
  40:Source\portable\GCC\ARM_CM3/port.c **** 	#define configKERNEL_INTERRUPT_PRIORITY 255
  41:Source\portable\GCC\ARM_CM3/port.c **** #endif
  42:Source\portable\GCC\ARM_CM3/port.c **** 
  43:Source\portable\GCC\ARM_CM3/port.c **** #ifndef configSYSTICK_CLOCK_HZ
  44:Source\portable\GCC\ARM_CM3/port.c **** 	#define configSYSTICK_CLOCK_HZ configCPU_CLOCK_HZ
  45:Source\portable\GCC\ARM_CM3/port.c **** 	/* Ensure the SysTick is clocked at the same frequency as the core. */
  46:Source\portable\GCC\ARM_CM3/port.c **** 	#define portNVIC_SYSTICK_CLK_BIT	( 1UL << 2UL )
  47:Source\portable\GCC\ARM_CM3/port.c **** #else
  48:Source\portable\GCC\ARM_CM3/port.c **** 	/* The way the SysTick is clocked is not modified in case it is not the same
  49:Source\portable\GCC\ARM_CM3/port.c **** 	as the core. */
  50:Source\portable\GCC\ARM_CM3/port.c **** 	#define portNVIC_SYSTICK_CLK_BIT	( 0 )
  51:Source\portable\GCC\ARM_CM3/port.c **** #endif
  52:Source\portable\GCC\ARM_CM3/port.c **** 
  53:Source\portable\GCC\ARM_CM3/port.c **** /* Constants required to manipulate the core.  Registers first... */
  54:Source\portable\GCC\ARM_CM3/port.c **** #define portNVIC_SYSTICK_CTRL_REG			( * ( ( volatile uint32_t * ) 0xe000e010 ) )
  55:Source\portable\GCC\ARM_CM3/port.c **** #define portNVIC_SYSTICK_LOAD_REG			( * ( ( volatile uint32_t * ) 0xe000e014 ) )
  56:Source\portable\GCC\ARM_CM3/port.c **** #define portNVIC_SYSTICK_CURRENT_VALUE_REG	( * ( ( volatile uint32_t * ) 0xe000e018 ) )
  57:Source\portable\GCC\ARM_CM3/port.c **** #define portNVIC_SYSPRI2_REG				( * ( ( volatile uint32_t * ) 0xe000ed20 ) )
  58:Source\portable\GCC\ARM_CM3/port.c **** /* ...then bits in the registers. */
  59:Source\portable\GCC\ARM_CM3/port.c **** #define portNVIC_SYSTICK_INT_BIT			( 1UL << 1UL )
  60:Source\portable\GCC\ARM_CM3/port.c **** #define portNVIC_SYSTICK_ENABLE_BIT			( 1UL << 0UL )
  61:Source\portable\GCC\ARM_CM3/port.c **** #define portNVIC_SYSTICK_COUNT_FLAG_BIT		( 1UL << 16UL )
  62:Source\portable\GCC\ARM_CM3/port.c **** #define portNVIC_PENDSVCLEAR_BIT 			( 1UL << 27UL )
  63:Source\portable\GCC\ARM_CM3/port.c **** #define portNVIC_PEND_SYSTICK_CLEAR_BIT		( 1UL << 25UL )
  64:Source\portable\GCC\ARM_CM3/port.c **** 
  65:Source\portable\GCC\ARM_CM3/port.c **** #define portNVIC_PENDSV_PRI					( ( ( uint32_t ) configKERNEL_INTERRUPT_PRIORITY ) << 16UL )
  66:Source\portable\GCC\ARM_CM3/port.c **** #define portNVIC_SYSTICK_PRI				( ( ( uint32_t ) configKERNEL_INTERRUPT_PRIORITY ) << 24UL )
  67:Source\portable\GCC\ARM_CM3/port.c **** 
  68:Source\portable\GCC\ARM_CM3/port.c **** /* Constants required to check the validity of an interrupt priority. */
  69:Source\portable\GCC\ARM_CM3/port.c **** #define portFIRST_USER_INTERRUPT_NUMBER		( 16 )
  70:Source\portable\GCC\ARM_CM3/port.c **** #define portNVIC_IP_REGISTERS_OFFSET_16 	( 0xE000E3F0 )
  71:Source\portable\GCC\ARM_CM3/port.c **** #define portAIRCR_REG						( * ( ( volatile uint32_t * ) 0xE000ED0C ) )
  72:Source\portable\GCC\ARM_CM3/port.c **** #define portMAX_8_BIT_VALUE					( ( uint8_t ) 0xff )
  73:Source\portable\GCC\ARM_CM3/port.c **** #define portTOP_BIT_OF_BYTE					( ( uint8_t ) 0x80 )
  74:Source\portable\GCC\ARM_CM3/port.c **** #define portMAX_PRIGROUP_BITS				( ( uint8_t ) 7 )
  75:Source\portable\GCC\ARM_CM3/port.c **** #define portPRIORITY_GROUP_MASK				( 0x07UL << 8UL )
  76:Source\portable\GCC\ARM_CM3/port.c **** #define portPRIGROUP_SHIFT					( 8UL )
  77:Source\portable\GCC\ARM_CM3/port.c **** 
  78:Source\portable\GCC\ARM_CM3/port.c **** /* Masks off all bits but the VECTACTIVE bits in the ICSR register. */
  79:Source\portable\GCC\ARM_CM3/port.c **** #define portVECTACTIVE_MASK					( 0xFFUL )
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccetyzvX.s 			page 3


  80:Source\portable\GCC\ARM_CM3/port.c **** 
  81:Source\portable\GCC\ARM_CM3/port.c **** /* Constants required to set up the initial stack. */
  82:Source\portable\GCC\ARM_CM3/port.c **** #define portINITIAL_XPSR					( 0x01000000UL )
  83:Source\portable\GCC\ARM_CM3/port.c **** 
  84:Source\portable\GCC\ARM_CM3/port.c **** /* The systick is a 24-bit counter. */
  85:Source\portable\GCC\ARM_CM3/port.c **** #define portMAX_24_BIT_NUMBER				( 0xffffffUL )
  86:Source\portable\GCC\ARM_CM3/port.c **** 
  87:Source\portable\GCC\ARM_CM3/port.c **** /* A fiddle factor to estimate the number of SysTick counts that would have
  88:Source\portable\GCC\ARM_CM3/port.c **** occurred while the SysTick counter is stopped during tickless idle
  89:Source\portable\GCC\ARM_CM3/port.c **** calculations. */
  90:Source\portable\GCC\ARM_CM3/port.c **** #define portMISSED_COUNTS_FACTOR			( 45UL )
  91:Source\portable\GCC\ARM_CM3/port.c **** 
  92:Source\portable\GCC\ARM_CM3/port.c **** /* For strict compliance with the Cortex-M spec the task start address should
  93:Source\portable\GCC\ARM_CM3/port.c **** have bit-0 clear, as it is loaded into the PC on exit from an ISR. */
  94:Source\portable\GCC\ARM_CM3/port.c **** #define portSTART_ADDRESS_MASK				( ( StackType_t ) 0xfffffffeUL )
  95:Source\portable\GCC\ARM_CM3/port.c **** 
  96:Source\portable\GCC\ARM_CM3/port.c **** /* Let the user override the pre-loading of the initial LR with the address of
  97:Source\portable\GCC\ARM_CM3/port.c **** prvTaskExitError() in case it messes up unwinding of the stack in the
  98:Source\portable\GCC\ARM_CM3/port.c **** debugger. */
  99:Source\portable\GCC\ARM_CM3/port.c **** #ifdef configTASK_RETURN_ADDRESS
 100:Source\portable\GCC\ARM_CM3/port.c **** 	#define portTASK_RETURN_ADDRESS	configTASK_RETURN_ADDRESS
 101:Source\portable\GCC\ARM_CM3/port.c **** #else
 102:Source\portable\GCC\ARM_CM3/port.c **** 	#define portTASK_RETURN_ADDRESS	prvTaskExitError
 103:Source\portable\GCC\ARM_CM3/port.c **** #endif
 104:Source\portable\GCC\ARM_CM3/port.c **** 
 105:Source\portable\GCC\ARM_CM3/port.c **** /*
 106:Source\portable\GCC\ARM_CM3/port.c ****  * Setup the timer to generate the tick interrupts.  The implementation in this
 107:Source\portable\GCC\ARM_CM3/port.c ****  * file is weak to allow application writers to change the timer used to
 108:Source\portable\GCC\ARM_CM3/port.c ****  * generate the tick interrupt.
 109:Source\portable\GCC\ARM_CM3/port.c ****  */
 110:Source\portable\GCC\ARM_CM3/port.c **** void vPortSetupTimerInterrupt( void );
 111:Source\portable\GCC\ARM_CM3/port.c **** 
 112:Source\portable\GCC\ARM_CM3/port.c **** /*
 113:Source\portable\GCC\ARM_CM3/port.c ****  * Exception handlers.
 114:Source\portable\GCC\ARM_CM3/port.c ****  */
 115:Source\portable\GCC\ARM_CM3/port.c **** void xPortPendSVHandler( void ) __attribute__ (( naked ));
 116:Source\portable\GCC\ARM_CM3/port.c **** void xPortSysTickHandler( void );
 117:Source\portable\GCC\ARM_CM3/port.c **** void vPortSVCHandler( void ) __attribute__ (( naked ));
 118:Source\portable\GCC\ARM_CM3/port.c **** 
 119:Source\portable\GCC\ARM_CM3/port.c **** /*
 120:Source\portable\GCC\ARM_CM3/port.c ****  * Start first task is a separate function so it can be tested in isolation.
 121:Source\portable\GCC\ARM_CM3/port.c ****  */
 122:Source\portable\GCC\ARM_CM3/port.c **** static void prvPortStartFirstTask( void ) __attribute__ (( naked ));
 123:Source\portable\GCC\ARM_CM3/port.c **** 
 124:Source\portable\GCC\ARM_CM3/port.c **** /*
 125:Source\portable\GCC\ARM_CM3/port.c ****  * Used to catch tasks that attempt to return from their implementing function.
 126:Source\portable\GCC\ARM_CM3/port.c ****  */
 127:Source\portable\GCC\ARM_CM3/port.c **** static void prvTaskExitError( void );
 128:Source\portable\GCC\ARM_CM3/port.c **** 
 129:Source\portable\GCC\ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 130:Source\portable\GCC\ARM_CM3/port.c **** 
 131:Source\portable\GCC\ARM_CM3/port.c **** /* Each task maintains its own interrupt status in the critical nesting
 132:Source\portable\GCC\ARM_CM3/port.c **** variable. */
 133:Source\portable\GCC\ARM_CM3/port.c **** static UBaseType_t uxCriticalNesting = 0xaaaaaaaa;
 134:Source\portable\GCC\ARM_CM3/port.c **** 
 135:Source\portable\GCC\ARM_CM3/port.c **** /*
 136:Source\portable\GCC\ARM_CM3/port.c ****  * The number of SysTick increments that make up one tick period.
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccetyzvX.s 			page 4


 137:Source\portable\GCC\ARM_CM3/port.c ****  */
 138:Source\portable\GCC\ARM_CM3/port.c **** #if( configUSE_TICKLESS_IDLE == 1 )
 139:Source\portable\GCC\ARM_CM3/port.c **** 	static uint32_t ulTimerCountsForOneTick = 0;
 140:Source\portable\GCC\ARM_CM3/port.c **** #endif /* configUSE_TICKLESS_IDLE */
 141:Source\portable\GCC\ARM_CM3/port.c **** 
 142:Source\portable\GCC\ARM_CM3/port.c **** /*
 143:Source\portable\GCC\ARM_CM3/port.c ****  * The maximum number of tick periods that can be suppressed is limited by the
 144:Source\portable\GCC\ARM_CM3/port.c ****  * 24 bit resolution of the SysTick timer.
 145:Source\portable\GCC\ARM_CM3/port.c ****  */
 146:Source\portable\GCC\ARM_CM3/port.c **** #if( configUSE_TICKLESS_IDLE == 1 )
 147:Source\portable\GCC\ARM_CM3/port.c **** 	static uint32_t xMaximumPossibleSuppressedTicks = 0;
 148:Source\portable\GCC\ARM_CM3/port.c **** #endif /* configUSE_TICKLESS_IDLE */
 149:Source\portable\GCC\ARM_CM3/port.c **** 
 150:Source\portable\GCC\ARM_CM3/port.c **** /*
 151:Source\portable\GCC\ARM_CM3/port.c ****  * Compensate for the CPU cycles that pass while the SysTick is stopped (low
 152:Source\portable\GCC\ARM_CM3/port.c ****  * power functionality only.
 153:Source\portable\GCC\ARM_CM3/port.c ****  */
 154:Source\portable\GCC\ARM_CM3/port.c **** #if( configUSE_TICKLESS_IDLE == 1 )
 155:Source\portable\GCC\ARM_CM3/port.c **** 	static uint32_t ulStoppedTimerCompensation = 0;
 156:Source\portable\GCC\ARM_CM3/port.c **** #endif /* configUSE_TICKLESS_IDLE */
 157:Source\portable\GCC\ARM_CM3/port.c **** 
 158:Source\portable\GCC\ARM_CM3/port.c **** /*
 159:Source\portable\GCC\ARM_CM3/port.c ****  * Used by the portASSERT_IF_INTERRUPT_PRIORITY_INVALID() macro to ensure
 160:Source\portable\GCC\ARM_CM3/port.c ****  * FreeRTOS API functions are not called from interrupts that have been assigned
 161:Source\portable\GCC\ARM_CM3/port.c ****  * a priority above configMAX_SYSCALL_INTERRUPT_PRIORITY.
 162:Source\portable\GCC\ARM_CM3/port.c ****  */
 163:Source\portable\GCC\ARM_CM3/port.c **** #if( configASSERT_DEFINED == 1 )
 164:Source\portable\GCC\ARM_CM3/port.c **** 	 static uint8_t ucMaxSysCallPriority = 0;
 165:Source\portable\GCC\ARM_CM3/port.c **** 	 static uint32_t ulMaxPRIGROUPValue = 0;
 166:Source\portable\GCC\ARM_CM3/port.c **** 	 static const volatile uint8_t * const pcInterruptPriorityRegisters = ( const volatile uint8_t * c
 167:Source\portable\GCC\ARM_CM3/port.c **** #endif /* configASSERT_DEFINED */
 168:Source\portable\GCC\ARM_CM3/port.c **** 
 169:Source\portable\GCC\ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 170:Source\portable\GCC\ARM_CM3/port.c **** 
 171:Source\portable\GCC\ARM_CM3/port.c **** /*
 172:Source\portable\GCC\ARM_CM3/port.c ****  * See header file for description.
 173:Source\portable\GCC\ARM_CM3/port.c ****  */
 174:Source\portable\GCC\ARM_CM3/port.c **** StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParam
 175:Source\portable\GCC\ARM_CM3/port.c **** {
  36              		.loc 1 175 0
  37              		.cfi_startproc
  38              		@ args = 0, pretend = 0, frame = 16
  39              		@ frame_needed = 1, uses_anonymous_args = 0
  40              		@ link register save eliminated.
  41 0000 80B4     		push	{r7}
  42              		.cfi_def_cfa_offset 4
  43              		.cfi_offset 7, -4
  44 0002 85B0     		sub	sp, sp, #20
  45              		.cfi_def_cfa_offset 24
  46 0004 00AF     		add	r7, sp, #0
  47              		.cfi_def_cfa_register 7
  48 0006 F860     		str	r0, [r7, #12]
  49 0008 B960     		str	r1, [r7, #8]
  50 000a 7A60     		str	r2, [r7, #4]
 176:Source\portable\GCC\ARM_CM3/port.c **** 	/* Simulate the stack frame as it would be created by a context switch
 177:Source\portable\GCC\ARM_CM3/port.c **** 	interrupt. */
 178:Source\portable\GCC\ARM_CM3/port.c **** 	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of int
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccetyzvX.s 			page 5


  51              		.loc 1 178 0
  52 000c FB68     		ldr	r3, [r7, #12]
  53 000e 043B     		subs	r3, r3, #4
  54 0010 FB60     		str	r3, [r7, #12]
 179:Source\portable\GCC\ARM_CM3/port.c **** 	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
  55              		.loc 1 179 0
  56 0012 FB68     		ldr	r3, [r7, #12]
  57 0014 4FF08072 		mov	r2, #16777216
  58 0018 1A60     		str	r2, [r3]
 180:Source\portable\GCC\ARM_CM3/port.c **** 	pxTopOfStack--;
  59              		.loc 1 180 0
  60 001a FB68     		ldr	r3, [r7, #12]
  61 001c 043B     		subs	r3, r3, #4
  62 001e FB60     		str	r3, [r7, #12]
 181:Source\portable\GCC\ARM_CM3/port.c **** 	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
  63              		.loc 1 181 0
  64 0020 BB68     		ldr	r3, [r7, #8]
  65 0022 23F00102 		bic	r2, r3, #1
  66 0026 FB68     		ldr	r3, [r7, #12]
  67 0028 1A60     		str	r2, [r3]
 182:Source\portable\GCC\ARM_CM3/port.c **** 	pxTopOfStack--;
  68              		.loc 1 182 0
  69 002a FB68     		ldr	r3, [r7, #12]
  70 002c 043B     		subs	r3, r3, #4
  71 002e FB60     		str	r3, [r7, #12]
 183:Source\portable\GCC\ARM_CM3/port.c **** 	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
  72              		.loc 1 183 0
  73 0030 084A     		ldr	r2, .L3
  74 0032 FB68     		ldr	r3, [r7, #12]
  75 0034 1A60     		str	r2, [r3]
 184:Source\portable\GCC\ARM_CM3/port.c **** 	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
  76              		.loc 1 184 0
  77 0036 FB68     		ldr	r3, [r7, #12]
  78 0038 143B     		subs	r3, r3, #20
  79 003a FB60     		str	r3, [r7, #12]
 185:Source\portable\GCC\ARM_CM3/port.c **** 	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
  80              		.loc 1 185 0
  81 003c 7A68     		ldr	r2, [r7, #4]
  82 003e FB68     		ldr	r3, [r7, #12]
  83 0040 1A60     		str	r2, [r3]
 186:Source\portable\GCC\ARM_CM3/port.c **** 	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
  84              		.loc 1 186 0
  85 0042 FB68     		ldr	r3, [r7, #12]
  86 0044 203B     		subs	r3, r3, #32
  87 0046 FB60     		str	r3, [r7, #12]
 187:Source\portable\GCC\ARM_CM3/port.c **** 
 188:Source\portable\GCC\ARM_CM3/port.c **** 	return pxTopOfStack;
  88              		.loc 1 188 0
  89 0048 FB68     		ldr	r3, [r7, #12]
 189:Source\portable\GCC\ARM_CM3/port.c **** }
  90              		.loc 1 189 0
  91 004a 1846     		mov	r0, r3
  92 004c 1437     		adds	r7, r7, #20
  93              		.cfi_def_cfa_offset 4
  94 004e BD46     		mov	sp, r7
  95              		.cfi_def_cfa_register 13
  96              		@ sp needed
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccetyzvX.s 			page 6


  97 0050 80BC     		pop	{r7}
  98              		.cfi_restore 7
  99              		.cfi_def_cfa_offset 0
 100 0052 7047     		bx	lr
 101              	.L4:
 102              		.align	2
 103              	.L3:
 104 0054 00000000 		.word	prvTaskExitError
 105              		.cfi_endproc
 106              	.LFE68:
 107              		.size	pxPortInitialiseStack, .-pxPortInitialiseStack
 108              		.section	.text.prvTaskExitError,"ax",%progbits
 109              		.align	2
 110              		.thumb
 111              		.thumb_func
 112              		.type	prvTaskExitError, %function
 113              	prvTaskExitError:
 114              	.LFB69:
 190:Source\portable\GCC\ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 191:Source\portable\GCC\ARM_CM3/port.c **** 
 192:Source\portable\GCC\ARM_CM3/port.c **** static void prvTaskExitError( void )
 193:Source\portable\GCC\ARM_CM3/port.c **** {
 115              		.loc 1 193 0
 116              		.cfi_startproc
 117              		@ args = 0, pretend = 0, frame = 8
 118              		@ frame_needed = 1, uses_anonymous_args = 0
 119              		@ link register save eliminated.
 120 0000 80B4     		push	{r7}
 121              		.cfi_def_cfa_offset 4
 122              		.cfi_offset 7, -4
 123 0002 83B0     		sub	sp, sp, #12
 124              		.cfi_def_cfa_offset 16
 125 0004 00AF     		add	r7, sp, #0
 126              		.cfi_def_cfa_register 7
 194:Source\portable\GCC\ARM_CM3/port.c **** volatile uint32_t ulDummy = 0UL;
 127              		.loc 1 194 0
 128 0006 0023     		movs	r3, #0
 129 0008 3B60     		str	r3, [r7]
 130              	.LBB12:
 131              	.LBB13:
 132              		.file 2 ".\\Source\\portable\\GCC\\ARM_CM3/portmacro.h"
   1:.\Source\portable\GCC\ARM_CM3/portmacro.h **** /*
   2:.\Source\portable\GCC\ARM_CM3/portmacro.h ****  * FreeRTOS Kernel V10.3.1
   3:.\Source\portable\GCC\ARM_CM3/portmacro.h ****  * Copyright (C) 2020 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:.\Source\portable\GCC\ARM_CM3/portmacro.h ****  *
   5:.\Source\portable\GCC\ARM_CM3/portmacro.h ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:.\Source\portable\GCC\ARM_CM3/portmacro.h ****  * this software and associated documentation files (the "Software"), to deal in
   7:.\Source\portable\GCC\ARM_CM3/portmacro.h ****  * the Software without restriction, including without limitation the rights to
   8:.\Source\portable\GCC\ARM_CM3/portmacro.h ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:.\Source\portable\GCC\ARM_CM3/portmacro.h ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:.\Source\portable\GCC\ARM_CM3/portmacro.h ****  * subject to the following conditions:
  11:.\Source\portable\GCC\ARM_CM3/portmacro.h ****  *
  12:.\Source\portable\GCC\ARM_CM3/portmacro.h ****  * The above copyright notice and this permission notice shall be included in all
  13:.\Source\portable\GCC\ARM_CM3/portmacro.h ****  * copies or substantial portions of the Software.
  14:.\Source\portable\GCC\ARM_CM3/portmacro.h ****  *
  15:.\Source\portable\GCC\ARM_CM3/portmacro.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:.\Source\portable\GCC\ARM_CM3/portmacro.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccetyzvX.s 			page 7


  17:.\Source\portable\GCC\ARM_CM3/portmacro.h ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:.\Source\portable\GCC\ARM_CM3/portmacro.h ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:.\Source\portable\GCC\ARM_CM3/portmacro.h ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:.\Source\portable\GCC\ARM_CM3/portmacro.h ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:.\Source\portable\GCC\ARM_CM3/portmacro.h ****  *
  22:.\Source\portable\GCC\ARM_CM3/portmacro.h ****  * http://www.FreeRTOS.org
  23:.\Source\portable\GCC\ARM_CM3/portmacro.h ****  * http://aws.amazon.com/freertos
  24:.\Source\portable\GCC\ARM_CM3/portmacro.h ****  *
  25:.\Source\portable\GCC\ARM_CM3/portmacro.h ****  * 1 tab == 4 spaces!
  26:.\Source\portable\GCC\ARM_CM3/portmacro.h ****  */
  27:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 
  28:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 
  29:.\Source\portable\GCC\ARM_CM3/portmacro.h **** #ifndef PORTMACRO_H
  30:.\Source\portable\GCC\ARM_CM3/portmacro.h **** #define PORTMACRO_H
  31:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 
  32:.\Source\portable\GCC\ARM_CM3/portmacro.h **** #ifdef __cplusplus
  33:.\Source\portable\GCC\ARM_CM3/portmacro.h **** extern "C" {
  34:.\Source\portable\GCC\ARM_CM3/portmacro.h **** #endif
  35:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 
  36:.\Source\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------
  37:.\Source\portable\GCC\ARM_CM3/portmacro.h ****  * Port specific definitions.
  38:.\Source\portable\GCC\ARM_CM3/portmacro.h ****  *
  39:.\Source\portable\GCC\ARM_CM3/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  40:.\Source\portable\GCC\ARM_CM3/portmacro.h ****  * given hardware and compiler.
  41:.\Source\portable\GCC\ARM_CM3/portmacro.h ****  *
  42:.\Source\portable\GCC\ARM_CM3/portmacro.h ****  * These settings should not be altered.
  43:.\Source\portable\GCC\ARM_CM3/portmacro.h ****  *-----------------------------------------------------------
  44:.\Source\portable\GCC\ARM_CM3/portmacro.h ****  */
  45:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 
  46:.\Source\portable\GCC\ARM_CM3/portmacro.h **** /* Type definitions. */
  47:.\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portCHAR		char
  48:.\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portFLOAT		float
  49:.\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portDOUBLE		double
  50:.\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portLONG		long
  51:.\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portSHORT		short
  52:.\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portSTACK_TYPE	uint32_t
  53:.\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portBASE_TYPE	long
  54:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 
  55:.\Source\portable\GCC\ARM_CM3/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  56:.\Source\portable\GCC\ARM_CM3/portmacro.h **** typedef long BaseType_t;
  57:.\Source\portable\GCC\ARM_CM3/portmacro.h **** typedef unsigned long UBaseType_t;
  58:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 
  59:.\Source\portable\GCC\ARM_CM3/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
  60:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	typedef uint16_t TickType_t;
  61:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
  62:.\Source\portable\GCC\ARM_CM3/portmacro.h **** #else
  63:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	typedef uint32_t TickType_t;
  64:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
  65:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 
  66:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
  67:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	not need to be guarded with a critical section. */
  68:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
  69:.\Source\portable\GCC\ARM_CM3/portmacro.h **** #endif
  70:.\Source\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
  71:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 
  72:.\Source\portable\GCC\ARM_CM3/portmacro.h **** /* Architecture specifics. */
  73:.\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portSTACK_GROWTH			( -1 )
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccetyzvX.s 			page 8


  74:.\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
  75:.\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portBYTE_ALIGNMENT			8
  76:.\Source\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
  77:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 
  78:.\Source\portable\GCC\ARM_CM3/portmacro.h **** /* Scheduler utilities. */
  79:.\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portYIELD() 															\
  80:.\Source\portable\GCC\ARM_CM3/portmacro.h **** {																				\
  81:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	/* Set a PendSV to request a context switch. */								\
  82:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\
  83:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 																				\
  84:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	/* Barriers are normally not required but do ensure the code is completely	\
  85:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	within the specified behaviour for the architecture. */						\
  86:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	__asm volatile( "dsb" ::: "memory" );										\
  87:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	__asm volatile( "isb" );													\
  88:.\Source\portable\GCC\ARM_CM3/portmacro.h **** }
  89:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 
  90:.\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
  91:.\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
  92:.\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) if( xSwitchRequired != pdFALSE ) portYIELD()
  93:.\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
  94:.\Source\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
  95:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 
  96:.\Source\portable\GCC\ARM_CM3/portmacro.h **** /* Critical section management. */
  97:.\Source\portable\GCC\ARM_CM3/portmacro.h **** extern void vPortEnterCritical( void );
  98:.\Source\portable\GCC\ARM_CM3/portmacro.h **** extern void vPortExitCritical( void );
  99:.\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortRaiseBASEPRI()
 100:.\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortSetBASEPRI(x)
 101:.\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portDISABLE_INTERRUPTS()				vPortRaiseBASEPRI()
 102:.\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortSetBASEPRI(0)
 103:.\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 104:.\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 105:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 106:.\Source\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 107:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 108:.\Source\portable\GCC\ARM_CM3/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 109:.\Source\portable\GCC\ARM_CM3/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 110:.\Source\portable\GCC\ARM_CM3/portmacro.h **** (which build with all the ports) will build. */
 111:.\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 112:.\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 113:.\Source\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 114:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 115:.\Source\portable\GCC\ARM_CM3/portmacro.h **** /* Tickless idle/low power functionality. */
 116:.\Source\portable\GCC\ARM_CM3/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 117:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 118:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 119:.\Source\portable\GCC\ARM_CM3/portmacro.h **** #endif
 120:.\Source\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 121:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 122:.\Source\portable\GCC\ARM_CM3/portmacro.h **** /* Architecture specific optimisations. */
 123:.\Source\portable\GCC\ARM_CM3/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 124:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 125:.\Source\portable\GCC\ARM_CM3/portmacro.h **** #endif
 126:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 127:.\Source\portable\GCC\ARM_CM3/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 128:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 129:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	/* Generic helper function. */
 130:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccetyzvX.s 			page 9


 131:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	{
 132:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	uint8_t ucReturn;
 133:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 134:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 135:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 		return ucReturn;
 136:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	}
 137:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 138:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	/* Check the configuration. */
 139:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	#if( configMAX_PRIORITIES > 32 )
 140:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is 
 141:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	#endif
 142:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 143:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	/* Store/clear the ready priorities in a bit map. */
 144:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) |= ( 1UL 
 145:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) &= ~( 1UL 
 146:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 147:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	/*-----------------------------------------------------------*/
 148:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 149:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities ) uxTopPriority = ( 31UL - ( ui
 150:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 151:.\Source\portable\GCC\ARM_CM3/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 152:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 153:.\Source\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 154:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 155:.\Source\portable\GCC\ARM_CM3/portmacro.h **** #ifdef configASSERT
 156:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	void vPortValidateInterruptPriority( void );
 157:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
 158:.\Source\portable\GCC\ARM_CM3/portmacro.h **** #endif
 159:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 160:.\Source\portable\GCC\ARM_CM3/portmacro.h **** /* portNOP() is not required by this port. */
 161:.\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portNOP()
 162:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 163:.\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portINLINE	__inline
 164:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 165:.\Source\portable\GCC\ARM_CM3/portmacro.h **** #ifndef portFORCE_INLINE
 166:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	#define portFORCE_INLINE inline __attribute__(( always_inline))
 167:.\Source\portable\GCC\ARM_CM3/portmacro.h **** #endif
 168:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 169:.\Source\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 170:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 171:.\Source\portable\GCC\ARM_CM3/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 172:.\Source\portable\GCC\ARM_CM3/portmacro.h **** {
 173:.\Source\portable\GCC\ARM_CM3/portmacro.h **** uint32_t ulCurrentInterrupt;
 174:.\Source\portable\GCC\ARM_CM3/portmacro.h **** BaseType_t xReturn;
 175:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 176:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	/* Obtain the number of the currently executing interrupt. */
 177:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 178:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 179:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	if( ulCurrentInterrupt == 0 )
 180:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	{
 181:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 		xReturn = pdFALSE;
 182:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	}
 183:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	else
 184:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	{
 185:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 		xReturn = pdTRUE;
 186:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	}
 187:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccetyzvX.s 			page 10


 188:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	return xReturn;
 189:.\Source\portable\GCC\ARM_CM3/portmacro.h **** }
 190:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 191:.\Source\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 192:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 193:.\Source\portable\GCC\ARM_CM3/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 194:.\Source\portable\GCC\ARM_CM3/portmacro.h **** {
 195:.\Source\portable\GCC\ARM_CM3/portmacro.h **** uint32_t ulNewBASEPRI;
 196:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 197:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	__asm volatile
 133              		.loc 2 197 0
 134              		.syntax unified
 135              	@ 197 ".\Source\portable\GCC\ARM_CM3/portmacro.h" 1
 136 000a 4FF0A003 			mov r3, #160												
 137 000e 83F31188 		msr basepri, r3											
 138 0012 BFF36F8F 		isb														
 139 0016 BFF34F8F 		dsb														
 140              	
 141              	@ 0 "" 2
 142              		.thumb
 143              		.syntax unified
 144 001a 7B60     		str	r3, [r7, #4]
 145              	.LBE13:
 146              	.LBE12:
 195:Source\portable\GCC\ARM_CM3/port.c **** 
 196:Source\portable\GCC\ARM_CM3/port.c **** 	/* A function that implements a task must not exit or attempt to return to
 197:Source\portable\GCC\ARM_CM3/port.c **** 	its caller as there is nothing to return to.  If a task wants to exit it
 198:Source\portable\GCC\ARM_CM3/port.c **** 	should instead call vTaskDelete( NULL ).
 199:Source\portable\GCC\ARM_CM3/port.c **** 
 200:Source\portable\GCC\ARM_CM3/port.c **** 	Artificially force an assert() to be triggered if configASSERT() is
 201:Source\portable\GCC\ARM_CM3/port.c **** 	defined, then stop here so application writers can catch the error. */
 202:Source\portable\GCC\ARM_CM3/port.c **** 	configASSERT( uxCriticalNesting == ~0UL );
 203:Source\portable\GCC\ARM_CM3/port.c **** 	portDISABLE_INTERRUPTS();
 204:Source\portable\GCC\ARM_CM3/port.c **** 	while( ulDummy == 0 )
 147              		.loc 1 204 0
 148 001c 00BF     		nop
 149              	.L6:
 150              		.loc 1 204 0 is_stmt 0 discriminator 1
 151 001e 3B68     		ldr	r3, [r7]
 152 0020 002B     		cmp	r3, #0
 153 0022 FCD0     		beq	.L6
 205:Source\portable\GCC\ARM_CM3/port.c **** 	{
 206:Source\portable\GCC\ARM_CM3/port.c **** 		/* This file calls prvTaskExitError() after the scheduler has been
 207:Source\portable\GCC\ARM_CM3/port.c **** 		started to remove a compiler warning about the function being defined
 208:Source\portable\GCC\ARM_CM3/port.c **** 		but never called.  ulDummy is used purely to quieten other warnings
 209:Source\portable\GCC\ARM_CM3/port.c **** 		about code appearing after this function is called - making ulDummy
 210:Source\portable\GCC\ARM_CM3/port.c **** 		volatile makes the compiler think the function could return and
 211:Source\portable\GCC\ARM_CM3/port.c **** 		therefore not output an 'unreachable code' warning for code that appears
 212:Source\portable\GCC\ARM_CM3/port.c **** 		after it. */
 213:Source\portable\GCC\ARM_CM3/port.c **** 	}
 214:Source\portable\GCC\ARM_CM3/port.c **** }
 154              		.loc 1 214 0 is_stmt 1
 155 0024 00BF     		nop
 156 0026 0C37     		adds	r7, r7, #12
 157              		.cfi_def_cfa_offset 4
 158 0028 BD46     		mov	sp, r7
 159              		.cfi_def_cfa_register 13
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccetyzvX.s 			page 11


 160              		@ sp needed
 161 002a 80BC     		pop	{r7}
 162              		.cfi_restore 7
 163              		.cfi_def_cfa_offset 0
 164 002c 7047     		bx	lr
 165              		.cfi_endproc
 166              	.LFE69:
 167              		.size	prvTaskExitError, .-prvTaskExitError
 168 002e 00BF     		.section	.text.vPortSVCHandler,"ax",%progbits
 169              		.align	2
 170              		.global	vPortSVCHandler
 171              		.thumb
 172              		.thumb_func
 173              		.type	vPortSVCHandler, %function
 174              	vPortSVCHandler:
 175              	.LFB70:
 215:Source\portable\GCC\ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 216:Source\portable\GCC\ARM_CM3/port.c **** 
 217:Source\portable\GCC\ARM_CM3/port.c **** void vPortSVCHandler( void )
 218:Source\portable\GCC\ARM_CM3/port.c **** {
 176              		.loc 1 218 0
 177              		.cfi_startproc
 178              		@ Naked Function: prologue and epilogue provided by programmer.
 179              		@ args = 0, pretend = 0, frame = 0
 180              		@ frame_needed = 1, uses_anonymous_args = 0
 219:Source\portable\GCC\ARM_CM3/port.c **** 	__asm volatile (
 181              		.loc 1 219 0
 182              		.syntax unified
 183              	@ 219 "Source\portable\GCC\ARM_CM3\port.c" 1
 184 0000 074B     			ldr	r3, pxCurrentTCBConst2		
 185 0002 1968     		ldr r1, [r3]					
 186 0004 0868     		ldr r0, [r1]					
 187 0006 B0E8F00F 		ldmia r0!, {r4-r11}				
 188 000a 80F30988 		msr psp, r0						
 189 000e BFF36F8F 		isb								
 190 0012 4FF00000 		mov r0, #0 						
 191 0016 80F31188 		msr	basepri, r0					
 192 001a 4EF00D0E 		orr r14, #0xd					
 193 001e 7047     		bx r14							
 194              										
 195              		.align 4						
 196 0020 00000000 	pxCurrentTCBConst2: .word pxCurrentTCB				
 197              	
 198              	@ 0 "" 2
 220:Source\portable\GCC\ARM_CM3/port.c **** 					"	ldr	r3, pxCurrentTCBConst2		\n" /* Restore the context. */
 221:Source\portable\GCC\ARM_CM3/port.c **** 					"	ldr r1, [r3]					\n" /* Use pxCurrentTCBConst to get the pxCurrentTCB address. */
 222:Source\portable\GCC\ARM_CM3/port.c **** 					"	ldr r0, [r1]					\n" /* The first item in pxCurrentTCB is the task top of stack. */
 223:Source\portable\GCC\ARM_CM3/port.c **** 					"	ldmia r0!, {r4-r11}				\n" /* Pop the registers that are not automatically saved on exceptio
 224:Source\portable\GCC\ARM_CM3/port.c **** 					"	msr psp, r0						\n" /* Restore the task stack pointer. */
 225:Source\portable\GCC\ARM_CM3/port.c **** 					"	isb								\n"
 226:Source\portable\GCC\ARM_CM3/port.c **** 					"	mov r0, #0 						\n"
 227:Source\portable\GCC\ARM_CM3/port.c **** 					"	msr	basepri, r0					\n"
 228:Source\portable\GCC\ARM_CM3/port.c **** 					"	orr r14, #0xd					\n"
 229:Source\portable\GCC\ARM_CM3/port.c **** 					"	bx r14							\n"
 230:Source\portable\GCC\ARM_CM3/port.c **** 					"									\n"
 231:Source\portable\GCC\ARM_CM3/port.c **** 					"	.align 4						\n"
 232:Source\portable\GCC\ARM_CM3/port.c **** 					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccetyzvX.s 			page 12


 233:Source\portable\GCC\ARM_CM3/port.c **** 				);
 234:Source\portable\GCC\ARM_CM3/port.c **** }
 199              		.loc 1 234 0
 200              		.thumb
 201              		.syntax unified
 202 0024 00BF     		nop
 203              		.cfi_endproc
 204              	.LFE70:
 205              		.size	vPortSVCHandler, .-vPortSVCHandler
 206 0026 00BF     		.section	.text.prvPortStartFirstTask,"ax",%progbits
 207              		.align	2
 208              		.thumb
 209              		.thumb_func
 210              		.type	prvPortStartFirstTask, %function
 211              	prvPortStartFirstTask:
 212              	.LFB71:
 235:Source\portable\GCC\ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 236:Source\portable\GCC\ARM_CM3/port.c **** 
 237:Source\portable\GCC\ARM_CM3/port.c **** static void prvPortStartFirstTask( void )
 238:Source\portable\GCC\ARM_CM3/port.c **** {
 213              		.loc 1 238 0
 214              		.cfi_startproc
 215              		@ Naked Function: prologue and epilogue provided by programmer.
 216              		@ args = 0, pretend = 0, frame = 0
 217              		@ frame_needed = 1, uses_anonymous_args = 0
 239:Source\portable\GCC\ARM_CM3/port.c **** 	__asm volatile(
 218              		.loc 1 239 0
 219              		.syntax unified
 220              	@ 239 "Source\portable\GCC\ARM_CM3\port.c" 1
 221 0000 0648     		 ldr r0, =0xE000ED08 	
 222 0002 0068     	 ldr r0, [r0] 			
 223 0004 0068     	 ldr r0, [r0] 			
 224 0006 80F30888 	 msr msp, r0			
 225 000a 62B6     	 cpsie i				
 226 000c 61B6     	 cpsie f				
 227 000e BFF34F8F 	 dsb					
 228 0012 BFF36F8F 	 isb					
 229 0016 00DF     	 svc 0					
 230 0018 00BF     	 nop					
 231              	
 232              	@ 0 "" 2
 240:Source\portable\GCC\ARM_CM3/port.c **** 					" ldr r0, =0xE000ED08 	\n" /* Use the NVIC offset register to locate the stack. */
 241:Source\portable\GCC\ARM_CM3/port.c **** 					" ldr r0, [r0] 			\n"
 242:Source\portable\GCC\ARM_CM3/port.c **** 					" ldr r0, [r0] 			\n"
 243:Source\portable\GCC\ARM_CM3/port.c **** 					" msr msp, r0			\n" /* Set the msp back to the start of the stack. */
 244:Source\portable\GCC\ARM_CM3/port.c **** 					" cpsie i				\n" /* Globally enable interrupts. */
 245:Source\portable\GCC\ARM_CM3/port.c **** 					" cpsie f				\n"
 246:Source\portable\GCC\ARM_CM3/port.c **** 					" dsb					\n"
 247:Source\portable\GCC\ARM_CM3/port.c **** 					" isb					\n"
 248:Source\portable\GCC\ARM_CM3/port.c **** 					" svc 0					\n" /* System call to start first task. */
 249:Source\portable\GCC\ARM_CM3/port.c **** 					" nop					\n"
 250:Source\portable\GCC\ARM_CM3/port.c **** 				);
 251:Source\portable\GCC\ARM_CM3/port.c **** }
 233              		.loc 1 251 0
 234              		.thumb
 235              		.syntax unified
 236 001a 00BF     		nop
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccetyzvX.s 			page 13


 237              		.cfi_endproc
 238              	.LFE71:
 239              		.size	prvPortStartFirstTask, .-prvPortStartFirstTask
 240              		.section	.text.xPortStartScheduler,"ax",%progbits
 241              		.align	2
 242              		.global	xPortStartScheduler
 243              		.thumb
 244              		.thumb_func
 245              		.type	xPortStartScheduler, %function
 246              	xPortStartScheduler:
 247              	.LFB72:
 252:Source\portable\GCC\ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 253:Source\portable\GCC\ARM_CM3/port.c **** 
 254:Source\portable\GCC\ARM_CM3/port.c **** /*
 255:Source\portable\GCC\ARM_CM3/port.c ****  * See header file for description.
 256:Source\portable\GCC\ARM_CM3/port.c ****  */
 257:Source\portable\GCC\ARM_CM3/port.c **** BaseType_t xPortStartScheduler( void )
 258:Source\portable\GCC\ARM_CM3/port.c **** {
 248              		.loc 1 258 0
 249              		.cfi_startproc
 250              		@ args = 0, pretend = 0, frame = 0
 251              		@ frame_needed = 1, uses_anonymous_args = 0
 252 0000 80B5     		push	{r7, lr}
 253              		.cfi_def_cfa_offset 8
 254              		.cfi_offset 7, -8
 255              		.cfi_offset 14, -4
 256 0002 00AF     		add	r7, sp, #0
 257              		.cfi_def_cfa_register 7
 259:Source\portable\GCC\ARM_CM3/port.c **** 	/* configMAX_SYSCALL_INTERRUPT_PRIORITY must not be set to 0.
 260:Source\portable\GCC\ARM_CM3/port.c **** 	See http://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
 261:Source\portable\GCC\ARM_CM3/port.c **** 	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );
 262:Source\portable\GCC\ARM_CM3/port.c **** 
 263:Source\portable\GCC\ARM_CM3/port.c **** 	#if( configASSERT_DEFINED == 1 )
 264:Source\portable\GCC\ARM_CM3/port.c **** 	{
 265:Source\portable\GCC\ARM_CM3/port.c **** 		volatile uint32_t ulOriginalPriority;
 266:Source\portable\GCC\ARM_CM3/port.c **** 		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_I
 267:Source\portable\GCC\ARM_CM3/port.c **** 		volatile uint8_t ucMaxPriorityValue;
 268:Source\portable\GCC\ARM_CM3/port.c **** 
 269:Source\portable\GCC\ARM_CM3/port.c **** 		/* Determine the maximum priority from which ISR safe FreeRTOS API
 270:Source\portable\GCC\ARM_CM3/port.c **** 		functions can be called.  ISR safe functions are those that end in
 271:Source\portable\GCC\ARM_CM3/port.c **** 		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
 272:Source\portable\GCC\ARM_CM3/port.c **** 		ensure interrupt entry is as fast and simple as possible.
 273:Source\portable\GCC\ARM_CM3/port.c **** 
 274:Source\portable\GCC\ARM_CM3/port.c **** 		Save the interrupt priority value that is about to be clobbered. */
 275:Source\portable\GCC\ARM_CM3/port.c **** 		ulOriginalPriority = *pucFirstUserPriorityRegister;
 276:Source\portable\GCC\ARM_CM3/port.c **** 
 277:Source\portable\GCC\ARM_CM3/port.c **** 		/* Determine the number of priority bits available.  First write to all
 278:Source\portable\GCC\ARM_CM3/port.c **** 		possible bits. */
 279:Source\portable\GCC\ARM_CM3/port.c **** 		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 280:Source\portable\GCC\ARM_CM3/port.c **** 
 281:Source\portable\GCC\ARM_CM3/port.c **** 		/* Read the value back to see how many bits stuck. */
 282:Source\portable\GCC\ARM_CM3/port.c **** 		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 283:Source\portable\GCC\ARM_CM3/port.c **** 
 284:Source\portable\GCC\ARM_CM3/port.c **** 		/* Use the same mask on the maximum system call priority. */
 285:Source\portable\GCC\ARM_CM3/port.c **** 		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 286:Source\portable\GCC\ARM_CM3/port.c **** 
 287:Source\portable\GCC\ARM_CM3/port.c **** 		/* Calculate the maximum acceptable priority group value for the number
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccetyzvX.s 			page 14


 288:Source\portable\GCC\ARM_CM3/port.c **** 		of bits read back. */
 289:Source\portable\GCC\ARM_CM3/port.c **** 		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 290:Source\portable\GCC\ARM_CM3/port.c **** 		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 291:Source\portable\GCC\ARM_CM3/port.c **** 		{
 292:Source\portable\GCC\ARM_CM3/port.c **** 			ulMaxPRIGROUPValue--;
 293:Source\portable\GCC\ARM_CM3/port.c **** 			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 294:Source\portable\GCC\ARM_CM3/port.c **** 		}
 295:Source\portable\GCC\ARM_CM3/port.c **** 
 296:Source\portable\GCC\ARM_CM3/port.c **** 		#ifdef __NVIC_PRIO_BITS
 297:Source\portable\GCC\ARM_CM3/port.c **** 		{
 298:Source\portable\GCC\ARM_CM3/port.c **** 			/* Check the CMSIS configuration that defines the number of
 299:Source\portable\GCC\ARM_CM3/port.c **** 			priority bits matches the number of priority bits actually queried
 300:Source\portable\GCC\ARM_CM3/port.c **** 			from the hardware. */
 301:Source\portable\GCC\ARM_CM3/port.c **** 			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
 302:Source\portable\GCC\ARM_CM3/port.c **** 		}
 303:Source\portable\GCC\ARM_CM3/port.c **** 		#endif
 304:Source\portable\GCC\ARM_CM3/port.c **** 
 305:Source\portable\GCC\ARM_CM3/port.c **** 		#ifdef configPRIO_BITS
 306:Source\portable\GCC\ARM_CM3/port.c **** 		{
 307:Source\portable\GCC\ARM_CM3/port.c **** 			/* Check the FreeRTOS configuration that defines the number of
 308:Source\portable\GCC\ARM_CM3/port.c **** 			priority bits matches the number of priority bits actually queried
 309:Source\portable\GCC\ARM_CM3/port.c **** 			from the hardware. */
 310:Source\portable\GCC\ARM_CM3/port.c **** 			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 311:Source\portable\GCC\ARM_CM3/port.c **** 		}
 312:Source\portable\GCC\ARM_CM3/port.c **** 		#endif
 313:Source\portable\GCC\ARM_CM3/port.c **** 
 314:Source\portable\GCC\ARM_CM3/port.c **** 		/* Shift the priority group value back to its position within the AIRCR
 315:Source\portable\GCC\ARM_CM3/port.c **** 		register. */
 316:Source\portable\GCC\ARM_CM3/port.c **** 		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 317:Source\portable\GCC\ARM_CM3/port.c **** 		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 318:Source\portable\GCC\ARM_CM3/port.c **** 
 319:Source\portable\GCC\ARM_CM3/port.c **** 		/* Restore the clobbered interrupt priority register to its original
 320:Source\portable\GCC\ARM_CM3/port.c **** 		value. */
 321:Source\portable\GCC\ARM_CM3/port.c **** 		*pucFirstUserPriorityRegister = ulOriginalPriority;
 322:Source\portable\GCC\ARM_CM3/port.c **** 	}
 323:Source\portable\GCC\ARM_CM3/port.c **** 	#endif /* conifgASSERT_DEFINED */
 324:Source\portable\GCC\ARM_CM3/port.c **** 
 325:Source\portable\GCC\ARM_CM3/port.c **** 	/* Make PendSV and SysTick the lowest priority interrupts. */
 326:Source\portable\GCC\ARM_CM3/port.c **** 	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 258              		.loc 1 326 0
 259 0004 0C4A     		ldr	r2, .L11
 260 0006 0C4B     		ldr	r3, .L11
 261 0008 1B68     		ldr	r3, [r3]
 262 000a 43F46003 		orr	r3, r3, #14680064
 263 000e 1360     		str	r3, [r2]
 327:Source\portable\GCC\ARM_CM3/port.c **** 	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 264              		.loc 1 327 0
 265 0010 094A     		ldr	r2, .L11
 266 0012 094B     		ldr	r3, .L11
 267 0014 1B68     		ldr	r3, [r3]
 268 0016 43F06043 		orr	r3, r3, #-536870912
 269 001a 1360     		str	r3, [r2]
 328:Source\portable\GCC\ARM_CM3/port.c **** 
 329:Source\portable\GCC\ARM_CM3/port.c **** 	/* Start the timer that generates the tick ISR.  Interrupts are disabled
 330:Source\portable\GCC\ARM_CM3/port.c **** 	here already. */
 331:Source\portable\GCC\ARM_CM3/port.c **** 	vPortSetupTimerInterrupt();
 270              		.loc 1 331 0
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccetyzvX.s 			page 15


 271 001c FFF7FEFF 		bl	vPortSetupTimerInterrupt
 332:Source\portable\GCC\ARM_CM3/port.c **** 
 333:Source\portable\GCC\ARM_CM3/port.c **** 	/* Initialise the critical nesting count ready for the first task. */
 334:Source\portable\GCC\ARM_CM3/port.c **** 	uxCriticalNesting = 0;
 272              		.loc 1 334 0
 273 0020 064B     		ldr	r3, .L11+4
 274 0022 0022     		movs	r2, #0
 275 0024 1A60     		str	r2, [r3]
 335:Source\portable\GCC\ARM_CM3/port.c **** 
 336:Source\portable\GCC\ARM_CM3/port.c **** 	/* Start the first task. */
 337:Source\portable\GCC\ARM_CM3/port.c **** 	prvPortStartFirstTask();
 276              		.loc 1 337 0
 277 0026 FFF7FEFF 		bl	prvPortStartFirstTask
 338:Source\portable\GCC\ARM_CM3/port.c **** 
 339:Source\portable\GCC\ARM_CM3/port.c **** 	/* Should never get here as the tasks will now be executing!  Call the task
 340:Source\portable\GCC\ARM_CM3/port.c **** 	exit error function to prevent compiler warnings about a static function
 341:Source\portable\GCC\ARM_CM3/port.c **** 	not being called in the case that the application writer overrides this
 342:Source\portable\GCC\ARM_CM3/port.c **** 	functionality by defining configTASK_RETURN_ADDRESS.  Call
 343:Source\portable\GCC\ARM_CM3/port.c **** 	vTaskSwitchContext() so link time optimisation does not remove the
 344:Source\portable\GCC\ARM_CM3/port.c **** 	symbol. */
 345:Source\portable\GCC\ARM_CM3/port.c **** 	vTaskSwitchContext();
 278              		.loc 1 345 0
 279 002a FFF7FEFF 		bl	vTaskSwitchContext
 346:Source\portable\GCC\ARM_CM3/port.c **** 	prvTaskExitError();
 280              		.loc 1 346 0
 281 002e FFF7FEFF 		bl	prvTaskExitError
 347:Source\portable\GCC\ARM_CM3/port.c **** 
 348:Source\portable\GCC\ARM_CM3/port.c **** 	/* Should not get here! */
 349:Source\portable\GCC\ARM_CM3/port.c **** 	return 0;
 282              		.loc 1 349 0
 283 0032 0023     		movs	r3, #0
 350:Source\portable\GCC\ARM_CM3/port.c **** }
 284              		.loc 1 350 0
 285 0034 1846     		mov	r0, r3
 286 0036 80BD     		pop	{r7, pc}
 287              	.L12:
 288              		.align	2
 289              	.L11:
 290 0038 20ED00E0 		.word	-536810208
 291 003c 00000000 		.word	uxCriticalNesting
 292              		.cfi_endproc
 293              	.LFE72:
 294              		.size	xPortStartScheduler, .-xPortStartScheduler
 295              		.section	.text.vPortEndScheduler,"ax",%progbits
 296              		.align	2
 297              		.global	vPortEndScheduler
 298              		.thumb
 299              		.thumb_func
 300              		.type	vPortEndScheduler, %function
 301              	vPortEndScheduler:
 302              	.LFB73:
 351:Source\portable\GCC\ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 352:Source\portable\GCC\ARM_CM3/port.c **** 
 353:Source\portable\GCC\ARM_CM3/port.c **** void vPortEndScheduler( void )
 354:Source\portable\GCC\ARM_CM3/port.c **** {
 303              		.loc 1 354 0
 304              		.cfi_startproc
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccetyzvX.s 			page 16


 305              		@ args = 0, pretend = 0, frame = 0
 306              		@ frame_needed = 1, uses_anonymous_args = 0
 307              		@ link register save eliminated.
 308 0000 80B4     		push	{r7}
 309              		.cfi_def_cfa_offset 4
 310              		.cfi_offset 7, -4
 311 0002 00AF     		add	r7, sp, #0
 312              		.cfi_def_cfa_register 7
 355:Source\portable\GCC\ARM_CM3/port.c **** 	/* Not implemented in ports where there is nothing to return to.
 356:Source\portable\GCC\ARM_CM3/port.c **** 	Artificially force an assert. */
 357:Source\portable\GCC\ARM_CM3/port.c **** 	configASSERT( uxCriticalNesting == 1000UL );
 358:Source\portable\GCC\ARM_CM3/port.c **** }
 313              		.loc 1 358 0
 314 0004 00BF     		nop
 315 0006 BD46     		mov	sp, r7
 316              		.cfi_def_cfa_register 13
 317              		@ sp needed
 318 0008 80BC     		pop	{r7}
 319              		.cfi_restore 7
 320              		.cfi_def_cfa_offset 0
 321 000a 7047     		bx	lr
 322              		.cfi_endproc
 323              	.LFE73:
 324              		.size	vPortEndScheduler, .-vPortEndScheduler
 325              		.section	.text.vPortEnterCritical,"ax",%progbits
 326              		.align	2
 327              		.global	vPortEnterCritical
 328              		.thumb
 329              		.thumb_func
 330              		.type	vPortEnterCritical, %function
 331              	vPortEnterCritical:
 332              	.LFB74:
 359:Source\portable\GCC\ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 360:Source\portable\GCC\ARM_CM3/port.c **** 
 361:Source\portable\GCC\ARM_CM3/port.c **** void vPortEnterCritical( void )
 362:Source\portable\GCC\ARM_CM3/port.c **** {
 333              		.loc 1 362 0
 334              		.cfi_startproc
 335              		@ args = 0, pretend = 0, frame = 8
 336              		@ frame_needed = 1, uses_anonymous_args = 0
 337              		@ link register save eliminated.
 338 0000 80B4     		push	{r7}
 339              		.cfi_def_cfa_offset 4
 340              		.cfi_offset 7, -4
 341 0002 83B0     		sub	sp, sp, #12
 342              		.cfi_def_cfa_offset 16
 343 0004 00AF     		add	r7, sp, #0
 344              		.cfi_def_cfa_register 7
 345              	.LBB14:
 346              	.LBB15:
 347              		.loc 2 197 0
 348              		.syntax unified
 349              	@ 197 ".\Source\portable\GCC\ARM_CM3/portmacro.h" 1
 350 0006 4FF0A003 			mov r3, #160												
 351 000a 83F31188 		msr basepri, r3											
 352 000e BFF36F8F 		isb														
 353 0012 BFF34F8F 		dsb														
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccetyzvX.s 			page 17


 354              	
 355              	@ 0 "" 2
 356              		.thumb
 357              		.syntax unified
 358 0016 7B60     		str	r3, [r7, #4]
 359              	.LBE15:
 360              	.LBE14:
 363:Source\portable\GCC\ARM_CM3/port.c **** 	portDISABLE_INTERRUPTS();
 364:Source\portable\GCC\ARM_CM3/port.c **** 	uxCriticalNesting++;
 361              		.loc 1 364 0
 362 0018 044B     		ldr	r3, .L15
 363 001a 1B68     		ldr	r3, [r3]
 364 001c 0133     		adds	r3, r3, #1
 365 001e 034A     		ldr	r2, .L15
 366 0020 1360     		str	r3, [r2]
 365:Source\portable\GCC\ARM_CM3/port.c **** 
 366:Source\portable\GCC\ARM_CM3/port.c **** 	/* This is not the interrupt safe version of the enter critical function so
 367:Source\portable\GCC\ARM_CM3/port.c **** 	assert() if it is being called from an interrupt context.  Only API
 368:Source\portable\GCC\ARM_CM3/port.c **** 	functions that end in "FromISR" can be used in an interrupt.  Only assert if
 369:Source\portable\GCC\ARM_CM3/port.c **** 	the critical nesting count is 1 to protect against recursive calls if the
 370:Source\portable\GCC\ARM_CM3/port.c **** 	assert function also uses a critical section. */
 371:Source\portable\GCC\ARM_CM3/port.c **** 	if( uxCriticalNesting == 1 )
 372:Source\portable\GCC\ARM_CM3/port.c **** 	{
 373:Source\portable\GCC\ARM_CM3/port.c **** 		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 374:Source\portable\GCC\ARM_CM3/port.c **** 	}
 375:Source\portable\GCC\ARM_CM3/port.c **** }
 367              		.loc 1 375 0
 368 0022 00BF     		nop
 369 0024 0C37     		adds	r7, r7, #12
 370              		.cfi_def_cfa_offset 4
 371 0026 BD46     		mov	sp, r7
 372              		.cfi_def_cfa_register 13
 373              		@ sp needed
 374 0028 80BC     		pop	{r7}
 375              		.cfi_restore 7
 376              		.cfi_def_cfa_offset 0
 377 002a 7047     		bx	lr
 378              	.L16:
 379              		.align	2
 380              	.L15:
 381 002c 00000000 		.word	uxCriticalNesting
 382              		.cfi_endproc
 383              	.LFE74:
 384              		.size	vPortEnterCritical, .-vPortEnterCritical
 385              		.section	.text.vPortExitCritical,"ax",%progbits
 386              		.align	2
 387              		.global	vPortExitCritical
 388              		.thumb
 389              		.thumb_func
 390              		.type	vPortExitCritical, %function
 391              	vPortExitCritical:
 392              	.LFB75:
 376:Source\portable\GCC\ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 377:Source\portable\GCC\ARM_CM3/port.c **** 
 378:Source\portable\GCC\ARM_CM3/port.c **** void vPortExitCritical( void )
 379:Source\portable\GCC\ARM_CM3/port.c **** {
 393              		.loc 1 379 0
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccetyzvX.s 			page 18


 394              		.cfi_startproc
 395              		@ args = 0, pretend = 0, frame = 8
 396              		@ frame_needed = 1, uses_anonymous_args = 0
 397              		@ link register save eliminated.
 398 0000 80B4     		push	{r7}
 399              		.cfi_def_cfa_offset 4
 400              		.cfi_offset 7, -4
 401 0002 83B0     		sub	sp, sp, #12
 402              		.cfi_def_cfa_offset 16
 403 0004 00AF     		add	r7, sp, #0
 404              		.cfi_def_cfa_register 7
 380:Source\portable\GCC\ARM_CM3/port.c **** 	configASSERT( uxCriticalNesting );
 381:Source\portable\GCC\ARM_CM3/port.c **** 	uxCriticalNesting--;
 405              		.loc 1 381 0
 406 0006 094B     		ldr	r3, .L20
 407 0008 1B68     		ldr	r3, [r3]
 408 000a 013B     		subs	r3, r3, #1
 409 000c 074A     		ldr	r2, .L20
 410 000e 1360     		str	r3, [r2]
 382:Source\portable\GCC\ARM_CM3/port.c **** 	if( uxCriticalNesting == 0 )
 411              		.loc 1 382 0
 412 0010 064B     		ldr	r3, .L20
 413 0012 1B68     		ldr	r3, [r3]
 414 0014 002B     		cmp	r3, #0
 415 0016 04D1     		bne	.L19
 416 0018 0023     		movs	r3, #0
 417 001a 7B60     		str	r3, [r7, #4]
 418              	.LBB16:
 419              	.LBB17:
 198:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	(
 199:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 		"	mov %0, %1												\n" \
 200:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 		"	msr basepri, %0											\n" \
 201:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 		"	isb														\n" \
 202:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 		"	dsb														\n" \
 203:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
 204:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	);
 205:.\Source\portable\GCC\ARM_CM3/portmacro.h **** }
 206:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 207:.\Source\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 208:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 209:.\Source\portable\GCC\ARM_CM3/portmacro.h **** portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 210:.\Source\portable\GCC\ARM_CM3/portmacro.h **** {
 211:.\Source\portable\GCC\ARM_CM3/portmacro.h **** uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 212:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 213:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	__asm volatile
 214:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	(
 215:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 		"	mrs %0, basepri											\n" \
 216:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 		"	mov %1, %2												\n" \
 217:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 		"	msr basepri, %1											\n" \
 218:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 		"	isb														\n" \
 219:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 		"	dsb														\n" \
 220:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "
 221:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	);
 222:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 223:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	/* This return will not be reached but is necessary to prevent compiler
 224:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	warnings. */
 225:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	return ulOriginalBASEPRI;
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccetyzvX.s 			page 19


 226:.\Source\portable\GCC\ARM_CM3/portmacro.h **** }
 227:.\Source\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 228:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 229:.\Source\portable\GCC\ARM_CM3/portmacro.h **** portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 230:.\Source\portable\GCC\ARM_CM3/portmacro.h **** {
 231:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	__asm volatile
 420              		.loc 2 231 0
 421 001c 7B68     		ldr	r3, [r7, #4]
 422              		.syntax unified
 423              	@ 231 ".\Source\portable\GCC\ARM_CM3/portmacro.h" 1
 424 001e 83F31188 			msr basepri, r3	
 425              	@ 0 "" 2
 426              		.thumb
 427              		.syntax unified
 428              	.L19:
 429              	.LBE17:
 430              	.LBE16:
 383:Source\portable\GCC\ARM_CM3/port.c **** 	{
 384:Source\portable\GCC\ARM_CM3/port.c **** 		portENABLE_INTERRUPTS();
 385:Source\portable\GCC\ARM_CM3/port.c **** 	}
 386:Source\portable\GCC\ARM_CM3/port.c **** }
 431              		.loc 1 386 0
 432 0022 00BF     		nop
 433 0024 0C37     		adds	r7, r7, #12
 434              		.cfi_def_cfa_offset 4
 435 0026 BD46     		mov	sp, r7
 436              		.cfi_def_cfa_register 13
 437              		@ sp needed
 438 0028 80BC     		pop	{r7}
 439              		.cfi_restore 7
 440              		.cfi_def_cfa_offset 0
 441 002a 7047     		bx	lr
 442              	.L21:
 443              		.align	2
 444              	.L20:
 445 002c 00000000 		.word	uxCriticalNesting
 446              		.cfi_endproc
 447              	.LFE75:
 448              		.size	vPortExitCritical, .-vPortExitCritical
 449              		.section	.text.xPortPendSVHandler,"ax",%progbits
 450              		.align	2
 451              		.global	xPortPendSVHandler
 452              		.thumb
 453              		.thumb_func
 454              		.type	xPortPendSVHandler, %function
 455              	xPortPendSVHandler:
 456              	.LFB76:
 387:Source\portable\GCC\ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 388:Source\portable\GCC\ARM_CM3/port.c **** 
 389:Source\portable\GCC\ARM_CM3/port.c **** void xPortPendSVHandler( void )
 390:Source\portable\GCC\ARM_CM3/port.c **** {
 457              		.loc 1 390 0
 458              		.cfi_startproc
 459              		@ Naked Function: prologue and epilogue provided by programmer.
 460              		@ args = 0, pretend = 0, frame = 0
 461              		@ frame_needed = 1, uses_anonymous_args = 0
 391:Source\portable\GCC\ARM_CM3/port.c **** 	/* This is a naked function. */
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccetyzvX.s 			page 20


 392:Source\portable\GCC\ARM_CM3/port.c **** 
 393:Source\portable\GCC\ARM_CM3/port.c **** 	__asm volatile
 462              		.loc 1 393 0
 463              		.syntax unified
 464              	@ 393 "Source\portable\GCC\ARM_CM3\port.c" 1
 465 0000 EFF30980 			mrs r0, psp							
 466 0004 BFF36F8F 		isb									
 467              											
 468 0008 0D4B     		ldr	r3, pxCurrentTCBConst			
 469 000a 1A68     		ldr	r2, [r3]						
 470              											
 471 000c 20E9F00F 		stmdb r0!, {r4-r11}					
 472 0010 1060     		str r0, [r2]						
 473              											
 474 0012 2DE90840 		stmdb sp!, {r3, r14}				
 475 0016 4FF0A000 		mov r0, #160							
 476 001a 80F31188 		msr basepri, r0						
 477 001e FFF7FEFF 		bl vTaskSwitchContext				
 478 0022 4FF00000 		mov r0, #0							
 479 0026 80F31188 		msr basepri, r0						
 480 002a BDE80840 		ldmia sp!, {r3, r14}				
 481              											
 482 002e 1968     		ldr r1, [r3]						
 483 0030 0868     		ldr r0, [r1]						
 484 0032 B0E8F00F 		ldmia r0!, {r4-r11}					
 485 0036 80F30988 		msr psp, r0							
 486 003a BFF36F8F 		isb									
 487 003e 7047     		bx r14								
 488              											
 489              		.align 4							
 490 0040 00000000 	pxCurrentTCBConst: .word pxCurrentTCB	
 491              	
 492              	@ 0 "" 2
 394:Source\portable\GCC\ARM_CM3/port.c **** 	(
 395:Source\portable\GCC\ARM_CM3/port.c **** 	"	mrs r0, psp							\n"
 396:Source\portable\GCC\ARM_CM3/port.c **** 	"	isb									\n"
 397:Source\portable\GCC\ARM_CM3/port.c **** 	"										\n"
 398:Source\portable\GCC\ARM_CM3/port.c **** 	"	ldr	r3, pxCurrentTCBConst			\n" /* Get the location of the current TCB. */
 399:Source\portable\GCC\ARM_CM3/port.c **** 	"	ldr	r2, [r3]						\n"
 400:Source\portable\GCC\ARM_CM3/port.c **** 	"										\n"
 401:Source\portable\GCC\ARM_CM3/port.c **** 	"	stmdb r0!, {r4-r11}					\n" /* Save the remaining registers. */
 402:Source\portable\GCC\ARM_CM3/port.c **** 	"	str r0, [r2]						\n" /* Save the new top of stack into the first member of the TCB. */
 403:Source\portable\GCC\ARM_CM3/port.c **** 	"										\n"
 404:Source\portable\GCC\ARM_CM3/port.c **** 	"	stmdb sp!, {r3, r14}				\n"
 405:Source\portable\GCC\ARM_CM3/port.c **** 	"	mov r0, %0							\n"
 406:Source\portable\GCC\ARM_CM3/port.c **** 	"	msr basepri, r0						\n"
 407:Source\portable\GCC\ARM_CM3/port.c **** 	"	bl vTaskSwitchContext				\n"
 408:Source\portable\GCC\ARM_CM3/port.c **** 	"	mov r0, #0							\n"
 409:Source\portable\GCC\ARM_CM3/port.c **** 	"	msr basepri, r0						\n"
 410:Source\portable\GCC\ARM_CM3/port.c **** 	"	ldmia sp!, {r3, r14}				\n"
 411:Source\portable\GCC\ARM_CM3/port.c **** 	"										\n" /* Restore the context, including the critical nesting count. */
 412:Source\portable\GCC\ARM_CM3/port.c **** 	"	ldr r1, [r3]						\n"
 413:Source\portable\GCC\ARM_CM3/port.c **** 	"	ldr r0, [r1]						\n" /* The first item in pxCurrentTCB is the task top of stack. */
 414:Source\portable\GCC\ARM_CM3/port.c **** 	"	ldmia r0!, {r4-r11}					\n" /* Pop the registers. */
 415:Source\portable\GCC\ARM_CM3/port.c **** 	"	msr psp, r0							\n"
 416:Source\portable\GCC\ARM_CM3/port.c **** 	"	isb									\n"
 417:Source\portable\GCC\ARM_CM3/port.c **** 	"	bx r14								\n"
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccetyzvX.s 			page 21


 418:Source\portable\GCC\ARM_CM3/port.c **** 	"										\n"
 419:Source\portable\GCC\ARM_CM3/port.c **** 	"	.align 4							\n"
 420:Source\portable\GCC\ARM_CM3/port.c **** 	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
 421:Source\portable\GCC\ARM_CM3/port.c **** 	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
 422:Source\portable\GCC\ARM_CM3/port.c **** 	);
 423:Source\portable\GCC\ARM_CM3/port.c **** }
 493              		.loc 1 423 0
 494              		.thumb
 495              		.syntax unified
 496 0044 00BF     		nop
 497              		.cfi_endproc
 498              	.LFE76:
 499              		.size	xPortPendSVHandler, .-xPortPendSVHandler
 500 0046 00BF     		.section	.text.xPortSysTickHandler,"ax",%progbits
 501              		.align	2
 502              		.global	xPortSysTickHandler
 503              		.thumb
 504              		.thumb_func
 505              		.type	xPortSysTickHandler, %function
 506              	xPortSysTickHandler:
 507              	.LFB77:
 424:Source\portable\GCC\ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 425:Source\portable\GCC\ARM_CM3/port.c **** 
 426:Source\portable\GCC\ARM_CM3/port.c **** void xPortSysTickHandler( void )
 427:Source\portable\GCC\ARM_CM3/port.c **** {
 508              		.loc 1 427 0
 509              		.cfi_startproc
 510              		@ args = 0, pretend = 0, frame = 8
 511              		@ frame_needed = 1, uses_anonymous_args = 0
 512 0000 80B5     		push	{r7, lr}
 513              		.cfi_def_cfa_offset 8
 514              		.cfi_offset 7, -8
 515              		.cfi_offset 14, -4
 516 0002 82B0     		sub	sp, sp, #8
 517              		.cfi_def_cfa_offset 16
 518 0004 00AF     		add	r7, sp, #0
 519              		.cfi_def_cfa_register 7
 520              	.LBB18:
 521              	.LBB19:
 197:.\Source\portable\GCC\ARM_CM3/portmacro.h **** 	(
 522              		.loc 2 197 0
 523              		.syntax unified
 524              	@ 197 ".\Source\portable\GCC\ARM_CM3/portmacro.h" 1
 525 0006 4FF0A003 			mov r3, #160												
 526 000a 83F31188 		msr basepri, r3											
 527 000e BFF36F8F 		isb														
 528 0012 BFF34F8F 		dsb														
 529              	
 530              	@ 0 "" 2
 531              		.thumb
 532              		.syntax unified
 533 0016 3B60     		str	r3, [r7]
 534              	.LBE19:
 535              	.LBE18:
 428:Source\portable\GCC\ARM_CM3/port.c **** 	/* The SysTick runs at the lowest interrupt priority, so when this interrupt
 429:Source\portable\GCC\ARM_CM3/port.c **** 	executes all interrupts must be unmasked.  There is therefore no need to
 430:Source\portable\GCC\ARM_CM3/port.c **** 	save and then restore the interrupt mask value as its value is already
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccetyzvX.s 			page 22


 431:Source\portable\GCC\ARM_CM3/port.c **** 	known. */
 432:Source\portable\GCC\ARM_CM3/port.c **** 	portDISABLE_INTERRUPTS();
 433:Source\portable\GCC\ARM_CM3/port.c **** 	{
 434:Source\portable\GCC\ARM_CM3/port.c **** 		/* Increment the RTOS tick. */
 435:Source\portable\GCC\ARM_CM3/port.c **** 		if( xTaskIncrementTick() != pdFALSE )
 536              		.loc 1 435 0
 537 0018 FFF7FEFF 		bl	xTaskIncrementTick
 538 001c 0346     		mov	r3, r0
 539 001e 002B     		cmp	r3, #0
 540 0020 03D0     		beq	.L24
 436:Source\portable\GCC\ARM_CM3/port.c **** 		{
 437:Source\portable\GCC\ARM_CM3/port.c **** 			/* A context switch is required.  Context switching is performed in
 438:Source\portable\GCC\ARM_CM3/port.c **** 			the PendSV interrupt.  Pend the PendSV interrupt. */
 439:Source\portable\GCC\ARM_CM3/port.c **** 			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 541              		.loc 1 439 0
 542 0022 064B     		ldr	r3, .L25
 543 0024 4FF08052 		mov	r2, #268435456
 544 0028 1A60     		str	r2, [r3]
 545              	.L24:
 546 002a 0023     		movs	r3, #0
 547 002c 7B60     		str	r3, [r7, #4]
 548              	.LBB20:
 549              	.LBB21:
 550              		.loc 2 231 0
 551 002e 7B68     		ldr	r3, [r7, #4]
 552              		.syntax unified
 553              	@ 231 ".\Source\portable\GCC\ARM_CM3/portmacro.h" 1
 554 0030 83F31188 			msr basepri, r3	
 555              	@ 0 "" 2
 556              		.thumb
 557              		.syntax unified
 558              	.LBE21:
 559              	.LBE20:
 440:Source\portable\GCC\ARM_CM3/port.c **** 		}
 441:Source\portable\GCC\ARM_CM3/port.c **** 	}
 442:Source\portable\GCC\ARM_CM3/port.c **** 	portENABLE_INTERRUPTS();
 443:Source\portable\GCC\ARM_CM3/port.c **** }
 560              		.loc 1 443 0
 561 0034 00BF     		nop
 562 0036 0837     		adds	r7, r7, #8
 563              		.cfi_def_cfa_offset 8
 564 0038 BD46     		mov	sp, r7
 565              		.cfi_def_cfa_register 13
 566              		@ sp needed
 567 003a 80BD     		pop	{r7, pc}
 568              	.L26:
 569              		.align	2
 570              	.L25:
 571 003c 04ED00E0 		.word	-536810236
 572              		.cfi_endproc
 573              	.LFE77:
 574              		.size	xPortSysTickHandler, .-xPortSysTickHandler
 575              		.section	.text.vPortSetupTimerInterrupt,"ax",%progbits
 576              		.align	2
 577              		.weak	vPortSetupTimerInterrupt
 578              		.thumb
 579              		.thumb_func
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccetyzvX.s 			page 23


 580              		.type	vPortSetupTimerInterrupt, %function
 581              	vPortSetupTimerInterrupt:
 582              	.LFB78:
 444:Source\portable\GCC\ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 445:Source\portable\GCC\ARM_CM3/port.c **** 
 446:Source\portable\GCC\ARM_CM3/port.c **** #if( configUSE_TICKLESS_IDLE == 1 )
 447:Source\portable\GCC\ARM_CM3/port.c **** 
 448:Source\portable\GCC\ARM_CM3/port.c **** 	__attribute__((weak)) void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
 449:Source\portable\GCC\ARM_CM3/port.c **** 	{
 450:Source\portable\GCC\ARM_CM3/port.c **** 	uint32_t ulReloadValue, ulCompleteTickPeriods, ulCompletedSysTickDecrements;
 451:Source\portable\GCC\ARM_CM3/port.c **** 	TickType_t xModifiableIdleTime;
 452:Source\portable\GCC\ARM_CM3/port.c **** 
 453:Source\portable\GCC\ARM_CM3/port.c **** 		/* Make sure the SysTick reload value does not overflow the counter. */
 454:Source\portable\GCC\ARM_CM3/port.c **** 		if( xExpectedIdleTime > xMaximumPossibleSuppressedTicks )
 455:Source\portable\GCC\ARM_CM3/port.c **** 		{
 456:Source\portable\GCC\ARM_CM3/port.c **** 			xExpectedIdleTime = xMaximumPossibleSuppressedTicks;
 457:Source\portable\GCC\ARM_CM3/port.c **** 		}
 458:Source\portable\GCC\ARM_CM3/port.c **** 
 459:Source\portable\GCC\ARM_CM3/port.c **** 		/* Stop the SysTick momentarily.  The time the SysTick is stopped for
 460:Source\portable\GCC\ARM_CM3/port.c **** 		is accounted for as best it can be, but using the tickless mode will
 461:Source\portable\GCC\ARM_CM3/port.c **** 		inevitably result in some tiny drift of the time maintained by the
 462:Source\portable\GCC\ARM_CM3/port.c **** 		kernel with respect to calendar time. */
 463:Source\portable\GCC\ARM_CM3/port.c **** 		portNVIC_SYSTICK_CTRL_REG &= ~portNVIC_SYSTICK_ENABLE_BIT;
 464:Source\portable\GCC\ARM_CM3/port.c **** 
 465:Source\portable\GCC\ARM_CM3/port.c **** 		/* Calculate the reload value required to wait xExpectedIdleTime
 466:Source\portable\GCC\ARM_CM3/port.c **** 		tick periods.  -1 is used because this code will execute part way
 467:Source\portable\GCC\ARM_CM3/port.c **** 		through one of the tick periods. */
 468:Source\portable\GCC\ARM_CM3/port.c **** 		ulReloadValue = portNVIC_SYSTICK_CURRENT_VALUE_REG + ( ulTimerCountsForOneTick * ( xExpectedIdleT
 469:Source\portable\GCC\ARM_CM3/port.c **** 		if( ulReloadValue > ulStoppedTimerCompensation )
 470:Source\portable\GCC\ARM_CM3/port.c **** 		{
 471:Source\portable\GCC\ARM_CM3/port.c **** 			ulReloadValue -= ulStoppedTimerCompensation;
 472:Source\portable\GCC\ARM_CM3/port.c **** 		}
 473:Source\portable\GCC\ARM_CM3/port.c **** 
 474:Source\portable\GCC\ARM_CM3/port.c **** 		/* Enter a critical section but don't use the taskENTER_CRITICAL()
 475:Source\portable\GCC\ARM_CM3/port.c **** 		method as that will mask interrupts that should exit sleep mode. */
 476:Source\portable\GCC\ARM_CM3/port.c **** 		__asm volatile( "cpsid i" ::: "memory" );
 477:Source\portable\GCC\ARM_CM3/port.c **** 		__asm volatile( "dsb" );
 478:Source\portable\GCC\ARM_CM3/port.c **** 		__asm volatile( "isb" );
 479:Source\portable\GCC\ARM_CM3/port.c **** 
 480:Source\portable\GCC\ARM_CM3/port.c **** 		/* If a context switch is pending or a task is waiting for the scheduler
 481:Source\portable\GCC\ARM_CM3/port.c **** 		to be unsuspended then abandon the low power entry. */
 482:Source\portable\GCC\ARM_CM3/port.c **** 		if( eTaskConfirmSleepModeStatus() == eAbortSleep )
 483:Source\portable\GCC\ARM_CM3/port.c **** 		{
 484:Source\portable\GCC\ARM_CM3/port.c **** 			/* Restart from whatever is left in the count register to complete
 485:Source\portable\GCC\ARM_CM3/port.c **** 			this tick period. */
 486:Source\portable\GCC\ARM_CM3/port.c **** 			portNVIC_SYSTICK_LOAD_REG = portNVIC_SYSTICK_CURRENT_VALUE_REG;
 487:Source\portable\GCC\ARM_CM3/port.c **** 
 488:Source\portable\GCC\ARM_CM3/port.c **** 			/* Restart SysTick. */
 489:Source\portable\GCC\ARM_CM3/port.c **** 			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 490:Source\portable\GCC\ARM_CM3/port.c **** 
 491:Source\portable\GCC\ARM_CM3/port.c **** 			/* Reset the reload register to the value required for normal tick
 492:Source\portable\GCC\ARM_CM3/port.c **** 			periods. */
 493:Source\portable\GCC\ARM_CM3/port.c **** 			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 494:Source\portable\GCC\ARM_CM3/port.c **** 
 495:Source\portable\GCC\ARM_CM3/port.c **** 			/* Re-enable interrupts - see comments above the cpsid instruction()
 496:Source\portable\GCC\ARM_CM3/port.c **** 			above. */
 497:Source\portable\GCC\ARM_CM3/port.c **** 			__asm volatile( "cpsie i" ::: "memory" );
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccetyzvX.s 			page 24


 498:Source\portable\GCC\ARM_CM3/port.c **** 		}
 499:Source\portable\GCC\ARM_CM3/port.c **** 		else
 500:Source\portable\GCC\ARM_CM3/port.c **** 		{
 501:Source\portable\GCC\ARM_CM3/port.c **** 			/* Set the new reload value. */
 502:Source\portable\GCC\ARM_CM3/port.c **** 			portNVIC_SYSTICK_LOAD_REG = ulReloadValue;
 503:Source\portable\GCC\ARM_CM3/port.c **** 
 504:Source\portable\GCC\ARM_CM3/port.c **** 			/* Clear the SysTick count flag and set the count value back to
 505:Source\portable\GCC\ARM_CM3/port.c **** 			zero. */
 506:Source\portable\GCC\ARM_CM3/port.c **** 			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 507:Source\portable\GCC\ARM_CM3/port.c **** 
 508:Source\portable\GCC\ARM_CM3/port.c **** 			/* Restart SysTick. */
 509:Source\portable\GCC\ARM_CM3/port.c **** 			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 510:Source\portable\GCC\ARM_CM3/port.c **** 
 511:Source\portable\GCC\ARM_CM3/port.c **** 			/* Sleep until something happens.  configPRE_SLEEP_PROCESSING() can
 512:Source\portable\GCC\ARM_CM3/port.c **** 			set its parameter to 0 to indicate that its implementation contains
 513:Source\portable\GCC\ARM_CM3/port.c **** 			its own wait for interrupt or wait for event instruction, and so wfi
 514:Source\portable\GCC\ARM_CM3/port.c **** 			should not be executed again.  However, the original expected idle
 515:Source\portable\GCC\ARM_CM3/port.c **** 			time variable must remain unmodified, so a copy is taken. */
 516:Source\portable\GCC\ARM_CM3/port.c **** 			xModifiableIdleTime = xExpectedIdleTime;
 517:Source\portable\GCC\ARM_CM3/port.c **** 			configPRE_SLEEP_PROCESSING( xModifiableIdleTime );
 518:Source\portable\GCC\ARM_CM3/port.c **** 			if( xModifiableIdleTime > 0 )
 519:Source\portable\GCC\ARM_CM3/port.c **** 			{
 520:Source\portable\GCC\ARM_CM3/port.c **** 				__asm volatile( "dsb" ::: "memory" );
 521:Source\portable\GCC\ARM_CM3/port.c **** 				__asm volatile( "wfi" );
 522:Source\portable\GCC\ARM_CM3/port.c **** 				__asm volatile( "isb" );
 523:Source\portable\GCC\ARM_CM3/port.c **** 			}
 524:Source\portable\GCC\ARM_CM3/port.c **** 			configPOST_SLEEP_PROCESSING( xExpectedIdleTime );
 525:Source\portable\GCC\ARM_CM3/port.c **** 
 526:Source\portable\GCC\ARM_CM3/port.c **** 			/* Re-enable interrupts to allow the interrupt that brought the MCU
 527:Source\portable\GCC\ARM_CM3/port.c **** 			out of sleep mode to execute immediately.  see comments above
 528:Source\portable\GCC\ARM_CM3/port.c **** 			__disable_interrupt() call above. */
 529:Source\portable\GCC\ARM_CM3/port.c **** 			__asm volatile( "cpsie i" ::: "memory" );
 530:Source\portable\GCC\ARM_CM3/port.c **** 			__asm volatile( "dsb" );
 531:Source\portable\GCC\ARM_CM3/port.c **** 			__asm volatile( "isb" );
 532:Source\portable\GCC\ARM_CM3/port.c **** 
 533:Source\portable\GCC\ARM_CM3/port.c **** 			/* Disable interrupts again because the clock is about to be stopped
 534:Source\portable\GCC\ARM_CM3/port.c **** 			and interrupts that execute while the clock is stopped will increase
 535:Source\portable\GCC\ARM_CM3/port.c **** 			any slippage between the time maintained by the RTOS and calendar
 536:Source\portable\GCC\ARM_CM3/port.c **** 			time. */
 537:Source\portable\GCC\ARM_CM3/port.c **** 			__asm volatile( "cpsid i" ::: "memory" );
 538:Source\portable\GCC\ARM_CM3/port.c **** 			__asm volatile( "dsb" );
 539:Source\portable\GCC\ARM_CM3/port.c **** 			__asm volatile( "isb" );
 540:Source\portable\GCC\ARM_CM3/port.c **** 
 541:Source\portable\GCC\ARM_CM3/port.c **** 			/* Disable the SysTick clock without reading the
 542:Source\portable\GCC\ARM_CM3/port.c **** 			portNVIC_SYSTICK_CTRL_REG register to ensure the
 543:Source\portable\GCC\ARM_CM3/port.c **** 			portNVIC_SYSTICK_COUNT_FLAG_BIT is not cleared if it is set.  Again,
 544:Source\portable\GCC\ARM_CM3/port.c **** 			the time the SysTick is stopped for is accounted for as best it can
 545:Source\portable\GCC\ARM_CM3/port.c **** 			be, but using the tickless mode will inevitably result in some tiny
 546:Source\portable\GCC\ARM_CM3/port.c **** 			drift of the time maintained by the kernel with respect to calendar
 547:Source\portable\GCC\ARM_CM3/port.c **** 			time*/
 548:Source\portable\GCC\ARM_CM3/port.c **** 			portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT );
 549:Source\portable\GCC\ARM_CM3/port.c **** 
 550:Source\portable\GCC\ARM_CM3/port.c **** 			/* Determine if the SysTick clock has already counted to zero and
 551:Source\portable\GCC\ARM_CM3/port.c **** 			been set back to the current reload value (the reload back being
 552:Source\portable\GCC\ARM_CM3/port.c **** 			correct for the entire expected idle time) or if the SysTick is yet
 553:Source\portable\GCC\ARM_CM3/port.c **** 			to count to zero (in which case an interrupt other than the SysTick
 554:Source\portable\GCC\ARM_CM3/port.c **** 			must have brought the system out of sleep mode). */
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccetyzvX.s 			page 25


 555:Source\portable\GCC\ARM_CM3/port.c **** 			if( ( portNVIC_SYSTICK_CTRL_REG & portNVIC_SYSTICK_COUNT_FLAG_BIT ) != 0 )
 556:Source\portable\GCC\ARM_CM3/port.c **** 			{
 557:Source\portable\GCC\ARM_CM3/port.c **** 				uint32_t ulCalculatedLoadValue;
 558:Source\portable\GCC\ARM_CM3/port.c **** 
 559:Source\portable\GCC\ARM_CM3/port.c **** 				/* The tick interrupt is already pending, and the SysTick count
 560:Source\portable\GCC\ARM_CM3/port.c **** 				reloaded with ulReloadValue.  Reset the
 561:Source\portable\GCC\ARM_CM3/port.c **** 				portNVIC_SYSTICK_LOAD_REG with whatever remains of this tick
 562:Source\portable\GCC\ARM_CM3/port.c **** 				period. */
 563:Source\portable\GCC\ARM_CM3/port.c **** 				ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL ) - ( ulReloadValue - portNVIC_SYSTICK_
 564:Source\portable\GCC\ARM_CM3/port.c **** 
 565:Source\portable\GCC\ARM_CM3/port.c **** 				/* Don't allow a tiny value, or values that have somehow
 566:Source\portable\GCC\ARM_CM3/port.c **** 				underflowed because the post sleep hook did something
 567:Source\portable\GCC\ARM_CM3/port.c **** 				that took too long. */
 568:Source\portable\GCC\ARM_CM3/port.c **** 				if( ( ulCalculatedLoadValue < ulStoppedTimerCompensation ) || ( ulCalculatedLoadValue > ulTimer
 569:Source\portable\GCC\ARM_CM3/port.c **** 				{
 570:Source\portable\GCC\ARM_CM3/port.c **** 					ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL );
 571:Source\portable\GCC\ARM_CM3/port.c **** 				}
 572:Source\portable\GCC\ARM_CM3/port.c **** 
 573:Source\portable\GCC\ARM_CM3/port.c **** 				portNVIC_SYSTICK_LOAD_REG = ulCalculatedLoadValue;
 574:Source\portable\GCC\ARM_CM3/port.c **** 
 575:Source\portable\GCC\ARM_CM3/port.c **** 				/* As the pending tick will be processed as soon as this
 576:Source\portable\GCC\ARM_CM3/port.c **** 				function exits, the tick value maintained by the tick is stepped
 577:Source\portable\GCC\ARM_CM3/port.c **** 				forward by one less than the time spent waiting. */
 578:Source\portable\GCC\ARM_CM3/port.c **** 				ulCompleteTickPeriods = xExpectedIdleTime - 1UL;
 579:Source\portable\GCC\ARM_CM3/port.c **** 			}
 580:Source\portable\GCC\ARM_CM3/port.c **** 			else
 581:Source\portable\GCC\ARM_CM3/port.c **** 			{
 582:Source\portable\GCC\ARM_CM3/port.c **** 				/* Something other than the tick interrupt ended the sleep.
 583:Source\portable\GCC\ARM_CM3/port.c **** 				Work out how long the sleep lasted rounded to complete tick
 584:Source\portable\GCC\ARM_CM3/port.c **** 				periods (not the ulReload value which accounted for part
 585:Source\portable\GCC\ARM_CM3/port.c **** 				ticks). */
 586:Source\portable\GCC\ARM_CM3/port.c **** 				ulCompletedSysTickDecrements = ( xExpectedIdleTime * ulTimerCountsForOneTick ) - portNVIC_SYSTI
 587:Source\portable\GCC\ARM_CM3/port.c **** 
 588:Source\portable\GCC\ARM_CM3/port.c **** 				/* How many complete tick periods passed while the processor
 589:Source\portable\GCC\ARM_CM3/port.c **** 				was waiting? */
 590:Source\portable\GCC\ARM_CM3/port.c **** 				ulCompleteTickPeriods = ulCompletedSysTickDecrements / ulTimerCountsForOneTick;
 591:Source\portable\GCC\ARM_CM3/port.c **** 
 592:Source\portable\GCC\ARM_CM3/port.c **** 				/* The reload value is set to whatever fraction of a single tick
 593:Source\portable\GCC\ARM_CM3/port.c **** 				period remains. */
 594:Source\portable\GCC\ARM_CM3/port.c **** 				portNVIC_SYSTICK_LOAD_REG = ( ( ulCompleteTickPeriods + 1UL ) * ulTimerCountsForOneTick ) - ulC
 595:Source\portable\GCC\ARM_CM3/port.c **** 			}
 596:Source\portable\GCC\ARM_CM3/port.c **** 
 597:Source\portable\GCC\ARM_CM3/port.c **** 			/* Restart SysTick so it runs from portNVIC_SYSTICK_LOAD_REG
 598:Source\portable\GCC\ARM_CM3/port.c **** 			again, then set portNVIC_SYSTICK_LOAD_REG back to its standard
 599:Source\portable\GCC\ARM_CM3/port.c **** 			value. */
 600:Source\portable\GCC\ARM_CM3/port.c **** 			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 601:Source\portable\GCC\ARM_CM3/port.c **** 			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 602:Source\portable\GCC\ARM_CM3/port.c **** 			vTaskStepTick( ulCompleteTickPeriods );
 603:Source\portable\GCC\ARM_CM3/port.c **** 			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 604:Source\portable\GCC\ARM_CM3/port.c **** 
 605:Source\portable\GCC\ARM_CM3/port.c **** 			/* Exit with interrupts enabled. */
 606:Source\portable\GCC\ARM_CM3/port.c **** 			__asm volatile( "cpsie i" ::: "memory" );
 607:Source\portable\GCC\ARM_CM3/port.c **** 		}
 608:Source\portable\GCC\ARM_CM3/port.c **** 	}
 609:Source\portable\GCC\ARM_CM3/port.c **** 
 610:Source\portable\GCC\ARM_CM3/port.c **** #endif /* configUSE_TICKLESS_IDLE */
 611:Source\portable\GCC\ARM_CM3/port.c **** /*-----------------------------------------------------------*/
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccetyzvX.s 			page 26


 612:Source\portable\GCC\ARM_CM3/port.c **** 
 613:Source\portable\GCC\ARM_CM3/port.c **** /*
 614:Source\portable\GCC\ARM_CM3/port.c ****  * Setup the systick timer to generate the tick interrupts at the required
 615:Source\portable\GCC\ARM_CM3/port.c ****  * frequency.
 616:Source\portable\GCC\ARM_CM3/port.c ****  */
 617:Source\portable\GCC\ARM_CM3/port.c **** __attribute__(( weak )) void vPortSetupTimerInterrupt( void )
 618:Source\portable\GCC\ARM_CM3/port.c **** {
 583              		.loc 1 618 0
 584              		.cfi_startproc
 585              		@ args = 0, pretend = 0, frame = 0
 586              		@ frame_needed = 1, uses_anonymous_args = 0
 587              		@ link register save eliminated.
 588 0000 80B4     		push	{r7}
 589              		.cfi_def_cfa_offset 4
 590              		.cfi_offset 7, -4
 591 0002 00AF     		add	r7, sp, #0
 592              		.cfi_def_cfa_register 7
 619:Source\portable\GCC\ARM_CM3/port.c **** 	/* Calculate the constants required to configure the tick interrupt. */
 620:Source\portable\GCC\ARM_CM3/port.c **** 	#if( configUSE_TICKLESS_IDLE == 1 )
 621:Source\portable\GCC\ARM_CM3/port.c **** 	{
 622:Source\portable\GCC\ARM_CM3/port.c **** 		ulTimerCountsForOneTick = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
 623:Source\portable\GCC\ARM_CM3/port.c **** 		xMaximumPossibleSuppressedTicks = portMAX_24_BIT_NUMBER / ulTimerCountsForOneTick;
 624:Source\portable\GCC\ARM_CM3/port.c **** 		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOC
 625:Source\portable\GCC\ARM_CM3/port.c **** 	}
 626:Source\portable\GCC\ARM_CM3/port.c **** 	#endif /* configUSE_TICKLESS_IDLE */
 627:Source\portable\GCC\ARM_CM3/port.c **** 
 628:Source\portable\GCC\ARM_CM3/port.c **** 	/* Stop and clear the SysTick. */
 629:Source\portable\GCC\ARM_CM3/port.c **** 	portNVIC_SYSTICK_CTRL_REG = 0UL;
 593              		.loc 1 629 0
 594 0004 084B     		ldr	r3, .L28
 595 0006 0022     		movs	r2, #0
 596 0008 1A60     		str	r2, [r3]
 630:Source\portable\GCC\ARM_CM3/port.c **** 	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 597              		.loc 1 630 0
 598 000a 084B     		ldr	r3, .L28+4
 599 000c 0022     		movs	r2, #0
 600 000e 1A60     		str	r2, [r3]
 631:Source\portable\GCC\ARM_CM3/port.c **** 
 632:Source\portable\GCC\ARM_CM3/port.c **** 	/* Configure SysTick to interrupt at the requested rate. */
 633:Source\portable\GCC\ARM_CM3/port.c **** 	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 601              		.loc 1 633 0
 602 0010 074B     		ldr	r3, .L28+8
 603 0012 45F6BF52 		movw	r2, #23999
 604 0016 1A60     		str	r2, [r3]
 634:Source\portable\GCC\ARM_CM3/port.c **** 	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTI
 605              		.loc 1 634 0
 606 0018 034B     		ldr	r3, .L28
 607 001a 0722     		movs	r2, #7
 608 001c 1A60     		str	r2, [r3]
 635:Source\portable\GCC\ARM_CM3/port.c **** }
 609              		.loc 1 635 0
 610 001e 00BF     		nop
 611 0020 BD46     		mov	sp, r7
 612              		.cfi_def_cfa_register 13
 613              		@ sp needed
 614 0022 80BC     		pop	{r7}
 615              		.cfi_restore 7
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccetyzvX.s 			page 27


 616              		.cfi_def_cfa_offset 0
 617 0024 7047     		bx	lr
 618              	.L29:
 619 0026 00BF     		.align	2
 620              	.L28:
 621 0028 10E000E0 		.word	-536813552
 622 002c 18E000E0 		.word	-536813544
 623 0030 14E000E0 		.word	-536813548
 624              		.cfi_endproc
 625              	.LFE78:
 626              		.size	vPortSetupTimerInterrupt, .-vPortSetupTimerInterrupt
 627              		.text
 628              	.Letext0:
 629              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.3\\psoc creator\\import\\gnu\\arm\\5.4.
 630              		.file 4 "c:\\program files (x86)\\cypress\\psoc creator\\4.3\\psoc creator\\import\\gnu\\arm\\5.4.
 631              		.file 5 "Generated_Source\\PSoC5/cytypes.h"
 632              		.file 6 "Generated_Source\\PSoC5/DS18x8.h"
 633              		.file 7 ".\\Source\\include/projdefs.h"
 634              		.file 8 "Generated_Source\\PSoC5/core_cm3.h"
 635              		.section	.debug_info,"",%progbits
 636              	.Ldebug_info0:
 637 0000 8B030000 		.4byte	0x38b
 638 0004 0400     		.2byte	0x4
 639 0006 00000000 		.4byte	.Ldebug_abbrev0
 640 000a 04       		.byte	0x4
 641 000b 01       		.uleb128 0x1
 642 000c 1A000000 		.4byte	.LASF44
 643 0010 0C       		.byte	0xc
 644 0011 28030000 		.4byte	.LASF45
 645 0015 58010000 		.4byte	.LASF46
 646 0019 00000000 		.4byte	.Ldebug_ranges0+0
 647 001d 00000000 		.4byte	0
 648 0021 00000000 		.4byte	.Ldebug_line0
 649 0025 02       		.uleb128 0x2
 650 0026 04       		.byte	0x4
 651 0027 05       		.byte	0x5
 652 0028 696E7400 		.ascii	"int\000"
 653 002c 03       		.uleb128 0x3
 654 002d 04       		.byte	0x4
 655 002e 07       		.byte	0x7
 656 002f 2D020000 		.4byte	.LASF0
 657 0033 03       		.uleb128 0x3
 658 0034 08       		.byte	0x8
 659 0035 05       		.byte	0x5
 660 0036 A3020000 		.4byte	.LASF1
 661 003a 03       		.uleb128 0x3
 662 003b 08       		.byte	0x8
 663 003c 04       		.byte	0x4
 664 003d 61030000 		.4byte	.LASF2
 665 0041 03       		.uleb128 0x3
 666 0042 01       		.byte	0x1
 667 0043 06       		.byte	0x6
 668 0044 6D030000 		.4byte	.LASF3
 669 0048 03       		.uleb128 0x3
 670 0049 01       		.byte	0x1
 671 004a 08       		.byte	0x8
 672 004b 9B010000 		.4byte	.LASF4
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccetyzvX.s 			page 28


 673 004f 03       		.uleb128 0x3
 674 0050 02       		.byte	0x2
 675 0051 05       		.byte	0x5
 676 0052 DD020000 		.4byte	.LASF5
 677 0056 03       		.uleb128 0x3
 678 0057 02       		.byte	0x2
 679 0058 07       		.byte	0x7
 680 0059 C6010000 		.4byte	.LASF6
 681 005d 04       		.uleb128 0x4
 682 005e D8000000 		.4byte	.LASF8
 683 0062 03       		.byte	0x3
 684 0063 3F       		.byte	0x3f
 685 0064 68000000 		.4byte	0x68
 686 0068 03       		.uleb128 0x3
 687 0069 04       		.byte	0x4
 688 006a 05       		.byte	0x5
 689 006b E2000000 		.4byte	.LASF7
 690 006f 04       		.uleb128 0x4
 691 0070 A9010000 		.4byte	.LASF9
 692 0074 03       		.byte	0x3
 693 0075 41       		.byte	0x41
 694 0076 7A000000 		.4byte	0x7a
 695 007a 03       		.uleb128 0x3
 696 007b 04       		.byte	0x4
 697 007c 07       		.byte	0x7
 698 007d B4010000 		.4byte	.LASF10
 699 0081 03       		.uleb128 0x3
 700 0082 08       		.byte	0x8
 701 0083 07       		.byte	0x7
 702 0084 47020000 		.4byte	.LASF11
 703 0088 04       		.uleb128 0x4
 704 0089 2F010000 		.4byte	.LASF12
 705 008d 04       		.byte	0x4
 706 008e 2C       		.byte	0x2c
 707 008f 5D000000 		.4byte	0x5d
 708 0093 04       		.uleb128 0x4
 709 0094 10030000 		.4byte	.LASF13
 710 0098 04       		.byte	0x4
 711 0099 30       		.byte	0x30
 712 009a 6F000000 		.4byte	0x6f
 713 009e 05       		.uleb128 0x5
 714 009f F8020000 		.4byte	.LASF14
 715 00a3 05       		.byte	0x5
 716 00a4 E401     		.2byte	0x1e4
 717 00a6 48000000 		.4byte	0x48
 718 00aa 05       		.uleb128 0x5
 719 00ab 02020000 		.4byte	.LASF15
 720 00af 05       		.byte	0x5
 721 00b0 E501     		.2byte	0x1e5
 722 00b2 56000000 		.4byte	0x56
 723 00b6 03       		.uleb128 0x3
 724 00b7 04       		.byte	0x4
 725 00b8 04       		.byte	0x4
 726 00b9 37010000 		.4byte	.LASF16
 727 00bd 03       		.uleb128 0x3
 728 00be 08       		.byte	0x8
 729 00bf 04       		.byte	0x4
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccetyzvX.s 			page 29


 730 00c0 EE010000 		.4byte	.LASF17
 731 00c4 03       		.uleb128 0x3
 732 00c5 01       		.byte	0x1
 733 00c6 08       		.byte	0x8
 734 00c7 B1020000 		.4byte	.LASF18
 735 00cb 06       		.uleb128 0x6
 736 00cc 9E000000 		.4byte	0x9e
 737 00d0 03       		.uleb128 0x3
 738 00d1 04       		.byte	0x4
 739 00d2 07       		.byte	0x7
 740 00d3 9A020000 		.4byte	.LASF19
 741 00d7 07       		.uleb128 0x7
 742 00d8 04       		.byte	0x4
 743 00d9 08       		.uleb128 0x8
 744 00da 11010000 		.4byte	.LASF47
 745 00de 04       		.byte	0x4
 746 00df 06       		.byte	0x6
 747 00e0 30       		.byte	0x30
 748 00e1 FE000000 		.4byte	0xfe
 749 00e5 09       		.uleb128 0x9
 750 00e6 CC000000 		.4byte	.LASF20
 751 00ea 06       		.byte	0x6
 752 00eb 31       		.byte	0x31
 753 00ec AA000000 		.4byte	0xaa
 754 00f0 00       		.byte	0
 755 00f1 09       		.uleb128 0x9
 756 00f2 12000000 		.4byte	.LASF21
 757 00f6 06       		.byte	0x6
 758 00f7 32       		.byte	0x32
 759 00f8 9E000000 		.4byte	0x9e
 760 00fc 02       		.byte	0x2
 761 00fd 00       		.byte	0
 762 00fe 06       		.uleb128 0x6
 763 00ff 93000000 		.4byte	0x93
 764 0103 04       		.uleb128 0x4
 765 0104 20010000 		.4byte	.LASF22
 766 0108 07       		.byte	0x7
 767 0109 23       		.byte	0x23
 768 010a 0E010000 		.4byte	0x10e
 769 010e 0A       		.uleb128 0xa
 770 010f 04       		.byte	0x4
 771 0110 14010000 		.4byte	0x114
 772 0114 0B       		.uleb128 0xb
 773 0115 1F010000 		.4byte	0x11f
 774 0119 0C       		.uleb128 0xc
 775 011a D7000000 		.4byte	0xd7
 776 011e 00       		.byte	0
 777 011f 04       		.uleb128 0x4
 778 0120 B6020000 		.4byte	.LASF23
 779 0124 02       		.byte	0x2
 780 0125 37       		.byte	0x37
 781 0126 93000000 		.4byte	0x93
 782 012a 04       		.uleb128 0x4
 783 012b D2020000 		.4byte	.LASF24
 784 012f 02       		.byte	0x2
 785 0130 38       		.byte	0x38
 786 0131 68000000 		.4byte	0x68
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccetyzvX.s 			page 30


 787 0135 04       		.uleb128 0x4
 788 0136 8D030000 		.4byte	.LASF25
 789 013a 02       		.byte	0x2
 790 013b 39       		.byte	0x39
 791 013c 7A000000 		.4byte	0x7a
 792 0140 04       		.uleb128 0x4
 793 0141 C1000000 		.4byte	.LASF26
 794 0145 02       		.byte	0x2
 795 0146 3F       		.byte	0x3f
 796 0147 93000000 		.4byte	0x93
 797 014b 0A       		.uleb128 0xa
 798 014c 04       		.byte	0x4
 799 014d 1F010000 		.4byte	0x11f
 800 0151 0D       		.uleb128 0xd
 801 0152 5E020000 		.4byte	.LASF27
 802 0156 02       		.byte	0x2
 803 0157 C1       		.byte	0xc1
 804 0158 03       		.byte	0x3
 805 0159 69010000 		.4byte	0x169
 806 015d 0E       		.uleb128 0xe
 807 015e F5010000 		.4byte	.LASF48
 808 0162 02       		.byte	0x2
 809 0163 C3       		.byte	0xc3
 810 0164 93000000 		.4byte	0x93
 811 0168 00       		.byte	0
 812 0169 0D       		.uleb128 0xd
 813 016a 09020000 		.4byte	.LASF28
 814 016e 02       		.byte	0x2
 815 016f E5       		.byte	0xe5
 816 0170 03       		.byte	0x3
 817 0171 81010000 		.4byte	0x181
 818 0175 0F       		.uleb128 0xf
 819 0176 19030000 		.4byte	.LASF49
 820 017a 02       		.byte	0x2
 821 017b E5       		.byte	0xe5
 822 017c 93000000 		.4byte	0x93
 823 0180 00       		.byte	0
 824 0181 10       		.uleb128 0x10
 825 0182 99030000 		.4byte	.LASF50
 826 0186 01       		.byte	0x1
 827 0187 AE       		.byte	0xae
 828 0188 4B010000 		.4byte	0x14b
 829 018c 00000000 		.4byte	.LFB68
 830 0190 58000000 		.4byte	.LFE68-.LFB68
 831 0194 01       		.uleb128 0x1
 832 0195 9C       		.byte	0x9c
 833 0196 C5010000 		.4byte	0x1c5
 834 019a 11       		.uleb128 0x11
 835 019b 3A020000 		.4byte	.LASF29
 836 019f 01       		.byte	0x1
 837 01a0 AE       		.byte	0xae
 838 01a1 4B010000 		.4byte	0x14b
 839 01a5 02       		.uleb128 0x2
 840 01a6 91       		.byte	0x91
 841 01a7 74       		.sleb128 -12
 842 01a8 11       		.uleb128 0x11
 843 01a9 A8000000 		.4byte	.LASF30
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccetyzvX.s 			page 31


 844 01ad 01       		.byte	0x1
 845 01ae AE       		.byte	0xae
 846 01af 03010000 		.4byte	0x103
 847 01b3 02       		.uleb128 0x2
 848 01b4 91       		.byte	0x91
 849 01b5 70       		.sleb128 -16
 850 01b6 11       		.uleb128 0x11
 851 01b7 3D010000 		.4byte	.LASF31
 852 01bb 01       		.byte	0x1
 853 01bc AE       		.byte	0xae
 854 01bd D7000000 		.4byte	0xd7
 855 01c1 02       		.uleb128 0x2
 856 01c2 91       		.byte	0x91
 857 01c3 6C       		.sleb128 -20
 858 01c4 00       		.byte	0
 859 01c5 12       		.uleb128 0x12
 860 01c6 70020000 		.4byte	.LASF51
 861 01ca 01       		.byte	0x1
 862 01cb C0       		.byte	0xc0
 863 01cc 00000000 		.4byte	.LFB69
 864 01d0 2E000000 		.4byte	.LFE69-.LFB69
 865 01d4 01       		.uleb128 0x1
 866 01d5 9C       		.byte	0x9c
 867 01d6 0B020000 		.4byte	0x20b
 868 01da 13       		.uleb128 0x13
 869 01db D9010000 		.4byte	.LASF39
 870 01df 01       		.byte	0x1
 871 01e0 C2       		.byte	0xc2
 872 01e1 FE000000 		.4byte	0xfe
 873 01e5 02       		.uleb128 0x2
 874 01e6 91       		.byte	0x91
 875 01e7 70       		.sleb128 -16
 876 01e8 14       		.uleb128 0x14
 877 01e9 51010000 		.4byte	0x151
 878 01ed 0A000000 		.4byte	.LBB12
 879 01f1 12000000 		.4byte	.LBE12-.LBB12
 880 01f5 01       		.byte	0x1
 881 01f6 CB       		.byte	0xcb
 882 01f7 15       		.uleb128 0x15
 883 01f8 0A000000 		.4byte	.LBB13
 884 01fc 12000000 		.4byte	.LBE13-.LBB13
 885 0200 16       		.uleb128 0x16
 886 0201 5D010000 		.4byte	0x15d
 887 0205 02       		.uleb128 0x2
 888 0206 91       		.byte	0x91
 889 0207 74       		.sleb128 -12
 890 0208 00       		.byte	0
 891 0209 00       		.byte	0
 892 020a 00       		.byte	0
 893 020b 17       		.uleb128 0x17
 894 020c C2020000 		.4byte	.LASF32
 895 0210 01       		.byte	0x1
 896 0211 D9       		.byte	0xd9
 897 0212 00000000 		.4byte	.LFB70
 898 0216 26000000 		.4byte	.LFE70-.LFB70
 899 021a 01       		.uleb128 0x1
 900 021b 9C       		.byte	0x9c
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccetyzvX.s 			page 32


 901 021c 18       		.uleb128 0x18
 902 021d 4B030000 		.4byte	.LASF52
 903 0221 01       		.byte	0x1
 904 0222 ED       		.byte	0xed
 905 0223 00000000 		.4byte	.LFB71
 906 0227 1C000000 		.4byte	.LFE71-.LFB71
 907 022b 01       		.uleb128 0x1
 908 022c 9C       		.byte	0x9c
 909 022d 19       		.uleb128 0x19
 910 022e 79030000 		.4byte	.LASF53
 911 0232 01       		.byte	0x1
 912 0233 0101     		.2byte	0x101
 913 0235 2A010000 		.4byte	0x12a
 914 0239 00000000 		.4byte	.LFB72
 915 023d 40000000 		.4byte	.LFE72-.LFB72
 916 0241 01       		.uleb128 0x1
 917 0242 9C       		.byte	0x9c
 918 0243 1A       		.uleb128 0x1a
 919 0244 AF000000 		.4byte	.LASF33
 920 0248 01       		.byte	0x1
 921 0249 6101     		.2byte	0x161
 922 024b 00000000 		.4byte	.LFB73
 923 024f 0C000000 		.4byte	.LFE73-.LFB73
 924 0253 01       		.uleb128 0x1
 925 0254 9C       		.byte	0x9c
 926 0255 1B       		.uleb128 0x1b
 927 0256 EB000000 		.4byte	.LASF34
 928 025a 01       		.byte	0x1
 929 025b 6901     		.2byte	0x169
 930 025d 00000000 		.4byte	.LFB74
 931 0261 30000000 		.4byte	.LFE74-.LFB74
 932 0265 01       		.uleb128 0x1
 933 0266 9C       		.byte	0x9c
 934 0267 8F020000 		.4byte	0x28f
 935 026b 1C       		.uleb128 0x1c
 936 026c 51010000 		.4byte	0x151
 937 0270 06000000 		.4byte	.LBB14
 938 0274 12000000 		.4byte	.LBE14-.LBB14
 939 0278 01       		.byte	0x1
 940 0279 6B01     		.2byte	0x16b
 941 027b 15       		.uleb128 0x15
 942 027c 06000000 		.4byte	.LBB15
 943 0280 12000000 		.4byte	.LBE15-.LBB15
 944 0284 16       		.uleb128 0x16
 945 0285 5D010000 		.4byte	0x15d
 946 0289 02       		.uleb128 0x2
 947 028a 91       		.byte	0x91
 948 028b 74       		.sleb128 -12
 949 028c 00       		.byte	0
 950 028d 00       		.byte	0
 951 028e 00       		.byte	0
 952 028f 1B       		.uleb128 0x1b
 953 0290 FE020000 		.4byte	.LASF35
 954 0294 01       		.byte	0x1
 955 0295 7A01     		.2byte	0x17a
 956 0297 00000000 		.4byte	.LFB75
 957 029b 30000000 		.4byte	.LFE75-.LFB75
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccetyzvX.s 			page 33


 958 029f 01       		.uleb128 0x1
 959 02a0 9C       		.byte	0x9c
 960 02a1 BF020000 		.4byte	0x2bf
 961 02a5 1C       		.uleb128 0x1c
 962 02a6 69010000 		.4byte	0x169
 963 02aa 1C000000 		.4byte	.LBB16
 964 02ae 06000000 		.4byte	.LBE16-.LBB16
 965 02b2 01       		.byte	0x1
 966 02b3 8001     		.2byte	0x180
 967 02b5 1D       		.uleb128 0x1d
 968 02b6 75010000 		.4byte	0x175
 969 02ba 02       		.uleb128 0x2
 970 02bb 91       		.byte	0x91
 971 02bc 74       		.sleb128 -12
 972 02bd 00       		.byte	0
 973 02be 00       		.byte	0
 974 02bf 1A       		.uleb128 0x1a
 975 02c0 FE000000 		.4byte	.LASF36
 976 02c4 01       		.byte	0x1
 977 02c5 8501     		.2byte	0x185
 978 02c7 00000000 		.4byte	.LFB76
 979 02cb 46000000 		.4byte	.LFE76-.LFB76
 980 02cf 01       		.uleb128 0x1
 981 02d0 9C       		.byte	0x9c
 982 02d1 1E       		.uleb128 0x1e
 983 02d2 19020000 		.4byte	.LASF37
 984 02d6 01       		.byte	0x1
 985 02d7 AA01     		.2byte	0x1aa
 986 02d9 00000000 		.4byte	.LFB77
 987 02dd 40000000 		.4byte	.LFE77-.LFB77
 988 02e1 01       		.uleb128 0x1
 989 02e2 9C       		.byte	0x9c
 990 02e3 28030000 		.4byte	0x328
 991 02e7 1F       		.uleb128 0x1f
 992 02e8 51010000 		.4byte	0x151
 993 02ec 06000000 		.4byte	.LBB18
 994 02f0 12000000 		.4byte	.LBE18-.LBB18
 995 02f4 01       		.byte	0x1
 996 02f5 B001     		.2byte	0x1b0
 997 02f7 0E030000 		.4byte	0x30e
 998 02fb 15       		.uleb128 0x15
 999 02fc 06000000 		.4byte	.LBB19
 1000 0300 12000000 		.4byte	.LBE19-.LBB19
 1001 0304 16       		.uleb128 0x16
 1002 0305 5D010000 		.4byte	0x15d
 1003 0309 02       		.uleb128 0x2
 1004 030a 91       		.byte	0x91
 1005 030b 70       		.sleb128 -16
 1006 030c 00       		.byte	0
 1007 030d 00       		.byte	0
 1008 030e 1C       		.uleb128 0x1c
 1009 030f 69010000 		.4byte	0x169
 1010 0313 2E000000 		.4byte	.LBB20
 1011 0317 06000000 		.4byte	.LBE20-.LBB20
 1012 031b 01       		.byte	0x1
 1013 031c BA01     		.2byte	0x1ba
 1014 031e 1D       		.uleb128 0x1d
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccetyzvX.s 			page 34


 1015 031f 75010000 		.4byte	0x175
 1016 0323 02       		.uleb128 0x2
 1017 0324 91       		.byte	0x91
 1018 0325 74       		.sleb128 -12
 1019 0326 00       		.byte	0
 1020 0327 00       		.byte	0
 1021 0328 1A       		.uleb128 0x1a
 1022 0329 81020000 		.4byte	.LASF38
 1023 032d 01       		.byte	0x1
 1024 032e 6902     		.2byte	0x269
 1025 0330 00000000 		.4byte	.LFB78
 1026 0334 34000000 		.4byte	.LFE78-.LFB78
 1027 0338 01       		.uleb128 0x1
 1028 0339 9C       		.byte	0x9c
 1029 033a 13       		.uleb128 0x13
 1030 033b 00000000 		.4byte	.LASF40
 1031 033f 01       		.byte	0x1
 1032 0340 85       		.byte	0x85
 1033 0341 35010000 		.4byte	0x135
 1034 0345 05       		.uleb128 0x5
 1035 0346 03       		.byte	0x3
 1036 0347 00000000 		.4byte	uxCriticalNesting
 1037 034b 20       		.uleb128 0x20
 1038 034c D9000000 		.4byte	0xd9
 1039 0350 5B030000 		.4byte	0x35b
 1040 0354 21       		.uleb128 0x21
 1041 0355 D0000000 		.4byte	0xd0
 1042 0359 07       		.byte	0x7
 1043 035a 00       		.byte	0
 1044 035b 22       		.uleb128 0x22
 1045 035c 4A010000 		.4byte	.LASF41
 1046 0360 06       		.byte	0x6
 1047 0361 34       		.byte	0x34
 1048 0362 4B030000 		.4byte	0x34b
 1049 0366 05       		.uleb128 0x5
 1050 0367 03       		.byte	0x3
 1051 0368 00000000 		.4byte	DS18x8_Sensor
 1052 036c 22       		.uleb128 0x22
 1053 036d E7020000 		.4byte	.LASF42
 1054 0371 06       		.byte	0x6
 1055 0372 39       		.byte	0x39
 1056 0373 CB000000 		.4byte	0xcb
 1057 0377 05       		.uleb128 0x5
 1058 0378 03       		.byte	0x3
 1059 0379 00000000 		.4byte	DS18x8_DataReady
 1060 037d 23       		.uleb128 0x23
 1061 037e E1010000 		.4byte	.LASF43
 1062 0382 08       		.byte	0x8
 1063 0383 1207     		.2byte	0x712
 1064 0385 89030000 		.4byte	0x389
 1065 0389 06       		.uleb128 0x6
 1066 038a 88000000 		.4byte	0x88
 1067 038e 00       		.byte	0
 1068              		.section	.debug_abbrev,"",%progbits
 1069              	.Ldebug_abbrev0:
 1070 0000 01       		.uleb128 0x1
 1071 0001 11       		.uleb128 0x11
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccetyzvX.s 			page 35


 1072 0002 01       		.byte	0x1
 1073 0003 25       		.uleb128 0x25
 1074 0004 0E       		.uleb128 0xe
 1075 0005 13       		.uleb128 0x13
 1076 0006 0B       		.uleb128 0xb
 1077 0007 03       		.uleb128 0x3
 1078 0008 0E       		.uleb128 0xe
 1079 0009 1B       		.uleb128 0x1b
 1080 000a 0E       		.uleb128 0xe
 1081 000b 55       		.uleb128 0x55
 1082 000c 17       		.uleb128 0x17
 1083 000d 11       		.uleb128 0x11
 1084 000e 01       		.uleb128 0x1
 1085 000f 10       		.uleb128 0x10
 1086 0010 17       		.uleb128 0x17
 1087 0011 00       		.byte	0
 1088 0012 00       		.byte	0
 1089 0013 02       		.uleb128 0x2
 1090 0014 24       		.uleb128 0x24
 1091 0015 00       		.byte	0
 1092 0016 0B       		.uleb128 0xb
 1093 0017 0B       		.uleb128 0xb
 1094 0018 3E       		.uleb128 0x3e
 1095 0019 0B       		.uleb128 0xb
 1096 001a 03       		.uleb128 0x3
 1097 001b 08       		.uleb128 0x8
 1098 001c 00       		.byte	0
 1099 001d 00       		.byte	0
 1100 001e 03       		.uleb128 0x3
 1101 001f 24       		.uleb128 0x24
 1102 0020 00       		.byte	0
 1103 0021 0B       		.uleb128 0xb
 1104 0022 0B       		.uleb128 0xb
 1105 0023 3E       		.uleb128 0x3e
 1106 0024 0B       		.uleb128 0xb
 1107 0025 03       		.uleb128 0x3
 1108 0026 0E       		.uleb128 0xe
 1109 0027 00       		.byte	0
 1110 0028 00       		.byte	0
 1111 0029 04       		.uleb128 0x4
 1112 002a 16       		.uleb128 0x16
 1113 002b 00       		.byte	0
 1114 002c 03       		.uleb128 0x3
 1115 002d 0E       		.uleb128 0xe
 1116 002e 3A       		.uleb128 0x3a
 1117 002f 0B       		.uleb128 0xb
 1118 0030 3B       		.uleb128 0x3b
 1119 0031 0B       		.uleb128 0xb
 1120 0032 49       		.uleb128 0x49
 1121 0033 13       		.uleb128 0x13
 1122 0034 00       		.byte	0
 1123 0035 00       		.byte	0
 1124 0036 05       		.uleb128 0x5
 1125 0037 16       		.uleb128 0x16
 1126 0038 00       		.byte	0
 1127 0039 03       		.uleb128 0x3
 1128 003a 0E       		.uleb128 0xe
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccetyzvX.s 			page 36


 1129 003b 3A       		.uleb128 0x3a
 1130 003c 0B       		.uleb128 0xb
 1131 003d 3B       		.uleb128 0x3b
 1132 003e 05       		.uleb128 0x5
 1133 003f 49       		.uleb128 0x49
 1134 0040 13       		.uleb128 0x13
 1135 0041 00       		.byte	0
 1136 0042 00       		.byte	0
 1137 0043 06       		.uleb128 0x6
 1138 0044 35       		.uleb128 0x35
 1139 0045 00       		.byte	0
 1140 0046 49       		.uleb128 0x49
 1141 0047 13       		.uleb128 0x13
 1142 0048 00       		.byte	0
 1143 0049 00       		.byte	0
 1144 004a 07       		.uleb128 0x7
 1145 004b 0F       		.uleb128 0xf
 1146 004c 00       		.byte	0
 1147 004d 0B       		.uleb128 0xb
 1148 004e 0B       		.uleb128 0xb
 1149 004f 00       		.byte	0
 1150 0050 00       		.byte	0
 1151 0051 08       		.uleb128 0x8
 1152 0052 13       		.uleb128 0x13
 1153 0053 01       		.byte	0x1
 1154 0054 03       		.uleb128 0x3
 1155 0055 0E       		.uleb128 0xe
 1156 0056 0B       		.uleb128 0xb
 1157 0057 0B       		.uleb128 0xb
 1158 0058 3A       		.uleb128 0x3a
 1159 0059 0B       		.uleb128 0xb
 1160 005a 3B       		.uleb128 0x3b
 1161 005b 0B       		.uleb128 0xb
 1162 005c 01       		.uleb128 0x1
 1163 005d 13       		.uleb128 0x13
 1164 005e 00       		.byte	0
 1165 005f 00       		.byte	0
 1166 0060 09       		.uleb128 0x9
 1167 0061 0D       		.uleb128 0xd
 1168 0062 00       		.byte	0
 1169 0063 03       		.uleb128 0x3
 1170 0064 0E       		.uleb128 0xe
 1171 0065 3A       		.uleb128 0x3a
 1172 0066 0B       		.uleb128 0xb
 1173 0067 3B       		.uleb128 0x3b
 1174 0068 0B       		.uleb128 0xb
 1175 0069 49       		.uleb128 0x49
 1176 006a 13       		.uleb128 0x13
 1177 006b 38       		.uleb128 0x38
 1178 006c 0B       		.uleb128 0xb
 1179 006d 00       		.byte	0
 1180 006e 00       		.byte	0
 1181 006f 0A       		.uleb128 0xa
 1182 0070 0F       		.uleb128 0xf
 1183 0071 00       		.byte	0
 1184 0072 0B       		.uleb128 0xb
 1185 0073 0B       		.uleb128 0xb
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccetyzvX.s 			page 37


 1186 0074 49       		.uleb128 0x49
 1187 0075 13       		.uleb128 0x13
 1188 0076 00       		.byte	0
 1189 0077 00       		.byte	0
 1190 0078 0B       		.uleb128 0xb
 1191 0079 15       		.uleb128 0x15
 1192 007a 01       		.byte	0x1
 1193 007b 27       		.uleb128 0x27
 1194 007c 19       		.uleb128 0x19
 1195 007d 01       		.uleb128 0x1
 1196 007e 13       		.uleb128 0x13
 1197 007f 00       		.byte	0
 1198 0080 00       		.byte	0
 1199 0081 0C       		.uleb128 0xc
 1200 0082 05       		.uleb128 0x5
 1201 0083 00       		.byte	0
 1202 0084 49       		.uleb128 0x49
 1203 0085 13       		.uleb128 0x13
 1204 0086 00       		.byte	0
 1205 0087 00       		.byte	0
 1206 0088 0D       		.uleb128 0xd
 1207 0089 2E       		.uleb128 0x2e
 1208 008a 01       		.byte	0x1
 1209 008b 03       		.uleb128 0x3
 1210 008c 0E       		.uleb128 0xe
 1211 008d 3A       		.uleb128 0x3a
 1212 008e 0B       		.uleb128 0xb
 1213 008f 3B       		.uleb128 0x3b
 1214 0090 0B       		.uleb128 0xb
 1215 0091 27       		.uleb128 0x27
 1216 0092 19       		.uleb128 0x19
 1217 0093 20       		.uleb128 0x20
 1218 0094 0B       		.uleb128 0xb
 1219 0095 01       		.uleb128 0x1
 1220 0096 13       		.uleb128 0x13
 1221 0097 00       		.byte	0
 1222 0098 00       		.byte	0
 1223 0099 0E       		.uleb128 0xe
 1224 009a 34       		.uleb128 0x34
 1225 009b 00       		.byte	0
 1226 009c 03       		.uleb128 0x3
 1227 009d 0E       		.uleb128 0xe
 1228 009e 3A       		.uleb128 0x3a
 1229 009f 0B       		.uleb128 0xb
 1230 00a0 3B       		.uleb128 0x3b
 1231 00a1 0B       		.uleb128 0xb
 1232 00a2 49       		.uleb128 0x49
 1233 00a3 13       		.uleb128 0x13
 1234 00a4 00       		.byte	0
 1235 00a5 00       		.byte	0
 1236 00a6 0F       		.uleb128 0xf
 1237 00a7 05       		.uleb128 0x5
 1238 00a8 00       		.byte	0
 1239 00a9 03       		.uleb128 0x3
 1240 00aa 0E       		.uleb128 0xe
 1241 00ab 3A       		.uleb128 0x3a
 1242 00ac 0B       		.uleb128 0xb
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccetyzvX.s 			page 38


 1243 00ad 3B       		.uleb128 0x3b
 1244 00ae 0B       		.uleb128 0xb
 1245 00af 49       		.uleb128 0x49
 1246 00b0 13       		.uleb128 0x13
 1247 00b1 00       		.byte	0
 1248 00b2 00       		.byte	0
 1249 00b3 10       		.uleb128 0x10
 1250 00b4 2E       		.uleb128 0x2e
 1251 00b5 01       		.byte	0x1
 1252 00b6 3F       		.uleb128 0x3f
 1253 00b7 19       		.uleb128 0x19
 1254 00b8 03       		.uleb128 0x3
 1255 00b9 0E       		.uleb128 0xe
 1256 00ba 3A       		.uleb128 0x3a
 1257 00bb 0B       		.uleb128 0xb
 1258 00bc 3B       		.uleb128 0x3b
 1259 00bd 0B       		.uleb128 0xb
 1260 00be 27       		.uleb128 0x27
 1261 00bf 19       		.uleb128 0x19
 1262 00c0 49       		.uleb128 0x49
 1263 00c1 13       		.uleb128 0x13
 1264 00c2 11       		.uleb128 0x11
 1265 00c3 01       		.uleb128 0x1
 1266 00c4 12       		.uleb128 0x12
 1267 00c5 06       		.uleb128 0x6
 1268 00c6 40       		.uleb128 0x40
 1269 00c7 18       		.uleb128 0x18
 1270 00c8 9742     		.uleb128 0x2117
 1271 00ca 19       		.uleb128 0x19
 1272 00cb 01       		.uleb128 0x1
 1273 00cc 13       		.uleb128 0x13
 1274 00cd 00       		.byte	0
 1275 00ce 00       		.byte	0
 1276 00cf 11       		.uleb128 0x11
 1277 00d0 05       		.uleb128 0x5
 1278 00d1 00       		.byte	0
 1279 00d2 03       		.uleb128 0x3
 1280 00d3 0E       		.uleb128 0xe
 1281 00d4 3A       		.uleb128 0x3a
 1282 00d5 0B       		.uleb128 0xb
 1283 00d6 3B       		.uleb128 0x3b
 1284 00d7 0B       		.uleb128 0xb
 1285 00d8 49       		.uleb128 0x49
 1286 00d9 13       		.uleb128 0x13
 1287 00da 02       		.uleb128 0x2
 1288 00db 18       		.uleb128 0x18
 1289 00dc 00       		.byte	0
 1290 00dd 00       		.byte	0
 1291 00de 12       		.uleb128 0x12
 1292 00df 2E       		.uleb128 0x2e
 1293 00e0 01       		.byte	0x1
 1294 00e1 03       		.uleb128 0x3
 1295 00e2 0E       		.uleb128 0xe
 1296 00e3 3A       		.uleb128 0x3a
 1297 00e4 0B       		.uleb128 0xb
 1298 00e5 3B       		.uleb128 0x3b
 1299 00e6 0B       		.uleb128 0xb
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccetyzvX.s 			page 39


 1300 00e7 27       		.uleb128 0x27
 1301 00e8 19       		.uleb128 0x19
 1302 00e9 11       		.uleb128 0x11
 1303 00ea 01       		.uleb128 0x1
 1304 00eb 12       		.uleb128 0x12
 1305 00ec 06       		.uleb128 0x6
 1306 00ed 40       		.uleb128 0x40
 1307 00ee 18       		.uleb128 0x18
 1308 00ef 9742     		.uleb128 0x2117
 1309 00f1 19       		.uleb128 0x19
 1310 00f2 01       		.uleb128 0x1
 1311 00f3 13       		.uleb128 0x13
 1312 00f4 00       		.byte	0
 1313 00f5 00       		.byte	0
 1314 00f6 13       		.uleb128 0x13
 1315 00f7 34       		.uleb128 0x34
 1316 00f8 00       		.byte	0
 1317 00f9 03       		.uleb128 0x3
 1318 00fa 0E       		.uleb128 0xe
 1319 00fb 3A       		.uleb128 0x3a
 1320 00fc 0B       		.uleb128 0xb
 1321 00fd 3B       		.uleb128 0x3b
 1322 00fe 0B       		.uleb128 0xb
 1323 00ff 49       		.uleb128 0x49
 1324 0100 13       		.uleb128 0x13
 1325 0101 02       		.uleb128 0x2
 1326 0102 18       		.uleb128 0x18
 1327 0103 00       		.byte	0
 1328 0104 00       		.byte	0
 1329 0105 14       		.uleb128 0x14
 1330 0106 1D       		.uleb128 0x1d
 1331 0107 01       		.byte	0x1
 1332 0108 31       		.uleb128 0x31
 1333 0109 13       		.uleb128 0x13
 1334 010a 11       		.uleb128 0x11
 1335 010b 01       		.uleb128 0x1
 1336 010c 12       		.uleb128 0x12
 1337 010d 06       		.uleb128 0x6
 1338 010e 58       		.uleb128 0x58
 1339 010f 0B       		.uleb128 0xb
 1340 0110 59       		.uleb128 0x59
 1341 0111 0B       		.uleb128 0xb
 1342 0112 00       		.byte	0
 1343 0113 00       		.byte	0
 1344 0114 15       		.uleb128 0x15
 1345 0115 0B       		.uleb128 0xb
 1346 0116 01       		.byte	0x1
 1347 0117 11       		.uleb128 0x11
 1348 0118 01       		.uleb128 0x1
 1349 0119 12       		.uleb128 0x12
 1350 011a 06       		.uleb128 0x6
 1351 011b 00       		.byte	0
 1352 011c 00       		.byte	0
 1353 011d 16       		.uleb128 0x16
 1354 011e 34       		.uleb128 0x34
 1355 011f 00       		.byte	0
 1356 0120 31       		.uleb128 0x31
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccetyzvX.s 			page 40


 1357 0121 13       		.uleb128 0x13
 1358 0122 02       		.uleb128 0x2
 1359 0123 18       		.uleb128 0x18
 1360 0124 00       		.byte	0
 1361 0125 00       		.byte	0
 1362 0126 17       		.uleb128 0x17
 1363 0127 2E       		.uleb128 0x2e
 1364 0128 00       		.byte	0
 1365 0129 3F       		.uleb128 0x3f
 1366 012a 19       		.uleb128 0x19
 1367 012b 03       		.uleb128 0x3
 1368 012c 0E       		.uleb128 0xe
 1369 012d 3A       		.uleb128 0x3a
 1370 012e 0B       		.uleb128 0xb
 1371 012f 3B       		.uleb128 0x3b
 1372 0130 0B       		.uleb128 0xb
 1373 0131 27       		.uleb128 0x27
 1374 0132 19       		.uleb128 0x19
 1375 0133 11       		.uleb128 0x11
 1376 0134 01       		.uleb128 0x1
 1377 0135 12       		.uleb128 0x12
 1378 0136 06       		.uleb128 0x6
 1379 0137 40       		.uleb128 0x40
 1380 0138 18       		.uleb128 0x18
 1381 0139 9742     		.uleb128 0x2117
 1382 013b 19       		.uleb128 0x19
 1383 013c 00       		.byte	0
 1384 013d 00       		.byte	0
 1385 013e 18       		.uleb128 0x18
 1386 013f 2E       		.uleb128 0x2e
 1387 0140 00       		.byte	0
 1388 0141 03       		.uleb128 0x3
 1389 0142 0E       		.uleb128 0xe
 1390 0143 3A       		.uleb128 0x3a
 1391 0144 0B       		.uleb128 0xb
 1392 0145 3B       		.uleb128 0x3b
 1393 0146 0B       		.uleb128 0xb
 1394 0147 27       		.uleb128 0x27
 1395 0148 19       		.uleb128 0x19
 1396 0149 11       		.uleb128 0x11
 1397 014a 01       		.uleb128 0x1
 1398 014b 12       		.uleb128 0x12
 1399 014c 06       		.uleb128 0x6
 1400 014d 40       		.uleb128 0x40
 1401 014e 18       		.uleb128 0x18
 1402 014f 9742     		.uleb128 0x2117
 1403 0151 19       		.uleb128 0x19
 1404 0152 00       		.byte	0
 1405 0153 00       		.byte	0
 1406 0154 19       		.uleb128 0x19
 1407 0155 2E       		.uleb128 0x2e
 1408 0156 00       		.byte	0
 1409 0157 3F       		.uleb128 0x3f
 1410 0158 19       		.uleb128 0x19
 1411 0159 03       		.uleb128 0x3
 1412 015a 0E       		.uleb128 0xe
 1413 015b 3A       		.uleb128 0x3a
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccetyzvX.s 			page 41


 1414 015c 0B       		.uleb128 0xb
 1415 015d 3B       		.uleb128 0x3b
 1416 015e 05       		.uleb128 0x5
 1417 015f 27       		.uleb128 0x27
 1418 0160 19       		.uleb128 0x19
 1419 0161 49       		.uleb128 0x49
 1420 0162 13       		.uleb128 0x13
 1421 0163 11       		.uleb128 0x11
 1422 0164 01       		.uleb128 0x1
 1423 0165 12       		.uleb128 0x12
 1424 0166 06       		.uleb128 0x6
 1425 0167 40       		.uleb128 0x40
 1426 0168 18       		.uleb128 0x18
 1427 0169 9642     		.uleb128 0x2116
 1428 016b 19       		.uleb128 0x19
 1429 016c 00       		.byte	0
 1430 016d 00       		.byte	0
 1431 016e 1A       		.uleb128 0x1a
 1432 016f 2E       		.uleb128 0x2e
 1433 0170 00       		.byte	0
 1434 0171 3F       		.uleb128 0x3f
 1435 0172 19       		.uleb128 0x19
 1436 0173 03       		.uleb128 0x3
 1437 0174 0E       		.uleb128 0xe
 1438 0175 3A       		.uleb128 0x3a
 1439 0176 0B       		.uleb128 0xb
 1440 0177 3B       		.uleb128 0x3b
 1441 0178 05       		.uleb128 0x5
 1442 0179 27       		.uleb128 0x27
 1443 017a 19       		.uleb128 0x19
 1444 017b 11       		.uleb128 0x11
 1445 017c 01       		.uleb128 0x1
 1446 017d 12       		.uleb128 0x12
 1447 017e 06       		.uleb128 0x6
 1448 017f 40       		.uleb128 0x40
 1449 0180 18       		.uleb128 0x18
 1450 0181 9742     		.uleb128 0x2117
 1451 0183 19       		.uleb128 0x19
 1452 0184 00       		.byte	0
 1453 0185 00       		.byte	0
 1454 0186 1B       		.uleb128 0x1b
 1455 0187 2E       		.uleb128 0x2e
 1456 0188 01       		.byte	0x1
 1457 0189 3F       		.uleb128 0x3f
 1458 018a 19       		.uleb128 0x19
 1459 018b 03       		.uleb128 0x3
 1460 018c 0E       		.uleb128 0xe
 1461 018d 3A       		.uleb128 0x3a
 1462 018e 0B       		.uleb128 0xb
 1463 018f 3B       		.uleb128 0x3b
 1464 0190 05       		.uleb128 0x5
 1465 0191 27       		.uleb128 0x27
 1466 0192 19       		.uleb128 0x19
 1467 0193 11       		.uleb128 0x11
 1468 0194 01       		.uleb128 0x1
 1469 0195 12       		.uleb128 0x12
 1470 0196 06       		.uleb128 0x6
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccetyzvX.s 			page 42


 1471 0197 40       		.uleb128 0x40
 1472 0198 18       		.uleb128 0x18
 1473 0199 9742     		.uleb128 0x2117
 1474 019b 19       		.uleb128 0x19
 1475 019c 01       		.uleb128 0x1
 1476 019d 13       		.uleb128 0x13
 1477 019e 00       		.byte	0
 1478 019f 00       		.byte	0
 1479 01a0 1C       		.uleb128 0x1c
 1480 01a1 1D       		.uleb128 0x1d
 1481 01a2 01       		.byte	0x1
 1482 01a3 31       		.uleb128 0x31
 1483 01a4 13       		.uleb128 0x13
 1484 01a5 11       		.uleb128 0x11
 1485 01a6 01       		.uleb128 0x1
 1486 01a7 12       		.uleb128 0x12
 1487 01a8 06       		.uleb128 0x6
 1488 01a9 58       		.uleb128 0x58
 1489 01aa 0B       		.uleb128 0xb
 1490 01ab 59       		.uleb128 0x59
 1491 01ac 05       		.uleb128 0x5
 1492 01ad 00       		.byte	0
 1493 01ae 00       		.byte	0
 1494 01af 1D       		.uleb128 0x1d
 1495 01b0 05       		.uleb128 0x5
 1496 01b1 00       		.byte	0
 1497 01b2 31       		.uleb128 0x31
 1498 01b3 13       		.uleb128 0x13
 1499 01b4 02       		.uleb128 0x2
 1500 01b5 18       		.uleb128 0x18
 1501 01b6 00       		.byte	0
 1502 01b7 00       		.byte	0
 1503 01b8 1E       		.uleb128 0x1e
 1504 01b9 2E       		.uleb128 0x2e
 1505 01ba 01       		.byte	0x1
 1506 01bb 3F       		.uleb128 0x3f
 1507 01bc 19       		.uleb128 0x19
 1508 01bd 03       		.uleb128 0x3
 1509 01be 0E       		.uleb128 0xe
 1510 01bf 3A       		.uleb128 0x3a
 1511 01c0 0B       		.uleb128 0xb
 1512 01c1 3B       		.uleb128 0x3b
 1513 01c2 05       		.uleb128 0x5
 1514 01c3 27       		.uleb128 0x27
 1515 01c4 19       		.uleb128 0x19
 1516 01c5 11       		.uleb128 0x11
 1517 01c6 01       		.uleb128 0x1
 1518 01c7 12       		.uleb128 0x12
 1519 01c8 06       		.uleb128 0x6
 1520 01c9 40       		.uleb128 0x40
 1521 01ca 18       		.uleb128 0x18
 1522 01cb 9642     		.uleb128 0x2116
 1523 01cd 19       		.uleb128 0x19
 1524 01ce 01       		.uleb128 0x1
 1525 01cf 13       		.uleb128 0x13
 1526 01d0 00       		.byte	0
 1527 01d1 00       		.byte	0
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccetyzvX.s 			page 43


 1528 01d2 1F       		.uleb128 0x1f
 1529 01d3 1D       		.uleb128 0x1d
 1530 01d4 01       		.byte	0x1
 1531 01d5 31       		.uleb128 0x31
 1532 01d6 13       		.uleb128 0x13
 1533 01d7 11       		.uleb128 0x11
 1534 01d8 01       		.uleb128 0x1
 1535 01d9 12       		.uleb128 0x12
 1536 01da 06       		.uleb128 0x6
 1537 01db 58       		.uleb128 0x58
 1538 01dc 0B       		.uleb128 0xb
 1539 01dd 59       		.uleb128 0x59
 1540 01de 05       		.uleb128 0x5
 1541 01df 01       		.uleb128 0x1
 1542 01e0 13       		.uleb128 0x13
 1543 01e1 00       		.byte	0
 1544 01e2 00       		.byte	0
 1545 01e3 20       		.uleb128 0x20
 1546 01e4 01       		.uleb128 0x1
 1547 01e5 01       		.byte	0x1
 1548 01e6 49       		.uleb128 0x49
 1549 01e7 13       		.uleb128 0x13
 1550 01e8 01       		.uleb128 0x1
 1551 01e9 13       		.uleb128 0x13
 1552 01ea 00       		.byte	0
 1553 01eb 00       		.byte	0
 1554 01ec 21       		.uleb128 0x21
 1555 01ed 21       		.uleb128 0x21
 1556 01ee 00       		.byte	0
 1557 01ef 49       		.uleb128 0x49
 1558 01f0 13       		.uleb128 0x13
 1559 01f1 2F       		.uleb128 0x2f
 1560 01f2 0B       		.uleb128 0xb
 1561 01f3 00       		.byte	0
 1562 01f4 00       		.byte	0
 1563 01f5 22       		.uleb128 0x22
 1564 01f6 34       		.uleb128 0x34
 1565 01f7 00       		.byte	0
 1566 01f8 03       		.uleb128 0x3
 1567 01f9 0E       		.uleb128 0xe
 1568 01fa 3A       		.uleb128 0x3a
 1569 01fb 0B       		.uleb128 0xb
 1570 01fc 3B       		.uleb128 0x3b
 1571 01fd 0B       		.uleb128 0xb
 1572 01fe 49       		.uleb128 0x49
 1573 01ff 13       		.uleb128 0x13
 1574 0200 3F       		.uleb128 0x3f
 1575 0201 19       		.uleb128 0x19
 1576 0202 02       		.uleb128 0x2
 1577 0203 18       		.uleb128 0x18
 1578 0204 00       		.byte	0
 1579 0205 00       		.byte	0
 1580 0206 23       		.uleb128 0x23
 1581 0207 34       		.uleb128 0x34
 1582 0208 00       		.byte	0
 1583 0209 03       		.uleb128 0x3
 1584 020a 0E       		.uleb128 0xe
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccetyzvX.s 			page 44


 1585 020b 3A       		.uleb128 0x3a
 1586 020c 0B       		.uleb128 0xb
 1587 020d 3B       		.uleb128 0x3b
 1588 020e 05       		.uleb128 0x5
 1589 020f 49       		.uleb128 0x49
 1590 0210 13       		.uleb128 0x13
 1591 0211 3F       		.uleb128 0x3f
 1592 0212 19       		.uleb128 0x19
 1593 0213 3C       		.uleb128 0x3c
 1594 0214 19       		.uleb128 0x19
 1595 0215 00       		.byte	0
 1596 0216 00       		.byte	0
 1597 0217 00       		.byte	0
 1598              		.section	.debug_aranges,"",%progbits
 1599 0000 6C000000 		.4byte	0x6c
 1600 0004 0200     		.2byte	0x2
 1601 0006 00000000 		.4byte	.Ldebug_info0
 1602 000a 04       		.byte	0x4
 1603 000b 00       		.byte	0
 1604 000c 0000     		.2byte	0
 1605 000e 0000     		.2byte	0
 1606 0010 00000000 		.4byte	.LFB68
 1607 0014 58000000 		.4byte	.LFE68-.LFB68
 1608 0018 00000000 		.4byte	.LFB69
 1609 001c 2E000000 		.4byte	.LFE69-.LFB69
 1610 0020 00000000 		.4byte	.LFB70
 1611 0024 26000000 		.4byte	.LFE70-.LFB70
 1612 0028 00000000 		.4byte	.LFB71
 1613 002c 1C000000 		.4byte	.LFE71-.LFB71
 1614 0030 00000000 		.4byte	.LFB72
 1615 0034 40000000 		.4byte	.LFE72-.LFB72
 1616 0038 00000000 		.4byte	.LFB73
 1617 003c 0C000000 		.4byte	.LFE73-.LFB73
 1618 0040 00000000 		.4byte	.LFB74
 1619 0044 30000000 		.4byte	.LFE74-.LFB74
 1620 0048 00000000 		.4byte	.LFB75
 1621 004c 30000000 		.4byte	.LFE75-.LFB75
 1622 0050 00000000 		.4byte	.LFB76
 1623 0054 46000000 		.4byte	.LFE76-.LFB76
 1624 0058 00000000 		.4byte	.LFB77
 1625 005c 40000000 		.4byte	.LFE77-.LFB77
 1626 0060 00000000 		.4byte	.LFB78
 1627 0064 34000000 		.4byte	.LFE78-.LFB78
 1628 0068 00000000 		.4byte	0
 1629 006c 00000000 		.4byte	0
 1630              		.section	.debug_ranges,"",%progbits
 1631              	.Ldebug_ranges0:
 1632 0000 00000000 		.4byte	.LFB68
 1633 0004 58000000 		.4byte	.LFE68
 1634 0008 00000000 		.4byte	.LFB69
 1635 000c 2E000000 		.4byte	.LFE69
 1636 0010 00000000 		.4byte	.LFB70
 1637 0014 26000000 		.4byte	.LFE70
 1638 0018 00000000 		.4byte	.LFB71
 1639 001c 1C000000 		.4byte	.LFE71
 1640 0020 00000000 		.4byte	.LFB72
 1641 0024 40000000 		.4byte	.LFE72
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccetyzvX.s 			page 45


 1642 0028 00000000 		.4byte	.LFB73
 1643 002c 0C000000 		.4byte	.LFE73
 1644 0030 00000000 		.4byte	.LFB74
 1645 0034 30000000 		.4byte	.LFE74
 1646 0038 00000000 		.4byte	.LFB75
 1647 003c 30000000 		.4byte	.LFE75
 1648 0040 00000000 		.4byte	.LFB76
 1649 0044 46000000 		.4byte	.LFE76
 1650 0048 00000000 		.4byte	.LFB77
 1651 004c 40000000 		.4byte	.LFE77
 1652 0050 00000000 		.4byte	.LFB78
 1653 0054 34000000 		.4byte	.LFE78
 1654 0058 00000000 		.4byte	0
 1655 005c 00000000 		.4byte	0
 1656              		.section	.debug_line,"",%progbits
 1657              	.Ldebug_line0:
 1658 0000 EB020000 		.section	.debug_str,"MS",%progbits,1
 1658      0200C001 
 1658      00000201 
 1658      FB0E0D00 
 1658      01010101 
 1659              	.LASF40:
 1660 0000 75784372 		.ascii	"uxCriticalNesting\000"
 1660      69746963 
 1660      616C4E65 
 1660      7374696E 
 1660      6700
 1661              	.LASF21:
 1662 0012 70726573 		.ascii	"present\000"
 1662      656E7400 
 1663              	.LASF44:
 1664 001a 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 1664      43313120 
 1664      352E342E 
 1664      31203230 
 1664      31363036 
 1665 004d 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 1665      20726576 
 1665      6973696F 
 1665      6E203233 
 1665      37373135 
 1666 0080 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 1666      66756E63 
 1666      74696F6E 
 1666      2D736563 
 1666      74696F6E 
 1667              	.LASF30:
 1668 00a8 7078436F 		.ascii	"pxCode\000"
 1668      646500
 1669              	.LASF33:
 1670 00af 76506F72 		.ascii	"vPortEndScheduler\000"
 1670      74456E64 
 1670      53636865 
 1670      64756C65 
 1670      7200
 1671              	.LASF26:
 1672 00c1 5469636B 		.ascii	"TickType_t\000"
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccetyzvX.s 			page 46


 1672      54797065 
 1672      5F7400
 1673              	.LASF20:
 1674 00cc 54656D70 		.ascii	"Temperature\000"
 1674      65726174 
 1674      75726500 
 1675              	.LASF8:
 1676 00d8 5F5F696E 		.ascii	"__int32_t\000"
 1676      7433325F 
 1676      7400
 1677              	.LASF7:
 1678 00e2 6C6F6E67 		.ascii	"long int\000"
 1678      20696E74 
 1678      00
 1679              	.LASF34:
 1680 00eb 76506F72 		.ascii	"vPortEnterCritical\000"
 1680      74456E74 
 1680      65724372 
 1680      69746963 
 1680      616C00
 1681              	.LASF36:
 1682 00fe 78506F72 		.ascii	"xPortPendSVHandler\000"
 1682      7450656E 
 1682      64535648 
 1682      616E646C 
 1682      657200
 1683              	.LASF47:
 1684 0111 44533138 		.ascii	"DS18x8_TSensor\000"
 1684      78385F54 
 1684      53656E73 
 1684      6F7200
 1685              	.LASF22:
 1686 0120 5461736B 		.ascii	"TaskFunction_t\000"
 1686      46756E63 
 1686      74696F6E 
 1686      5F7400
 1687              	.LASF12:
 1688 012f 696E7433 		.ascii	"int32_t\000"
 1688      325F7400 
 1689              	.LASF16:
 1690 0137 666C6F61 		.ascii	"float\000"
 1690      7400
 1691              	.LASF31:
 1692 013d 70765061 		.ascii	"pvParameters\000"
 1692      72616D65 
 1692      74657273 
 1692      00
 1693              	.LASF41:
 1694 014a 44533138 		.ascii	"DS18x8_Sensor\000"
 1694      78385F53 
 1694      656E736F 
 1694      7200
 1695              	.LASF46:
 1696 0158 433A5C43 		.ascii	"C:\\Code\\P4\\P4_Vertical_farm\\RTOS_TEMPLATE-maste"
 1696      6F64655C 
 1696      50345C50 
 1696      345F5665 
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccetyzvX.s 			page 47


 1696      72746963 
 1697 0187 725C506C 		.ascii	"r\\PlanteModul.cydsn\000"
 1697      616E7465 
 1697      4D6F6475 
 1697      6C2E6379 
 1697      64736E00 
 1698              	.LASF4:
 1699 019b 756E7369 		.ascii	"unsigned char\000"
 1699      676E6564 
 1699      20636861 
 1699      7200
 1700              	.LASF9:
 1701 01a9 5F5F7569 		.ascii	"__uint32_t\000"
 1701      6E743332 
 1701      5F7400
 1702              	.LASF10:
 1703 01b4 6C6F6E67 		.ascii	"long unsigned int\000"
 1703      20756E73 
 1703      69676E65 
 1703      6420696E 
 1703      7400
 1704              	.LASF6:
 1705 01c6 73686F72 		.ascii	"short unsigned int\000"
 1705      7420756E 
 1705      7369676E 
 1705      65642069 
 1705      6E7400
 1706              	.LASF39:
 1707 01d9 756C4475 		.ascii	"ulDummy\000"
 1707      6D6D7900 
 1708              	.LASF43:
 1709 01e1 49544D5F 		.ascii	"ITM_RxBuffer\000"
 1709      52784275 
 1709      66666572 
 1709      00
 1710              	.LASF17:
 1711 01ee 646F7562 		.ascii	"double\000"
 1711      6C6500
 1712              	.LASF48:
 1713 01f5 756C4E65 		.ascii	"ulNewBASEPRI\000"
 1713      77424153 
 1713      45505249 
 1713      00
 1714              	.LASF15:
 1715 0202 75696E74 		.ascii	"uint16\000"
 1715      313600
 1716              	.LASF28:
 1717 0209 76506F72 		.ascii	"vPortSetBASEPRI\000"
 1717      74536574 
 1717      42415345 
 1717      50524900 
 1718              	.LASF37:
 1719 0219 78506F72 		.ascii	"xPortSysTickHandler\000"
 1719      74537973 
 1719      5469636B 
 1719      48616E64 
 1719      6C657200 
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccetyzvX.s 			page 48


 1720              	.LASF0:
 1721 022d 756E7369 		.ascii	"unsigned int\000"
 1721      676E6564 
 1721      20696E74 
 1721      00
 1722              	.LASF29:
 1723 023a 7078546F 		.ascii	"pxTopOfStack\000"
 1723      704F6653 
 1723      7461636B 
 1723      00
 1724              	.LASF11:
 1725 0247 6C6F6E67 		.ascii	"long long unsigned int\000"
 1725      206C6F6E 
 1725      6720756E 
 1725      7369676E 
 1725      65642069 
 1726              	.LASF27:
 1727 025e 76506F72 		.ascii	"vPortRaiseBASEPRI\000"
 1727      74526169 
 1727      73654241 
 1727      53455052 
 1727      4900
 1728              	.LASF51:
 1729 0270 70727654 		.ascii	"prvTaskExitError\000"
 1729      61736B45 
 1729      78697445 
 1729      72726F72 
 1729      00
 1730              	.LASF38:
 1731 0281 76506F72 		.ascii	"vPortSetupTimerInterrupt\000"
 1731      74536574 
 1731      75705469 
 1731      6D657249 
 1731      6E746572 
 1732              	.LASF19:
 1733 029a 73697A65 		.ascii	"sizetype\000"
 1733      74797065 
 1733      00
 1734              	.LASF1:
 1735 02a3 6C6F6E67 		.ascii	"long long int\000"
 1735      206C6F6E 
 1735      6720696E 
 1735      7400
 1736              	.LASF18:
 1737 02b1 63686172 		.ascii	"char\000"
 1737      00
 1738              	.LASF23:
 1739 02b6 53746163 		.ascii	"StackType_t\000"
 1739      6B547970 
 1739      655F7400 
 1740              	.LASF32:
 1741 02c2 76506F72 		.ascii	"vPortSVCHandler\000"
 1741      74535643 
 1741      48616E64 
 1741      6C657200 
 1742              	.LASF24:
 1743 02d2 42617365 		.ascii	"BaseType_t\000"
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccetyzvX.s 			page 49


 1743      54797065 
 1743      5F7400
 1744              	.LASF5:
 1745 02dd 73686F72 		.ascii	"short int\000"
 1745      7420696E 
 1745      7400
 1746              	.LASF42:
 1747 02e7 44533138 		.ascii	"DS18x8_DataReady\000"
 1747      78385F44 
 1747      61746152 
 1747      65616479 
 1747      00
 1748              	.LASF14:
 1749 02f8 75696E74 		.ascii	"uint8\000"
 1749      3800
 1750              	.LASF35:
 1751 02fe 76506F72 		.ascii	"vPortExitCritical\000"
 1751      74457869 
 1751      74437269 
 1751      74696361 
 1751      6C00
 1752              	.LASF13:
 1753 0310 75696E74 		.ascii	"uint32_t\000"
 1753      33325F74 
 1753      00
 1754              	.LASF49:
 1755 0319 756C4E65 		.ascii	"ulNewMaskValue\000"
 1755      774D6173 
 1755      6B56616C 
 1755      756500
 1756              	.LASF45:
 1757 0328 536F7572 		.ascii	"Source\\portable\\GCC\\ARM_CM3\\port.c\000"
 1757      63655C70 
 1757      6F727461 
 1757      626C655C 
 1757      4743435C 
 1758              	.LASF52:
 1759 034b 70727650 		.ascii	"prvPortStartFirstTask\000"
 1759      6F727453 
 1759      74617274 
 1759      46697273 
 1759      74546173 
 1760              	.LASF2:
 1761 0361 6C6F6E67 		.ascii	"long double\000"
 1761      20646F75 
 1761      626C6500 
 1762              	.LASF3:
 1763 036d 7369676E 		.ascii	"signed char\000"
 1763      65642063 
 1763      68617200 
 1764              	.LASF53:
 1765 0379 78506F72 		.ascii	"xPortStartScheduler\000"
 1765      74537461 
 1765      72745363 
 1765      68656475 
 1765      6C657200 
 1766              	.LASF25:
ARM GAS  C:\Users\mikke\AppData\Local\Temp\ccetyzvX.s 			page 50


 1767 038d 55426173 		.ascii	"UBaseType_t\000"
 1767      65547970 
 1767      655F7400 
 1768              	.LASF50:
 1769 0399 7078506F 		.ascii	"pxPortInitialiseStack\000"
 1769      7274496E 
 1769      69746961 
 1769      6C697365 
 1769      53746163 
 1770              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
